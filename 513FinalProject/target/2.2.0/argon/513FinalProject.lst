
/Users/zi/Documents/UofA/ECE513FinalProject/513FinalProject/target/2.2.0/argon/513FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000039c0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d79e0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  2003e44c  000d79e4  0001e44c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000338  2003e4b8  2003e4b8  0002e4b8  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d7a50  000d7a50  00027a50  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d7a78  000d7a78  00027a78  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0017829e  00000000  00000000  00027a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00018f7b  00000000  00000000  0019fd1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002c3f2  00000000  00000000  001b8c95  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000029c8  00000000  00000000  001e5087  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000075a8  00000000  00000000  001e7a4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003adcd  00000000  00000000  001eeff7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003dd45  00000000  00000000  00229dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00105bd8  00000000  00000000  00267b09  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000743c  00000000  00000000  0036d6e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f003 f93d 	bl	d72b0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f003 f95f 	bl	d7300 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e44c 	.word	0x2003e44c
   d404c:	000d79e4 	.word	0x000d79e4
   d4050:	2003e4b8 	.word	0x2003e4b8
   d4054:	2003e4b8 	.word	0x2003e4b8
   d4058:	2003e7ed 	.word	0x2003e7ed

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f002 fbad 	bl	d67c0 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d79b4 	.word	0x000d79b4
   d4080:	000d79d8 	.word	0x000d79d8

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b826 	b.w	d40d4 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f92d 	bl	d42e8 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f002 bb4d 	b.w	d6730 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f001 bb4d 	b.w	d5734 <malloc>

000d409a <_Znaj>:
   d409a:	f001 bb4b 	b.w	d5734 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f001 bb51 	b.w	d5744 <free>

000d40a2 <_ZdaPv>:
   d40a2:	f001 bb4f 	b.w	d5744 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr

000d40b6 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d40b6:	b40e      	push	{r1, r2, r3}
   d40b8:	b503      	push	{r0, r1, lr}
   d40ba:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d40bc:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d40be:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d40c2:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d40c4:	f002 f807 	bl	d60d6 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d40c8:	b002      	add	sp, #8
   d40ca:	f85d eb04 	ldr.w	lr, [sp], #4
   d40ce:	b003      	add	sp, #12
   d40d0:	4770      	bx	lr
	...

000d40d4 <setup>:
// void myWebhookHandler(const char *event, const char *data) {
//   String output = String::format("Response: %s", data);
//   Serial.println(output);
// }

void setup() {
   d40d4:	b508      	push	{r3, lr}
  pinMode(LED, OUTPUT);
   d40d6:	2101      	movs	r1, #1
   d40d8:	2000      	movs	r0, #0
   d40da:	f002 fbe1 	bl	d68a0 <pinMode>
  pinMode(LED2, OUTPUT);
   d40de:	2101      	movs	r1, #1
   d40e0:	2007      	movs	r0, #7
   d40e2:	f002 fbdd 	bl	d68a0 <pinMode>
  RGB.control(true);
   d40e6:	2001      	movs	r0, #1
   d40e8:	f002 f826 	bl	d6138 <_ZN8RGBClass7controlEb>
  RGB.color(255, 255, 255);
   d40ec:	22ff      	movs	r2, #255	; 0xff
   d40ee:	4611      	mov	r1, r2
   d40f0:	4610      	mov	r0, r2
   d40f2:	f002 f831 	bl	d6158 <_ZN8RGBClass5colorEiii>

	Serial.begin();
   d40f6:	f002 fa95 	bl	d6624 <_Z16_fetch_usbserialv>
   d40fa:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40fe:	f002 fa85 	bl	d660c <_ZN9USBSerial5beginEl>

  dht.begin();
   d4102:	4803      	ldr	r0, [pc, #12]	; (d4110 <setup+0x3c>)
   d4104:	f000 fa12 	bl	d452c <_ZN3DHT5beginEv>

  counter = 0;
   d4108:	4b02      	ldr	r3, [pc, #8]	; (d4114 <setup+0x40>)
   d410a:	2200      	movs	r2, #0
   d410c:	601a      	str	r2, [r3, #0]
  // rxCloudCmdStr = "";
  // finalStatusStr = "";

  // Particle.function("cloudcmd", updateRxCmd);
  // Particle.subscribe("hook-response/smarthome", myWebhookHandler);
}
   d410e:	bd08      	pop	{r3, pc}
   d4110:	2003e4bc 	.word	0x2003e4bc
   d4114:	2003e4b8 	.word	0x2003e4b8

000d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4118:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d411a:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d411c:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d411e:	b17c      	cbz	r4, d4140 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d4120:	6863      	ldr	r3, [r4, #4]
   d4122:	3b01      	subs	r3, #1
   d4124:	6063      	str	r3, [r4, #4]
   d4126:	b95b      	cbnz	r3, d4140 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d4128:	6823      	ldr	r3, [r4, #0]
   d412a:	4620      	mov	r0, r4
   d412c:	689b      	ldr	r3, [r3, #8]
   d412e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4130:	68a3      	ldr	r3, [r4, #8]
   d4132:	3b01      	subs	r3, #1
   d4134:	60a3      	str	r3, [r4, #8]
   d4136:	b91b      	cbnz	r3, d4140 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4138:	6823      	ldr	r3, [r4, #0]
   d413a:	4620      	mov	r0, r4
   d413c:	68db      	ldr	r3, [r3, #12]
   d413e:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d4140:	4628      	mov	r0, r5
   d4142:	bd38      	pop	{r3, r4, r5, pc}

000d4144 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4144:	680b      	ldr	r3, [r1, #0]
   d4146:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4148:	b113      	cbz	r3, d4150 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d414a:	685a      	ldr	r2, [r3, #4]
   d414c:	3201      	adds	r2, #1
   d414e:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d4150:	4770      	bx	lr

000d4152 <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d4152:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   d4154:	68cd      	ldr	r5, [r1, #12]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4156:	f851 3b04 	ldr.w	r3, [r1], #4
   d415a:	9300      	str	r3, [sp, #0]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d415c:	4604      	mov	r4, r0
   d415e:	a801      	add	r0, sp, #4
   d4160:	f7ff fff0 	bl	d4144 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d4164:	466a      	mov	r2, sp
   d4166:	4629      	mov	r1, r5
   d4168:	4620      	mov	r0, r4
   d416a:	f001 fded 	bl	d5d48 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d416e:	a801      	add	r0, sp, #4
   d4170:	f7ff ffd2 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4174:	4620      	mov	r0, r4
   d4176:	b003      	add	sp, #12
   d4178:	bd30      	pop	{r4, r5, pc}

000d417a <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d417a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   d417c:	690d      	ldr	r5, [r1, #16]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d417e:	f851 3b04 	ldr.w	r3, [r1], #4
   d4182:	9300      	str	r3, [sp, #0]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d4184:	4604      	mov	r4, r0
   d4186:	a801      	add	r0, sp, #4
   d4188:	f7ff ffdc 	bl	d4144 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d418c:	466a      	mov	r2, sp
   d418e:	4629      	mov	r1, r5
   d4190:	4620      	mov	r0, r4
   d4192:	f001 fc54 	bl	d5a3e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4196:	a801      	add	r0, sp, #4
   d4198:	f7ff ffbe 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d419c:	4620      	mov	r0, r4
   d419e:	b003      	add	sp, #12
   d41a0:	bd30      	pop	{r4, r5, pc}
	...

000d41a4 <_Z19serialCmdProcessingv>:
void serialCmdProcessing() {
   d41a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d41a6:	b095      	sub	sp, #84	; 0x54
  if (Serial.available() <= 0) return;
   d41a8:	f002 fa3c 	bl	d6624 <_Z16_fetch_usbserialv>
   d41ac:	6803      	ldr	r3, [r0, #0]
   d41ae:	691b      	ldr	r3, [r3, #16]
   d41b0:	4798      	blx	r3
   d41b2:	2800      	cmp	r0, #0
   d41b4:	f340 8087 	ble.w	d42c6 <_Z19serialCmdProcessingv+0x122>
  String cmdStr = "";
   d41b8:	4944      	ldr	r1, [pc, #272]	; (d42cc <_Z19serialCmdProcessingv+0x128>)
   d41ba:	a806      	add	r0, sp, #24
   d41bc:	f002 f84b 	bl	d6256 <_ZN6StringC1EPKc>
  while (Serial.available()) {
   d41c0:	f002 fa30 	bl	d6624 <_Z16_fetch_usbserialv>
   d41c4:	6803      	ldr	r3, [r0, #0]
   d41c6:	691b      	ldr	r3, [r3, #16]
   d41c8:	4798      	blx	r3
   d41ca:	b180      	cbz	r0, d41ee <_Z19serialCmdProcessingv+0x4a>
      char c = Serial.read();
   d41cc:	f002 fa2a 	bl	d6624 <_Z16_fetch_usbserialv>
   d41d0:	6803      	ldr	r3, [r0, #0]
   d41d2:	695b      	ldr	r3, [r3, #20]
   d41d4:	4798      	blx	r3
      cmdStr += String(c);
   d41d6:	b2c1      	uxtb	r1, r0
   d41d8:	a80e      	add	r0, sp, #56	; 0x38
   d41da:	f002 f8a1 	bl	d6320 <_ZN6StringC1Ec>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d41de:	a90e      	add	r1, sp, #56	; 0x38
   d41e0:	a806      	add	r0, sp, #24
   d41e2:	f002 f8c5 	bl	d6370 <_ZN6String6concatERKS_>
   d41e6:	a80e      	add	r0, sp, #56	; 0x38
   d41e8:	f001 ffea 	bl	d61c0 <_ZN6StringD1Ev>
  while (Serial.available()) {
   d41ec:	e7e8      	b.n	d41c0 <_Z19serialCmdProcessingv+0x1c>
  JSONValue cmdJson = JSONValue::parseCopy(cmdStr.c_str());
   d41ee:	9906      	ldr	r1, [sp, #24]
    return parseCopy(json, strlen(json));
   d41f0:	9101      	str	r1, [sp, #4]
   d41f2:	4608      	mov	r0, r1
   d41f4:	f003 f8c2 	bl	d737c <strlen>
   d41f8:	9901      	ldr	r1, [sp, #4]
    return strcmp(s_, str) == 0;
   d41fa:	4d35      	ldr	r5, [pc, #212]	; (d42d0 <_Z19serialCmdProcessingv+0x12c>)
   d41fc:	4e35      	ldr	r6, [pc, #212]	; (d42d4 <_Z19serialCmdProcessingv+0x130>)
   d41fe:	4f36      	ldr	r7, [pc, #216]	; (d42d8 <_Z19serialCmdProcessingv+0x134>)
    return parseCopy(json, strlen(json));
   d4200:	4602      	mov	r2, r0
   d4202:	a803      	add	r0, sp, #12
   d4204:	f001 fe04 	bl	d5e10 <_ZN5spark9JSONValue9parseCopyEPKcj>
        JSONObjectIterator(value.t_, value.d_) {
   d4208:	9c05      	ldr	r4, [sp, #20]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d420a:	9b03      	ldr	r3, [sp, #12]
   d420c:	930a      	str	r3, [sp, #40]	; 0x28
   d420e:	a904      	add	r1, sp, #16
   d4210:	a80b      	add	r0, sp, #44	; 0x2c
   d4212:	f7ff ff97 	bl	d4144 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d4216:	aa0a      	add	r2, sp, #40	; 0x28
   d4218:	4621      	mov	r1, r4
   d421a:	a80e      	add	r0, sp, #56	; 0x38
   d421c:	f001 fdb8 	bl	d5d90 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4220:	a80b      	add	r0, sp, #44	; 0x2c
   d4222:	f7ff ff79 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  while (iter.next()) {
   d4226:	a80e      	add	r0, sp, #56	; 0x38
   d4228:	f001 fdca 	bl	d5dc0 <_ZN5spark18JSONObjectIterator4nextEv>
   d422c:	2800      	cmp	r0, #0
   d422e:	d041      	beq.n	d42b4 <_Z19serialCmdProcessingv+0x110>
    if (iter.name() == "smartlight") {
   d4230:	a90e      	add	r1, sp, #56	; 0x38
   d4232:	a80a      	add	r0, sp, #40	; 0x28
   d4234:	f7ff ff8d 	bl	d4152 <_ZNK5spark18JSONObjectIterator4nameEv>
    return strcmp(s_, str) == 0;
   d4238:	4629      	mov	r1, r5
   d423a:	980c      	ldr	r0, [sp, #48]	; 0x30
   d423c:	f003 f88c 	bl	d7358 <strcmp>
   d4240:	4604      	mov	r4, r0
   d4242:	a80b      	add	r0, sp, #44	; 0x2c
   d4244:	f7ff ff68 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      smartLight.cmdProcessing(iter.value());
   d4248:	a90e      	add	r1, sp, #56	; 0x38
   d424a:	a80a      	add	r0, sp, #40	; 0x28
    if (iter.name() == "smartlight") {
   d424c:	b94c      	cbnz	r4, d4262 <_Z19serialCmdProcessingv+0xbe>
      smartLight.cmdProcessing(iter.value());
   d424e:	f7ff ff94 	bl	d417a <_ZNK5spark18JSONObjectIterator5valueEv>
   d4252:	4822      	ldr	r0, [pc, #136]	; (d42dc <_Z19serialCmdProcessingv+0x138>)
   d4254:	a90a      	add	r1, sp, #40	; 0x28
   d4256:	f000 fcc9 	bl	d4bec <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE>
   d425a:	a80b      	add	r0, sp, #44	; 0x2c
   d425c:	f7ff ff5c 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4260:	e7e1      	b.n	d4226 <_Z19serialCmdProcessingv+0x82>
    } else if (iter.name() == "door") {
   d4262:	f7ff ff76 	bl	d4152 <_ZNK5spark18JSONObjectIterator4nameEv>
   d4266:	4631      	mov	r1, r6
   d4268:	980c      	ldr	r0, [sp, #48]	; 0x30
   d426a:	f003 f875 	bl	d7358 <strcmp>
   d426e:	4604      	mov	r4, r0
   d4270:	a80b      	add	r0, sp, #44	; 0x2c
   d4272:	f7ff ff51 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      door.cmdProcessing(iter.value());
   d4276:	a90e      	add	r1, sp, #56	; 0x38
   d4278:	a80a      	add	r0, sp, #40	; 0x28
    } else if (iter.name() == "door") {
   d427a:	b934      	cbnz	r4, d428a <_Z19serialCmdProcessingv+0xe6>
      door.cmdProcessing(iter.value());
   d427c:	f7ff ff7d 	bl	d417a <_ZNK5spark18JSONObjectIterator5valueEv>
   d4280:	4817      	ldr	r0, [pc, #92]	; (d42e0 <_Z19serialCmdProcessingv+0x13c>)
   d4282:	a90a      	add	r1, sp, #40	; 0x28
   d4284:	f000 fe3e 	bl	d4f04 <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE>
   d4288:	e7e7      	b.n	d425a <_Z19serialCmdProcessingv+0xb6>
    } else if (iter.name() == "systemControl") {
   d428a:	f7ff ff62 	bl	d4152 <_ZNK5spark18JSONObjectIterator4nameEv>
   d428e:	980c      	ldr	r0, [sp, #48]	; 0x30
   d4290:	4639      	mov	r1, r7
   d4292:	f003 f861 	bl	d7358 <strcmp>
   d4296:	4604      	mov	r4, r0
   d4298:	a80b      	add	r0, sp, #44	; 0x2c
   d429a:	f7ff ff3d 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d429e:	2c00      	cmp	r4, #0
   d42a0:	d1c1      	bne.n	d4226 <_Z19serialCmdProcessingv+0x82>
      thermostat.cmdProcessing(iter.value());
   d42a2:	a90e      	add	r1, sp, #56	; 0x38
   d42a4:	a80a      	add	r0, sp, #40	; 0x28
   d42a6:	f7ff ff68 	bl	d417a <_ZNK5spark18JSONObjectIterator5valueEv>
   d42aa:	480e      	ldr	r0, [pc, #56]	; (d42e4 <_Z19serialCmdProcessingv+0x140>)
   d42ac:	a90a      	add	r1, sp, #40	; 0x28
   d42ae:	f000 ff4b 	bl	d5148 <_ZN11CThermostat13cmdProcessingEN5spark9JSONValueE>
   d42b2:	e7d2      	b.n	d425a <_Z19serialCmdProcessingv+0xb6>
   d42b4:	a80f      	add	r0, sp, #60	; 0x3c
   d42b6:	f7ff ff2f 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d42ba:	a804      	add	r0, sp, #16
   d42bc:	f7ff ff2c 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  String cmdStr = "";
   d42c0:	a806      	add	r0, sp, #24
   d42c2:	f001 ff7d 	bl	d61c0 <_ZN6StringD1Ev>
}
   d42c6:	b015      	add	sp, #84	; 0x54
   d42c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d42ca:	bf00      	nop
   d42cc:	000d7793 	.word	0x000d7793
   d42d0:	000d7574 	.word	0x000d7574
   d42d4:	000d757f 	.word	0x000d757f
   d42d8:	000d7584 	.word	0x000d7584
   d42dc:	2003e518 	.word	0x2003e518
   d42e0:	2003e4d0 	.word	0x2003e4d0
   d42e4:	2003e550 	.word	0x2003e550

000d42e8 <loop>:

void loop() {
   d42e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d42ec:	ed2d 8b04 	vpush	{d8-d9}
   d42f0:	b09a      	sub	sp, #104	; 0x68

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d42f2:	f000 ffe3 	bl	d52bc <HAL_Timer_Get_Milli_Seconds>
   d42f6:	4604      	mov	r4, r0
  unsigned long t = millis();
  //cloudCmdProcessing();


	float h = dht.getHumidity();
   d42f8:	4850      	ldr	r0, [pc, #320]	; (d443c <loop+0x154>)
  door.execute();

  unsigned long period = millis() - t;


  if (counter % (SERAIL_COMM_FREQUENCY * LOOP_FREQUENCY) == 0) {
   d42fa:	4d51      	ldr	r5, [pc, #324]	; (d4440 <loop+0x158>)
	float h = dht.getHumidity();
   d42fc:	f000 fb44 	bl	d4988 <_ZN3DHT11getHumidityEv>
	float temp = dht.getTempCelcius();
   d4300:	484e      	ldr	r0, [pc, #312]	; (d443c <loop+0x154>)
	float h = dht.getHumidity();
   d4302:	eef0 8a40 	vmov.f32	s17, s0
	float temp = dht.getTempCelcius();
   d4306:	f000 faff 	bl	d4908 <_ZN3DHT14getTempCelciusEv>
	float f = dht.getTempFarenheit();
   d430a:	484c      	ldr	r0, [pc, #304]	; (d443c <loop+0x154>)
	float temp = dht.getTempCelcius();
   d430c:	eeb0 8a40 	vmov.f32	s16, s0
	float f = dht.getTempFarenheit();
   d4310:	f000 fafc 	bl	d490c <_ZN3DHT16getTempFarenheitEv>
   d4314:	eeb0 9a40 	vmov.f32	s18, s0
  serialCmdProcessing();
   d4318:	f7ff ff44 	bl	d41a4 <_Z19serialCmdProcessingv>
  smartLight.execute();
   d431c:	4849      	ldr	r0, [pc, #292]	; (d4444 <loop+0x15c>)
   d431e:	f000 fc0f 	bl	d4b40 <_ZN11CSmartLight7executeEv>
  thermostat.execute(temp);
   d4322:	eeb0 0a48 	vmov.f32	s0, s16
   d4326:	4848      	ldr	r0, [pc, #288]	; (d4448 <loop+0x160>)
   d4328:	f000 feac 	bl	d5084 <_ZN11CThermostat7executeEf>
  door.execute();
   d432c:	4847      	ldr	r0, [pc, #284]	; (d444c <loop+0x164>)
   d432e:	f000 fd65 	bl	d4dfc <_ZN5CDoor7executeEv>
   d4332:	f000 ffc3 	bl	d52bc <HAL_Timer_Get_Milli_Seconds>
   d4336:	6829      	ldr	r1, [r5, #0]
   d4338:	220a      	movs	r2, #10
   d433a:	fb91 f3f2 	sdiv	r3, r1, r2
   d433e:	fb02 1313 	mls	r3, r2, r3, r1
   d4342:	4606      	mov	r6, r0
  if (counter % (SERAIL_COMM_FREQUENCY * LOOP_FREQUENCY) == 0) {
   d4344:	2b00      	cmp	r3, #0
   d4346:	d16e      	bne.n	d4426 <loop+0x13e>
    counter = 0;
    if (isnan(h) || isnan(temp) || isnan(f)) {
   d4348:	eef4 8a68 	vcmp.f32	s17, s17
   d434c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    counter = 0;
   d4350:	602b      	str	r3, [r5, #0]
    if (isnan(h) || isnan(temp) || isnan(f)) {
   d4352:	d609      	bvs.n	d4368 <loop+0x80>
   d4354:	eeb4 8a48 	vcmp.f32	s16, s16
   d4358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d435c:	d604      	bvs.n	d4368 <loop+0x80>
   d435e:	eeb4 9a49 	vcmp.f32	s18, s18
   d4362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4366:	d70e      	bvc.n	d4386 <loop+0x9e>
      Serial.printf("{\"Fail\": %d}", true);
   d4368:	f002 f95c 	bl	d6624 <_Z16_fetch_usbserialv>
   d436c:	4938      	ldr	r1, [pc, #224]	; (d4450 <loop+0x168>)
   d436e:	2201      	movs	r2, #1
   d4370:	f7ff fea1 	bl	d40b6 <_ZN5Print6printfEPKcz>
      Serial.println();
   d4374:	f002 f956 	bl	d6624 <_Z16_fetch_usbserialv>
   d4378:	f001 fe83 	bl	d6082 <_ZN5Print7printlnEv>
  }
  counter++;

  period = PERIOD - (millis() - t);
  if (period > 0) delay(period);
}
   d437c:	b01a      	add	sp, #104	; 0x68
   d437e:	ecbd 8b04 	vpop	{d8-d9}
   d4382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    timeInt = (int)(Time.now() % 1440);
   d4386:	f002 f85b 	bl	d6440 <_ZN9TimeClass3nowEv>
   d438a:	4f32      	ldr	r7, [pc, #200]	; (d4454 <loop+0x16c>)
   d438c:	f44f 63b4 	mov.w	r3, #1440	; 0x5a0
   d4390:	fb90 f2f3 	sdiv	r2, r0, r3
   d4394:	fb02 0313 	mls	r3, r2, r3, r0
   d4398:	603b      	str	r3, [r7, #0]
    finalStatusStr = String::format("{\"t\":%d,\"light\":%s, \"door\":%s, \"thermostat\":%s, \"Humid\":%.2f, \"Temp\":%.2f, \"ct\":%ld, \"minute\":%d}",
   d439a:	f002 f851 	bl	d6440 <_ZN9TimeClass3nowEv>

    void execute();

    int getSensorVal();
    void readSensorVal();
    String getStatusStr() {return statusStr;};
   d439e:	492e      	ldr	r1, [pc, #184]	; (d4458 <loop+0x170>)
   d43a0:	9009      	str	r0, [sp, #36]	; 0x24
   d43a2:	a80a      	add	r0, sp, #40	; 0x28
   d43a4:	f001 ff97 	bl	d62d6 <_ZN6StringC1ERKS_>
   d43a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28

    void execute();

    int getSensorVal();
    void readSensorVal();
    String getStatusStr() {return statusStr;};
   d43aa:	492c      	ldr	r1, [pc, #176]	; (d445c <loop+0x174>)
   d43ac:	9308      	str	r3, [sp, #32]
   d43ae:	a80e      	add	r0, sp, #56	; 0x38
   d43b0:	f001 ff91 	bl	d62d6 <_ZN6StringC1ERKS_>
  public:
    CThermostat();
    void cmdProcessing(JSONValue cmdJson);
    void execute(float currTemp);
    void createStatusStr();
    String getStatusStr() {return statusStr;};
   d43b4:	492a      	ldr	r1, [pc, #168]	; (d4460 <loop+0x178>)
   d43b6:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
   d43ba:	a812      	add	r0, sp, #72	; 0x48
   d43bc:	f001 ff8b 	bl	d62d6 <_ZN6StringC1ERKS_>
  unsigned long period = millis() - t;
   d43c0:	1b36      	subs	r6, r6, r4
    finalStatusStr = String::format("{\"t\":%d,\"light\":%s, \"door\":%s, \"thermostat\":%s, \"Humid\":%.2f, \"Temp\":%.2f, \"ct\":%ld, \"minute\":%d}",
   d43c2:	6839      	ldr	r1, [r7, #0]
   d43c4:	9606      	str	r6, [sp, #24]
   d43c6:	ee18 0a10 	vmov	r0, s16
   d43ca:	9107      	str	r1, [sp, #28]
   d43cc:	f002 fc50 	bl	d6c70 <__aeabi_f2d>
   d43d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d43d4:	ee18 0a90 	vmov	r0, s17
   d43d8:	f002 fc4a 	bl	d6c70 <__aeabi_f2d>
   d43dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d43e0:	9912      	ldr	r1, [sp, #72]	; 0x48
      period, timeInt);
   d43e2:	4e20      	ldr	r6, [pc, #128]	; (d4464 <loop+0x17c>)
    finalStatusStr = String::format("{\"t\":%d,\"light\":%s, \"door\":%s, \"thermostat\":%s, \"Humid\":%.2f, \"Temp\":%.2f, \"ct\":%ld, \"minute\":%d}",
   d43e4:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
   d43e8:	e9cd 8100 	strd	r8, r1, [sp]
   d43ec:	a816      	add	r0, sp, #88	; 0x58
   d43ee:	491e      	ldr	r1, [pc, #120]	; (d4468 <loop+0x180>)
   d43f0:	f001 ffc2 	bl	d6378 <_ZN6String6formatEPKcz>
      period, timeInt);
   d43f4:	a916      	add	r1, sp, #88	; 0x58
   d43f6:	4630      	mov	r0, r6
   d43f8:	f001 ff78 	bl	d62ec <_ZN6StringaSEOS_>
   d43fc:	a816      	add	r0, sp, #88	; 0x58
   d43fe:	f001 fedf 	bl	d61c0 <_ZN6StringD1Ev>
      Time.now(), smartLight.getStatusStr().c_str(), door.getStatusStr().c_str(), thermostat.getStatusStr().c_str(), h, temp,
   d4402:	a812      	add	r0, sp, #72	; 0x48
   d4404:	f001 fedc 	bl	d61c0 <_ZN6StringD1Ev>
   d4408:	a80e      	add	r0, sp, #56	; 0x38
   d440a:	f001 fed9 	bl	d61c0 <_ZN6StringD1Ev>
   d440e:	a80a      	add	r0, sp, #40	; 0x28
   d4410:	f001 fed6 	bl	d61c0 <_ZN6StringD1Ev>
    Serial.printf(finalStatusStr);
   d4414:	f002 f906 	bl	d6624 <_Z16_fetch_usbserialv>
   d4418:	6831      	ldr	r1, [r6, #0]
   d441a:	f7ff fe4c 	bl	d40b6 <_ZN5Print6printfEPKcz>
    Serial.println();
   d441e:	f002 f901 	bl	d6624 <_Z16_fetch_usbserialv>
   d4422:	f001 fe2e 	bl	d6082 <_ZN5Print7printlnEv>
  counter++;
   d4426:	682b      	ldr	r3, [r5, #0]
   d4428:	3301      	adds	r3, #1
   d442a:	602b      	str	r3, [r5, #0]
   d442c:	f000 ff46 	bl	d52bc <HAL_Timer_Get_Milli_Seconds>
  period = PERIOD - (millis() - t);
   d4430:	3464      	adds	r4, #100	; 0x64
  if (period > 0) delay(period);
   d4432:	1a20      	subs	r0, r4, r0
   d4434:	d0a2      	beq.n	d437c <loop+0x94>
   d4436:	f001 f9a5 	bl	d5784 <delay>
   d443a:	e79f      	b.n	d437c <loop+0x94>
   d443c:	2003e4bc 	.word	0x2003e4bc
   d4440:	2003e4b8 	.word	0x2003e4b8
   d4444:	2003e518 	.word	0x2003e518
   d4448:	2003e550 	.word	0x2003e550
   d444c:	2003e4d0 	.word	0x2003e4d0
   d4450:	000d7592 	.word	0x000d7592
   d4454:	2003e59c 	.word	0x2003e59c
   d4458:	2003e540 	.word	0x2003e540
   d445c:	2003e4f8 	.word	0x2003e4f8
   d4460:	2003e574 	.word	0x2003e574
   d4464:	2003e508 	.word	0x2003e508
   d4468:	000d759f 	.word	0x000d759f

000d446c <_GLOBAL__sub_I_dht>:
}
   d446c:	b508      	push	{r3, lr}
SYSTEM_THREAD(ENABLED);
   d446e:	2100      	movs	r1, #0
   d4470:	2001      	movs	r0, #1
   d4472:	f001 f8bb 	bl	d55ec <system_thread_set_state>
DHT dht(DHTPIN, DHTTYPE);
   d4476:	2306      	movs	r3, #6
   d4478:	2102      	movs	r1, #2
   d447a:	220b      	movs	r2, #11
   d447c:	4808      	ldr	r0, [pc, #32]	; (d44a0 <_GLOBAL__sub_I_dht+0x34>)
   d447e:	f000 f84e 	bl	d451e <_ZN3DHTC1Ehhh>
CSmartLight smartLight;
   d4482:	4808      	ldr	r0, [pc, #32]	; (d44a4 <_GLOBAL__sub_I_dht+0x38>)
   d4484:	f000 fa82 	bl	d498c <_ZN11CSmartLightC1Ev>
CDoor door;
   d4488:	4807      	ldr	r0, [pc, #28]	; (d44a8 <_GLOBAL__sub_I_dht+0x3c>)
   d448a:	f000 fc73 	bl	d4d74 <_ZN5CDoorC1Ev>
CThermostat thermostat;
   d448e:	4807      	ldr	r0, [pc, #28]	; (d44ac <_GLOBAL__sub_I_dht+0x40>)
   d4490:	f000 fdb8 	bl	d5004 <_ZN11CThermostatC1Ev>
}
   d4494:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
String finalStatusStr;
   d4498:	4905      	ldr	r1, [pc, #20]	; (d44b0 <_GLOBAL__sub_I_dht+0x44>)
   d449a:	4806      	ldr	r0, [pc, #24]	; (d44b4 <_GLOBAL__sub_I_dht+0x48>)
   d449c:	f001 bedb 	b.w	d6256 <_ZN6StringC1EPKc>
   d44a0:	2003e4bc 	.word	0x2003e4bc
   d44a4:	2003e518 	.word	0x2003e518
   d44a8:	2003e4d0 	.word	0x2003e4d0
   d44ac:	2003e550 	.word	0x2003e550
   d44b0:	000d7793 	.word	0x000d7793
   d44b4:	2003e508 	.word	0x2003e508

000d44b8 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d44b8:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d44ba:	6803      	ldr	r3, [r0, #0]
   d44bc:	2b2f      	cmp	r3, #47	; 0x2f
{
   d44be:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d44c0:	d904      	bls.n	d44cc <nrf_gpio_pin_port_decode+0x14>
   d44c2:	4a07      	ldr	r2, [pc, #28]	; (d44e0 <nrf_gpio_pin_port_decode+0x28>)
   d44c4:	2100      	movs	r1, #0
   d44c6:	200a      	movs	r0, #10
   d44c8:	f001 f860 	bl	d558c <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d44cc:	6823      	ldr	r3, [r4, #0]
   d44ce:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d44d0:	bf83      	ittte	hi
   d44d2:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   d44d6:	4803      	ldrhi	r0, [pc, #12]	; (d44e4 <nrf_gpio_pin_port_decode+0x2c>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d44d8:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   d44da:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    }
#endif
}
   d44de:	bd10      	pop	{r4, pc}
   d44e0:	000d52ad 	.word	0x000d52ad
   d44e4:	50000300 	.word	0x50000300

000d44e8 <nrf_gpio_pin_set>:
    }
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
   d44e8:	b507      	push	{r0, r1, r2, lr}
   d44ea:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d44ec:	a801      	add	r0, sp, #4
   d44ee:	f7ff ffe3 	bl	d44b8 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d44f2:	9a01      	ldr	r2, [sp, #4]
   d44f4:	2301      	movs	r3, #1
   d44f6:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d44f8:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   d44fc:	b003      	add	sp, #12
   d44fe:	f85d fb04 	ldr.w	pc, [sp], #4

000d4502 <nrf_gpio_pin_read>:
{
   d4502:	b507      	push	{r0, r1, r2, lr}
   d4504:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4506:	a801      	add	r0, sp, #4
   d4508:	f7ff ffd6 	bl	d44b8 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d450c:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   d450e:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d4512:	40d8      	lsrs	r0, r3
}
   d4514:	f000 0001 	and.w	r0, r0, #1
   d4518:	b003      	add	sp, #12
   d451a:	f85d fb04 	ldr.w	pc, [sp], #4

000d451e <_ZN3DHTC1Ehhh>:
 * modified for Spark Core by RussGrue
 * */

#include "Adafruit_DHT.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
   d451e:	b510      	push	{r4, lr}
	_pin = pin;
	_type = type;
	_count = count;
   d4520:	7203      	strb	r3, [r0, #8]
	firstreading = true;
   d4522:	2301      	movs	r3, #1
	_pin = pin;
   d4524:	7181      	strb	r1, [r0, #6]
	_type = type;
   d4526:	71c2      	strb	r2, [r0, #7]
	firstreading = true;
   d4528:	7403      	strb	r3, [r0, #16]
}
   d452a:	bd10      	pop	{r4, pc}

000d452c <_ZN3DHT5beginEv>:

void DHT::begin(void) {
   d452c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4530:	4605      	mov	r5, r0
/* Disabling USE_BIT_BAND since bitbanding is much slower! as per comment
 * by @pkourany on PR: https://github.com/spark/firmware/pull/556 */
#define USE_BIT_BAND 0

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4532:	4c1e      	ldr	r4, [pc, #120]	; (d45ac <_ZN3DHT5beginEv+0x80>)
// set up the pins!
	pinMode(_pin, INPUT);
   d4534:	7980      	ldrb	r0, [r0, #6]
   d4536:	f8df 8078 	ldr.w	r8, [pc, #120]	; d45b0 <_ZN3DHT5beginEv+0x84>
   d453a:	2100      	movs	r1, #0
   d453c:	f002 f9b0 	bl	d68a0 <pinMode>
	pinSetFast(_pin);
   d4540:	79ae      	ldrb	r6, [r5, #6]
   d4542:	7823      	ldrb	r3, [r4, #0]
   d4544:	f3bf 8f5b 	dmb	ish
   d4548:	f013 0f01 	tst.w	r3, #1
   d454c:	d10a      	bne.n	d4564 <_ZN3DHT5beginEv+0x38>
   d454e:	4620      	mov	r0, r4
   d4550:	f7ff fda9 	bl	d40a6 <__cxa_guard_acquire>
   d4554:	b130      	cbz	r0, d4564 <_ZN3DHT5beginEv+0x38>
   d4556:	f000 fec9 	bl	d52ec <HAL_Pin_Map>
   d455a:	f8c8 0000 	str.w	r0, [r8]
   d455e:	4620      	mov	r0, r4
   d4560:	f7ff fda6 	bl	d40b0 <__cxa_guard_release>
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));


inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4564:	f8d8 3000 	ldr.w	r3, [r8]
   d4568:	0136      	lsls	r6, r6, #4
   d456a:	5d9f      	ldrb	r7, [r3, r6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d456c:	7823      	ldrb	r3, [r4, #0]
   d456e:	f3bf 8f5b 	dmb	ish
   d4572:	07db      	lsls	r3, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4574:	ea4f 1747 	mov.w	r7, r7, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4578:	d40a      	bmi.n	d4590 <_ZN3DHT5beginEv+0x64>
   d457a:	480c      	ldr	r0, [pc, #48]	; (d45ac <_ZN3DHT5beginEv+0x80>)
   d457c:	f7ff fd93 	bl	d40a6 <__cxa_guard_acquire>
   d4580:	b130      	cbz	r0, d4590 <_ZN3DHT5beginEv+0x64>
   d4582:	f000 feb3 	bl	d52ec <HAL_Pin_Map>
   d4586:	f8c8 0000 	str.w	r0, [r8]
   d458a:	4808      	ldr	r0, [pc, #32]	; (d45ac <_ZN3DHT5beginEv+0x80>)
   d458c:	f7ff fd90 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4590:	f8d8 3000 	ldr.w	r3, [r8]
   d4594:	4433      	add	r3, r6
   d4596:	785b      	ldrb	r3, [r3, #1]
   d4598:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_pin_set(nrf_pin);
   d459c:	ea43 0007 	orr.w	r0, r3, r7
   d45a0:	f7ff ffa2 	bl	d44e8 <nrf_gpio_pin_set>
	_lastreadtime = 0;
   d45a4:	2300      	movs	r3, #0
   d45a6:	60eb      	str	r3, [r5, #12]
}
   d45a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d45ac:	2003e5a0 	.word	0x2003e5a0
   d45b0:	2003e5a4 	.word	0x2003e5a4

000d45b4 <_ZN3DHT4readEv>:
	double tC = (a * (float) tempCelcius) / (b + (float) tempCelcius) + log( (float) percentHumidity / 100);
	double Td = (b * tC) / (a - tC);
	return Td;
}

boolean DHT::read(void) {
   d45b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d45b8:	4604      	mov	r4, r0
   d45ba:	b085      	sub	sp, #20
   d45bc:	f000 fe7e 	bl	d52bc <HAL_Timer_Get_Milli_Seconds>
	unsigned long currenttime;

// Check if sensor was read less than two seconds ago and return early
// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime) {
   d45c0:	68e3      	ldr	r3, [r4, #12]
   d45c2:	4283      	cmp	r3, r0
// ie there was a rollover
		_lastreadtime = 0;
   d45c4:	bf84      	itt	hi
   d45c6:	2300      	movhi	r3, #0
   d45c8:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
   d45ca:	7c23      	ldrb	r3, [r4, #16]
   d45cc:	b92b      	cbnz	r3, d45da <_ZN3DHT4readEv+0x26>
   d45ce:	68e3      	ldr	r3, [r4, #12]
   d45d0:	1ac0      	subs	r0, r0, r3
   d45d2:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d45d6:	f0c0 815d 	bcc.w	d4894 <_ZN3DHT4readEv+0x2e0>
		return true; // return last correct measurement
//		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
   d45da:	2500      	movs	r5, #0
   d45dc:	7425      	strb	r5, [r4, #16]
   d45de:	f000 fe6d 	bl	d52bc <HAL_Timer_Get_Milli_Seconds>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d45e2:	4eae      	ldr	r6, [pc, #696]	; (d489c <_ZN3DHT4readEv+0x2e8>)
	Serial.print("Currtime: "); Serial.print(currenttime);
	Serial.print(" Lasttime: "); Serial.print(_lastreadtime);
*/
	_lastreadtime = millis();

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   d45e4:	6025      	str	r5, [r4, #0]
   d45e6:	7125      	strb	r5, [r4, #4]
	_lastreadtime = millis();
   d45e8:	60e0      	str	r0, [r4, #12]

// pull the pin high and wait 250 milliseconds
	pinSetFast(_pin);
   d45ea:	79a7      	ldrb	r7, [r4, #6]
   d45ec:	7833      	ldrb	r3, [r6, #0]
   d45ee:	4dac      	ldr	r5, [pc, #688]	; (d48a0 <_ZN3DHT4readEv+0x2ec>)
   d45f0:	f3bf 8f5b 	dmb	ish
   d45f4:	f013 0f01 	tst.w	r3, #1
   d45f8:	d109      	bne.n	d460e <_ZN3DHT4readEv+0x5a>
   d45fa:	4630      	mov	r0, r6
   d45fc:	f7ff fd53 	bl	d40a6 <__cxa_guard_acquire>
   d4600:	b128      	cbz	r0, d460e <_ZN3DHT4readEv+0x5a>
   d4602:	f000 fe73 	bl	d52ec <HAL_Pin_Map>
   d4606:	6028      	str	r0, [r5, #0]
   d4608:	4630      	mov	r0, r6
   d460a:	f7ff fd51 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d460e:	682b      	ldr	r3, [r5, #0]
   d4610:	013f      	lsls	r7, r7, #4
   d4612:	f813 8007 	ldrb.w	r8, [r3, r7]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4616:	7833      	ldrb	r3, [r6, #0]
   d4618:	f3bf 8f5b 	dmb	ish
   d461c:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d461e:	ea4f 1848 	mov.w	r8, r8, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4622:	d409      	bmi.n	d4638 <_ZN3DHT4readEv+0x84>
   d4624:	489d      	ldr	r0, [pc, #628]	; (d489c <_ZN3DHT4readEv+0x2e8>)
   d4626:	f7ff fd3e 	bl	d40a6 <__cxa_guard_acquire>
   d462a:	b128      	cbz	r0, d4638 <_ZN3DHT4readEv+0x84>
   d462c:	f000 fe5e 	bl	d52ec <HAL_Pin_Map>
   d4630:	6028      	str	r0, [r5, #0]
   d4632:	489a      	ldr	r0, [pc, #616]	; (d489c <_ZN3DHT4readEv+0x2e8>)
   d4634:	f7ff fd3c 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4638:	682b      	ldr	r3, [r5, #0]
   d463a:	441f      	add	r7, r3
   d463c:	7878      	ldrb	r0, [r7, #1]
   d463e:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_pin_set(nrf_pin);
   d4642:	ea40 0008 	orr.w	r0, r0, r8
   d4646:	f7ff ff4f 	bl	d44e8 <nrf_gpio_pin_set>
	//delay(250);

// now pull it low for ~20 milliseconds
	pinMode(_pin, OUTPUT);
   d464a:	79a0      	ldrb	r0, [r4, #6]
   d464c:	2101      	movs	r1, #1
   d464e:	f002 f927 	bl	d68a0 <pinMode>
	pinResetFast(_pin);
   d4652:	79a7      	ldrb	r7, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4654:	7833      	ldrb	r3, [r6, #0]
   d4656:	f3bf 8f5b 	dmb	ish
   d465a:	07da      	lsls	r2, r3, #31
   d465c:	d409      	bmi.n	d4672 <_ZN3DHT4readEv+0xbe>
   d465e:	488f      	ldr	r0, [pc, #572]	; (d489c <_ZN3DHT4readEv+0x2e8>)
   d4660:	f7ff fd21 	bl	d40a6 <__cxa_guard_acquire>
   d4664:	b128      	cbz	r0, d4672 <_ZN3DHT4readEv+0xbe>
   d4666:	f000 fe41 	bl	d52ec <HAL_Pin_Map>
   d466a:	6028      	str	r0, [r5, #0]
   d466c:	488b      	ldr	r0, [pc, #556]	; (d489c <_ZN3DHT4readEv+0x2e8>)
   d466e:	f7ff fd1f 	bl	d40b0 <__cxa_guard_release>
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4672:	682b      	ldr	r3, [r5, #0]
   d4674:	013f      	lsls	r7, r7, #4
   d4676:	5ddb      	ldrb	r3, [r3, r7]
   d4678:	ea4f 1843 	mov.w	r8, r3, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d467c:	7833      	ldrb	r3, [r6, #0]
   d467e:	f3bf 8f5b 	dmb	ish
   d4682:	07db      	lsls	r3, r3, #31
   d4684:	d409      	bmi.n	d469a <_ZN3DHT4readEv+0xe6>
   d4686:	4885      	ldr	r0, [pc, #532]	; (d489c <_ZN3DHT4readEv+0x2e8>)
   d4688:	f7ff fd0d 	bl	d40a6 <__cxa_guard_acquire>
   d468c:	b128      	cbz	r0, d469a <_ZN3DHT4readEv+0xe6>
   d468e:	f000 fe2d 	bl	d52ec <HAL_Pin_Map>
   d4692:	6028      	str	r0, [r5, #0]
   d4694:	4881      	ldr	r0, [pc, #516]	; (d489c <_ZN3DHT4readEv+0x2e8>)
   d4696:	f7ff fd0b 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d469a:	682b      	ldr	r3, [r5, #0]
   d469c:	441f      	add	r7, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d469e:	a803      	add	r0, sp, #12
   d46a0:	787b      	ldrb	r3, [r7, #1]
   d46a2:	f003 031f 	and.w	r3, r3, #31
   d46a6:	ea43 0308 	orr.w	r3, r3, r8
   d46aa:	9303      	str	r3, [sp, #12]
   d46ac:	f7ff ff04 	bl	d44b8 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d46b0:	9a03      	ldr	r2, [sp, #12]
   d46b2:	2301      	movs	r3, #1
   d46b4:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d46b6:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
	delay(20);
   d46ba:	2014      	movs	r0, #20
   d46bc:	f001 f862 	bl	d5784 <delay>
	noInterrupts();
   d46c0:	f001 f8e8 	bl	d5894 <_Z12noInterruptsv>
	pinSetFast(_pin);
   d46c4:	79a7      	ldrb	r7, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d46c6:	7833      	ldrb	r3, [r6, #0]
   d46c8:	f3bf 8f5b 	dmb	ish
   d46cc:	07d8      	lsls	r0, r3, #31
   d46ce:	d409      	bmi.n	d46e4 <_ZN3DHT4readEv+0x130>
   d46d0:	4872      	ldr	r0, [pc, #456]	; (d489c <_ZN3DHT4readEv+0x2e8>)
   d46d2:	f7ff fce8 	bl	d40a6 <__cxa_guard_acquire>
   d46d6:	b128      	cbz	r0, d46e4 <_ZN3DHT4readEv+0x130>
   d46d8:	f000 fe08 	bl	d52ec <HAL_Pin_Map>
   d46dc:	6028      	str	r0, [r5, #0]
   d46de:	486f      	ldr	r0, [pc, #444]	; (d489c <_ZN3DHT4readEv+0x2e8>)
   d46e0:	f7ff fce6 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d46e4:	682b      	ldr	r3, [r5, #0]
   d46e6:	013f      	lsls	r7, r7, #4
   d46e8:	f813 8007 	ldrb.w	r8, [r3, r7]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d46ec:	7833      	ldrb	r3, [r6, #0]
   d46ee:	f3bf 8f5b 	dmb	ish
   d46f2:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d46f4:	ea4f 1848 	mov.w	r8, r8, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d46f8:	d409      	bmi.n	d470e <_ZN3DHT4readEv+0x15a>
   d46fa:	4868      	ldr	r0, [pc, #416]	; (d489c <_ZN3DHT4readEv+0x2e8>)
   d46fc:	f7ff fcd3 	bl	d40a6 <__cxa_guard_acquire>
   d4700:	b128      	cbz	r0, d470e <_ZN3DHT4readEv+0x15a>
   d4702:	f000 fdf3 	bl	d52ec <HAL_Pin_Map>
   d4706:	6028      	str	r0, [r5, #0]
   d4708:	4864      	ldr	r0, [pc, #400]	; (d489c <_ZN3DHT4readEv+0x2e8>)
   d470a:	f7ff fcd1 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d470e:	682b      	ldr	r3, [r5, #0]
   d4710:	441f      	add	r7, r3
   d4712:	7878      	ldrb	r0, [r7, #1]
   d4714:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_pin_set(nrf_pin);
   d4718:	ea40 0008 	orr.w	r0, r0, r8
   d471c:	f7ff fee4 	bl	d44e8 <nrf_gpio_pin_set>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d4720:	2028      	movs	r0, #40	; 0x28
   d4722:	f000 fdc3 	bl	d52ac <HAL_Delay_Microseconds>
	delayMicroseconds(40);
	pinMode(_pin, INPUT);
   d4726:	79a0      	ldrb	r0, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4728:	f8df 8170 	ldr.w	r8, [pc, #368]	; d489c <_ZN3DHT4readEv+0x2e8>
   d472c:	2100      	movs	r1, #0
   d472e:	f002 f8b7 	bl	d68a0 <pinMode>

// read in timings
	for ( i=0; i< MAXTIMINGS; i++) {
   d4732:	2700      	movs	r7, #0
	uint8_t laststate = HIGH;
   d4734:	2301      	movs	r3, #1
	uint8_t j = 0, i;
   d4736:	46ba      	mov	sl, r7
	uint8_t laststate = HIGH;
   d4738:	9300      	str	r3, [sp, #0]
		counter = 0;
   d473a:	f04f 0900 	mov.w	r9, #0
		while (pinReadFast(_pin) == laststate) {
   d473e:	f894 b006 	ldrb.w	fp, [r4, #6]
   d4742:	7833      	ldrb	r3, [r6, #0]
   d4744:	f3bf 8f5b 	dmb	ish
   d4748:	07da      	lsls	r2, r3, #31
   d474a:	d409      	bmi.n	d4760 <_ZN3DHT4readEv+0x1ac>
   d474c:	4640      	mov	r0, r8
   d474e:	f7ff fcaa 	bl	d40a6 <__cxa_guard_acquire>
   d4752:	b128      	cbz	r0, d4760 <_ZN3DHT4readEv+0x1ac>
   d4754:	f000 fdca 	bl	d52ec <HAL_Pin_Map>
   d4758:	6028      	str	r0, [r5, #0]
   d475a:	4640      	mov	r0, r8
   d475c:	f7ff fca8 	bl	d40b0 <__cxa_guard_release>
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4760:	682b      	ldr	r3, [r5, #0]
   d4762:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
   d4766:	f813 300b 	ldrb.w	r3, [r3, fp]
   d476a:	015b      	lsls	r3, r3, #5
   d476c:	9301      	str	r3, [sp, #4]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d476e:	7833      	ldrb	r3, [r6, #0]
   d4770:	f3bf 8f5b 	dmb	ish
   d4774:	07db      	lsls	r3, r3, #31
   d4776:	d409      	bmi.n	d478c <_ZN3DHT4readEv+0x1d8>
   d4778:	4640      	mov	r0, r8
   d477a:	f7ff fc94 	bl	d40a6 <__cxa_guard_acquire>
   d477e:	b128      	cbz	r0, d478c <_ZN3DHT4readEv+0x1d8>
   d4780:	f000 fdb4 	bl	d52ec <HAL_Pin_Map>
   d4784:	6028      	str	r0, [r5, #0]
   d4786:	4640      	mov	r0, r8
   d4788:	f7ff fc92 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d478c:	682b      	ldr	r3, [r5, #0]
   d478e:	445b      	add	r3, fp
   d4790:	f893 b001 	ldrb.w	fp, [r3, #1]
   d4794:	9b01      	ldr	r3, [sp, #4]
   d4796:	f00b 0b1f 	and.w	fp, fp, #31
   d479a:	ea4b 0b03 	orr.w	fp, fp, r3
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
   d479e:	4658      	mov	r0, fp
   d47a0:	f7ff feaf 	bl	d4502 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d47a4:	4658      	mov	r0, fp
   d47a6:	f7ff feac 	bl	d4502 <nrf_gpio_pin_read>
   d47aa:	9b00      	ldr	r3, [sp, #0]
   d47ac:	4283      	cmp	r3, r0
   d47ae:	d109      	bne.n	d47c4 <_ZN3DHT4readEv+0x210>
			counter++;
   d47b0:	f109 0901 	add.w	r9, r9, #1
   d47b4:	fa5f f989 	uxtb.w	r9, r9
   d47b8:	2001      	movs	r0, #1
   d47ba:	f000 fd77 	bl	d52ac <HAL_Delay_Microseconds>
			delayMicroseconds(1);
			if (counter == 255) {
   d47be:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   d47c2:	d1bc      	bne.n	d473e <_ZN3DHT4readEv+0x18a>
				break;
			}
		}
		laststate = pinReadFast(_pin);
   d47c4:	f894 b006 	ldrb.w	fp, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d47c8:	7833      	ldrb	r3, [r6, #0]
   d47ca:	f3bf 8f5b 	dmb	ish
   d47ce:	07d8      	lsls	r0, r3, #31
   d47d0:	d409      	bmi.n	d47e6 <_ZN3DHT4readEv+0x232>
   d47d2:	4640      	mov	r0, r8
   d47d4:	f7ff fc67 	bl	d40a6 <__cxa_guard_acquire>
   d47d8:	b128      	cbz	r0, d47e6 <_ZN3DHT4readEv+0x232>
   d47da:	f000 fd87 	bl	d52ec <HAL_Pin_Map>
   d47de:	6028      	str	r0, [r5, #0]
   d47e0:	4640      	mov	r0, r8
   d47e2:	f7ff fc65 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d47e6:	682b      	ldr	r3, [r5, #0]
   d47e8:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
   d47ec:	f813 300b 	ldrb.w	r3, [r3, fp]
   d47f0:	015b      	lsls	r3, r3, #5
   d47f2:	9300      	str	r3, [sp, #0]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d47f4:	7833      	ldrb	r3, [r6, #0]
   d47f6:	f3bf 8f5b 	dmb	ish
   d47fa:	07d9      	lsls	r1, r3, #31
   d47fc:	d409      	bmi.n	d4812 <_ZN3DHT4readEv+0x25e>
   d47fe:	4640      	mov	r0, r8
   d4800:	f7ff fc51 	bl	d40a6 <__cxa_guard_acquire>
   d4804:	b128      	cbz	r0, d4812 <_ZN3DHT4readEv+0x25e>
   d4806:	f000 fd71 	bl	d52ec <HAL_Pin_Map>
   d480a:	6028      	str	r0, [r5, #0]
   d480c:	4640      	mov	r0, r8
   d480e:	f7ff fc4f 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4812:	682b      	ldr	r3, [r5, #0]
   d4814:	445b      	add	r3, fp
   d4816:	f893 b001 	ldrb.w	fp, [r3, #1]
   d481a:	9b00      	ldr	r3, [sp, #0]
   d481c:	f00b 0b1f 	and.w	fp, fp, #31
   d4820:	ea4b 0b03 	orr.w	fp, fp, r3
    (void)nrf_gpio_pin_read(nrf_pin);
   d4824:	4658      	mov	r0, fp
   d4826:	f7ff fe6c 	bl	d4502 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d482a:	4658      	mov	r0, fp
   d482c:	f7ff fe69 	bl	d4502 <nrf_gpio_pin_read>

		if (counter == 255) break;
   d4830:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
		laststate = pinReadFast(_pin);
   d4834:	b2c3      	uxtb	r3, r0
   d4836:	9300      	str	r3, [sp, #0]
		if (counter == 255) break;
   d4838:	d018      	beq.n	d486c <_ZN3DHT4readEv+0x2b8>

// ignore first 3 transitions
		if ((i >= 4) && (i%2 == 0)) {
   d483a:	2f03      	cmp	r7, #3
   d483c:	d911      	bls.n	d4862 <_ZN3DHT4readEv+0x2ae>
   d483e:	07fa      	lsls	r2, r7, #31
   d4840:	d40f      	bmi.n	d4862 <_ZN3DHT4readEv+0x2ae>
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   d4842:	ea4f 02da 	mov.w	r2, sl, lsr #3
			if (counter > _count)
				data[j/8] |= 1;
			j++;
   d4846:	f10a 0a01 	add.w	sl, sl, #1
			data[j/8] <<= 1;
   d484a:	5ca3      	ldrb	r3, [r4, r2]
   d484c:	005b      	lsls	r3, r3, #1
   d484e:	b2db      	uxtb	r3, r3
   d4850:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
   d4852:	7a21      	ldrb	r1, [r4, #8]
   d4854:	4549      	cmp	r1, r9
				data[j/8] |= 1;
   d4856:	bf3c      	itt	cc
   d4858:	f043 0301 	orrcc.w	r3, r3, #1
   d485c:	54a3      	strbcc	r3, [r4, r2]
			j++;
   d485e:	fa5f fa8a 	uxtb.w	sl, sl
	for ( i=0; i< MAXTIMINGS; i++) {
   d4862:	3701      	adds	r7, #1
   d4864:	b2ff      	uxtb	r7, r7
   d4866:	2f55      	cmp	r7, #85	; 0x55
   d4868:	f47f af67 	bne.w	d473a <_ZN3DHT4readEv+0x186>
		}
	}

	interrupts();
   d486c:	f001 f814 	bl	d5898 <_Z10interruptsv>
	Serial.print(data[4], HEX); Serial.print(" =? ");
	Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
*/

// check we read 40 bits and that the checksum matches
	if ((j >= 40) &&
   d4870:	f1ba 0f27 	cmp.w	sl, #39	; 0x27
   d4874:	d910      	bls.n	d4898 <_ZN3DHT4readEv+0x2e4>
	   (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
   d4876:	7863      	ldrb	r3, [r4, #1]
   d4878:	7820      	ldrb	r0, [r4, #0]
   d487a:	4418      	add	r0, r3
   d487c:	78a3      	ldrb	r3, [r4, #2]
   d487e:	4418      	add	r0, r3
   d4880:	78e3      	ldrb	r3, [r4, #3]
   d4882:	4418      	add	r0, r3
   d4884:	7923      	ldrb	r3, [r4, #4]
   d4886:	b2c0      	uxtb	r0, r0
	if ((j >= 40) &&
   d4888:	1ac3      	subs	r3, r0, r3
   d488a:	4258      	negs	r0, r3
   d488c:	4158      	adcs	r0, r3
		return true;
	}

	return false;

}
   d488e:	b005      	add	sp, #20
   d4890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return true; // return last correct measurement
   d4894:	2001      	movs	r0, #1
   d4896:	e7fa      	b.n	d488e <_ZN3DHT4readEv+0x2da>
	return false;
   d4898:	2000      	movs	r0, #0
   d489a:	e7f8      	b.n	d488e <_ZN3DHT4readEv+0x2da>
   d489c:	2003e5a0 	.word	0x2003e5a0
   d48a0:	2003e5a4 	.word	0x2003e5a4

000d48a4 <_ZN3DHT15readTemperatureEv>:
float DHT::readTemperature() {
   d48a4:	b510      	push	{r4, lr}
   d48a6:	4604      	mov	r4, r0
	if (read()) {
   d48a8:	f7ff fe84 	bl	d45b4 <_ZN3DHT4readEv>
   d48ac:	b320      	cbz	r0, d48f8 <_ZN3DHT15readTemperatureEv+0x54>
		switch (_type) {
   d48ae:	79e3      	ldrb	r3, [r4, #7]
   d48b0:	2b0b      	cmp	r3, #11
   d48b2:	d01b      	beq.n	d48ec <_ZN3DHT15readTemperatureEv+0x48>
   d48b4:	3b15      	subs	r3, #21
   d48b6:	2b01      	cmp	r3, #1
   d48b8:	d81e      	bhi.n	d48f8 <_ZN3DHT15readTemperatureEv+0x54>
				f = data[2] & 0x7F;
   d48ba:	78a3      	ldrb	r3, [r4, #2]
				f += data[3];
   d48bc:	eddf 6a10 	vldr	s13, [pc, #64]	; d4900 <_ZN3DHT15readTemperatureEv+0x5c>
				f = data[2] & 0x7F;
   d48c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   d48c4:	ee07 2a10 	vmov	s14, r2
				f += data[3];
   d48c8:	78e2      	ldrb	r2, [r4, #3]
   d48ca:	ee07 2a90 	vmov	s15, r2
				f = data[2] & 0x7F;
   d48ce:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
				f += data[3];
   d48d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				if (data[2] & 0x80)
   d48d6:	061b      	lsls	r3, r3, #24
				f += data[3];
   d48d8:	eee7 7a26 	vfma.f32	s15, s14, s13
				f /= 10;
   d48dc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   d48e0:	ee87 0a87 	vdiv.f32	s0, s15, s14
				if (data[2] & 0x80)
   d48e4:	d507      	bpl.n	d48f6 <_ZN3DHT15readTemperatureEv+0x52>
					f *= -1;
   d48e6:	eeb1 0a40 	vneg.f32	s0, s0
   d48ea:	e004      	b.n	d48f6 <_ZN3DHT15readTemperatureEv+0x52>
				f = data[2];
   d48ec:	78a3      	ldrb	r3, [r4, #2]
   d48ee:	ee00 3a10 	vmov	s0, r3
   d48f2:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
   d48f6:	bd10      	pop	{r4, pc}
		switch (_type) {
   d48f8:	ed9f 0a02 	vldr	s0, [pc, #8]	; d4904 <_ZN3DHT15readTemperatureEv+0x60>
   d48fc:	e7fb      	b.n	d48f6 <_ZN3DHT15readTemperatureEv+0x52>
   d48fe:	bf00      	nop
   d4900:	43800000 	.word	0x43800000
   d4904:	7fc00000 	.word	0x7fc00000

000d4908 <_ZN3DHT14getTempCelciusEv>:
	return readTemperature();
   d4908:	f7ff bfcc 	b.w	d48a4 <_ZN3DHT15readTemperatureEv>

000d490c <_ZN3DHT16getTempFarenheitEv>:
float DHT::getTempFarenheit() {
   d490c:	b508      	push	{r3, lr}
	return convertCtoF(readTemperature());
   d490e:	f7ff ffc9 	bl	d48a4 <_ZN3DHT15readTemperatureEv>
	return c * 9 / 5 + 32;
   d4912:	eef2 7a02 	vmov.f32	s15, #34	; 0x41100000  9.0
   d4916:	ee20 0a27 	vmul.f32	s0, s0, s15
   d491a:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
   d491e:	ee80 7a27 	vdiv.f32	s14, s0, s15
}
   d4922:	ed9f 0a02 	vldr	s0, [pc, #8]	; d492c <_ZN3DHT16getTempFarenheitEv+0x20>
   d4926:	ee37 0a00 	vadd.f32	s0, s14, s0
   d492a:	bd08      	pop	{r3, pc}
   d492c:	42000000 	.word	0x42000000

000d4930 <_ZN3DHT12readHumidityEv>:
float DHT::readHumidity(void) {
   d4930:	b510      	push	{r4, lr}
   d4932:	4604      	mov	r4, r0
	if (read()) {
   d4934:	f7ff fe3e 	bl	d45b4 <_ZN3DHT4readEv>
   d4938:	b1f0      	cbz	r0, d4978 <_ZN3DHT12readHumidityEv+0x48>
		switch (_type) {
   d493a:	79e3      	ldrb	r3, [r4, #7]
   d493c:	2b0b      	cmp	r3, #11
   d493e:	d015      	beq.n	d496c <_ZN3DHT12readHumidityEv+0x3c>
   d4940:	3b15      	subs	r3, #21
   d4942:	2b01      	cmp	r3, #1
   d4944:	d818      	bhi.n	d4978 <_ZN3DHT12readHumidityEv+0x48>
				f = data[0];
   d4946:	7823      	ldrb	r3, [r4, #0]
				f += data[1];
   d4948:	eddf 6a0d 	vldr	s13, [pc, #52]	; d4980 <_ZN3DHT12readHumidityEv+0x50>
				f = data[0];
   d494c:	ee07 3a10 	vmov	s14, r3
				f += data[1];
   d4950:	7863      	ldrb	r3, [r4, #1]
   d4952:	ee07 3a90 	vmov	s15, r3
				f = data[0];
   d4956:	eeb8 7a47 	vcvt.f32.u32	s14, s14
				f += data[1];
   d495a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d495e:	eee7 7a26 	vfma.f32	s15, s14, s13
				f /= 10;
   d4962:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   d4966:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   d496a:	bd10      	pop	{r4, pc}
				f = data[0];
   d496c:	7823      	ldrb	r3, [r4, #0]
   d496e:	ee00 3a10 	vmov	s0, r3
   d4972:	eeb8 0a40 	vcvt.f32.u32	s0, s0
				return f;
   d4976:	e7f8      	b.n	d496a <_ZN3DHT12readHumidityEv+0x3a>
		switch (_type) {
   d4978:	ed9f 0a02 	vldr	s0, [pc, #8]	; d4984 <_ZN3DHT12readHumidityEv+0x54>
   d497c:	e7f5      	b.n	d496a <_ZN3DHT12readHumidityEv+0x3a>
   d497e:	bf00      	nop
   d4980:	43800000 	.word	0x43800000
   d4984:	7fc00000 	.word	0x7fc00000

000d4988 <_ZN3DHT11getHumidityEv>:
	return readHumidity();
   d4988:	f7ff bfd2 	b.w	d4930 <_ZN3DHT12readHumidityEv>

000d498c <_ZN11CSmartLightC1Ev>:
#include "smartlight.h"
// #include <ctime>
// #include <iostream>

CSmartLight::CSmartLight() {
   d498c:	b538      	push	{r3, r4, r5, lr}
   d498e:	221e      	movs	r2, #30
   d4990:	f44f 63a5 	mov.w	r3, #1320	; 0x528
   d4994:	f100 0528 	add.w	r5, r0, #40	; 0x28
   d4998:	4604      	mov	r4, r0
   d499a:	e9c0 2305 	strd	r2, r3, [r0, #20]
   d499e:	490c      	ldr	r1, [pc, #48]	; (d49d0 <_ZN11CSmartLightC1Ev+0x44>)
   d49a0:	4628      	mov	r0, r5
   d49a2:	f001 fc58 	bl	d6256 <_ZN6StringC1EPKc>
    state_L0 = CSmartLight::S_ON;
   d49a6:	f240 1301 	movw	r3, #257	; 0x101
   d49aa:	8023      	strh	r3, [r4, #0]
    state_L1 = CSmartLight::S_AUTO;
    brightness = RGB_BRIGHTNESS_DEAULT;
   d49ac:	2380      	movs	r3, #128	; 0x80
   d49ae:	6063      	str	r3, [r4, #4]
    sensorMax = LIGHT_SENSOR_MAX;
    sensorMin = LIGHT_SENSOR_MIN;
   d49b0:	f640 10c4 	movw	r0, #2500	; 0x9c4
   d49b4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d49b8:	e9c4 0303 	strd	r0, r3, [r4, #12]

    statusStr = "{}";
   d49bc:	4905      	ldr	r1, [pc, #20]	; (d49d4 <_ZN11CSmartLightC1Ev+0x48>)
   d49be:	4628      	mov	r0, r5
   d49c0:	f001 fc9c 	bl	d62fc <_ZN6StringaSEPKc>
    resetCmd();
    createStatusStr();
}

void CSmartLight::resetCmd() {
    cmd.On = INVALID_CMD;
   d49c4:	4b04      	ldr	r3, [pc, #16]	; (d49d8 <_ZN11CSmartLightC1Ev+0x4c>)
    cmd.Auto = INVALID_CMD;
    cmd.Brightness = INVALID_CMD;
   d49c6:	6263      	str	r3, [r4, #36]	; 0x24
    cmd.Auto = INVALID_CMD;
   d49c8:	e9c4 3307 	strd	r3, r3, [r4, #28]
}
   d49cc:	4620      	mov	r0, r4
   d49ce:	bd38      	pop	{r3, r4, r5, pc}
   d49d0:	000d7793 	.word	0x000d7793
   d49d4:	000d7601 	.word	0x000d7601
   d49d8:	fffe7961 	.word	0xfffe7961

000d49dc <_ZN11CSmartLight12turnOffLightEv>:
}

void CSmartLight::turnOffLight() {
   d49dc:	b508      	push	{r3, lr}
    if (RGB.brightness() != 0) RGB.brightness(0);
   d49de:	f001 fbdc 	bl	d619a <_ZN8RGBClass10brightnessEv>
   d49e2:	b128      	cbz	r0, d49f0 <_ZN11CSmartLight12turnOffLightEv+0x14>
}
   d49e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (RGB.brightness() != 0) RGB.brightness(0);
   d49e8:	2101      	movs	r1, #1
   d49ea:	2000      	movs	r0, #0
   d49ec:	f001 bbc7 	b.w	d617e <_ZN8RGBClass10brightnessEhb>
}
   d49f0:	bd08      	pop	{r3, pc}
   d49f2:	0000      	movs	r0, r0
   d49f4:	0000      	movs	r0, r0
	...

000d49f8 <_ZN11CSmartLight24updateBrightnessManuallyEi>:

// 0 <= val <= 100 (i.e., %)
void CSmartLight::updateBrightnessManually(int val) {
   d49f8:	b538      	push	{r3, r4, r5, lr}
    if (val == INVALID_CMD) {
   d49fa:	4b13      	ldr	r3, [pc, #76]	; (d4a48 <_ZN11CSmartLight24updateBrightnessManuallyEi+0x50>)
   d49fc:	4299      	cmp	r1, r3
void CSmartLight::updateBrightnessManually(int val) {
   d49fe:	4604      	mov	r4, r0
   d4a00:	4608      	mov	r0, r1
    if (val == INVALID_CMD) {
   d4a02:	d10a      	bne.n	d4a1a <_ZN11CSmartLight24updateBrightnessManuallyEi+0x22>
        if (brightness != RGB.brightness()) RGB.brightness(brightness);
   d4a04:	6865      	ldr	r5, [r4, #4]
   d4a06:	f001 fbc8 	bl	d619a <_ZN8RGBClass10brightnessEv>
   d4a0a:	4285      	cmp	r5, r0
   d4a0c:	d016      	beq.n	d4a3c <_ZN11CSmartLight24updateBrightnessManuallyEi+0x44>
   d4a0e:	7920      	ldrb	r0, [r4, #4]
   d4a10:	2101      	movs	r1, #1
        return;
    }
    brightness = (int)((val/100.0)*RGB_BRIGHTNESS_MAX);

    RGB.brightness(brightness);
}
   d4a12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    RGB.brightness(brightness);
   d4a16:	f001 bbb2 	b.w	d617e <_ZN8RGBClass10brightnessEhb>
    brightness = (int)((val/100.0)*RGB_BRIGHTNESS_MAX);
   d4a1a:	f002 f917 	bl	d6c4c <__aeabi_i2d>
   d4a1e:	4b0b      	ldr	r3, [pc, #44]	; (d4a4c <_ZN11CSmartLight24updateBrightnessManuallyEi+0x54>)
   d4a20:	2200      	movs	r2, #0
   d4a22:	f002 faa7 	bl	d6f74 <__aeabi_ddiv>
   d4a26:	a306      	add	r3, pc, #24	; (adr r3, d4a40 <_ZN11CSmartLight24updateBrightnessManuallyEi+0x48>)
   d4a28:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4a2c:	f002 f978 	bl	d6d20 <__aeabi_dmul>
   d4a30:	f002 fc10 	bl	d7254 <__aeabi_d2iz>
    RGB.brightness(brightness);
   d4a34:	2101      	movs	r1, #1
    brightness = (int)((val/100.0)*RGB_BRIGHTNESS_MAX);
   d4a36:	6060      	str	r0, [r4, #4]
    RGB.brightness(brightness);
   d4a38:	b2c0      	uxtb	r0, r0
   d4a3a:	e7ea      	b.n	d4a12 <_ZN11CSmartLight24updateBrightnessManuallyEi+0x1a>
}
   d4a3c:	bd38      	pop	{r3, r4, r5, pc}
   d4a3e:	bf00      	nop
   d4a40:	00000000 	.word	0x00000000
   d4a44:	406fe000 	.word	0x406fe000
   d4a48:	fffe7961 	.word	0xfffe7961
   d4a4c:	40590000 	.word	0x40590000

000d4a50 <_ZN11CSmartLight13readSensorValEv>:

    RGB.brightness(brightness);
}


void CSmartLight::readSensorVal() {
   d4a50:	b510      	push	{r4, lr}
   d4a52:	4604      	mov	r4, r0
    sensorVal = analogRead(LIGHT_SENSOR);
   d4a54:	2013      	movs	r0, #19
   d4a56:	f001 ff4d 	bl	d68f4 <analogRead>
   d4a5a:	60a0      	str	r0, [r4, #8]
}
   d4a5c:	bd10      	pop	{r4, pc}
	...

000d4a60 <_ZN11CSmartLight29updataBrightnessAutomaticallyEv>:
void CSmartLight::updataBrightnessAutomatically() {
   d4a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4a64:	4604      	mov	r4, r0
    readSensorVal();
   d4a66:	f7ff fff3 	bl	d4a50 <_ZN11CSmartLight13readSensorValEv>
    if (curSensorVal < sensorMin) curSensorVal = sensorMin;
   d4a6a:	6925      	ldr	r5, [r4, #16]
   d4a6c:	68a0      	ldr	r0, [r4, #8]
    if (curSensorVal > sensorMax) curSensorVal = sensorMax;
   d4a6e:	f8d4 800c 	ldr.w	r8, [r4, #12]
   d4a72:	42a8      	cmp	r0, r5
   d4a74:	bfb8      	it	lt
   d4a76:	4628      	movlt	r0, r5
    double amountOfLight = (double)(curSensorVal-sensorMin) / (double)(sensorMax-sensorMin);
   d4a78:	4580      	cmp	r8, r0
   d4a7a:	bfd4      	ite	le
   d4a7c:	ebc5 0008 	rsble	r0, r5, r8
   d4a80:	ebc5 0000 	rsbgt	r0, r5, r0
   d4a84:	f002 f8e2 	bl	d6c4c <__aeabi_i2d>
   d4a88:	4606      	mov	r6, r0
   d4a8a:	eba8 0005 	sub.w	r0, r8, r5
   d4a8e:	460f      	mov	r7, r1
   d4a90:	f002 f8dc 	bl	d6c4c <__aeabi_i2d>
   d4a94:	4602      	mov	r2, r0
   d4a96:	460b      	mov	r3, r1
   d4a98:	4630      	mov	r0, r6
   d4a9a:	4639      	mov	r1, r7
   d4a9c:	f002 fa6a 	bl	d6f74 <__aeabi_ddiv>
   d4aa0:	4602      	mov	r2, r0
   d4aa2:	460b      	mov	r3, r1
    brightness = (int)((double)RGB_BRIGHTNESS_MAX*(1.0-amountOfLight));
   d4aa4:	2000      	movs	r0, #0
   d4aa6:	490a      	ldr	r1, [pc, #40]	; (d4ad0 <_ZN11CSmartLight29updataBrightnessAutomaticallyEv+0x70>)
   d4aa8:	f001 ff82 	bl	d69b0 <__aeabi_dsub>
   d4aac:	a306      	add	r3, pc, #24	; (adr r3, d4ac8 <_ZN11CSmartLight29updataBrightnessAutomaticallyEv+0x68>)
   d4aae:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4ab2:	f002 f935 	bl	d6d20 <__aeabi_dmul>
   d4ab6:	f002 fbcd 	bl	d7254 <__aeabi_d2iz>
    RGB.brightness(brightness);
   d4aba:	2101      	movs	r1, #1
    brightness = (int)((double)RGB_BRIGHTNESS_MAX*(1.0-amountOfLight));
   d4abc:	6060      	str	r0, [r4, #4]
}
   d4abe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    RGB.brightness(brightness);
   d4ac2:	b2c0      	uxtb	r0, r0
   d4ac4:	f001 bb5b 	b.w	d617e <_ZN8RGBClass10brightnessEhb>
   d4ac8:	00000000 	.word	0x00000000
   d4acc:	406fe000 	.word	0x406fe000
   d4ad0:	3ff00000 	.word	0x3ff00000
   d4ad4:	00000000 	.word	0x00000000

000d4ad8 <_ZN11CSmartLight15createStatusStrEv>:
int CSmartLight::getSensorVal() {
    return sensorVal;
}


void CSmartLight::createStatusStr() {
   d4ad8:	b570      	push	{r4, r5, r6, lr}
   d4ada:	b088      	sub	sp, #32
    //time_t ti = Time.now();
    //std::time_t result = std::time(nullptr);
    statusStr = String::format("{\"L0\":%d,\"L1\":%d,\"b\":%d,\"s\":%d,\"m\":%d,\"M\":%d}",
   d4adc:	68c3      	ldr	r3, [r0, #12]
   d4ade:	7846      	ldrb	r6, [r0, #1]
   d4ae0:	7805      	ldrb	r5, [r0, #0]
   d4ae2:	9303      	str	r3, [sp, #12]
   d4ae4:	6903      	ldr	r3, [r0, #16]
   d4ae6:	9302      	str	r3, [sp, #8]
   d4ae8:	6883      	ldr	r3, [r0, #8]
   d4aea:	9301      	str	r3, [sp, #4]
void CSmartLight::createStatusStr() {
   d4aec:	4604      	mov	r4, r0
        state_L0, state_L1, (int)((double)brightness/RGB_BRIGHTNESS_MAX*100.0), sensorVal, sensorMin, sensorMax);
   d4aee:	6840      	ldr	r0, [r0, #4]
   d4af0:	f002 f8ac 	bl	d6c4c <__aeabi_i2d>
   d4af4:	a310      	add	r3, pc, #64	; (adr r3, d4b38 <_ZN11CSmartLight15createStatusStrEv+0x60>)
   d4af6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4afa:	f002 fa3b 	bl	d6f74 <__aeabi_ddiv>
   d4afe:	4b0c      	ldr	r3, [pc, #48]	; (d4b30 <_ZN11CSmartLight15createStatusStrEv+0x58>)
   d4b00:	2200      	movs	r2, #0
   d4b02:	f002 f90d 	bl	d6d20 <__aeabi_dmul>
    statusStr = String::format("{\"L0\":%d,\"L1\":%d,\"b\":%d,\"s\":%d,\"m\":%d,\"M\":%d}",
   d4b06:	f002 fba5 	bl	d7254 <__aeabi_d2iz>
   d4b0a:	4633      	mov	r3, r6
   d4b0c:	462a      	mov	r2, r5
   d4b0e:	9000      	str	r0, [sp, #0]
   d4b10:	4908      	ldr	r1, [pc, #32]	; (d4b34 <_ZN11CSmartLight15createStatusStrEv+0x5c>)
   d4b12:	a804      	add	r0, sp, #16
   d4b14:	f001 fc30 	bl	d6378 <_ZN6String6formatEPKcz>
        state_L0, state_L1, (int)((double)brightness/RGB_BRIGHTNESS_MAX*100.0), sensorVal, sensorMin, sensorMax);
   d4b18:	a904      	add	r1, sp, #16
   d4b1a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d4b1e:	f001 fbe5 	bl	d62ec <_ZN6StringaSEOS_>
   d4b22:	a804      	add	r0, sp, #16
   d4b24:	f001 fb4c 	bl	d61c0 <_ZN6StringD1Ev>
}
   d4b28:	b008      	add	sp, #32
   d4b2a:	bd70      	pop	{r4, r5, r6, pc}
   d4b2c:	f3af 8000 	nop.w
   d4b30:	40590000 	.word	0x40590000
   d4b34:	000d7604 	.word	0x000d7604
   d4b38:	00000000 	.word	0x00000000
   d4b3c:	406fe000 	.word	0x406fe000

000d4b40 <_ZN11CSmartLight7executeEv>:
void CSmartLight::execute() {
   d4b40:	b538      	push	{r3, r4, r5, lr}
   d4b42:	4604      	mov	r4, r0
    if ((Time.now() % 1440) == wakeTime) {
   d4b44:	f001 fc7c 	bl	d6440 <_ZN9TimeClass3nowEv>
   d4b48:	f44f 65b4 	mov.w	r5, #1440	; 0x5a0
   d4b4c:	6962      	ldr	r2, [r4, #20]
   d4b4e:	fb90 f3f5 	sdiv	r3, r0, r5
   d4b52:	fb03 0315 	mls	r3, r3, r5, r0
   d4b56:	4293      	cmp	r3, r2
   d4b58:	d111      	bne.n	d4b7e <_ZN11CSmartLight7executeEv+0x3e>
        brightness = 100;
   d4b5a:	2064      	movs	r0, #100	; 0x64
        brightness = 0;
   d4b5c:	6060      	str	r0, [r4, #4]
        RGB.brightness(brightness);
   d4b5e:	2101      	movs	r1, #1
   d4b60:	f001 fb0d 	bl	d617e <_ZN8RGBClass10brightnessEhb>
    switch (state_L0) {
   d4b64:	7825      	ldrb	r5, [r4, #0]
   d4b66:	b1ad      	cbz	r5, d4b94 <_ZN11CSmartLight7executeEv+0x54>
   d4b68:	2d01      	cmp	r5, #1
   d4b6a:	d01f      	beq.n	d4bac <_ZN11CSmartLight7executeEv+0x6c>
    cmd.On = INVALID_CMD;
   d4b6c:	4b1e      	ldr	r3, [pc, #120]	; (d4be8 <_ZN11CSmartLight7executeEv+0xa8>)
    cmd.Brightness = INVALID_CMD;
   d4b6e:	6263      	str	r3, [r4, #36]	; 0x24
    cmd.Auto = INVALID_CMD;
   d4b70:	e9c4 3307 	strd	r3, r3, [r4, #28]
    createStatusStr();
   d4b74:	4620      	mov	r0, r4
}
   d4b76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    createStatusStr();
   d4b7a:	f7ff bfad 	b.w	d4ad8 <_ZN11CSmartLight15createStatusStrEv>
    } else if ((Time.now() % 1440) == sleepTime) {
   d4b7e:	f001 fc5f 	bl	d6440 <_ZN9TimeClass3nowEv>
   d4b82:	fb90 f3f5 	sdiv	r3, r0, r5
   d4b86:	fb03 0515 	mls	r5, r3, r5, r0
   d4b8a:	69a3      	ldr	r3, [r4, #24]
   d4b8c:	429d      	cmp	r5, r3
   d4b8e:	d1e9      	bne.n	d4b64 <_ZN11CSmartLight7executeEv+0x24>
        brightness = 0;
   d4b90:	2000      	movs	r0, #0
   d4b92:	e7e3      	b.n	d4b5c <_ZN11CSmartLight7executeEv+0x1c>
            turnOffLight();
   d4b94:	4620      	mov	r0, r4
   d4b96:	f7ff ff21 	bl	d49dc <_ZN11CSmartLight12turnOffLightEv>
            if (cmd.On != INVALID_CMD) {
   d4b9a:	69e3      	ldr	r3, [r4, #28]
   d4b9c:	4a12      	ldr	r2, [pc, #72]	; (d4be8 <_ZN11CSmartLight7executeEv+0xa8>)
   d4b9e:	4293      	cmp	r3, r2
   d4ba0:	d0e4      	beq.n	d4b6c <_ZN11CSmartLight7executeEv+0x2c>
                if (cmd.On) {
   d4ba2:	2b00      	cmp	r3, #0
   d4ba4:	d0e2      	beq.n	d4b6c <_ZN11CSmartLight7executeEv+0x2c>
                    state_L0 = CSmartLight::S_ON;
   d4ba6:	2301      	movs	r3, #1
   d4ba8:	8023      	strh	r3, [r4, #0]
   d4baa:	e7df      	b.n	d4b6c <_ZN11CSmartLight7executeEv+0x2c>
            switch (state_L1) {
   d4bac:	7863      	ldrb	r3, [r4, #1]
   d4bae:	b133      	cbz	r3, d4bbe <_ZN11CSmartLight7executeEv+0x7e>
   d4bb0:	2b01      	cmp	r3, #1
   d4bb2:	d010      	beq.n	d4bd6 <_ZN11CSmartLight7executeEv+0x96>
                if (!cmd.On) state_L0 = CSmartLight::S_OFF;
   d4bb4:	69e3      	ldr	r3, [r4, #28]
   d4bb6:	2b00      	cmp	r3, #0
   d4bb8:	d1d8      	bne.n	d4b6c <_ZN11CSmartLight7executeEv+0x2c>
   d4bba:	7023      	strb	r3, [r4, #0]
   d4bbc:	e7d6      	b.n	d4b6c <_ZN11CSmartLight7executeEv+0x2c>
                    updateBrightnessManually(cmd.Brightness);
   d4bbe:	6a61      	ldr	r1, [r4, #36]	; 0x24
   d4bc0:	4620      	mov	r0, r4
   d4bc2:	f7ff ff19 	bl	d49f8 <_ZN11CSmartLight24updateBrightnessManuallyEi>
                    if (cmd.Auto != INVALID_CMD) {
   d4bc6:	6a23      	ldr	r3, [r4, #32]
   d4bc8:	4a07      	ldr	r2, [pc, #28]	; (d4be8 <_ZN11CSmartLight7executeEv+0xa8>)
   d4bca:	4293      	cmp	r3, r2
   d4bcc:	d0f2      	beq.n	d4bb4 <_ZN11CSmartLight7executeEv+0x74>
                        if (cmd.Auto) state_L1 = CSmartLight::S_AUTO;
   d4bce:	2b00      	cmp	r3, #0
   d4bd0:	d0f0      	beq.n	d4bb4 <_ZN11CSmartLight7executeEv+0x74>
   d4bd2:	7065      	strb	r5, [r4, #1]
   d4bd4:	e7ee      	b.n	d4bb4 <_ZN11CSmartLight7executeEv+0x74>
                    updataBrightnessAutomatically();
   d4bd6:	4620      	mov	r0, r4
   d4bd8:	f7ff ff42 	bl	d4a60 <_ZN11CSmartLight29updataBrightnessAutomaticallyEv>
                        if (!cmd.Auto) state_L1 = CSmartLight::S_MANUAL;
   d4bdc:	6a23      	ldr	r3, [r4, #32]
   d4bde:	2b00      	cmp	r3, #0
   d4be0:	d1e8      	bne.n	d4bb4 <_ZN11CSmartLight7executeEv+0x74>
   d4be2:	7063      	strb	r3, [r4, #1]
   d4be4:	e7e6      	b.n	d4bb4 <_ZN11CSmartLight7executeEv+0x74>
   d4be6:	bf00      	nop
   d4be8:	fffe7961 	.word	0xfffe7961

000d4bec <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE>:
void CSmartLight::cmdProcessing(JSONValue cmdJson) {
   d4bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4bf0:	b08a      	sub	sp, #40	; 0x28
        JSONObjectIterator(value.t_, value.d_) {
   d4bf2:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4bf4:	f851 3b04 	ldr.w	r3, [r1], #4
   d4bf8:	9300      	str	r3, [sp, #0]
   d4bfa:	4604      	mov	r4, r0
   d4bfc:	a801      	add	r0, sp, #4
   d4bfe:	f7ff faa1 	bl	d4144 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d4c02:	466a      	mov	r2, sp
   d4c04:	4629      	mov	r1, r5
   d4c06:	a804      	add	r0, sp, #16
   d4c08:	f001 f8c2 	bl	d5d90 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4c0c:	a801      	add	r0, sp, #4
   d4c0e:	f7ff fa83 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return strcmp(s_, str) == 0;
   d4c12:	4e51      	ldr	r6, [pc, #324]	; (d4d58 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x16c>)
   d4c14:	4f51      	ldr	r7, [pc, #324]	; (d4d5c <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x170>)
   d4c16:	f8df 8158 	ldr.w	r8, [pc, #344]	; d4d70 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x184>
    while (iter.next()) {
   d4c1a:	a804      	add	r0, sp, #16
   d4c1c:	f001 f8d0 	bl	d5dc0 <_ZN5spark18JSONObjectIterator4nextEv>
   d4c20:	2800      	cmp	r0, #0
   d4c22:	f000 8093 	beq.w	d4d4c <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x160>
        if (iter.name() == "on") {
   d4c26:	a904      	add	r1, sp, #16
   d4c28:	4668      	mov	r0, sp
   d4c2a:	f7ff fa92 	bl	d4152 <_ZNK5spark18JSONObjectIterator4nameEv>
   d4c2e:	4631      	mov	r1, r6
   d4c30:	9802      	ldr	r0, [sp, #8]
   d4c32:	f002 fb91 	bl	d7358 <strcmp>
   d4c36:	4605      	mov	r5, r0
   d4c38:	a801      	add	r0, sp, #4
   d4c3a:	f7ff fa6d 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            cmd.On = (int)iter.value().toBool();
   d4c3e:	a904      	add	r1, sp, #16
   d4c40:	4668      	mov	r0, sp
        if (iter.name() == "on") {
   d4c42:	b94d      	cbnz	r5, d4c58 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x6c>
            cmd.On = (int)iter.value().toBool();
   d4c44:	f7ff fa99 	bl	d417a <_ZNK5spark18JSONObjectIterator5valueEv>
   d4c48:	4668      	mov	r0, sp
   d4c4a:	f000 ff2f 	bl	d5aac <_ZNK5spark9JSONValue6toBoolEv>
   d4c4e:	61e0      	str	r0, [r4, #28]
   d4c50:	a801      	add	r0, sp, #4
   d4c52:	f7ff fa61 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4c56:	e7e0      	b.n	d4c1a <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x2e>
        else if (iter.name() == "auto") {
   d4c58:	f7ff fa7b 	bl	d4152 <_ZNK5spark18JSONObjectIterator4nameEv>
   d4c5c:	4639      	mov	r1, r7
   d4c5e:	9802      	ldr	r0, [sp, #8]
   d4c60:	f002 fb7a 	bl	d7358 <strcmp>
   d4c64:	4605      	mov	r5, r0
   d4c66:	a801      	add	r0, sp, #4
   d4c68:	f7ff fa56 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            cmd.Auto = (int)iter.value().toBool();
   d4c6c:	a904      	add	r1, sp, #16
   d4c6e:	4668      	mov	r0, sp
        else if (iter.name() == "auto") {
   d4c70:	b935      	cbnz	r5, d4c80 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x94>
            cmd.Auto = (int)iter.value().toBool();
   d4c72:	f7ff fa82 	bl	d417a <_ZNK5spark18JSONObjectIterator5valueEv>
   d4c76:	4668      	mov	r0, sp
   d4c78:	f000 ff18 	bl	d5aac <_ZNK5spark9JSONValue6toBoolEv>
   d4c7c:	6220      	str	r0, [r4, #32]
   d4c7e:	e7e7      	b.n	d4c50 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x64>
        else if (iter.name() == "brightness") {
   d4c80:	f7ff fa67 	bl	d4152 <_ZNK5spark18JSONObjectIterator4nameEv>
   d4c84:	4641      	mov	r1, r8
   d4c86:	9802      	ldr	r0, [sp, #8]
   d4c88:	f002 fb66 	bl	d7358 <strcmp>
   d4c8c:	4605      	mov	r5, r0
   d4c8e:	a801      	add	r0, sp, #4
   d4c90:	f7ff fa42 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            cmd.Brightness = iter.value().toInt();
   d4c94:	a904      	add	r1, sp, #16
   d4c96:	4668      	mov	r0, sp
        else if (iter.name() == "brightness") {
   d4c98:	b935      	cbnz	r5, d4ca8 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0xbc>
            cmd.Brightness = iter.value().toInt();
   d4c9a:	f7ff fa6e 	bl	d417a <_ZNK5spark18JSONObjectIterator5valueEv>
   d4c9e:	4668      	mov	r0, sp
   d4ca0:	f000 ff42 	bl	d5b28 <_ZNK5spark9JSONValue5toIntEv>
   d4ca4:	6260      	str	r0, [r4, #36]	; 0x24
   d4ca6:	e7d3      	b.n	d4c50 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x64>
        else if (iter.name() == "min") {
   d4ca8:	f7ff fa53 	bl	d4152 <_ZNK5spark18JSONObjectIterator4nameEv>
   d4cac:	492c      	ldr	r1, [pc, #176]	; (d4d60 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x174>)
   d4cae:	9802      	ldr	r0, [sp, #8]
   d4cb0:	f002 fb52 	bl	d7358 <strcmp>
   d4cb4:	4605      	mov	r5, r0
   d4cb6:	a801      	add	r0, sp, #4
   d4cb8:	f7ff fa2e 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            sensorMin = iter.value().toInt();
   d4cbc:	a904      	add	r1, sp, #16
   d4cbe:	4668      	mov	r0, sp
        else if (iter.name() == "min") {
   d4cc0:	b935      	cbnz	r5, d4cd0 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0xe4>
            sensorMin = iter.value().toInt();
   d4cc2:	f7ff fa5a 	bl	d417a <_ZNK5spark18JSONObjectIterator5valueEv>
   d4cc6:	4668      	mov	r0, sp
   d4cc8:	f000 ff2e 	bl	d5b28 <_ZNK5spark9JSONValue5toIntEv>
   d4ccc:	6120      	str	r0, [r4, #16]
   d4cce:	e7bf      	b.n	d4c50 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x64>
        else if ( iter.name() == "max") {
   d4cd0:	f7ff fa3f 	bl	d4152 <_ZNK5spark18JSONObjectIterator4nameEv>
   d4cd4:	4923      	ldr	r1, [pc, #140]	; (d4d64 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x178>)
   d4cd6:	9802      	ldr	r0, [sp, #8]
   d4cd8:	f002 fb3e 	bl	d7358 <strcmp>
   d4cdc:	4605      	mov	r5, r0
   d4cde:	a801      	add	r0, sp, #4
   d4ce0:	f7ff fa1a 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            sensorMax = iter.value().toInt();
   d4ce4:	a904      	add	r1, sp, #16
   d4ce6:	4668      	mov	r0, sp
        else if ( iter.name() == "max") {
   d4ce8:	b935      	cbnz	r5, d4cf8 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x10c>
            sensorMax = iter.value().toInt();
   d4cea:	f7ff fa46 	bl	d417a <_ZNK5spark18JSONObjectIterator5valueEv>
   d4cee:	4668      	mov	r0, sp
   d4cf0:	f000 ff1a 	bl	d5b28 <_ZNK5spark9JSONValue5toIntEv>
   d4cf4:	60e0      	str	r0, [r4, #12]
   d4cf6:	e7ab      	b.n	d4c50 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x64>
        else if (iter.name() == "sleepTime") {
   d4cf8:	f7ff fa2b 	bl	d4152 <_ZNK5spark18JSONObjectIterator4nameEv>
   d4cfc:	491a      	ldr	r1, [pc, #104]	; (d4d68 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x17c>)
   d4cfe:	9802      	ldr	r0, [sp, #8]
   d4d00:	f002 fb2a 	bl	d7358 <strcmp>
   d4d04:	4605      	mov	r5, r0
   d4d06:	a801      	add	r0, sp, #4
   d4d08:	f7ff fa06 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            sleepTime = iter.value().toInt();
   d4d0c:	a904      	add	r1, sp, #16
   d4d0e:	4668      	mov	r0, sp
        else if (iter.name() == "sleepTime") {
   d4d10:	b935      	cbnz	r5, d4d20 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x134>
            sleepTime = iter.value().toInt();
   d4d12:	f7ff fa32 	bl	d417a <_ZNK5spark18JSONObjectIterator5valueEv>
   d4d16:	4668      	mov	r0, sp
   d4d18:	f000 ff06 	bl	d5b28 <_ZNK5spark9JSONValue5toIntEv>
   d4d1c:	61a0      	str	r0, [r4, #24]
   d4d1e:	e797      	b.n	d4c50 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x64>
        } else if (iter.name() == "wakeTime") {
   d4d20:	f7ff fa17 	bl	d4152 <_ZNK5spark18JSONObjectIterator4nameEv>
   d4d24:	4911      	ldr	r1, [pc, #68]	; (d4d6c <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x180>)
   d4d26:	9802      	ldr	r0, [sp, #8]
   d4d28:	f002 fb16 	bl	d7358 <strcmp>
   d4d2c:	4605      	mov	r5, r0
   d4d2e:	a801      	add	r0, sp, #4
   d4d30:	f7ff f9f2 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4d34:	2d00      	cmp	r5, #0
   d4d36:	f47f af70 	bne.w	d4c1a <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x2e>
            wakeTime = iter.value().toInt();
   d4d3a:	a904      	add	r1, sp, #16
   d4d3c:	4668      	mov	r0, sp
   d4d3e:	f7ff fa1c 	bl	d417a <_ZNK5spark18JSONObjectIterator5valueEv>
   d4d42:	4668      	mov	r0, sp
   d4d44:	f000 fef0 	bl	d5b28 <_ZNK5spark9JSONValue5toIntEv>
   d4d48:	6160      	str	r0, [r4, #20]
   d4d4a:	e781      	b.n	d4c50 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x64>
   d4d4c:	a805      	add	r0, sp, #20
   d4d4e:	f7ff f9e3 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4d52:	b00a      	add	sp, #40	; 0x28
   d4d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4d58:	000d7632 	.word	0x000d7632
   d4d5c:	000d7635 	.word	0x000d7635
   d4d60:	000d7645 	.word	0x000d7645
   d4d64:	000d7649 	.word	0x000d7649
   d4d68:	000d764d 	.word	0x000d764d
   d4d6c:	000d7657 	.word	0x000d7657
   d4d70:	000d763a 	.word	0x000d763a

000d4d74 <_ZN5CDoorC1Ev>:
#include "door.h"

CDoor::CDoor() {
   d4d74:	b538      	push	{r3, r4, r5, lr}
   d4d76:	f100 0528 	add.w	r5, r0, #40	; 0x28
   d4d7a:	4604      	mov	r4, r0
   d4d7c:	490b      	ldr	r1, [pc, #44]	; (d4dac <_ZN5CDoorC1Ev+0x38>)
   d4d7e:	4628      	mov	r0, r5
   d4d80:	f001 fa69 	bl	d6256 <_ZN6StringC1EPKc>
  state_D0 = CDoor::S_CLOSED;
   d4d84:	2301      	movs	r3, #1
   d4d86:	7023      	strb	r3, [r4, #0]
  doorProximity = RGB_BRIGHTNESS_DEAULT;
   d4d88:	2380      	movs	r3, #128	; 0x80
   d4d8a:	6063      	str	r3, [r4, #4]
  sensorMax = LIGHT_SENSOR_MAX;
  sensorMin = LIGHT_SENSOR_MIN;
   d4d8c:	f640 11c4 	movw	r1, #2500	; 0x9c4
   d4d90:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d4d94:	e9c4 1303 	strd	r1, r3, [r4, #12]

  statusStr = "{}";
   d4d98:	4628      	mov	r0, r5
   d4d9a:	4905      	ldr	r1, [pc, #20]	; (d4db0 <_ZN5CDoorC1Ev+0x3c>)
   d4d9c:	f001 faae 	bl	d62fc <_ZN6StringaSEPKc>
    state_D0, doorProximity, sensorVal, alert
  );
}

void CDoor::resetCmd() {
  cmd.DoorProximity = INVALID_CMD;
   d4da0:	4b04      	ldr	r3, [pc, #16]	; (d4db4 <_ZN5CDoorC1Ev+0x40>)
}
   d4da2:	4620      	mov	r0, r4
  cmd.Status = INVALID_CMD;
   d4da4:	e9c4 3307 	strd	r3, r3, [r4, #28]
}
   d4da8:	bd38      	pop	{r3, r4, r5, pc}
   d4daa:	bf00      	nop
   d4dac:	000d7793 	.word	0x000d7793
   d4db0:	000d7601 	.word	0x000d7601
   d4db4:	fffe7961 	.word	0xfffe7961

000d4db8 <_ZN5CDoor13readSensorValEv>:
void CDoor::readSensorVal() {
   d4db8:	b510      	push	{r4, lr}
   d4dba:	4604      	mov	r4, r0
  sensorVal = analogRead(DOOR_SENSOR);
   d4dbc:	2011      	movs	r0, #17
   d4dbe:	f001 fd99 	bl	d68f4 <analogRead>
   d4dc2:	60a0      	str	r0, [r4, #8]
}
   d4dc4:	bd10      	pop	{r4, pc}
	...

000d4dc8 <_ZN5CDoor15createStatusStrEv>:
void CDoor::createStatusStr() {
   d4dc8:	b510      	push	{r4, lr}
   d4dca:	b086      	sub	sp, #24
  statusStr = String::format("{\"Close\":%d, \"doorProximity\":%.2f, \"sensorVal\":%d, \"alert\":%d}",
   d4dcc:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d4dce:	9301      	str	r3, [sp, #4]
   d4dd0:	6883      	ldr	r3, [r0, #8]
   d4dd2:	9300      	str	r3, [sp, #0]
   d4dd4:	6843      	ldr	r3, [r0, #4]
   d4dd6:	7802      	ldrb	r2, [r0, #0]
   d4dd8:	4907      	ldr	r1, [pc, #28]	; (d4df8 <_ZN5CDoor15createStatusStrEv+0x30>)
void CDoor::createStatusStr() {
   d4dda:	4604      	mov	r4, r0
  statusStr = String::format("{\"Close\":%d, \"doorProximity\":%.2f, \"sensorVal\":%d, \"alert\":%d}",
   d4ddc:	a802      	add	r0, sp, #8
   d4dde:	f001 facb 	bl	d6378 <_ZN6String6formatEPKcz>
  );
   d4de2:	a902      	add	r1, sp, #8
   d4de4:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d4de8:	f001 fa80 	bl	d62ec <_ZN6StringaSEOS_>
   d4dec:	a802      	add	r0, sp, #8
   d4dee:	f001 f9e7 	bl	d61c0 <_ZN6StringD1Ev>
}
   d4df2:	b006      	add	sp, #24
   d4df4:	bd10      	pop	{r4, pc}
   d4df6:	bf00      	nop
   d4df8:	000d7660 	.word	0x000d7660

000d4dfc <_ZN5CDoor7executeEv>:
void CDoor::execute() {
   d4dfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  switch (state_D0) {
   d4e00:	7806      	ldrb	r6, [r0, #0]
void CDoor::execute() {
   d4e02:	4604      	mov	r4, r0
  switch (state_D0) {
   d4e04:	2e00      	cmp	r6, #0
   d4e06:	d03a      	beq.n	d4e7e <_ZN5CDoor7executeEv+0x82>
   d4e08:	2e01      	cmp	r6, #1
   d4e0a:	d130      	bne.n	d4e6e <_ZN5CDoor7executeEv+0x72>
      readSensorVal();
   d4e0c:	f7ff ffd4 	bl	d4db8 <_ZN5CDoor13readSensorValEv>
      if (curSensorVal < sensorMin) curSensorVal = sensorMin;
   d4e10:	6925      	ldr	r5, [r4, #16]
   d4e12:	68a0      	ldr	r0, [r4, #8]
      if (curSensorVal > sensorMax) curSensorVal = sensorMax;
   d4e14:	68e7      	ldr	r7, [r4, #12]
   d4e16:	42a8      	cmp	r0, r5
   d4e18:	bfb8      	it	lt
   d4e1a:	4628      	movlt	r0, r5
      double amountOfProximity = (double)(curSensorVal-sensorMin) / (double)(sensorMax-sensorMin);
   d4e1c:	4287      	cmp	r7, r0
   d4e1e:	bfd4      	ite	le
   d4e20:	ebc5 0007 	rsble	r0, r5, r7
   d4e24:	ebc5 0000 	rsbgt	r0, r5, r0
   d4e28:	f001 ff10 	bl	d6c4c <__aeabi_i2d>
   d4e2c:	4680      	mov	r8, r0
   d4e2e:	1b78      	subs	r0, r7, r5
   d4e30:	4689      	mov	r9, r1
   d4e32:	f001 ff0b 	bl	d6c4c <__aeabi_i2d>
   d4e36:	4602      	mov	r2, r0
   d4e38:	460b      	mov	r3, r1
   d4e3a:	4640      	mov	r0, r8
   d4e3c:	4649      	mov	r1, r9
   d4e3e:	f002 f899 	bl	d6f74 <__aeabi_ddiv>
      if (amountOfProximity < 0.5) {
   d4e42:	4b2e      	ldr	r3, [pc, #184]	; (d4efc <_ZN5CDoor7executeEv+0x100>)
   d4e44:	2200      	movs	r2, #0
   d4e46:	f002 f9dd 	bl	d7204 <__aeabi_dcmplt>
        digitalWrite(LED2, HIGH);
   d4e4a:	4631      	mov	r1, r6
      if (amountOfProximity < 0.5) {
   d4e4c:	4605      	mov	r5, r0
   d4e4e:	b140      	cbz	r0, d4e62 <_ZN5CDoor7executeEv+0x66>
        digitalWrite(LED2, HIGH);
   d4e50:	2007      	movs	r0, #7
   d4e52:	f001 fd36 	bl	d68c2 <digitalWrite>
        oldTime = Time.now();
   d4e56:	f001 faf3 	bl	d6440 <_ZN9TimeClass3nowEv>
        state_D0 = CDoor::S_OPEN;
   d4e5a:	2300      	movs	r3, #0
        oldTime = Time.now();
   d4e5c:	6160      	str	r0, [r4, #20]
        state_D0 = CDoor::S_CLOSED;
   d4e5e:	7023      	strb	r3, [r4, #0]
   d4e60:	e005      	b.n	d4e6e <_ZN5CDoor7executeEv+0x72>
        RGB.brightness(0);
   d4e62:	f001 f98c 	bl	d617e <_ZN8RGBClass10brightnessEhb>
        digitalWrite(LED2, LOW);
   d4e66:	4629      	mov	r1, r5
        digitalWrite(LED2, HIGH);
   d4e68:	2007      	movs	r0, #7
   d4e6a:	f001 fd2a 	bl	d68c2 <digitalWrite>
  cmd.DoorProximity = INVALID_CMD;
   d4e6e:	4b24      	ldr	r3, [pc, #144]	; (d4f00 <_ZN5CDoor7executeEv+0x104>)
  createStatusStr();
   d4e70:	4620      	mov	r0, r4
  cmd.Status = INVALID_CMD;
   d4e72:	e9c4 3307 	strd	r3, r3, [r4, #28]
}
   d4e76:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  createStatusStr();
   d4e7a:	f7ff bfa5 	b.w	d4dc8 <_ZN5CDoor15createStatusStrEv>
      readSensorVal();
   d4e7e:	f7ff ff9b 	bl	d4db8 <_ZN5CDoor13readSensorValEv>
      if (curSensorVal < sensorMin) curSensorVal = sensorMin;
   d4e82:	6925      	ldr	r5, [r4, #16]
   d4e84:	68a0      	ldr	r0, [r4, #8]
      if (curSensorVal > sensorMax) curSensorVal = sensorMax;
   d4e86:	f8d4 800c 	ldr.w	r8, [r4, #12]
   d4e8a:	42a8      	cmp	r0, r5
   d4e8c:	bfb8      	it	lt
   d4e8e:	4628      	movlt	r0, r5
      double amountOfProximity = (double)(curSensorVal-sensorMin) / (double)(sensorMax-sensorMin);
   d4e90:	4580      	cmp	r8, r0
   d4e92:	bfd4      	ite	le
   d4e94:	ebc5 0008 	rsble	r0, r5, r8
   d4e98:	ebc5 0000 	rsbgt	r0, r5, r0
   d4e9c:	f001 fed6 	bl	d6c4c <__aeabi_i2d>
   d4ea0:	4606      	mov	r6, r0
   d4ea2:	eba8 0005 	sub.w	r0, r8, r5
   d4ea6:	460f      	mov	r7, r1
   d4ea8:	f001 fed0 	bl	d6c4c <__aeabi_i2d>
   d4eac:	4602      	mov	r2, r0
   d4eae:	460b      	mov	r3, r1
   d4eb0:	4630      	mov	r0, r6
   d4eb2:	4639      	mov	r1, r7
   d4eb4:	f002 f85e 	bl	d6f74 <__aeabi_ddiv>
   d4eb8:	460f      	mov	r7, r1
   d4eba:	4606      	mov	r6, r0
      doorProximity = amountOfProximity;
   d4ebc:	f002 f9ca 	bl	d7254 <__aeabi_d2iz>
   d4ec0:	6060      	str	r0, [r4, #4]
      newTime = Time.now();
   d4ec2:	f001 fabd 	bl	d6440 <_ZN9TimeClass3nowEv>
      if (newTime - oldTime > 10) {
   d4ec6:	6963      	ldr	r3, [r4, #20]
      newTime = Time.now();
   d4ec8:	61a0      	str	r0, [r4, #24]
      if (newTime - oldTime > 10) {
   d4eca:	1ac0      	subs	r0, r0, r3
   d4ecc:	280a      	cmp	r0, #10
   d4ece:	bfd4      	ite	le
   d4ed0:	2000      	movle	r0, #0
   d4ed2:	2001      	movgt	r0, #1
   d4ed4:	6260      	str	r0, [r4, #36]	; 0x24
      if (amountOfProximity < 0.5) {
   d4ed6:	4639      	mov	r1, r7
   d4ed8:	4b08      	ldr	r3, [pc, #32]	; (d4efc <_ZN5CDoor7executeEv+0x100>)
   d4eda:	2200      	movs	r2, #0
   d4edc:	4630      	mov	r0, r6
   d4ede:	f002 f991 	bl	d7204 <__aeabi_dcmplt>
   d4ee2:	4601      	mov	r1, r0
   d4ee4:	b108      	cbz	r0, d4eea <_ZN5CDoor7executeEv+0xee>
        digitalWrite(LED2, HIGH);
   d4ee6:	2101      	movs	r1, #1
   d4ee8:	e7be      	b.n	d4e68 <_ZN5CDoor7executeEv+0x6c>
        digitalWrite(LED2, LOW);
   d4eea:	2007      	movs	r0, #7
   d4eec:	f001 fce9 	bl	d68c2 <digitalWrite>
        oldTime = Time.now();
   d4ef0:	f001 faa6 	bl	d6440 <_ZN9TimeClass3nowEv>
        state_D0 = CDoor::S_CLOSED;
   d4ef4:	2301      	movs	r3, #1
        oldTime = Time.now();
   d4ef6:	6160      	str	r0, [r4, #20]
        state_D0 = CDoor::S_CLOSED;
   d4ef8:	e7b1      	b.n	d4e5e <_ZN5CDoor7executeEv+0x62>
   d4efa:	bf00      	nop
   d4efc:	3fe00000 	.word	0x3fe00000
   d4f00:	fffe7961 	.word	0xfffe7961

000d4f04 <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE>:
void CDoor::cmdProcessing(JSONValue cmdJson) {
   d4f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4f08:	b08a      	sub	sp, #40	; 0x28
        JSONObjectIterator(value.t_, value.d_) {
   d4f0a:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4f0c:	f851 3b04 	ldr.w	r3, [r1], #4
   d4f10:	9300      	str	r3, [sp, #0]
   d4f12:	4604      	mov	r4, r0
   d4f14:	a801      	add	r0, sp, #4
   d4f16:	f7ff f915 	bl	d4144 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d4f1a:	466a      	mov	r2, sp
   d4f1c:	4629      	mov	r1, r5
   d4f1e:	a804      	add	r0, sp, #16
   d4f20:	f000 ff36 	bl	d5d90 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4f24:	a801      	add	r0, sp, #4
   d4f26:	f7ff f8f7 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return strcmp(s_, str) == 0;
   d4f2a:	4e32      	ldr	r6, [pc, #200]	; (d4ff4 <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0xf0>)
   d4f2c:	4f32      	ldr	r7, [pc, #200]	; (d4ff8 <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0xf4>)
   d4f2e:	f8df 80d0 	ldr.w	r8, [pc, #208]	; d5000 <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0xfc>
  while (iter.next()) {
   d4f32:	a804      	add	r0, sp, #16
   d4f34:	f000 ff44 	bl	d5dc0 <_ZN5spark18JSONObjectIterator4nextEv>
   d4f38:	2800      	cmp	r0, #0
   d4f3a:	d055      	beq.n	d4fe8 <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0xe4>
    if (iter.name() == "min") {
   d4f3c:	a904      	add	r1, sp, #16
   d4f3e:	4668      	mov	r0, sp
   d4f40:	f7ff f907 	bl	d4152 <_ZNK5spark18JSONObjectIterator4nameEv>
   d4f44:	4631      	mov	r1, r6
   d4f46:	9802      	ldr	r0, [sp, #8]
   d4f48:	f002 fa06 	bl	d7358 <strcmp>
   d4f4c:	4605      	mov	r5, r0
   d4f4e:	a801      	add	r0, sp, #4
   d4f50:	f7ff f8e2 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      sensorMin = iter.value().toInt();
   d4f54:	a904      	add	r1, sp, #16
   d4f56:	4668      	mov	r0, sp
    if (iter.name() == "min") {
   d4f58:	b94d      	cbnz	r5, d4f6e <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0x6a>
      sensorMin = iter.value().toInt();
   d4f5a:	f7ff f90e 	bl	d417a <_ZNK5spark18JSONObjectIterator5valueEv>
   d4f5e:	4668      	mov	r0, sp
   d4f60:	f000 fde2 	bl	d5b28 <_ZNK5spark9JSONValue5toIntEv>
   d4f64:	6120      	str	r0, [r4, #16]
   d4f66:	a801      	add	r0, sp, #4
   d4f68:	f7ff f8d6 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4f6c:	e7e1      	b.n	d4f32 <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0x2e>
    } else if (iter.name() == "max") {
   d4f6e:	f7ff f8f0 	bl	d4152 <_ZNK5spark18JSONObjectIterator4nameEv>
   d4f72:	4639      	mov	r1, r7
   d4f74:	9802      	ldr	r0, [sp, #8]
   d4f76:	f002 f9ef 	bl	d7358 <strcmp>
   d4f7a:	4605      	mov	r5, r0
   d4f7c:	a801      	add	r0, sp, #4
   d4f7e:	f7ff f8cb 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      sensorMax = iter.value().toInt();
   d4f82:	a904      	add	r1, sp, #16
   d4f84:	4668      	mov	r0, sp
    } else if (iter.name() == "max") {
   d4f86:	b935      	cbnz	r5, d4f96 <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0x92>
      sensorMax = iter.value().toInt();
   d4f88:	f7ff f8f7 	bl	d417a <_ZNK5spark18JSONObjectIterator5valueEv>
   d4f8c:	4668      	mov	r0, sp
   d4f8e:	f000 fdcb 	bl	d5b28 <_ZNK5spark9JSONValue5toIntEv>
   d4f92:	60e0      	str	r0, [r4, #12]
   d4f94:	e7e7      	b.n	d4f66 <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0x62>
    } else if (iter.name() == "doorProximity") {
   d4f96:	f7ff f8dc 	bl	d4152 <_ZNK5spark18JSONObjectIterator4nameEv>
   d4f9a:	4641      	mov	r1, r8
   d4f9c:	9802      	ldr	r0, [sp, #8]
   d4f9e:	f002 f9db 	bl	d7358 <strcmp>
   d4fa2:	4605      	mov	r5, r0
   d4fa4:	a801      	add	r0, sp, #4
   d4fa6:	f7ff f8b7 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      cmd.DoorProximity = iter.value().toInt();
   d4faa:	a904      	add	r1, sp, #16
   d4fac:	4668      	mov	r0, sp
    } else if (iter.name() == "doorProximity") {
   d4fae:	b935      	cbnz	r5, d4fbe <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0xba>
      cmd.DoorProximity = iter.value().toInt();
   d4fb0:	f7ff f8e3 	bl	d417a <_ZNK5spark18JSONObjectIterator5valueEv>
   d4fb4:	4668      	mov	r0, sp
   d4fb6:	f000 fdb7 	bl	d5b28 <_ZNK5spark9JSONValue5toIntEv>
   d4fba:	6220      	str	r0, [r4, #32]
   d4fbc:	e7d3      	b.n	d4f66 <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0x62>
    } else if (iter.name() == "status") {
   d4fbe:	f7ff f8c8 	bl	d4152 <_ZNK5spark18JSONObjectIterator4nameEv>
   d4fc2:	490e      	ldr	r1, [pc, #56]	; (d4ffc <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0xf8>)
   d4fc4:	9802      	ldr	r0, [sp, #8]
   d4fc6:	f002 f9c7 	bl	d7358 <strcmp>
   d4fca:	4605      	mov	r5, r0
   d4fcc:	a801      	add	r0, sp, #4
   d4fce:	f7ff f8a3 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4fd2:	2d00      	cmp	r5, #0
   d4fd4:	d1ad      	bne.n	d4f32 <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0x2e>
      cmd.Status = (int)iter.value().toBool();
   d4fd6:	a904      	add	r1, sp, #16
   d4fd8:	4668      	mov	r0, sp
   d4fda:	f7ff f8ce 	bl	d417a <_ZNK5spark18JSONObjectIterator5valueEv>
   d4fde:	4668      	mov	r0, sp
   d4fe0:	f000 fd64 	bl	d5aac <_ZNK5spark9JSONValue6toBoolEv>
   d4fe4:	61e0      	str	r0, [r4, #28]
   d4fe6:	e7be      	b.n	d4f66 <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0x62>
   d4fe8:	a805      	add	r0, sp, #20
   d4fea:	f7ff f895 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4fee:	b00a      	add	sp, #40	; 0x28
   d4ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4ff4:	000d7645 	.word	0x000d7645
   d4ff8:	000d7649 	.word	0x000d7649
   d4ffc:	000d76ad 	.word	0x000d76ad
   d5000:	000d769f 	.word	0x000d769f

000d5004 <_ZN11CThermostatC1Ev>:
#include "thermostat.h"

CThermostat::CThermostat() {
   d5004:	b538      	push	{r3, r4, r5, lr}
   d5006:	490f      	ldr	r1, [pc, #60]	; (d5044 <_ZN11CThermostatC1Ev+0x40>)
   d5008:	4604      	mov	r4, r0
   d500a:	f104 0524 	add.w	r5, r4, #36	; 0x24
   d500e:	f001 f922 	bl	d6256 <_ZN6StringC1EPKc>
   d5012:	490c      	ldr	r1, [pc, #48]	; (d5044 <_ZN11CThermostatC1Ev+0x40>)
   d5014:	f104 0010 	add.w	r0, r4, #16
   d5018:	f001 f91d 	bl	d6256 <_ZN6StringC1EPKc>
   d501c:	4909      	ldr	r1, [pc, #36]	; (d5044 <_ZN11CThermostatC1Ev+0x40>)
   d501e:	4628      	mov	r0, r5
   d5020:	f001 f919 	bl	d6256 <_ZN6StringC1EPKc>
struct ThermostatStruct {
   d5024:	2300      	movs	r3, #0
   d5026:	2264      	movs	r2, #100	; 0x64
   d5028:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
   d502c:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
  sys_state = CThermostat::S_OFF;
  fan_state = CThermostat::S_ON;

  statusStr = "{}";
   d5030:	4905      	ldr	r1, [pc, #20]	; (d5048 <_ZN11CThermostatC1Ev+0x44>)
   d5032:	6463      	str	r3, [r4, #68]	; 0x44
   d5034:	64a2      	str	r2, [r4, #72]	; 0x48
  sys_state = CThermostat::S_OFF;
   d5036:	8423      	strh	r3, [r4, #32]
  statusStr = "{}";
   d5038:	4628      	mov	r0, r5
   d503a:	f001 f95f 	bl	d62fc <_ZN6StringaSEPKc>
  //resetCmd();
}
   d503e:	4620      	mov	r0, r4
   d5040:	bd38      	pop	{r3, r4, r5, pc}
   d5042:	bf00      	nop
   d5044:	000d7793 	.word	0x000d7793
   d5048:	000d7601 	.word	0x000d7601

000d504c <_ZN11CThermostat15createStatusStrEv>:
  thermoStruct.cool = INVALID_CMD;
  thermoStruct.assignedTemp = INVALID_CMD;
  thermoStruct.fanMode = INVALID_CMD;
}

void CThermostat::createStatusStr() {
   d504c:	b510      	push	{r4, lr}
   d504e:	b088      	sub	sp, #32
    statusStr = String::format("{\"heatStatus\":%d,\"coolStatus\":%d,\"fanStatus\":%d, \"power\":%d, \"setTemp\":%d}",
   d5050:	6c43      	ldr	r3, [r0, #68]	; 0x44
   d5052:	9302      	str	r3, [sp, #8]
   d5054:	6c83      	ldr	r3, [r0, #72]	; 0x48
   d5056:	9301      	str	r3, [sp, #4]
   d5058:	6c03      	ldr	r3, [r0, #64]	; 0x40
   d505a:	9300      	str	r3, [sp, #0]
   d505c:	e9d0 230d 	ldrd	r2, r3, [r0, #52]	; 0x34
void CThermostat::createStatusStr() {
   d5060:	4604      	mov	r4, r0
    statusStr = String::format("{\"heatStatus\":%d,\"coolStatus\":%d,\"fanStatus\":%d, \"power\":%d, \"setTemp\":%d}",
   d5062:	4907      	ldr	r1, [pc, #28]	; (d5080 <_ZN11CThermostat15createStatusStrEv+0x34>)
   d5064:	a804      	add	r0, sp, #16
   d5066:	f001 f987 	bl	d6378 <_ZN6String6formatEPKcz>
      thermoStruct.heat, thermoStruct.cool, thermoStruct.fanStatus, thermoStruct.powerConsumption, thermoStruct.assignedTemp);
   d506a:	a904      	add	r1, sp, #16
   d506c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d5070:	f001 f93c 	bl	d62ec <_ZN6StringaSEOS_>
   d5074:	a804      	add	r0, sp, #16
   d5076:	f001 f8a3 	bl	d61c0 <_ZN6StringD1Ev>
}
   d507a:	b008      	add	sp, #32
   d507c:	bd10      	pop	{r4, pc}
   d507e:	bf00      	nop
   d5080:	000d76b4 	.word	0x000d76b4

000d5084 <_ZN11CThermostat7executeEf>:
  switch (sys_state) {
   d5084:	f890 3020 	ldrb.w	r3, [r0, #32]
   d5088:	2b01      	cmp	r3, #1
   d508a:	d006      	beq.n	d509a <_ZN11CThermostat7executeEf+0x16>
   d508c:	2b02      	cmp	r3, #2
   d508e:	d043      	beq.n	d5118 <_ZN11CThermostat7executeEf+0x94>
   d5090:	2b00      	cmp	r3, #0
   d5092:	d157      	bne.n	d5144 <_ZN11CThermostat7executeEf+0xc0>
      thermoStruct.heat = 0;
   d5094:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
   d5098:	e017      	b.n	d50ca <_ZN11CThermostat7executeEf+0x46>
      if (currTemp > thermoStruct.assignedTemp) {
   d509a:	edd0 7a11 	vldr	s15, [r0, #68]	; 0x44
   d509e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d50a2:	eef4 7ac0 	vcmpe.f32	s15, s0
   d50a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d50aa:	d511      	bpl.n	d50d0 <_ZN11CThermostat7executeEf+0x4c>
        thermoStruct.heat = 1;
   d50ac:	6343      	str	r3, [r0, #52]	; 0x34
        thermoStruct.cool = 0;
   d50ae:	2300      	movs	r3, #0
   d50b0:	6383      	str	r3, [r0, #56]	; 0x38
        if (thermoStruct.fanMode == 1) {
   d50b2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   d50b4:	2b01      	cmp	r3, #1
   d50b6:	d105      	bne.n	d50c4 <_ZN11CThermostat7executeEf+0x40>
          thermoStruct.fanStatus = 1;
   d50b8:	2301      	movs	r3, #1
   d50ba:	6403      	str	r3, [r0, #64]	; 0x40
          thermoStruct.powerConsumption = 600;
   d50bc:	f44f 7316 	mov.w	r3, #600	; 0x258
      thermoStruct.powerConsumption = 100;
   d50c0:	6483      	str	r3, [r0, #72]	; 0x48
      break;
   d50c2:	e03f      	b.n	d5144 <_ZN11CThermostat7executeEf+0xc0>
        } else if (thermoStruct.fanMode == 0) {
   d50c4:	2b00      	cmp	r3, #0
   d50c6:	d13d      	bne.n	d5144 <_ZN11CThermostat7executeEf+0xc0>
          thermoStruct.fanStatus = 0;
   d50c8:	2300      	movs	r3, #0
      thermoStruct.fanStatus = 0;
   d50ca:	6403      	str	r3, [r0, #64]	; 0x40
      thermoStruct.powerConsumption = 100;
   d50cc:	2364      	movs	r3, #100	; 0x64
   d50ce:	e7f7      	b.n	d50c0 <_ZN11CThermostat7executeEf+0x3c>
      } else if (currTemp < thermoStruct.assignedTemp) {
   d50d0:	dd11      	ble.n	d50f6 <_ZN11CThermostat7executeEf+0x72>
        thermoStruct.heat = 2;
   d50d2:	2302      	movs	r3, #2
   d50d4:	6343      	str	r3, [r0, #52]	; 0x34
        thermoStruct.cool = 0;
   d50d6:	2300      	movs	r3, #0
   d50d8:	6383      	str	r3, [r0, #56]	; 0x38
        if (thermoStruct.fanMode == 1) {
   d50da:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   d50dc:	2b01      	cmp	r3, #1
   d50de:	d104      	bne.n	d50ea <_ZN11CThermostat7executeEf+0x66>
          thermoStruct.fanStatus = 1;
   d50e0:	2301      	movs	r3, #1
   d50e2:	6403      	str	r3, [r0, #64]	; 0x40
          thermoStruct.powerConsumption = 4400;
   d50e4:	f241 1330 	movw	r3, #4400	; 0x1130
   d50e8:	e7ea      	b.n	d50c0 <_ZN11CThermostat7executeEf+0x3c>
        } else if (thermoStruct.fanMode == 0) {
   d50ea:	bb5b      	cbnz	r3, d5144 <_ZN11CThermostat7executeEf+0xc0>
          thermoStruct.fanStatus = 0;
   d50ec:	2300      	movs	r3, #0
   d50ee:	6403      	str	r3, [r0, #64]	; 0x40
          thermoStruct.powerConsumption = 3800;
   d50f0:	f640 63d8 	movw	r3, #3800	; 0xed8
   d50f4:	e7e4      	b.n	d50c0 <_ZN11CThermostat7executeEf+0x3c>
      } else if (currTemp == thermoStruct.assignedTemp) {
   d50f6:	eef4 7a40 	vcmp.f32	s15, s0
   d50fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d50fe:	d121      	bne.n	d5144 <_ZN11CThermostat7executeEf+0xc0>
        thermoStruct.heat = 0;
   d5100:	2300      	movs	r3, #0
   d5102:	6343      	str	r3, [r0, #52]	; 0x34
        thermoStruct.cool = 2;
   d5104:	2302      	movs	r3, #2
   d5106:	6383      	str	r3, [r0, #56]	; 0x38
        } else if (thermoStruct.fanMode == 0) {
   d5108:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   d510a:	2b01      	cmp	r3, #1
   d510c:	d81a      	bhi.n	d5144 <_ZN11CThermostat7executeEf+0xc0>
          thermoStruct.fanStatus = 1;
   d510e:	2301      	movs	r3, #1
   d5110:	6403      	str	r3, [r0, #64]	; 0x40
          thermoStruct.powerConsumption = 3700;
   d5112:	f640 6374 	movw	r3, #3700	; 0xe74
   d5116:	e7d3      	b.n	d50c0 <_ZN11CThermostat7executeEf+0x3c>
      if (currTemp > thermoStruct.assignedTemp) {
   d5118:	edd0 7a11 	vldr	s15, [r0, #68]	; 0x44
   d511c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5120:	eef4 7ac0 	vcmpe.f32	s15, s0
   d5124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5128:	d503      	bpl.n	d5132 <_ZN11CThermostat7executeEf+0xae>
        thermoStruct.heat = 0;
   d512a:	2300      	movs	r3, #0
   d512c:	6343      	str	r3, [r0, #52]	; 0x34
        thermoStruct.cool = 1;
   d512e:	2301      	movs	r3, #1
   d5130:	e7e9      	b.n	d5106 <_ZN11CThermostat7executeEf+0x82>
      } else if (currTemp < thermoStruct.assignedTemp) {
   d5132:	dd02      	ble.n	d513a <_ZN11CThermostat7executeEf+0xb6>
        thermoStruct.heat = 0;
   d5134:	2200      	movs	r2, #0
   d5136:	6342      	str	r2, [r0, #52]	; 0x34
        thermoStruct.cool = 2;
   d5138:	e7ba      	b.n	d50b0 <_ZN11CThermostat7executeEf+0x2c>
      } else if (currTemp == thermoStruct.assignedTemp) {
   d513a:	eef4 7a40 	vcmp.f32	s15, s0
   d513e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5142:	d0c7      	beq.n	d50d4 <_ZN11CThermostat7executeEf+0x50>
  createStatusStr();
   d5144:	f7ff bf82 	b.w	d504c <_ZN11CThermostat15createStatusStrEv>

000d5148 <_ZN11CThermostat13cmdProcessingEN5spark9JSONValueE>:
void CThermostat::cmdProcessing(JSONValue cmdJson) {
   d5148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d514c:	b08c      	sub	sp, #48	; 0x30
        JSONObjectIterator(value.t_, value.d_) {
   d514e:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5150:	f851 3b04 	ldr.w	r3, [r1], #4
   d5154:	9302      	str	r3, [sp, #8]
   d5156:	4604      	mov	r4, r0
   d5158:	a803      	add	r0, sp, #12
   d515a:	f7fe fff3 	bl	d4144 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d515e:	aa02      	add	r2, sp, #8
   d5160:	4629      	mov	r1, r5
   d5162:	a806      	add	r0, sp, #24
   d5164:	f000 fe14 	bl	d5d90 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d5168:	a803      	add	r0, sp, #12
   d516a:	f7fe ffd5 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return strcmp(s_, str) == 0;
   d516e:	4e42      	ldr	r6, [pc, #264]	; (d5278 <_ZN11CThermostat13cmdProcessingEN5spark9JSONValueE+0x130>)
   d5170:	4f42      	ldr	r7, [pc, #264]	; (d527c <_ZN11CThermostat13cmdProcessingEN5spark9JSONValueE+0x134>)
   d5172:	f8df 8114 	ldr.w	r8, [pc, #276]	; d5288 <_ZN11CThermostat13cmdProcessingEN5spark9JSONValueE+0x140>
  while (iter.next()) {
   d5176:	a806      	add	r0, sp, #24
   d5178:	f000 fe22 	bl	d5dc0 <_ZN5spark18JSONObjectIterator4nextEv>
   d517c:	2800      	cmp	r0, #0
   d517e:	d075      	beq.n	d526c <_ZN11CThermostat13cmdProcessingEN5spark9JSONValueE+0x124>
    if (iter.name() == "heat") {
   d5180:	a906      	add	r1, sp, #24
   d5182:	a802      	add	r0, sp, #8
   d5184:	f7fe ffe5 	bl	d4152 <_ZNK5spark18JSONObjectIterator4nameEv>
   d5188:	9804      	ldr	r0, [sp, #16]
   d518a:	4631      	mov	r1, r6
   d518c:	f002 f8e4 	bl	d7358 <strcmp>
   d5190:	4605      	mov	r5, r0
   d5192:	a803      	add	r0, sp, #12
   d5194:	f7fe ffc0 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5198:	b91d      	cbnz	r5, d51a2 <_ZN11CThermostat13cmdProcessingEN5spark9JSONValueE+0x5a>
      sys_state = CThermostat::S_HEAT;
   d519a:	2301      	movs	r3, #1
      sys_state = CThermostat::S_COOL;
   d519c:	f884 3020 	strb.w	r3, [r4, #32]
   d51a0:	e7e9      	b.n	d5176 <_ZN11CThermostat13cmdProcessingEN5spark9JSONValueE+0x2e>
    } else if (iter.name() == "cool") {
   d51a2:	a906      	add	r1, sp, #24
   d51a4:	a802      	add	r0, sp, #8
   d51a6:	f7fe ffd4 	bl	d4152 <_ZNK5spark18JSONObjectIterator4nameEv>
   d51aa:	9804      	ldr	r0, [sp, #16]
   d51ac:	4639      	mov	r1, r7
   d51ae:	f002 f8d3 	bl	d7358 <strcmp>
   d51b2:	4605      	mov	r5, r0
   d51b4:	a803      	add	r0, sp, #12
   d51b6:	f7fe ffaf 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d51ba:	b90d      	cbnz	r5, d51c0 <_ZN11CThermostat13cmdProcessingEN5spark9JSONValueE+0x78>
      sys_state = CThermostat::S_COOL;
   d51bc:	2302      	movs	r3, #2
   d51be:	e7ed      	b.n	d519c <_ZN11CThermostat13cmdProcessingEN5spark9JSONValueE+0x54>
    } else if (iter.name() == "off") {
   d51c0:	a906      	add	r1, sp, #24
   d51c2:	a802      	add	r0, sp, #8
   d51c4:	f7fe ffc5 	bl	d4152 <_ZNK5spark18JSONObjectIterator4nameEv>
   d51c8:	9804      	ldr	r0, [sp, #16]
   d51ca:	4641      	mov	r1, r8
   d51cc:	f002 f8c4 	bl	d7358 <strcmp>
   d51d0:	4605      	mov	r5, r0
   d51d2:	a803      	add	r0, sp, #12
   d51d4:	f7fe ffa0 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d51d8:	b915      	cbnz	r5, d51e0 <_ZN11CThermostat13cmdProcessingEN5spark9JSONValueE+0x98>
      sys_state = CThermostat::S_OFF;
   d51da:	f884 5020 	strb.w	r5, [r4, #32]
   d51de:	e7ca      	b.n	d5176 <_ZN11CThermostat13cmdProcessingEN5spark9JSONValueE+0x2e>
    } else if (iter.name() == "fan") {
   d51e0:	a906      	add	r1, sp, #24
   d51e2:	a802      	add	r0, sp, #8
   d51e4:	f7fe ffb5 	bl	d4152 <_ZNK5spark18JSONObjectIterator4nameEv>
   d51e8:	4925      	ldr	r1, [pc, #148]	; (d5280 <_ZN11CThermostat13cmdProcessingEN5spark9JSONValueE+0x138>)
   d51ea:	9804      	ldr	r0, [sp, #16]
   d51ec:	f002 f8b4 	bl	d7358 <strcmp>
   d51f0:	4605      	mov	r5, r0
   d51f2:	a803      	add	r0, sp, #12
   d51f4:	f7fe ff90 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d51f8:	b9b5      	cbnz	r5, d5228 <_ZN11CThermostat13cmdProcessingEN5spark9JSONValueE+0xe0>
    return JSONValue(v_, d_);
   d51fa:	9d0a      	ldr	r5, [sp, #40]	; 0x28
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d51fc:	9b06      	ldr	r3, [sp, #24]
   d51fe:	9300      	str	r3, [sp, #0]
   d5200:	a907      	add	r1, sp, #28
   d5202:	a801      	add	r0, sp, #4
   d5204:	f7fe ff9e 	bl	d4144 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d5208:	466a      	mov	r2, sp
   d520a:	4629      	mov	r1, r5
   d520c:	a802      	add	r0, sp, #8
   d520e:	f000 fc16 	bl	d5a3e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d5212:	a801      	add	r0, sp, #4
   d5214:	f7fe ff80 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      thermoStruct.fanMode = iter.value().toInt();
   d5218:	a802      	add	r0, sp, #8
   d521a:	f000 fc85 	bl	d5b28 <_ZNK5spark9JSONValue5toIntEv>
   d521e:	63e0      	str	r0, [r4, #60]	; 0x3c
   d5220:	a803      	add	r0, sp, #12
   d5222:	f7fe ff79 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5226:	e7a6      	b.n	d5176 <_ZN11CThermostat13cmdProcessingEN5spark9JSONValueE+0x2e>
    } else if (iter.name() == "temp") {
   d5228:	a906      	add	r1, sp, #24
   d522a:	a802      	add	r0, sp, #8
   d522c:	f7fe ff91 	bl	d4152 <_ZNK5spark18JSONObjectIterator4nameEv>
    return strcmp(s_, str) == 0;
   d5230:	4914      	ldr	r1, [pc, #80]	; (d5284 <_ZN11CThermostat13cmdProcessingEN5spark9JSONValueE+0x13c>)
   d5232:	9804      	ldr	r0, [sp, #16]
   d5234:	f002 f890 	bl	d7358 <strcmp>
   d5238:	4605      	mov	r5, r0
   d523a:	a803      	add	r0, sp, #12
   d523c:	f7fe ff6c 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5240:	2d00      	cmp	r5, #0
   d5242:	d198      	bne.n	d5176 <_ZN11CThermostat13cmdProcessingEN5spark9JSONValueE+0x2e>
    return JSONValue(v_, d_);
   d5244:	9d0a      	ldr	r5, [sp, #40]	; 0x28
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5246:	9b06      	ldr	r3, [sp, #24]
   d5248:	9300      	str	r3, [sp, #0]
   d524a:	a907      	add	r1, sp, #28
   d524c:	a801      	add	r0, sp, #4
   d524e:	f7fe ff79 	bl	d4144 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d5252:	466a      	mov	r2, sp
   d5254:	4629      	mov	r1, r5
   d5256:	a802      	add	r0, sp, #8
   d5258:	f000 fbf1 	bl	d5a3e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d525c:	a801      	add	r0, sp, #4
   d525e:	f7fe ff5b 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      thermoStruct.assignedTemp = iter.value().toInt();
   d5262:	a802      	add	r0, sp, #8
   d5264:	f000 fc60 	bl	d5b28 <_ZNK5spark9JSONValue5toIntEv>
   d5268:	6460      	str	r0, [r4, #68]	; 0x44
   d526a:	e7d9      	b.n	d5220 <_ZN11CThermostat13cmdProcessingEN5spark9JSONValueE+0xd8>
   d526c:	a807      	add	r0, sp, #28
   d526e:	f7fe ff53 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5272:	b00c      	add	sp, #48	; 0x30
   d5274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5278:	000d76ff 	.word	0x000d76ff
   d527c:	000d7704 	.word	0x000d7704
   d5280:	000d770d 	.word	0x000d770d
   d5284:	000d7711 	.word	0x000d7711
   d5288:	000d7709 	.word	0x000d7709

000d528c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d528c:	b508      	push	{r3, lr}
   d528e:	4b02      	ldr	r3, [pc, #8]	; (d5298 <os_mutex_recursive_create+0xc>)
   d5290:	681b      	ldr	r3, [r3, #0]
   d5292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5294:	9301      	str	r3, [sp, #4]
   d5296:	bd08      	pop	{r3, pc}
   d5298:	00030248 	.word	0x00030248

000d529c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d529c:	b508      	push	{r3, lr}
   d529e:	4b02      	ldr	r3, [pc, #8]	; (d52a8 <HAL_RNG_GetRandomNumber+0xc>)
   d52a0:	681b      	ldr	r3, [r3, #0]
   d52a2:	685b      	ldr	r3, [r3, #4]
   d52a4:	9301      	str	r3, [sp, #4]
   d52a6:	bd08      	pop	{r3, pc}
   d52a8:	00030218 	.word	0x00030218

000d52ac <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d52ac:	b508      	push	{r3, lr}
   d52ae:	4b02      	ldr	r3, [pc, #8]	; (d52b8 <HAL_Delay_Microseconds+0xc>)
   d52b0:	681b      	ldr	r3, [r3, #0]
   d52b2:	68db      	ldr	r3, [r3, #12]
   d52b4:	9301      	str	r3, [sp, #4]
   d52b6:	bd08      	pop	{r3, pc}
   d52b8:	00030218 	.word	0x00030218

000d52bc <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d52bc:	b508      	push	{r3, lr}
   d52be:	4b02      	ldr	r3, [pc, #8]	; (d52c8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d52c0:	681b      	ldr	r3, [r3, #0]
   d52c2:	695b      	ldr	r3, [r3, #20]
   d52c4:	9301      	str	r3, [sp, #4]
   d52c6:	bd08      	pop	{r3, pc}
   d52c8:	00030218 	.word	0x00030218

000d52cc <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d52cc:	b508      	push	{r3, lr}
   d52ce:	4b02      	ldr	r3, [pc, #8]	; (d52d8 <hal_rtc_time_is_valid+0xc>)
   d52d0:	681b      	ldr	r3, [r3, #0]
   d52d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d52d4:	9301      	str	r3, [sp, #4]
   d52d6:	bd08      	pop	{r3, pc}
   d52d8:	00030218 	.word	0x00030218

000d52dc <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d52dc:	b508      	push	{r3, lr}
   d52de:	4b02      	ldr	r3, [pc, #8]	; (d52e8 <hal_rtc_get_time+0xc>)
   d52e0:	681b      	ldr	r3, [r3, #0]
   d52e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d52e4:	9301      	str	r3, [sp, #4]
   d52e6:	bd08      	pop	{r3, pc}
   d52e8:	00030218 	.word	0x00030218

000d52ec <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d52ec:	b508      	push	{r3, lr}
   d52ee:	4b02      	ldr	r3, [pc, #8]	; (d52f8 <HAL_Pin_Map+0xc>)
   d52f0:	681b      	ldr	r3, [r3, #0]
   d52f2:	681b      	ldr	r3, [r3, #0]
   d52f4:	9301      	str	r3, [sp, #4]
   d52f6:	bd08      	pop	{r3, pc}
   d52f8:	0003022c 	.word	0x0003022c

000d52fc <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d52fc:	b508      	push	{r3, lr}
   d52fe:	4b02      	ldr	r3, [pc, #8]	; (d5308 <HAL_Validate_Pin_Function+0xc>)
   d5300:	681b      	ldr	r3, [r3, #0]
   d5302:	685b      	ldr	r3, [r3, #4]
   d5304:	9301      	str	r3, [sp, #4]
   d5306:	bd08      	pop	{r3, pc}
   d5308:	0003022c 	.word	0x0003022c

000d530c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d530c:	b508      	push	{r3, lr}
   d530e:	4b02      	ldr	r3, [pc, #8]	; (d5318 <HAL_Pin_Mode+0xc>)
   d5310:	681b      	ldr	r3, [r3, #0]
   d5312:	689b      	ldr	r3, [r3, #8]
   d5314:	9301      	str	r3, [sp, #4]
   d5316:	bd08      	pop	{r3, pc}
   d5318:	0003022c 	.word	0x0003022c

000d531c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d531c:	b508      	push	{r3, lr}
   d531e:	4b02      	ldr	r3, [pc, #8]	; (d5328 <HAL_Get_Pin_Mode+0xc>)
   d5320:	681b      	ldr	r3, [r3, #0]
   d5322:	68db      	ldr	r3, [r3, #12]
   d5324:	9301      	str	r3, [sp, #4]
   d5326:	bd08      	pop	{r3, pc}
   d5328:	0003022c 	.word	0x0003022c

000d532c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d532c:	b508      	push	{r3, lr}
   d532e:	4b02      	ldr	r3, [pc, #8]	; (d5338 <HAL_GPIO_Write+0xc>)
   d5330:	681b      	ldr	r3, [r3, #0]
   d5332:	691b      	ldr	r3, [r3, #16]
   d5334:	9301      	str	r3, [sp, #4]
   d5336:	bd08      	pop	{r3, pc}
   d5338:	0003022c 	.word	0x0003022c

000d533c <HAL_Interrupts_Enable_All>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d533c:	b508      	push	{r3, lr}
   d533e:	4b02      	ldr	r3, [pc, #8]	; (d5348 <HAL_Interrupts_Enable_All+0xc>)
   d5340:	681b      	ldr	r3, [r3, #0]
   d5342:	6a1b      	ldr	r3, [r3, #32]
   d5344:	9301      	str	r3, [sp, #4]
   d5346:	bd08      	pop	{r3, pc}
   d5348:	0003022c 	.word	0x0003022c

000d534c <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d534c:	b508      	push	{r3, lr}
   d534e:	4b02      	ldr	r3, [pc, #8]	; (d5358 <HAL_Interrupts_Disable_All+0xc>)
   d5350:	681b      	ldr	r3, [r3, #0]
   d5352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5354:	9301      	str	r3, [sp, #4]
   d5356:	bd08      	pop	{r3, pc}
   d5358:	0003022c 	.word	0x0003022c

000d535c <hal_adc_read>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d535c:	b508      	push	{r3, lr}
   d535e:	4b02      	ldr	r3, [pc, #8]	; (d5368 <hal_adc_read+0xc>)
   d5360:	681b      	ldr	r3, [r3, #0]
   d5362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5364:	9301      	str	r3, [sp, #4]
   d5366:	bd08      	pop	{r3, pc}
   d5368:	0003022c 	.word	0x0003022c

000d536c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d536c:	b508      	push	{r3, lr}
   d536e:	4b02      	ldr	r3, [pc, #8]	; (d5378 <hal_i2c_write+0xc>)
   d5370:	681b      	ldr	r3, [r3, #0]
   d5372:	6a1b      	ldr	r3, [r3, #32]
   d5374:	9301      	str	r3, [sp, #4]
   d5376:	bd08      	pop	{r3, pc}
   d5378:	00030228 	.word	0x00030228

000d537c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d537c:	b508      	push	{r3, lr}
   d537e:	4b02      	ldr	r3, [pc, #8]	; (d5388 <hal_i2c_available+0xc>)
   d5380:	681b      	ldr	r3, [r3, #0]
   d5382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5384:	9301      	str	r3, [sp, #4]
   d5386:	bd08      	pop	{r3, pc}
   d5388:	00030228 	.word	0x00030228

000d538c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d538c:	b508      	push	{r3, lr}
   d538e:	4b02      	ldr	r3, [pc, #8]	; (d5398 <hal_i2c_read+0xc>)
   d5390:	681b      	ldr	r3, [r3, #0]
   d5392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5394:	9301      	str	r3, [sp, #4]
   d5396:	bd08      	pop	{r3, pc}
   d5398:	00030228 	.word	0x00030228

000d539c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d539c:	b508      	push	{r3, lr}
   d539e:	4b02      	ldr	r3, [pc, #8]	; (d53a8 <hal_i2c_peek+0xc>)
   d53a0:	681b      	ldr	r3, [r3, #0]
   d53a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d53a4:	9301      	str	r3, [sp, #4]
   d53a6:	bd08      	pop	{r3, pc}
   d53a8:	00030228 	.word	0x00030228

000d53ac <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d53ac:	b508      	push	{r3, lr}
   d53ae:	4b02      	ldr	r3, [pc, #8]	; (d53b8 <hal_i2c_flush+0xc>)
   d53b0:	681b      	ldr	r3, [r3, #0]
   d53b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d53b4:	9301      	str	r3, [sp, #4]
   d53b6:	bd08      	pop	{r3, pc}
   d53b8:	00030228 	.word	0x00030228

000d53bc <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d53bc:	b508      	push	{r3, lr}
   d53be:	4b02      	ldr	r3, [pc, #8]	; (d53c8 <hal_i2c_is_enabled+0xc>)
   d53c0:	681b      	ldr	r3, [r3, #0]
   d53c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d53c4:	9301      	str	r3, [sp, #4]
   d53c6:	bd08      	pop	{r3, pc}
   d53c8:	00030228 	.word	0x00030228

000d53cc <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d53cc:	b508      	push	{r3, lr}
   d53ce:	4b02      	ldr	r3, [pc, #8]	; (d53d8 <hal_i2c_init+0xc>)
   d53d0:	681b      	ldr	r3, [r3, #0]
   d53d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d53d4:	9301      	str	r3, [sp, #4]
   d53d6:	bd08      	pop	{r3, pc}
   d53d8:	00030228 	.word	0x00030228

000d53dc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d53dc:	b508      	push	{r3, lr}
   d53de:	4b02      	ldr	r3, [pc, #8]	; (d53e8 <inet_inet_ntop+0xc>)
   d53e0:	681b      	ldr	r3, [r3, #0]
   d53e2:	695b      	ldr	r3, [r3, #20]
   d53e4:	9301      	str	r3, [sp, #4]
   d53e6:	bd08      	pop	{r3, pc}
   d53e8:	00030264 	.word	0x00030264

000d53ec <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d53ec:	b508      	push	{r3, lr}
   d53ee:	4b02      	ldr	r3, [pc, #8]	; (d53f8 <netdb_freeaddrinfo+0xc>)
   d53f0:	681b      	ldr	r3, [r3, #0]
   d53f2:	689b      	ldr	r3, [r3, #8]
   d53f4:	9301      	str	r3, [sp, #4]
   d53f6:	bd08      	pop	{r3, pc}
   d53f8:	00030268 	.word	0x00030268

000d53fc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d53fc:	b508      	push	{r3, lr}
   d53fe:	4b02      	ldr	r3, [pc, #8]	; (d5408 <netdb_getaddrinfo+0xc>)
   d5400:	681b      	ldr	r3, [r3, #0]
   d5402:	68db      	ldr	r3, [r3, #12]
   d5404:	9301      	str	r3, [sp, #4]
   d5406:	bd08      	pop	{r3, pc}
   d5408:	00030268 	.word	0x00030268

000d540c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d540c:	b508      	push	{r3, lr}
   d540e:	4b02      	ldr	r3, [pc, #8]	; (d5418 <hal_spi_init+0xc>)
   d5410:	681b      	ldr	r3, [r3, #0]
   d5412:	69db      	ldr	r3, [r3, #28]
   d5414:	9301      	str	r3, [sp, #4]
   d5416:	bd08      	pop	{r3, pc}
   d5418:	00030230 	.word	0x00030230

000d541c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d541c:	b508      	push	{r3, lr}
   d541e:	4b02      	ldr	r3, [pc, #8]	; (d5428 <hal_spi_is_enabled+0xc>)
   d5420:	681b      	ldr	r3, [r3, #0]
   d5422:	6a1b      	ldr	r3, [r3, #32]
   d5424:	9301      	str	r3, [sp, #4]
   d5426:	bd08      	pop	{r3, pc}
   d5428:	00030230 	.word	0x00030230

000d542c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d542c:	b508      	push	{r3, lr}
   d542e:	4b02      	ldr	r3, [pc, #8]	; (d5438 <hal_usart_init+0xc>)
   d5430:	681b      	ldr	r3, [r3, #0]
   d5432:	681b      	ldr	r3, [r3, #0]
   d5434:	9301      	str	r3, [sp, #4]
   d5436:	bd08      	pop	{r3, pc}
   d5438:	0003023c 	.word	0x0003023c

000d543c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d543c:	b508      	push	{r3, lr}
   d543e:	4b02      	ldr	r3, [pc, #8]	; (d5448 <hal_usart_write+0xc>)
   d5440:	681b      	ldr	r3, [r3, #0]
   d5442:	68db      	ldr	r3, [r3, #12]
   d5444:	9301      	str	r3, [sp, #4]
   d5446:	bd08      	pop	{r3, pc}
   d5448:	0003023c 	.word	0x0003023c

000d544c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d544c:	b508      	push	{r3, lr}
   d544e:	4b02      	ldr	r3, [pc, #8]	; (d5458 <hal_usart_available+0xc>)
   d5450:	681b      	ldr	r3, [r3, #0]
   d5452:	691b      	ldr	r3, [r3, #16]
   d5454:	9301      	str	r3, [sp, #4]
   d5456:	bd08      	pop	{r3, pc}
   d5458:	0003023c 	.word	0x0003023c

000d545c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d545c:	b508      	push	{r3, lr}
   d545e:	4b02      	ldr	r3, [pc, #8]	; (d5468 <hal_usart_read+0xc>)
   d5460:	681b      	ldr	r3, [r3, #0]
   d5462:	695b      	ldr	r3, [r3, #20]
   d5464:	9301      	str	r3, [sp, #4]
   d5466:	bd08      	pop	{r3, pc}
   d5468:	0003023c 	.word	0x0003023c

000d546c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d546c:	b508      	push	{r3, lr}
   d546e:	4b02      	ldr	r3, [pc, #8]	; (d5478 <hal_usart_peek+0xc>)
   d5470:	681b      	ldr	r3, [r3, #0]
   d5472:	699b      	ldr	r3, [r3, #24]
   d5474:	9301      	str	r3, [sp, #4]
   d5476:	bd08      	pop	{r3, pc}
   d5478:	0003023c 	.word	0x0003023c

000d547c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d547c:	b508      	push	{r3, lr}
   d547e:	4b02      	ldr	r3, [pc, #8]	; (d5488 <hal_usart_flush+0xc>)
   d5480:	681b      	ldr	r3, [r3, #0]
   d5482:	69db      	ldr	r3, [r3, #28]
   d5484:	9301      	str	r3, [sp, #4]
   d5486:	bd08      	pop	{r3, pc}
   d5488:	0003023c 	.word	0x0003023c

000d548c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d548c:	b508      	push	{r3, lr}
   d548e:	4b02      	ldr	r3, [pc, #8]	; (d5498 <hal_usart_is_enabled+0xc>)
   d5490:	681b      	ldr	r3, [r3, #0]
   d5492:	6a1b      	ldr	r3, [r3, #32]
   d5494:	9301      	str	r3, [sp, #4]
   d5496:	bd08      	pop	{r3, pc}
   d5498:	0003023c 	.word	0x0003023c

000d549c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d549c:	b508      	push	{r3, lr}
   d549e:	4b02      	ldr	r3, [pc, #8]	; (d54a8 <hal_usart_available_data_for_write+0xc>)
   d54a0:	681b      	ldr	r3, [r3, #0]
   d54a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d54a4:	9301      	str	r3, [sp, #4]
   d54a6:	bd08      	pop	{r3, pc}
   d54a8:	0003023c 	.word	0x0003023c

000d54ac <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d54ac:	b508      	push	{r3, lr}
   d54ae:	4b02      	ldr	r3, [pc, #8]	; (d54b8 <HAL_USB_USART_Init+0xc>)
   d54b0:	681b      	ldr	r3, [r3, #0]
   d54b2:	681b      	ldr	r3, [r3, #0]
   d54b4:	9301      	str	r3, [sp, #4]
   d54b6:	bd08      	pop	{r3, pc}
   d54b8:	0003024c 	.word	0x0003024c

000d54bc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d54bc:	b508      	push	{r3, lr}
   d54be:	4b02      	ldr	r3, [pc, #8]	; (d54c8 <HAL_USB_USART_Begin+0xc>)
   d54c0:	681b      	ldr	r3, [r3, #0]
   d54c2:	685b      	ldr	r3, [r3, #4]
   d54c4:	9301      	str	r3, [sp, #4]
   d54c6:	bd08      	pop	{r3, pc}
   d54c8:	0003024c 	.word	0x0003024c

000d54cc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d54cc:	b508      	push	{r3, lr}
   d54ce:	4b02      	ldr	r3, [pc, #8]	; (d54d8 <HAL_USB_USART_Available_Data+0xc>)
   d54d0:	681b      	ldr	r3, [r3, #0]
   d54d2:	691b      	ldr	r3, [r3, #16]
   d54d4:	9301      	str	r3, [sp, #4]
   d54d6:	bd08      	pop	{r3, pc}
   d54d8:	0003024c 	.word	0x0003024c

000d54dc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d54dc:	b508      	push	{r3, lr}
   d54de:	4b02      	ldr	r3, [pc, #8]	; (d54e8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d54e0:	681b      	ldr	r3, [r3, #0]
   d54e2:	695b      	ldr	r3, [r3, #20]
   d54e4:	9301      	str	r3, [sp, #4]
   d54e6:	bd08      	pop	{r3, pc}
   d54e8:	0003024c 	.word	0x0003024c

000d54ec <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d54ec:	b508      	push	{r3, lr}
   d54ee:	4b02      	ldr	r3, [pc, #8]	; (d54f8 <HAL_USB_USART_Receive_Data+0xc>)
   d54f0:	681b      	ldr	r3, [r3, #0]
   d54f2:	699b      	ldr	r3, [r3, #24]
   d54f4:	9301      	str	r3, [sp, #4]
   d54f6:	bd08      	pop	{r3, pc}
   d54f8:	0003024c 	.word	0x0003024c

000d54fc <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d54fc:	b508      	push	{r3, lr}
   d54fe:	4b02      	ldr	r3, [pc, #8]	; (d5508 <HAL_USB_USART_Send_Data+0xc>)
   d5500:	681b      	ldr	r3, [r3, #0]
   d5502:	69db      	ldr	r3, [r3, #28]
   d5504:	9301      	str	r3, [sp, #4]
   d5506:	bd08      	pop	{r3, pc}
   d5508:	0003024c 	.word	0x0003024c

000d550c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d550c:	b508      	push	{r3, lr}
   d550e:	4b02      	ldr	r3, [pc, #8]	; (d5518 <HAL_USB_USART_Flush_Data+0xc>)
   d5510:	681b      	ldr	r3, [r3, #0]
   d5512:	6a1b      	ldr	r3, [r3, #32]
   d5514:	9301      	str	r3, [sp, #4]
   d5516:	bd08      	pop	{r3, pc}
   d5518:	0003024c 	.word	0x0003024c

000d551c <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
   d551c:	b508      	push	{r3, lr}
   d551e:	4b02      	ldr	r3, [pc, #8]	; (d5528 <LED_SetSignalingColor+0xc>)
   d5520:	681b      	ldr	r3, [r3, #0]
   d5522:	685b      	ldr	r3, [r3, #4]
   d5524:	9301      	str	r3, [sp, #4]
   d5526:	bd08      	pop	{r3, pc}
   d5528:	00030260 	.word	0x00030260

000d552c <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
   d552c:	b508      	push	{r3, lr}
   d552e:	4b02      	ldr	r3, [pc, #8]	; (d5538 <LED_Signaling_Start+0xc>)
   d5530:	681b      	ldr	r3, [r3, #0]
   d5532:	689b      	ldr	r3, [r3, #8]
   d5534:	9301      	str	r3, [sp, #4]
   d5536:	bd08      	pop	{r3, pc}
   d5538:	00030260 	.word	0x00030260

000d553c <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
   d553c:	b508      	push	{r3, lr}
   d553e:	4b02      	ldr	r3, [pc, #8]	; (d5548 <LED_Signaling_Stop+0xc>)
   d5540:	681b      	ldr	r3, [r3, #0]
   d5542:	68db      	ldr	r3, [r3, #12]
   d5544:	9301      	str	r3, [sp, #4]
   d5546:	bd08      	pop	{r3, pc}
   d5548:	00030260 	.word	0x00030260

000d554c <LED_SetBrightness>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
   d554c:	b508      	push	{r3, lr}
   d554e:	4b02      	ldr	r3, [pc, #8]	; (d5558 <LED_SetBrightness+0xc>)
   d5550:	681b      	ldr	r3, [r3, #0]
   d5552:	691b      	ldr	r3, [r3, #16]
   d5554:	9301      	str	r3, [sp, #4]
   d5556:	bd08      	pop	{r3, pc}
   d5558:	00030260 	.word	0x00030260

000d555c <LED_RGB_IsOverRidden>:
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   d555c:	b508      	push	{r3, lr}
   d555e:	4b02      	ldr	r3, [pc, #8]	; (d5568 <LED_RGB_IsOverRidden+0xc>)
   d5560:	681b      	ldr	r3, [r3, #0]
   d5562:	699b      	ldr	r3, [r3, #24]
   d5564:	9301      	str	r3, [sp, #4]
   d5566:	bd08      	pop	{r3, pc}
   d5568:	00030260 	.word	0x00030260

000d556c <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   d556c:	b508      	push	{r3, lr}
   d556e:	4b02      	ldr	r3, [pc, #8]	; (d5578 <LED_On+0xc>)
   d5570:	681b      	ldr	r3, [r3, #0]
   d5572:	69db      	ldr	r3, [r3, #28]
   d5574:	9301      	str	r3, [sp, #4]
   d5576:	bd08      	pop	{r3, pc}
   d5578:	00030260 	.word	0x00030260

000d557c <Get_LED_Brightness>:
DYNALIB_FN(8, services, LED_Off, void(Led_TypeDef))
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))
   d557c:	b508      	push	{r3, lr}
   d557e:	4b02      	ldr	r3, [pc, #8]	; (d5588 <Get_LED_Brightness+0xc>)
   d5580:	681b      	ldr	r3, [r3, #0]
   d5582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5584:	9301      	str	r3, [sp, #4]
   d5586:	bd08      	pop	{r3, pc}
   d5588:	00030260 	.word	0x00030260

000d558c <panic_>:

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d558c:	b508      	push	{r3, lr}
   d558e:	4b02      	ldr	r3, [pc, #8]	; (d5598 <panic_+0xc>)
   d5590:	681b      	ldr	r3, [r3, #0]
   d5592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5594:	9301      	str	r3, [sp, #4]
   d5596:	bd08      	pop	{r3, pc}
   d5598:	00030260 	.word	0x00030260

000d559c <jsmn_init>:

DYNALIB_FN(14, services, jsmn_init, void(jsmn_parser*, void*))
   d559c:	b508      	push	{r3, lr}
   d559e:	4b02      	ldr	r3, [pc, #8]	; (d55a8 <jsmn_init+0xc>)
   d55a0:	681b      	ldr	r3, [r3, #0]
   d55a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d55a4:	9301      	str	r3, [sp, #4]
   d55a6:	bd08      	pop	{r3, pc}
   d55a8:	00030260 	.word	0x00030260

000d55ac <jsmn_parse_deprecated>:
DYNALIB_FN(15, services, jsmn_parse_deprecated, jsmnerr_t(jsmn_parser*, const char*, size_t, jsmntok_t*, unsigned int, void*))
   d55ac:	b508      	push	{r3, lr}
   d55ae:	4b02      	ldr	r3, [pc, #8]	; (d55b8 <jsmn_parse_deprecated+0xc>)
   d55b0:	681b      	ldr	r3, [r3, #0]
   d55b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d55b4:	9301      	str	r3, [sp, #4]
   d55b6:	bd08      	pop	{r3, pc}
   d55b8:	00030260 	.word	0x00030260

000d55bc <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d55bc:	b508      	push	{r3, lr}
   d55be:	4b02      	ldr	r3, [pc, #8]	; (d55c8 <system_mode+0xc>)
   d55c0:	681b      	ldr	r3, [r3, #0]
   d55c2:	681b      	ldr	r3, [r3, #0]
   d55c4:	9301      	str	r3, [sp, #4]
   d55c6:	bd08      	pop	{r3, pc}
   d55c8:	00030220 	.word	0x00030220

000d55cc <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d55cc:	b508      	push	{r3, lr}
   d55ce:	4b02      	ldr	r3, [pc, #8]	; (d55d8 <set_system_mode+0xc>)
   d55d0:	681b      	ldr	r3, [r3, #0]
   d55d2:	685b      	ldr	r3, [r3, #4]
   d55d4:	9301      	str	r3, [sp, #4]
   d55d6:	bd08      	pop	{r3, pc}
   d55d8:	00030220 	.word	0x00030220

000d55dc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d55dc:	b508      	push	{r3, lr}
   d55de:	4b02      	ldr	r3, [pc, #8]	; (d55e8 <system_delay_ms+0xc>)
   d55e0:	681b      	ldr	r3, [r3, #0]
   d55e2:	695b      	ldr	r3, [r3, #20]
   d55e4:	9301      	str	r3, [sp, #4]
   d55e6:	bd08      	pop	{r3, pc}
   d55e8:	00030220 	.word	0x00030220

000d55ec <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d55ec:	b508      	push	{r3, lr}
   d55ee:	4b02      	ldr	r3, [pc, #8]	; (d55f8 <system_thread_set_state+0xc>)
   d55f0:	681b      	ldr	r3, [r3, #0]
   d55f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d55f4:	9301      	str	r3, [sp, #4]
   d55f6:	bd08      	pop	{r3, pc}
   d55f8:	00030220 	.word	0x00030220

000d55fc <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d55fc:	b508      	push	{r3, lr}
   d55fe:	4b02      	ldr	r3, [pc, #8]	; (d5608 <system_thread_get_state+0xc>)
   d5600:	681b      	ldr	r3, [r3, #0]
   d5602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5604:	9301      	str	r3, [sp, #4]
   d5606:	bd08      	pop	{r3, pc}
   d5608:	00030220 	.word	0x00030220

000d560c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d560c:	b508      	push	{r3, lr}
   d560e:	4b03      	ldr	r3, [pc, #12]	; (d561c <system_ctrl_set_app_request_handler+0x10>)
   d5610:	681b      	ldr	r3, [r3, #0]
   d5612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5616:	9301      	str	r3, [sp, #4]
   d5618:	bd08      	pop	{r3, pc}
   d561a:	0000      	.short	0x0000
   d561c:	00030220 	.word	0x00030220

000d5620 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5620:	b508      	push	{r3, lr}
   d5622:	4b03      	ldr	r3, [pc, #12]	; (d5630 <system_ctrl_set_result+0x10>)
   d5624:	681b      	ldr	r3, [r3, #0]
   d5626:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d562a:	9301      	str	r3, [sp, #4]
   d562c:	bd08      	pop	{r3, pc}
   d562e:	0000      	.short	0x0000
   d5630:	00030220 	.word	0x00030220

000d5634 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d5634:	b508      	push	{r3, lr}
   d5636:	4b02      	ldr	r3, [pc, #8]	; (d5640 <spark_process+0xc>)
   d5638:	681b      	ldr	r3, [r3, #0]
   d563a:	689b      	ldr	r3, [r3, #8]
   d563c:	9301      	str	r3, [sp, #4]
   d563e:	bd08      	pop	{r3, pc}
   d5640:	00030244 	.word	0x00030244

000d5644 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d5644:	b508      	push	{r3, lr}
   d5646:	4b02      	ldr	r3, [pc, #8]	; (d5650 <spark_cloud_flag_connected+0xc>)
   d5648:	681b      	ldr	r3, [r3, #0]
   d564a:	695b      	ldr	r3, [r3, #20]
   d564c:	9301      	str	r3, [sp, #4]
   d564e:	bd08      	pop	{r3, pc}
   d5650:	00030244 	.word	0x00030244

000d5654 <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d5654:	b508      	push	{r3, lr}
   d5656:	4b02      	ldr	r3, [pc, #8]	; (d5660 <spark_sync_time_pending+0xc>)
   d5658:	681b      	ldr	r3, [r3, #0]
   d565a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d565c:	9301      	str	r3, [sp, #4]
   d565e:	bd08      	pop	{r3, pc}
   d5660:	00030244 	.word	0x00030244

000d5664 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5664:	b508      	push	{r3, lr}
   d5666:	4b02      	ldr	r3, [pc, #8]	; (d5670 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5668:	681b      	ldr	r3, [r3, #0]
   d566a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d566c:	9301      	str	r3, [sp, #4]
   d566e:	bd08      	pop	{r3, pc}
   d5670:	00030244 	.word	0x00030244

000d5674 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5674:	b508      	push	{r3, lr}
   d5676:	4b02      	ldr	r3, [pc, #8]	; (d5680 <network_connect+0xc>)
   d5678:	681b      	ldr	r3, [r3, #0]
   d567a:	685b      	ldr	r3, [r3, #4]
   d567c:	9301      	str	r3, [sp, #4]
   d567e:	bd08      	pop	{r3, pc}
   d5680:	00030240 	.word	0x00030240

000d5684 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5684:	b508      	push	{r3, lr}
   d5686:	4b02      	ldr	r3, [pc, #8]	; (d5690 <network_connecting+0xc>)
   d5688:	681b      	ldr	r3, [r3, #0]
   d568a:	689b      	ldr	r3, [r3, #8]
   d568c:	9301      	str	r3, [sp, #4]
   d568e:	bd08      	pop	{r3, pc}
   d5690:	00030240 	.word	0x00030240

000d5694 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5694:	b508      	push	{r3, lr}
   d5696:	4b02      	ldr	r3, [pc, #8]	; (d56a0 <network_disconnect+0xc>)
   d5698:	681b      	ldr	r3, [r3, #0]
   d569a:	68db      	ldr	r3, [r3, #12]
   d569c:	9301      	str	r3, [sp, #4]
   d569e:	bd08      	pop	{r3, pc}
   d56a0:	00030240 	.word	0x00030240

000d56a4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d56a4:	b508      	push	{r3, lr}
   d56a6:	4b02      	ldr	r3, [pc, #8]	; (d56b0 <network_ready+0xc>)
   d56a8:	681b      	ldr	r3, [r3, #0]
   d56aa:	691b      	ldr	r3, [r3, #16]
   d56ac:	9301      	str	r3, [sp, #4]
   d56ae:	bd08      	pop	{r3, pc}
   d56b0:	00030240 	.word	0x00030240

000d56b4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d56b4:	b508      	push	{r3, lr}
   d56b6:	4b02      	ldr	r3, [pc, #8]	; (d56c0 <network_on+0xc>)
   d56b8:	681b      	ldr	r3, [r3, #0]
   d56ba:	695b      	ldr	r3, [r3, #20]
   d56bc:	9301      	str	r3, [sp, #4]
   d56be:	bd08      	pop	{r3, pc}
   d56c0:	00030240 	.word	0x00030240

000d56c4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d56c4:	b508      	push	{r3, lr}
   d56c6:	4b02      	ldr	r3, [pc, #8]	; (d56d0 <network_off+0xc>)
   d56c8:	681b      	ldr	r3, [r3, #0]
   d56ca:	699b      	ldr	r3, [r3, #24]
   d56cc:	9301      	str	r3, [sp, #4]
   d56ce:	bd08      	pop	{r3, pc}
   d56d0:	00030240 	.word	0x00030240

000d56d4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d56d4:	b508      	push	{r3, lr}
   d56d6:	4b02      	ldr	r3, [pc, #8]	; (d56e0 <network_listen+0xc>)
   d56d8:	681b      	ldr	r3, [r3, #0]
   d56da:	69db      	ldr	r3, [r3, #28]
   d56dc:	9301      	str	r3, [sp, #4]
   d56de:	bd08      	pop	{r3, pc}
   d56e0:	00030240 	.word	0x00030240

000d56e4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d56e4:	b508      	push	{r3, lr}
   d56e6:	4b02      	ldr	r3, [pc, #8]	; (d56f0 <network_listening+0xc>)
   d56e8:	681b      	ldr	r3, [r3, #0]
   d56ea:	6a1b      	ldr	r3, [r3, #32]
   d56ec:	9301      	str	r3, [sp, #4]
   d56ee:	bd08      	pop	{r3, pc}
   d56f0:	00030240 	.word	0x00030240

000d56f4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d56f4:	b508      	push	{r3, lr}
   d56f6:	4b02      	ldr	r3, [pc, #8]	; (d5700 <network_set_listen_timeout+0xc>)
   d56f8:	681b      	ldr	r3, [r3, #0]
   d56fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d56fc:	9301      	str	r3, [sp, #4]
   d56fe:	bd08      	pop	{r3, pc}
   d5700:	00030240 	.word	0x00030240

000d5704 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5704:	b508      	push	{r3, lr}
   d5706:	4b02      	ldr	r3, [pc, #8]	; (d5710 <network_get_listen_timeout+0xc>)
   d5708:	681b      	ldr	r3, [r3, #0]
   d570a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d570c:	9301      	str	r3, [sp, #4]
   d570e:	bd08      	pop	{r3, pc}
   d5710:	00030240 	.word	0x00030240

000d5714 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d5714:	b508      	push	{r3, lr}
   d5716:	4b02      	ldr	r3, [pc, #8]	; (d5720 <network_is_on+0xc>)
   d5718:	681b      	ldr	r3, [r3, #0]
   d571a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d571c:	9301      	str	r3, [sp, #4]
   d571e:	bd08      	pop	{r3, pc}
   d5720:	00030240 	.word	0x00030240

000d5724 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d5724:	b508      	push	{r3, lr}
   d5726:	4b02      	ldr	r3, [pc, #8]	; (d5730 <network_is_off+0xc>)
   d5728:	681b      	ldr	r3, [r3, #0]
   d572a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d572c:	9301      	str	r3, [sp, #4]
   d572e:	bd08      	pop	{r3, pc}
   d5730:	00030240 	.word	0x00030240

000d5734 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5734:	b508      	push	{r3, lr}
   d5736:	4b02      	ldr	r3, [pc, #8]	; (d5740 <malloc+0xc>)
   d5738:	681b      	ldr	r3, [r3, #0]
   d573a:	681b      	ldr	r3, [r3, #0]
   d573c:	9301      	str	r3, [sp, #4]
   d573e:	bd08      	pop	{r3, pc}
   d5740:	0003021c 	.word	0x0003021c

000d5744 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5744:	b508      	push	{r3, lr}
   d5746:	4b02      	ldr	r3, [pc, #8]	; (d5750 <free+0xc>)
   d5748:	681b      	ldr	r3, [r3, #0]
   d574a:	685b      	ldr	r3, [r3, #4]
   d574c:	9301      	str	r3, [sp, #4]
   d574e:	bd08      	pop	{r3, pc}
   d5750:	0003021c 	.word	0x0003021c

000d5754 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5754:	b508      	push	{r3, lr}
   d5756:	4b02      	ldr	r3, [pc, #8]	; (d5760 <realloc+0xc>)
   d5758:	681b      	ldr	r3, [r3, #0]
   d575a:	689b      	ldr	r3, [r3, #8]
   d575c:	9301      	str	r3, [sp, #4]
   d575e:	bd08      	pop	{r3, pc}
   d5760:	0003021c 	.word	0x0003021c

000d5764 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5764:	b508      	push	{r3, lr}
   d5766:	4b02      	ldr	r3, [pc, #8]	; (d5770 <vsnprintf+0xc>)
   d5768:	681b      	ldr	r3, [r3, #0]
   d576a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d576c:	9301      	str	r3, [sp, #4]
   d576e:	bd08      	pop	{r3, pc}
   d5770:	0003021c 	.word	0x0003021c

000d5774 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d5774:	b508      	push	{r3, lr}
   d5776:	4b02      	ldr	r3, [pc, #8]	; (d5780 <newlib_impure_ptr_callback+0xc>)
   d5778:	681b      	ldr	r3, [r3, #0]
   d577a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d577c:	9301      	str	r3, [sp, #4]
   d577e:	bd08      	pop	{r3, pc}
   d5780:	0003021c 	.word	0x0003021c

000d5784 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5784:	2100      	movs	r1, #0
   d5786:	f7ff bf29 	b.w	d55dc <system_delay_ms>
	...

000d578c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d578c:	4802      	ldr	r0, [pc, #8]	; (d5798 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d578e:	2300      	movs	r3, #0
   d5790:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d5792:	f7ff bd7b 	b.w	d528c <os_mutex_recursive_create>
   d5796:	bf00      	nop
   d5798:	2003e5a8 	.word	0x2003e5a8

000d579c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d579c:	2200      	movs	r2, #0
   d579e:	6840      	ldr	r0, [r0, #4]
   d57a0:	4611      	mov	r1, r2
   d57a2:	f7ff bf9f 	b.w	d56e4 <network_listening>

000d57a6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d57a6:	2200      	movs	r2, #0
   d57a8:	6840      	ldr	r0, [r0, #4]
   d57aa:	4611      	mov	r1, r2
   d57ac:	f7ff bfaa 	b.w	d5704 <network_get_listen_timeout>

000d57b0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d57b0:	6840      	ldr	r0, [r0, #4]
   d57b2:	2200      	movs	r2, #0
   d57b4:	f7ff bf9e 	b.w	d56f4 <network_set_listen_timeout>

000d57b8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d57b8:	6840      	ldr	r0, [r0, #4]
   d57ba:	2200      	movs	r2, #0
   d57bc:	f081 0101 	eor.w	r1, r1, #1
   d57c0:	f7ff bf88 	b.w	d56d4 <network_listen>

000d57c4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d57c4:	2300      	movs	r3, #0
   d57c6:	6840      	ldr	r0, [r0, #4]
   d57c8:	461a      	mov	r2, r3
   d57ca:	4619      	mov	r1, r3
   d57cc:	f7ff bf7a 	b.w	d56c4 <network_off>

000d57d0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d57d0:	2300      	movs	r3, #0
   d57d2:	6840      	ldr	r0, [r0, #4]
   d57d4:	461a      	mov	r2, r3
   d57d6:	4619      	mov	r1, r3
   d57d8:	f7ff bf6c 	b.w	d56b4 <network_on>

000d57dc <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d57dc:	2200      	movs	r2, #0
   d57de:	6840      	ldr	r0, [r0, #4]
   d57e0:	4611      	mov	r1, r2
   d57e2:	f7ff bf5f 	b.w	d56a4 <network_ready>

000d57e6 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d57e6:	2200      	movs	r2, #0
   d57e8:	6840      	ldr	r0, [r0, #4]
   d57ea:	4611      	mov	r1, r2
   d57ec:	f7ff bf4a 	b.w	d5684 <network_connecting>

000d57f0 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d57f0:	6840      	ldr	r0, [r0, #4]
   d57f2:	2200      	movs	r2, #0
   d57f4:	2102      	movs	r1, #2
   d57f6:	f7ff bf4d 	b.w	d5694 <network_disconnect>

000d57fa <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d57fa:	2300      	movs	r3, #0
   d57fc:	6840      	ldr	r0, [r0, #4]
   d57fe:	461a      	mov	r2, r3
   d5800:	f7ff bf38 	b.w	d5674 <network_connect>

000d5804 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5804:	4b02      	ldr	r3, [pc, #8]	; (d5810 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5806:	2203      	movs	r2, #3
   d5808:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d580a:	4a02      	ldr	r2, [pc, #8]	; (d5814 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d580c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d580e:	4770      	bx	lr
   d5810:	2003e5ac 	.word	0x2003e5ac
   d5814:	000d7720 	.word	0x000d7720

000d5818 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d5818:	4770      	bx	lr

000d581a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d581a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d581c:	4606      	mov	r6, r0
   d581e:	4615      	mov	r5, r2
   d5820:	460c      	mov	r4, r1
   d5822:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5824:	42bc      	cmp	r4, r7
   d5826:	d006      	beq.n	d5836 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5828:	6833      	ldr	r3, [r6, #0]
   d582a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d582e:	689b      	ldr	r3, [r3, #8]
   d5830:	4630      	mov	r0, r6
   d5832:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d5834:	e7f6      	b.n	d5824 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d5836:	4628      	mov	r0, r5
   d5838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d583a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d583a:	7c00      	ldrb	r0, [r0, #16]
   d583c:	2200      	movs	r2, #0
   d583e:	f7ff bd95 	b.w	d536c <hal_i2c_write>

000d5842 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d5842:	7c00      	ldrb	r0, [r0, #16]
   d5844:	2100      	movs	r1, #0
   d5846:	f7ff bd99 	b.w	d537c <hal_i2c_available>

000d584a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d584a:	7c00      	ldrb	r0, [r0, #16]
   d584c:	2100      	movs	r1, #0
   d584e:	f7ff bd9d 	b.w	d538c <hal_i2c_read>

000d5852 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d5852:	7c00      	ldrb	r0, [r0, #16]
   d5854:	2100      	movs	r1, #0
   d5856:	f7ff bda1 	b.w	d539c <hal_i2c_peek>

000d585a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d585a:	7c00      	ldrb	r0, [r0, #16]
   d585c:	2100      	movs	r1, #0
   d585e:	f7ff bda5 	b.w	d53ac <hal_i2c_flush>

000d5862 <_ZN7TwoWireD0Ev>:
   d5862:	b510      	push	{r4, lr}
   d5864:	2114      	movs	r1, #20
   d5866:	4604      	mov	r4, r0
   d5868:	f001 f898 	bl	d699c <_ZdlPvj>
   d586c:	4620      	mov	r0, r4
   d586e:	bd10      	pop	{r4, pc}

000d5870 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d5870:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5872:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5876:	4604      	mov	r4, r0
   d5878:	4608      	mov	r0, r1
   d587a:	2100      	movs	r1, #0
   d587c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5880:	4b03      	ldr	r3, [pc, #12]	; (d5890 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d5882:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d5884:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d5886:	4611      	mov	r1, r2
   d5888:	f7ff fda0 	bl	d53cc <hal_i2c_init>
}
   d588c:	4620      	mov	r0, r4
   d588e:	bd10      	pop	{r4, pc}
   d5890:	000d775c 	.word	0x000d775c

000d5894 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d5894:	f7ff bd5a 	b.w	d534c <HAL_Interrupts_Disable_All>

000d5898 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d5898:	f7ff bd50 	b.w	d533c <HAL_Interrupts_Enable_All>

000d589c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d589c:	4770      	bx	lr

000d589e <_ZN9IPAddressD0Ev>:
   d589e:	b510      	push	{r4, lr}
   d58a0:	2118      	movs	r1, #24
   d58a2:	4604      	mov	r4, r0
   d58a4:	f001 f87a 	bl	d699c <_ZdlPvj>
   d58a8:	4620      	mov	r0, r4
   d58aa:	bd10      	pop	{r4, pc}

000d58ac <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d58ac:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d58ae:	7d03      	ldrb	r3, [r0, #20]
   d58b0:	2b06      	cmp	r3, #6
{
   d58b2:	b08d      	sub	sp, #52	; 0x34
   d58b4:	460e      	mov	r6, r1
   d58b6:	f100 0704 	add.w	r7, r0, #4
   d58ba:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d58be:	d012      	beq.n	d58e6 <_ZNK9IPAddress7printToER5Print+0x3a>
   d58c0:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d58c4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d58c8:	220a      	movs	r2, #10
   d58ca:	4630      	mov	r0, r6
   d58cc:	f000 fbe5 	bl	d609a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d58d0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d58d2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d58d4:	d019      	beq.n	d590a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d58d6:	2c00      	cmp	r4, #0
   d58d8:	d0f4      	beq.n	d58c4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d58da:	212e      	movs	r1, #46	; 0x2e
   d58dc:	4630      	mov	r0, r6
   d58de:	f000 fbcd 	bl	d607c <_ZN5Print5printEc>
   d58e2:	4404      	add	r4, r0
   d58e4:	e7ee      	b.n	d58c4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d58e6:	232f      	movs	r3, #47	; 0x2f
   d58e8:	466a      	mov	r2, sp
   d58ea:	4639      	mov	r1, r7
   d58ec:	200a      	movs	r0, #10
		buf[0] = 0;
   d58ee:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d58f2:	f7ff fd73 	bl	d53dc <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d58f6:	4668      	mov	r0, sp
   d58f8:	f001 fd40 	bl	d737c <strlen>
   d58fc:	6833      	ldr	r3, [r6, #0]
   d58fe:	4602      	mov	r2, r0
   d5900:	68db      	ldr	r3, [r3, #12]
   d5902:	4669      	mov	r1, sp
   d5904:	4630      	mov	r0, r6
   d5906:	4798      	blx	r3
   d5908:	4604      	mov	r4, r0
    }
    return n;
}
   d590a:	4620      	mov	r0, r4
   d590c:	b00d      	add	sp, #52	; 0x34
   d590e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5910 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d5910:	b510      	push	{r4, lr}
   d5912:	4b05      	ldr	r3, [pc, #20]	; (d5928 <_ZN9IPAddressC1Ev+0x18>)
   d5914:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5916:	2211      	movs	r2, #17
   d5918:	f840 3b04 	str.w	r3, [r0], #4
   d591c:	2100      	movs	r1, #0
   d591e:	f001 fcef 	bl	d7300 <memset>
}
   d5922:	4620      	mov	r0, r4
   d5924:	bd10      	pop	{r4, pc}
   d5926:	bf00      	nop
   d5928:	000d7784 	.word	0x000d7784

000d592c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d592c:	4603      	mov	r3, r0
   d592e:	4a07      	ldr	r2, [pc, #28]	; (d594c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5930:	b510      	push	{r4, lr}
   d5932:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d5936:	f101 0210 	add.w	r2, r1, #16
   d593a:	f851 4b04 	ldr.w	r4, [r1], #4
   d593e:	f843 4b04 	str.w	r4, [r3], #4
   d5942:	4291      	cmp	r1, r2
   d5944:	d1f9      	bne.n	d593a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5946:	780a      	ldrb	r2, [r1, #0]
   d5948:	701a      	strb	r2, [r3, #0]
}
   d594a:	bd10      	pop	{r4, pc}
   d594c:	000d7784 	.word	0x000d7784

000d5950 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d5950:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5952:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5956:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d595a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d595e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d5962:	2304      	movs	r3, #4
   d5964:	6041      	str	r1, [r0, #4]
   d5966:	7503      	strb	r3, [r0, #20]
}
   d5968:	bd10      	pop	{r4, pc}

000d596a <_ZN9IPAddressaSEPKh>:
{
   d596a:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d596c:	78cb      	ldrb	r3, [r1, #3]
   d596e:	9300      	str	r3, [sp, #0]
   d5970:	788b      	ldrb	r3, [r1, #2]
   d5972:	784a      	ldrb	r2, [r1, #1]
   d5974:	7809      	ldrb	r1, [r1, #0]
   d5976:	f7ff ffeb 	bl	d5950 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d597a:	b002      	add	sp, #8
   d597c:	bd10      	pop	{r4, pc}

000d597e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   d597e:	f100 0310 	add.w	r3, r0, #16
   d5982:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d5984:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d5988:	2901      	cmp	r1, #1
   d598a:	4618      	mov	r0, r3
   d598c:	d108      	bne.n	d59a0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   d598e:	f853 1c04 	ldr.w	r1, [r3, #-4]
   d5992:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   d5996:	3a01      	subs	r2, #1
   d5998:	f103 0310 	add.w	r3, r3, #16
   d599c:	d1f2      	bne.n	d5984 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   d599e:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   d59a0:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d59a2:	bf04      	itt	eq
   d59a4:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   d59a8:	1852      	addeq	r2, r2, r1
   d59aa:	e7f4      	b.n	d5996 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000d59ac <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d59ac:	4770      	bx	lr

000d59ae <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d59ae:	2000      	movs	r0, #0
   d59b0:	4770      	bx	lr

000d59b2 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d59b2:	b510      	push	{r4, lr}
   d59b4:	2110      	movs	r1, #16
   d59b6:	4604      	mov	r4, r0
   d59b8:	f000 fff0 	bl	d699c <_ZdlPvj>
   d59bc:	4620      	mov	r0, r4
   d59be:	bd10      	pop	{r4, pc}

000d59c0 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d59c0:	b508      	push	{r3, lr}
      { delete this; }
   d59c2:	f7ff fff6 	bl	d59b2 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d59c6:	bd08      	pop	{r3, pc}

000d59c8 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d59c8:	b510      	push	{r4, lr}
      { delete _M_ptr; }
   d59ca:	68c4      	ldr	r4, [r0, #12]
   d59cc:	b17c      	cbz	r4, d59ee <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
            json(nullptr),
            freeJson(false) {
    }

    ~JSONData() {
        delete[] tokens;
   d59ce:	6820      	ldr	r0, [r4, #0]
   d59d0:	b108      	cbz	r0, d59d6 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0xe>
   d59d2:	f7fe fb66 	bl	d40a2 <_ZdaPv>
        if (freeJson) {
   d59d6:	7a23      	ldrb	r3, [r4, #8]
   d59d8:	b11b      	cbz	r3, d59e2 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
            delete[] json;
   d59da:	6860      	ldr	r0, [r4, #4]
   d59dc:	b108      	cbz	r0, d59e2 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
   d59de:	f7fe fb60 	bl	d40a2 <_ZdaPv>
   d59e2:	4620      	mov	r0, r4
   d59e4:	210c      	movs	r1, #12
   d59e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d59ea:	f000 bfd7 	b.w	d699c <_ZdlPvj>
   d59ee:	bd10      	pop	{r4, pc}

000d59f0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d59f0:	b510      	push	{r4, lr}
          _M_dispose();
   d59f2:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d59f4:	4604      	mov	r4, r0
          _M_dispose();
   d59f6:	689b      	ldr	r3, [r3, #8]
   d59f8:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d59fa:	68a3      	ldr	r3, [r4, #8]
   d59fc:	3b01      	subs	r3, #1
   d59fe:	60a3      	str	r3, [r4, #8]
   d5a00:	b92b      	cbnz	r3, d5a0e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d5a02:	6823      	ldr	r3, [r4, #0]
   d5a04:	4620      	mov	r0, r4
   d5a06:	68db      	ldr	r3, [r3, #12]
    }
   d5a08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d5a0c:	4718      	bx	r3
    }
   d5a0e:	bd10      	pop	{r4, pc}

000d5a10 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   d5a10:	b538      	push	{r3, r4, r5, lr}
   d5a12:	680b      	ldr	r3, [r1, #0]
   d5a14:	6003      	str	r3, [r0, #0]
   d5a16:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   d5a18:	6843      	ldr	r3, [r0, #4]
   d5a1a:	429d      	cmp	r5, r3
    class __shared_ptr
   d5a1c:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   d5a1e:	d00c      	beq.n	d5a3a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   d5a20:	b115      	cbz	r5, d5a28 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   d5a22:	686b      	ldr	r3, [r5, #4]
   d5a24:	3301      	adds	r3, #1
   d5a26:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   d5a28:	6860      	ldr	r0, [r4, #4]
   d5a2a:	b128      	cbz	r0, d5a38 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   d5a2c:	6843      	ldr	r3, [r0, #4]
   d5a2e:	3b01      	subs	r3, #1
   d5a30:	6043      	str	r3, [r0, #4]
   d5a32:	b90b      	cbnz	r3, d5a38 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   d5a34:	f7ff ffdc 	bl	d59f0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d5a38:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   d5a3a:	4620      	mov	r0, r4
   d5a3c:	bd38      	pop	{r3, r4, r5, pc}

000d5a3e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
        }
    }
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d5a3e:	460b      	mov	r3, r1
   d5a40:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   d5a42:	2200      	movs	r2, #0
   d5a44:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   d5a46:	e9c0 2200 	strd	r2, r2, [r0]
   d5a4a:	4604      	mov	r4, r0
        JSONValue() {
    if (t) {
        t_ = t;
   d5a4c:	6083      	str	r3, [r0, #8]
    if (t) {
   d5a4e:	b90b      	cbnz	r3, d5a54 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
        d_ = d;
    }
}
   d5a50:	4620      	mov	r0, r4
   d5a52:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   d5a54:	f7ff ffdc 	bl	d5a10 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   d5a58:	e7fa      	b.n	d5a50 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000d5a5a <_ZNK5spark9JSONValue4typeEv>:
        return 0.0;
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
   d5a5a:	6883      	ldr	r3, [r0, #8]
   d5a5c:	b1eb      	cbz	r3, d5a9a <_ZNK5spark9JSONValue4typeEv+0x40>
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
   d5a5e:	781a      	ldrb	r2, [r3, #0]
   d5a60:	2a03      	cmp	r2, #3
   d5a62:	d81a      	bhi.n	d5a9a <_ZNK5spark9JSONValue4typeEv+0x40>
   d5a64:	e8df f002 	tbb	[pc, r2]
   d5a68:	1b021704 	.word	0x1b021704
   d5a6c:	2005      	movs	r0, #5
   d5a6e:	4770      	bx	lr
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
   d5a70:	6802      	ldr	r2, [r0, #0]
   d5a72:	685b      	ldr	r3, [r3, #4]
   d5a74:	6852      	ldr	r2, [r2, #4]
   d5a76:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d5a78:	282d      	cmp	r0, #45	; 0x2d
   d5a7a:	d012      	beq.n	d5aa2 <_ZNK5spark9JSONValue4typeEv+0x48>
   d5a7c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d5a80:	2b09      	cmp	r3, #9
   d5a82:	d90e      	bls.n	d5aa2 <_ZNK5spark9JSONValue4typeEv+0x48>
            return JSON_TYPE_NUMBER;
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d5a84:	2874      	cmp	r0, #116	; 0x74
   d5a86:	d00e      	beq.n	d5aa6 <_ZNK5spark9JSONValue4typeEv+0x4c>
   d5a88:	2866      	cmp	r0, #102	; 0x66
   d5a8a:	d00c      	beq.n	d5aa6 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   d5a8c:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d5a90:	4258      	negs	r0, r3
   d5a92:	4158      	adcs	r0, r3
   d5a94:	4770      	bx	lr
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
   d5a96:	2006      	movs	r0, #6
   d5a98:	4770      	bx	lr
    default:
        return JSON_TYPE_INVALID;
   d5a9a:	2000      	movs	r0, #0
   d5a9c:	4770      	bx	lr
        return JSON_TYPE_STRING;
   d5a9e:	2004      	movs	r0, #4
   d5aa0:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   d5aa2:	2003      	movs	r0, #3
   d5aa4:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   d5aa6:	2002      	movs	r0, #2
    }
}
   d5aa8:	4770      	bx	lr
	...

000d5aac <_ZNK5spark9JSONValue6toBoolEv>:
bool spark::JSONValue::toBool() const {
   d5aac:	b510      	push	{r4, lr}
   d5aae:	4604      	mov	r4, r0
    switch (type()) {
   d5ab0:	f7ff ffd3 	bl	d5a5a <_ZNK5spark9JSONValue4typeEv>
   d5ab4:	2803      	cmp	r0, #3
   d5ab6:	d00d      	beq.n	d5ad4 <_ZNK5spark9JSONValue6toBoolEv+0x28>
   d5ab8:	2804      	cmp	r0, #4
   d5aba:	d01e      	beq.n	d5afa <_ZNK5spark9JSONValue6toBoolEv+0x4e>
   d5abc:	2802      	cmp	r0, #2
   d5abe:	d12b      	bne.n	d5b18 <_ZNK5spark9JSONValue6toBoolEv+0x6c>
        const char* const s = d_->json + t_->start;
   d5ac0:	6822      	ldr	r2, [r4, #0]
   d5ac2:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d5ac4:	6852      	ldr	r2, [r2, #4]
   d5ac6:	685b      	ldr	r3, [r3, #4]
   d5ac8:	5cd0      	ldrb	r0, [r2, r3]
   d5aca:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d5ace:	4258      	negs	r0, r3
   d5ad0:	4158      	adcs	r0, r3
}
   d5ad2:	bd10      	pop	{r4, pc}
        const char* const s = d_->json + t_->start;
   d5ad4:	68a3      	ldr	r3, [r4, #8]
   d5ad6:	6822      	ldr	r2, [r4, #0]
   d5ad8:	685b      	ldr	r3, [r3, #4]
   d5ada:	6854      	ldr	r4, [r2, #4]
   d5adc:	441c      	add	r4, r3
        if (*s == '\0' || strcmp(s, "false") == 0 || strcmp(s, "0") == 0 || strcmp(s, "0.0") == 0) {
   d5ade:	490f      	ldr	r1, [pc, #60]	; (d5b1c <_ZNK5spark9JSONValue6toBoolEv+0x70>)
   d5ae0:	4620      	mov	r0, r4
   d5ae2:	f001 fc39 	bl	d7358 <strcmp>
   d5ae6:	2800      	cmp	r0, #0
   d5ae8:	d0f3      	beq.n	d5ad2 <_ZNK5spark9JSONValue6toBoolEv+0x26>
   d5aea:	490d      	ldr	r1, [pc, #52]	; (d5b20 <_ZNK5spark9JSONValue6toBoolEv+0x74>)
   d5aec:	4620      	mov	r0, r4
   d5aee:	f001 fc33 	bl	d7358 <strcmp>
   d5af2:	3800      	subs	r0, #0
   d5af4:	bf18      	it	ne
   d5af6:	2001      	movne	r0, #1
   d5af8:	e7eb      	b.n	d5ad2 <_ZNK5spark9JSONValue6toBoolEv+0x26>
        const char* const s = d_->json + t_->start;
   d5afa:	6822      	ldr	r2, [r4, #0]
   d5afc:	68a3      	ldr	r3, [r4, #8]
   d5afe:	6852      	ldr	r2, [r2, #4]
   d5b00:	685b      	ldr	r3, [r3, #4]
        if (*s == '\0' || strcmp(s, "false") == 0 || strcmp(s, "0") == 0 || strcmp(s, "0.0") == 0) {
   d5b02:	5cd0      	ldrb	r0, [r2, r3]
        const char* const s = d_->json + t_->start;
   d5b04:	18d4      	adds	r4, r2, r3
        if (*s == '\0' || strcmp(s, "false") == 0 || strcmp(s, "0") == 0 || strcmp(s, "0.0") == 0) {
   d5b06:	2800      	cmp	r0, #0
   d5b08:	d0e3      	beq.n	d5ad2 <_ZNK5spark9JSONValue6toBoolEv+0x26>
   d5b0a:	4906      	ldr	r1, [pc, #24]	; (d5b24 <_ZNK5spark9JSONValue6toBoolEv+0x78>)
   d5b0c:	4620      	mov	r0, r4
   d5b0e:	f001 fc23 	bl	d7358 <strcmp>
   d5b12:	2800      	cmp	r0, #0
   d5b14:	d1e3      	bne.n	d5ade <_ZNK5spark9JSONValue6toBoolEv+0x32>
   d5b16:	e7dc      	b.n	d5ad2 <_ZNK5spark9JSONValue6toBoolEv+0x26>
    switch (type()) {
   d5b18:	2000      	movs	r0, #0
   d5b1a:	e7da      	b.n	d5ad2 <_ZNK5spark9JSONValue6toBoolEv+0x26>
   d5b1c:	000d7792 	.word	0x000d7792
   d5b20:	000d7790 	.word	0x000d7790
   d5b24:	000d7794 	.word	0x000d7794

000d5b28 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   d5b28:	b510      	push	{r4, lr}
   d5b2a:	4604      	mov	r4, r0
    switch (type()) {
   d5b2c:	f7ff ff95 	bl	d5a5a <_ZNK5spark9JSONValue4typeEv>
   d5b30:	2802      	cmp	r0, #2
   d5b32:	d00e      	beq.n	d5b52 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   d5b34:	1ec3      	subs	r3, r0, #3
   d5b36:	b2db      	uxtb	r3, r3
   d5b38:	2b01      	cmp	r3, #1
   d5b3a:	d814      	bhi.n	d5b66 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   d5b3c:	6822      	ldr	r2, [r4, #0]
   d5b3e:	68a3      	ldr	r3, [r4, #8]
   d5b40:	6850      	ldr	r0, [r2, #4]
   d5b42:	685b      	ldr	r3, [r3, #4]
}
   d5b44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   d5b48:	220a      	movs	r2, #10
   d5b4a:	2100      	movs	r1, #0
   d5b4c:	4418      	add	r0, r3
   d5b4e:	f001 bc97 	b.w	d7480 <strtol>
        const char* const s = d_->json + t_->start;
   d5b52:	6822      	ldr	r2, [r4, #0]
   d5b54:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d5b56:	6852      	ldr	r2, [r2, #4]
   d5b58:	685b      	ldr	r3, [r3, #4]
   d5b5a:	5cd0      	ldrb	r0, [r2, r3]
   d5b5c:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d5b60:	4258      	negs	r0, r3
   d5b62:	4158      	adcs	r0, r3
}
   d5b64:	bd10      	pop	{r4, pc}
    switch (type()) {
   d5b66:	2000      	movs	r0, #0
   d5b68:	e7fc      	b.n	d5b64 <_ZNK5spark9JSONValue5toIntEv+0x3c>
	...

000d5b6c <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>:
        return JSONValue();
    }
    return JSONValue(d->tokens, d);
}

bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   d5b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5b70:	4699      	mov	r9, r3
   d5b72:	b088      	sub	sp, #32
    jsmn_parser parser;
    parser.size = sizeof(jsmn_parser);
   d5b74:	2310      	movs	r3, #16
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   d5b76:	4607      	mov	r7, r0
   d5b78:	4688      	mov	r8, r1
    jsmn_init(&parser, nullptr);
   d5b7a:	eb0d 0003 	add.w	r0, sp, r3
   d5b7e:	2100      	movs	r1, #0
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   d5b80:	4692      	mov	sl, r2
    parser.size = sizeof(jsmn_parser);
   d5b82:	9304      	str	r3, [sp, #16]
    int nExt = -1;
    int n = jsmn_parse_deprecated(&parser, json, size, nullptr, 0, &nExt); // Get number of tokens
   d5b84:	2400      	movs	r4, #0
    jsmn_init(&parser, nullptr);
   d5b86:	f7ff fd09 	bl	d559c <jsmn_init>
    int n = jsmn_parse_deprecated(&parser, json, size, nullptr, 0, &nExt); // Get number of tokens
   d5b8a:	ab03      	add	r3, sp, #12
   d5b8c:	9301      	str	r3, [sp, #4]
    int nExt = -1;
   d5b8e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    int n = jsmn_parse_deprecated(&parser, json, size, nullptr, 0, &nExt); // Get number of tokens
   d5b92:	9400      	str	r4, [sp, #0]
   d5b94:	4623      	mov	r3, r4
   d5b96:	4642      	mov	r2, r8
   d5b98:	4639      	mov	r1, r7
   d5b9a:	a804      	add	r0, sp, #16
    int nExt = -1;
   d5b9c:	9603      	str	r6, [sp, #12]
    int n = jsmn_parse_deprecated(&parser, json, size, nullptr, 0, &nExt); // Get number of tokens
   d5b9e:	f7ff fd05 	bl	d55ac <jsmn_parse_deprecated>
    if (n <= 0) {
   d5ba2:	1e05      	subs	r5, r0, #0
   d5ba4:	dd27      	ble.n	d5bf6 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x8a>
        return false; // Parsing error
    }
    if (nExt > n) {
   d5ba6:	9803      	ldr	r0, [sp, #12]
        n = nExt;
    }
    std::unique_ptr<jsmntok_t[]> t(new(std::nothrow) jsmntok_t[n]);
   d5ba8:	4914      	ldr	r1, [pc, #80]	; (d5bfc <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x90>)
   d5baa:	4285      	cmp	r5, r0
   d5bac:	bfb8      	it	lt
   d5bae:	4605      	movlt	r5, r0
   d5bb0:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
   d5bb4:	bfac      	ite	ge
   d5bb6:	4630      	movge	r0, r6
   d5bb8:	0128      	lsllt	r0, r5, #4
   d5bba:	f000 fef3 	bl	d69a4 <_ZnajRKSt9nothrow_t>
    if (!t) {
   d5bbe:	4606      	mov	r6, r0
   d5bc0:	b198      	cbz	r0, d5bea <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x7e>
        return false;
    }
    jsmn_init(&parser, nullptr); // Reset parser
   d5bc2:	2100      	movs	r1, #0
   d5bc4:	a804      	add	r0, sp, #16
    if (jsmn_parse_deprecated(&parser, json, size, t.get(), n, nullptr) <= 0) {
   d5bc6:	2400      	movs	r4, #0
    jsmn_init(&parser, nullptr); // Reset parser
   d5bc8:	f7ff fce8 	bl	d559c <jsmn_init>
    if (jsmn_parse_deprecated(&parser, json, size, t.get(), n, nullptr) <= 0) {
   d5bcc:	e9cd 5400 	strd	r5, r4, [sp]
   d5bd0:	4633      	mov	r3, r6
   d5bd2:	4642      	mov	r2, r8
   d5bd4:	4639      	mov	r1, r7
   d5bd6:	a804      	add	r0, sp, #16
   d5bd8:	f7ff fce8 	bl	d55ac <jsmn_parse_deprecated>
   d5bdc:	42a0      	cmp	r0, r4
   d5bde:	dd07      	ble.n	d5bf0 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x84>
        return false;
    }
    *tokens = t.release();
   d5be0:	f8ca 6000 	str.w	r6, [sl]
    *count = n;
    return true;
   d5be4:	2001      	movs	r0, #1
    *count = n;
   d5be6:	f8c9 5000 	str.w	r5, [r9]
}
   d5bea:	b008      	add	sp, #32
   d5bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      typename enable_if<is_convertible<_Up(*)[], _Tp(*)[]>::value>::type
	operator()(_Up* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5bf0:	4630      	mov	r0, r6
   d5bf2:	f7fe fa56 	bl	d40a2 <_ZdaPv>
      }
   d5bf6:	4620      	mov	r0, r4
   d5bf8:	e7f7      	b.n	d5bea <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x7e>
   d5bfa:	bf00      	nop
   d5bfc:	000d78b0 	.word	0x000d78b0

000d5c00 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>:
        ++t;
    }
    return true;
}

bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   d5c00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    char *str = json + t->start; // Destination string
   d5c04:	6843      	ldr	r3, [r0, #4]
    const char* const end = json + t->end; // End of the source string
   d5c06:	6886      	ldr	r6, [r0, #8]
    char *str = json + t->start; // Destination string
   d5c08:	440b      	add	r3, r1
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   d5c0a:	4688      	mov	r8, r1
    const char* const end = json + t->end; // End of the source string
   d5c0c:	440e      	add	r6, r1
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   d5c0e:	4607      	mov	r7, r0
    const char *s1 = str; // Beginning of an unescaped sequence
    const char *s = s1;
   d5c10:	461c      	mov	r4, r3
    const char *s1 = str; // Beginning of an unescaped sequence
   d5c12:	4619      	mov	r1, r3
                    break;
                case 'f': // Form feed
                    *str = 0x0c;
                    break;
                case 'r': // Carriage return
                    *str = 0x0d;
   d5c14:	f04f 090d 	mov.w	r9, #13
                    *str = 0x09;
   d5c18:	f04f 0a09 	mov.w	sl, #9
    while (s != end) {
   d5c1c:	42b4      	cmp	r4, r6
   d5c1e:	d063      	beq.n	d5ce8 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xe8>
        if (*s == '\\') {
   d5c20:	4625      	mov	r5, r4
   d5c22:	f815 2b01 	ldrb.w	r2, [r5], #1
   d5c26:	2a5c      	cmp	r2, #92	; 0x5c
   d5c28:	d12b      	bne.n	d5c82 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x82>
            if (s != s1) {
   d5c2a:	42a1      	cmp	r1, r4
   d5c2c:	d007      	beq.n	d5c3e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x3e>
                const size_t n = s - s1;
   d5c2e:	eba4 0b01 	sub.w	fp, r4, r1
                memmove(str, s1, n); // Shift preceeding characters
   d5c32:	4618      	mov	r0, r3
   d5c34:	465a      	mov	r2, fp
   d5c36:	f001 fb49 	bl	d72cc <memmove>
   d5c3a:	4603      	mov	r3, r0
                str += n;
   d5c3c:	445b      	add	r3, fp
            if (s == end) {
   d5c3e:	42b5      	cmp	r5, r6
   d5c40:	d039      	beq.n	d5cb6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
            if (*s == 'u') { // Arbitrary character, e.g. "\u001f"
   d5c42:	7862      	ldrb	r2, [r4, #1]
   d5c44:	2a75      	cmp	r2, #117	; 0x75
   d5c46:	d12a      	bne.n	d5c9e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x9e>
                ++s;
   d5c48:	1ca2      	adds	r2, r4, #2
                if (end - s < 4) {
   d5c4a:	1ab2      	subs	r2, r6, r2
   d5c4c:	2a03      	cmp	r2, #3
   d5c4e:	dd32      	ble.n	d5cb6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
    const char* const end = s + size;
   d5c50:	1da0      	adds	r0, r4, #6
   d5c52:	f104 0e05 	add.w	lr, r4, #5
    uint32_t v = 0;
   d5c56:	f04f 0c00 	mov.w	ip, #0
    while (s != end) {
   d5c5a:	45ae      	cmp	lr, r5
   d5c5c:	d053      	beq.n	d5d06 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x106>
        const char c = *s;
   d5c5e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
        if (c >= '0' && c <= '9') {
   d5c62:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   d5c66:	fa5f fb82 	uxtb.w	fp, r2
   d5c6a:	f1bb 0f09 	cmp.w	fp, #9
   d5c6e:	d905      	bls.n	d5c7c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x7c>
        } else if (c >= 'a' && c <= 'f') {
   d5c70:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
   d5c74:	2a05      	cmp	r2, #5
   d5c76:	d807      	bhi.n	d5c88 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x88>
            n = c - 'a' + 10;
   d5c78:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
        v = (v << 4) | n;
   d5c7c:	ea42 1c0c 	orr.w	ip, r2, ip, lsl #4
    while (s != end) {
   d5c80:	e7eb      	b.n	d5c5a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x5a>
   d5c82:	4628      	mov	r0, r5
   d5c84:	4604      	mov	r4, r0
   d5c86:	e7c9      	b.n	d5c1c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x1c>
        } else if (c >= 'A' && c <= 'F') {
   d5c88:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
   d5c8c:	2a05      	cmp	r2, #5
   d5c8e:	d812      	bhi.n	d5cb6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
            n = c - 'A' + 10;
   d5c90:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
   d5c94:	e7f2      	b.n	d5c7c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x7c>
                    *str = u;
   d5c96:	f803 cb01 	strb.w	ip, [r3], #1
                    s1 += 6; // Skip escaped sequence
   d5c9a:	4601      	mov	r1, r0
   d5c9c:	e7f2      	b.n	d5c84 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>
                switch (*s) {
   d5c9e:	2a6e      	cmp	r2, #110	; 0x6e
   d5ca0:	d01c      	beq.n	d5cdc <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xdc>
   d5ca2:	d80e      	bhi.n	d5cc2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xc2>
   d5ca4:	2a62      	cmp	r2, #98	; 0x62
   d5ca6:	d013      	beq.n	d5cd0 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd0>
   d5ca8:	d807      	bhi.n	d5cba <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xba>
   d5caa:	2a2f      	cmp	r2, #47	; 0x2f
   d5cac:	d011      	beq.n	d5cd2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
   d5cae:	2a5c      	cmp	r2, #92	; 0x5c
   d5cb0:	d00f      	beq.n	d5cd2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
   d5cb2:	2a22      	cmp	r2, #34	; 0x22
   d5cb4:	d00d      	beq.n	d5cd2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                return false; // Unexpected end of string
   d5cb6:	2000      	movs	r0, #0
   d5cb8:	e023      	b.n	d5d02 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x102>
                switch (*s) {
   d5cba:	2a66      	cmp	r2, #102	; 0x66
   d5cbc:	d1fb      	bne.n	d5cb6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
                    *str = 0x0c;
   d5cbe:	220c      	movs	r2, #12
   d5cc0:	e007      	b.n	d5cd2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                switch (*s) {
   d5cc2:	2a72      	cmp	r2, #114	; 0x72
   d5cc4:	d00d      	beq.n	d5ce2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xe2>
   d5cc6:	2a74      	cmp	r2, #116	; 0x74
   d5cc8:	d1f5      	bne.n	d5cb6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
                    *str = 0x09;
   d5cca:	f883 a000 	strb.w	sl, [r3]
                    break;
   d5cce:	e001      	b.n	d5cd4 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd4>
                    *str = 0x08;
   d5cd0:	2208      	movs	r2, #8
   d5cd2:	701a      	strb	r2, [r3, #0]
                    break;
                default:
                    return false; // Invalid escaped sequence
                }
                ++str;
                ++s;
   d5cd4:	1ca1      	adds	r1, r4, #2
                ++str;
   d5cd6:	3301      	adds	r3, #1
                ++s;
   d5cd8:	4608      	mov	r0, r1
   d5cda:	e7d3      	b.n	d5c84 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>
                    *str = 0x0a;
   d5cdc:	f04f 020a 	mov.w	r2, #10
   d5ce0:	e7f7      	b.n	d5cd2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                    *str = 0x0d;
   d5ce2:	f883 9000 	strb.w	r9, [r3]
                    break;
   d5ce6:	e7f5      	b.n	d5cd4 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd4>
            }
        } else {
            ++s;
        }
    }
    if (s != s1) {
   d5ce8:	42a1      	cmp	r1, r4
   d5cea:	d006      	beq.n	d5cfa <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xfa>
        const size_t n = s - s1;
   d5cec:	1a64      	subs	r4, r4, r1
        memmove(str, s1, n); // Shift remaining characters
   d5cee:	4618      	mov	r0, r3
   d5cf0:	4622      	mov	r2, r4
   d5cf2:	f001 faeb 	bl	d72cc <memmove>
   d5cf6:	4603      	mov	r3, r0
        str += n;
   d5cf8:	4423      	add	r3, r4
    }
    t->end = str - json; // Update string length
   d5cfa:	eba3 0308 	sub.w	r3, r3, r8
   d5cfe:	60bb      	str	r3, [r7, #8]
    return true;
   d5d00:	2001      	movs	r0, #1
}
   d5d02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if (u <= 0x7f) { // Processing only code points within the basic latin block
   d5d06:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
   d5d0a:	d9c4      	bls.n	d5c96 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x96>
   d5d0c:	4621      	mov	r1, r4
   d5d0e:	e7b9      	b.n	d5c84 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>

000d5d10 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>:
bool spark::JSONValue::stringize(jsmntok_t *t, size_t count, char *json) {
   d5d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5d12:	4604      	mov	r4, r0
   d5d14:	4615      	mov	r5, r2
    const jsmntok_t* const end = t + count;
   d5d16:	eb00 1601 	add.w	r6, r0, r1, lsl #4
            json[t->end] = '\0';
   d5d1a:	2700      	movs	r7, #0
    while (t != end) {
   d5d1c:	42b4      	cmp	r4, r6
   d5d1e:	d010      	beq.n	d5d42 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x32>
        if (t->type == JSMN_STRING) {
   d5d20:	7823      	ldrb	r3, [r4, #0]
   d5d22:	2b03      	cmp	r3, #3
   d5d24:	d108      	bne.n	d5d38 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x28>
            if (!unescape(t, json)) {
   d5d26:	4629      	mov	r1, r5
   d5d28:	4620      	mov	r0, r4
   d5d2a:	f7ff ff69 	bl	d5c00 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>
   d5d2e:	b148      	cbz	r0, d5d44 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x34>
            json[t->end] = '\0';
   d5d30:	68a3      	ldr	r3, [r4, #8]
   d5d32:	54ef      	strb	r7, [r5, r3]
        ++t;
   d5d34:	3410      	adds	r4, #16
    while (t != end) {
   d5d36:	e7f1      	b.n	d5d1c <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0xc>
        } else if (t->type == JSMN_PRIMITIVE) {
   d5d38:	2b00      	cmp	r3, #0
   d5d3a:	d1fb      	bne.n	d5d34 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x24>
            json[t->end] = '\0';
   d5d3c:	68a2      	ldr	r2, [r4, #8]
   d5d3e:	54ab      	strb	r3, [r5, r2]
   d5d40:	e7f8      	b.n	d5d34 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x24>
    return true;
   d5d42:	2001      	movs	r0, #1
}
   d5d44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d5d48 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

// spark::JSONString
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d5d48:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d5d4a:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d5d4c:	e9c0 3300 	strd	r3, r3, [r0]
   d5d50:	4604      	mov	r4, r0
}

// spark::JSONString
inline spark::JSONString::JSONString() :
        s_(""),
        n_(0) {
   d5d52:	480e      	ldr	r0, [pc, #56]	; (d5d8c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   d5d54:	e9c4 0302 	strd	r0, r3, [r4, #8]
        JSONString() {
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d5d58:	b1a9      	cbz	r1, d5d86 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   d5d5a:	780b      	ldrb	r3, [r1, #0]
   d5d5c:	2b03      	cmp	r3, #3
   d5d5e:	d006      	beq.n	d5d6e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d5d60:	b98b      	cbnz	r3, d5d86 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d5d62:	6813      	ldr	r3, [r2, #0]
   d5d64:	6858      	ldr	r0, [r3, #4]
   d5d66:	684b      	ldr	r3, [r1, #4]
   d5d68:	5cc3      	ldrb	r3, [r0, r3]
   d5d6a:	2b6e      	cmp	r3, #110	; 0x6e
   d5d6c:	d007      	beq.n	d5d7e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   d5d6e:	6813      	ldr	r3, [r2, #0]
   d5d70:	684d      	ldr	r5, [r1, #4]
   d5d72:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   d5d74:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   d5d76:	4428      	add	r0, r5
            n_ = t->end - t->start;
   d5d78:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   d5d7a:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   d5d7c:	60e3      	str	r3, [r4, #12]
   d5d7e:	4611      	mov	r1, r2
   d5d80:	4620      	mov	r0, r4
   d5d82:	f7ff fe45 	bl	d5a10 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
        }
        d_ = d;
    }
}
   d5d86:	4620      	mov	r0, r4
   d5d88:	bd38      	pop	{r3, r4, r5, pc}
   d5d8a:	bf00      	nop
   d5d8c:	000d7793 	.word	0x000d7793

000d5d90 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
bool spark::JSONString::operator==(const JSONString &str) const {
    return n_ == str.n_ && strncmp(s_, str.s_, n_) == 0;
}

// spark::JSONObjectIterator
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d5d90:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d5d92:	2500      	movs	r5, #0
   d5d94:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   d5d96:	e9c0 5500 	strd	r5, r5, [r0]
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
   d5d9a:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d5d9e:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d5da2:	4604      	mov	r4, r0
   d5da4:	4611      	mov	r1, r2
        JSONObjectIterator() {
    if (t && t->type == JSMN_OBJECT) {
   d5da6:	b14b      	cbz	r3, d5dbc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   d5da8:	781a      	ldrb	r2, [r3, #0]
   d5daa:	2a01      	cmp	r2, #1
   d5dac:	d106      	bne.n	d5dbc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   d5dae:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   d5db2:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   d5db4:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   d5db6:	6143      	str	r3, [r0, #20]
   d5db8:	f7ff fe2a 	bl	d5a10 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
        d_ = d;
    }
}
   d5dbc:	4620      	mov	r0, r4
   d5dbe:	bd38      	pop	{r3, r4, r5, pc}

000d5dc0 <_ZN5spark18JSONObjectIterator4nextEv>:

bool spark::JSONObjectIterator::next() {
   d5dc0:	b510      	push	{r4, lr}
    if (!n_) {
   d5dc2:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   d5dc4:	4604      	mov	r4, r0
    if (!n_) {
   d5dc6:	b163      	cbz	r3, d5de2 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
        return false;
    }
    k_ = t_; // Name
   d5dc8:	6880      	ldr	r0, [r0, #8]
   d5dca:	60e0      	str	r0, [r4, #12]
    ++t_;
    v_ = t_; // Value
    --n_;
   d5dcc:	3b01      	subs	r3, #1
    ++t_;
   d5dce:	3010      	adds	r0, #16
   d5dd0:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d5dd2:	6120      	str	r0, [r4, #16]
    --n_;
   d5dd4:	6163      	str	r3, [r4, #20]
    if (n_) {
   d5dd6:	b113      	cbz	r3, d5dde <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   d5dd8:	f7ff fdd1 	bl	d597e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d5ddc:	60a0      	str	r0, [r4, #8]
    }
    return true;
   d5dde:	2001      	movs	r0, #1
   d5de0:	e000      	b.n	d5de4 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   d5de2:	4618      	mov	r0, r3
}
   d5de4:	bd10      	pop	{r4, pc}
	...

000d5de8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d5de8:	b538      	push	{r3, r4, r5, lr}
   d5dea:	2300      	movs	r3, #0
   d5dec:	4604      	mov	r4, r0
   d5dee:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5df0:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d5df2:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5df4:	f7fe f94f 	bl	d4096 <_Znwj>
   d5df8:	b128      	cbz	r0, d5e06 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d5dfa:	2301      	movs	r3, #1
   d5dfc:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d5e00:	4b02      	ldr	r3, [pc, #8]	; (d5e0c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x24>)
   d5e02:	6003      	str	r3, [r0, #0]
   d5e04:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5e06:	6020      	str	r0, [r4, #0]
	}
   d5e08:	4620      	mov	r0, r4
   d5e0a:	bd38      	pop	{r3, r4, r5, pc}
   d5e0c:	000d77a4 	.word	0x000d77a4

000d5e10 <_ZN5spark9JSONValue9parseCopyEPKcj>:
spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
   d5e10:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5e12:	4604      	mov	r4, r0
   d5e14:	b087      	sub	sp, #28
   d5e16:	460e      	mov	r6, r1
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
   d5e18:	200c      	movs	r0, #12
   d5e1a:	4927      	ldr	r1, [pc, #156]	; (d5eb8 <_ZN5spark9JSONValue9parseCopyEPKcj+0xa8>)
spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
   d5e1c:	4615      	mov	r5, r2
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
   d5e1e:	f000 fdbf 	bl	d69a0 <_ZnwjRKSt9nothrow_t>
   d5e22:	4601      	mov	r1, r0
   d5e24:	b118      	cbz	r0, d5e2e <_ZN5spark9JSONValue9parseCopyEPKcj+0x1e>
            freeJson(false) {
   d5e26:	2300      	movs	r3, #0
   d5e28:	e9c0 3300 	strd	r3, r3, [r0]
   d5e2c:	7203      	strb	r3, [r0, #8]
	: __shared_count(__p)
   d5e2e:	a803      	add	r0, sp, #12
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5e30:	9102      	str	r1, [sp, #8]
	: __shared_count(__p)
   d5e32:	f7ff ffd9 	bl	d5de8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>
    if (!d) {
   d5e36:	9a02      	ldr	r2, [sp, #8]
   d5e38:	b942      	cbnz	r2, d5e4c <_ZN5spark9JSONValue9parseCopyEPKcj+0x3c>
      constexpr __shared_count() noexcept : _M_pi(0)
   d5e3a:	e9c4 2200 	strd	r2, r2, [r4]
        t_(nullptr) {
   d5e3e:	60a2      	str	r2, [r4, #8]
      ~__shared_ptr() = default;
   d5e40:	a803      	add	r0, sp, #12
   d5e42:	f7fe f969 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5e46:	4620      	mov	r0, r4
   d5e48:	b007      	add	sp, #28
   d5e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    size_t tokenCount = 0;
   d5e4c:	2300      	movs	r3, #0
   d5e4e:	9301      	str	r3, [sp, #4]
    if (!tokenize(json, size, &d->tokens, &tokenCount)) {
   d5e50:	4629      	mov	r1, r5
   d5e52:	ab01      	add	r3, sp, #4
   d5e54:	4630      	mov	r0, r6
   d5e56:	f7ff fe89 	bl	d5b6c <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>
   d5e5a:	b918      	cbnz	r0, d5e64 <_ZN5spark9JSONValue9parseCopyEPKcj+0x54>
      constexpr __shared_count() noexcept : _M_pi(0)
   d5e5c:	e9c4 0000 	strd	r0, r0, [r4]
   d5e60:	60a0      	str	r0, [r4, #8]
}
   d5e62:	e7ed      	b.n	d5e40 <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
    d->json = new(std::nothrow) char[size + 1];
   d5e64:	4914      	ldr	r1, [pc, #80]	; (d5eb8 <_ZN5spark9JSONValue9parseCopyEPKcj+0xa8>)
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d5e66:	9f02      	ldr	r7, [sp, #8]
   d5e68:	1c68      	adds	r0, r5, #1
   d5e6a:	f000 fd9b 	bl	d69a4 <_ZnajRKSt9nothrow_t>
    if (!d->json) {
   d5e6e:	9b02      	ldr	r3, [sp, #8]
    d->json = new(std::nothrow) char[size + 1];
   d5e70:	6078      	str	r0, [r7, #4]
    if (!d->json) {
   d5e72:	6858      	ldr	r0, [r3, #4]
   d5e74:	2800      	cmp	r0, #0
   d5e76:	d0f1      	beq.n	d5e5c <_ZN5spark9JSONValue9parseCopyEPKcj+0x4c>
    memcpy(d->json, json, size); // TODO: Copy only token data
   d5e78:	462a      	mov	r2, r5
   d5e7a:	4631      	mov	r1, r6
   d5e7c:	f001 fa18 	bl	d72b0 <memcpy>
   d5e80:	9b02      	ldr	r3, [sp, #8]
    if (!stringize(d->tokens, tokenCount, d->json)) {
   d5e82:	9901      	ldr	r1, [sp, #4]
   d5e84:	6818      	ldr	r0, [r3, #0]
    d->freeJson = true;
   d5e86:	2201      	movs	r2, #1
   d5e88:	721a      	strb	r2, [r3, #8]
    if (!stringize(d->tokens, tokenCount, d->json)) {
   d5e8a:	685a      	ldr	r2, [r3, #4]
   d5e8c:	f7ff ff40 	bl	d5d10 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>
   d5e90:	2800      	cmp	r0, #0
   d5e92:	d0e3      	beq.n	d5e5c <_ZN5spark9JSONValue9parseCopyEPKcj+0x4c>
   d5e94:	9b02      	ldr	r3, [sp, #8]
    return JSONValue(d->tokens, d);
   d5e96:	6819      	ldr	r1, [r3, #0]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5e98:	9304      	str	r3, [sp, #16]
      : _M_pi(__r._M_pi)
   d5e9a:	9b03      	ldr	r3, [sp, #12]
   d5e9c:	9305      	str	r3, [sp, #20]
	if (_M_pi != 0)
   d5e9e:	b113      	cbz	r3, d5ea6 <_ZN5spark9JSONValue9parseCopyEPKcj+0x96>
    { ++_M_use_count; }
   d5ea0:	685a      	ldr	r2, [r3, #4]
   d5ea2:	3201      	adds	r2, #1
   d5ea4:	605a      	str	r2, [r3, #4]
   d5ea6:	aa04      	add	r2, sp, #16
   d5ea8:	4620      	mov	r0, r4
   d5eaa:	f7ff fdc8 	bl	d5a3e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d5eae:	a805      	add	r0, sp, #20
   d5eb0:	f7fe f932 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5eb4:	e7c4      	b.n	d5e40 <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
   d5eb6:	bf00      	nop
   d5eb8:	000d78b0 	.word	0x000d78b0

000d5ebc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5ebc:	4b01      	ldr	r3, [pc, #4]	; (d5ec4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5ebe:	4a02      	ldr	r2, [pc, #8]	; (d5ec8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5ec0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d5ec2:	4770      	bx	lr
   d5ec4:	2003e5b4 	.word	0x2003e5b4
   d5ec8:	000d77b8 	.word	0x000d77b8

000d5ecc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5ecc:	2300      	movs	r3, #0
   d5ece:	6840      	ldr	r0, [r0, #4]
   d5ed0:	461a      	mov	r2, r3
   d5ed2:	f7ff bbcf 	b.w	d5674 <network_connect>

000d5ed6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5ed6:	6840      	ldr	r0, [r0, #4]
   d5ed8:	2200      	movs	r2, #0
   d5eda:	2102      	movs	r1, #2
   d5edc:	f7ff bbda 	b.w	d5694 <network_disconnect>

000d5ee0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5ee0:	2200      	movs	r2, #0
   d5ee2:	6840      	ldr	r0, [r0, #4]
   d5ee4:	4611      	mov	r1, r2
   d5ee6:	f7ff bbcd 	b.w	d5684 <network_connecting>

000d5eea <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5eea:	2200      	movs	r2, #0
   d5eec:	6840      	ldr	r0, [r0, #4]
   d5eee:	4611      	mov	r1, r2
   d5ef0:	f7ff bbd8 	b.w	d56a4 <network_ready>

000d5ef4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5ef4:	2300      	movs	r3, #0
   d5ef6:	6840      	ldr	r0, [r0, #4]
   d5ef8:	461a      	mov	r2, r3
   d5efa:	4619      	mov	r1, r3
   d5efc:	f7ff bbda 	b.w	d56b4 <network_on>

000d5f00 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5f00:	2300      	movs	r3, #0
   d5f02:	6840      	ldr	r0, [r0, #4]
   d5f04:	461a      	mov	r2, r3
   d5f06:	4619      	mov	r1, r3
   d5f08:	f7ff bbdc 	b.w	d56c4 <network_off>

000d5f0c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d5f0c:	6840      	ldr	r0, [r0, #4]
   d5f0e:	2100      	movs	r1, #0
   d5f10:	f7ff bc00 	b.w	d5714 <network_is_on>

000d5f14 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d5f14:	6840      	ldr	r0, [r0, #4]
   d5f16:	2100      	movs	r1, #0
   d5f18:	f7ff bc04 	b.w	d5724 <network_is_off>

000d5f1c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5f1c:	6840      	ldr	r0, [r0, #4]
   d5f1e:	2200      	movs	r2, #0
   d5f20:	f081 0101 	eor.w	r1, r1, #1
   d5f24:	f7ff bbd6 	b.w	d56d4 <network_listen>

000d5f28 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5f28:	6840      	ldr	r0, [r0, #4]
   d5f2a:	2200      	movs	r2, #0
   d5f2c:	f7ff bbe2 	b.w	d56f4 <network_set_listen_timeout>

000d5f30 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5f30:	2200      	movs	r2, #0
   d5f32:	6840      	ldr	r0, [r0, #4]
   d5f34:	4611      	mov	r1, r2
   d5f36:	f7ff bbe5 	b.w	d5704 <network_get_listen_timeout>

000d5f3a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5f3a:	2200      	movs	r2, #0
   d5f3c:	6840      	ldr	r0, [r0, #4]
   d5f3e:	4611      	mov	r1, r2
   d5f40:	f7ff bbd0 	b.w	d56e4 <network_listening>

000d5f44 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5f44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5f48:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d5f4a:	b095      	sub	sp, #84	; 0x54
   d5f4c:	4616      	mov	r6, r2
   d5f4e:	460d      	mov	r5, r1
   d5f50:	4607      	mov	r7, r0
    IPAddress addr;
   d5f52:	f7ff fcdd 	bl	d5910 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d5f56:	4621      	mov	r1, r4
   d5f58:	2218      	movs	r2, #24
   d5f5a:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d5f5c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5f5e:	f001 f9cf 	bl	d7300 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5f62:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d5f64:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5f68:	4621      	mov	r1, r4
   d5f6a:	466b      	mov	r3, sp
   d5f6c:	aa0c      	add	r2, sp, #48	; 0x30
   d5f6e:	4630      	mov	r0, r6
   d5f70:	f7ff fa44 	bl	d53fc <netdb_getaddrinfo>
    if (!r) {
   d5f74:	4604      	mov	r4, r0
   d5f76:	2800      	cmp	r0, #0
   d5f78:	d146      	bne.n	d6008 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5f7a:	4602      	mov	r2, r0
   d5f7c:	2101      	movs	r1, #1
   d5f7e:	6868      	ldr	r0, [r5, #4]
   d5f80:	f7ff fb90 	bl	d56a4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5f84:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5f86:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5f88:	4622      	mov	r2, r4
   d5f8a:	6868      	ldr	r0, [r5, #4]
   d5f8c:	f7ff fb8a 	bl	d56a4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5f90:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5f92:	4681      	mov	r9, r0
        bool ok = false;
   d5f94:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5f96:	2e00      	cmp	r6, #0
   d5f98:	d036      	beq.n	d6008 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d5f9a:	2900      	cmp	r1, #0
   d5f9c:	d134      	bne.n	d6008 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5f9e:	6873      	ldr	r3, [r6, #4]
   d5fa0:	2b02      	cmp	r3, #2
   d5fa2:	d003      	beq.n	d5fac <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d5fa4:	2b0a      	cmp	r3, #10
   d5fa6:	d00b      	beq.n	d5fc0 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5fa8:	69f6      	ldr	r6, [r6, #28]
   d5faa:	e7f4      	b.n	d5f96 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d5fac:	f1b8 0f00 	cmp.w	r8, #0
   d5fb0:	d004      	beq.n	d5fbc <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5fb2:	6971      	ldr	r1, [r6, #20]
   d5fb4:	4638      	mov	r0, r7
   d5fb6:	3104      	adds	r1, #4
   d5fb8:	f7ff fcd7 	bl	d596a <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d5fbc:	4641      	mov	r1, r8
   d5fbe:	e7f3      	b.n	d5fa8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5fc0:	f1b9 0f00 	cmp.w	r9, #0
   d5fc4:	d101      	bne.n	d5fca <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d5fc6:	4649      	mov	r1, r9
   d5fc8:	e7ee      	b.n	d5fa8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5fca:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5fcc:	2210      	movs	r2, #16
   d5fce:	a801      	add	r0, sp, #4
   d5fd0:	f001 f996 	bl	d7300 <memset>
                    a.v = 6;
   d5fd4:	2306      	movs	r3, #6
   d5fd6:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5fda:	ad01      	add	r5, sp, #4
   d5fdc:	f104 0308 	add.w	r3, r4, #8
   d5fe0:	3418      	adds	r4, #24
   d5fe2:	6818      	ldr	r0, [r3, #0]
   d5fe4:	6859      	ldr	r1, [r3, #4]
   d5fe6:	462a      	mov	r2, r5
   d5fe8:	c203      	stmia	r2!, {r0, r1}
   d5fea:	3308      	adds	r3, #8
   d5fec:	42a3      	cmp	r3, r4
   d5fee:	4615      	mov	r5, r2
   d5ff0:	d1f7      	bne.n	d5fe2 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d5ff2:	a901      	add	r1, sp, #4
   d5ff4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d5ff6:	ad07      	add	r5, sp, #28
   d5ff8:	f7ff fc98 	bl	d592c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5ffc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5ffe:	1d3c      	adds	r4, r7, #4
   d6000:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6002:	682b      	ldr	r3, [r5, #0]
   d6004:	7023      	strb	r3, [r4, #0]
   d6006:	e7de      	b.n	d5fc6 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6008:	9800      	ldr	r0, [sp, #0]
   d600a:	f7ff f9ef 	bl	d53ec <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d600e:	4638      	mov	r0, r7
   d6010:	b015      	add	sp, #84	; 0x54
   d6012:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d6018 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6018:	4b02      	ldr	r3, [pc, #8]	; (d6024 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d601a:	4a03      	ldr	r2, [pc, #12]	; (d6028 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d601c:	601a      	str	r2, [r3, #0]
   d601e:	2200      	movs	r2, #0
   d6020:	605a      	str	r2, [r3, #4]

} // spark
   d6022:	4770      	bx	lr
   d6024:	2003e5b8 	.word	0x2003e5b8
   d6028:	000d77c4 	.word	0x000d77c4

000d602c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d602c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d602e:	4606      	mov	r6, r0
   d6030:	460d      	mov	r5, r1
  size_t n = 0;
   d6032:	188f      	adds	r7, r1, r2
   d6034:	2400      	movs	r4, #0
  while (size--) {
   d6036:	42bd      	cmp	r5, r7
   d6038:	d00c      	beq.n	d6054 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d603a:	6833      	ldr	r3, [r6, #0]
   d603c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6040:	689b      	ldr	r3, [r3, #8]
   d6042:	4630      	mov	r0, r6
   d6044:	4798      	blx	r3
     if (chunk>=0)
   d6046:	1e03      	subs	r3, r0, #0
   d6048:	db01      	blt.n	d604e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d604a:	441c      	add	r4, r3
  while (size--) {
   d604c:	e7f3      	b.n	d6036 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d604e:	2c00      	cmp	r4, #0
   d6050:	bf08      	it	eq
   d6052:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d6054:	4620      	mov	r0, r4
   d6056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6058 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d6058:	b513      	push	{r0, r1, r4, lr}
   d605a:	4604      	mov	r4, r0
    }
   d605c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d605e:	b159      	cbz	r1, d6078 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d6060:	9101      	str	r1, [sp, #4]
   d6062:	f001 f98b 	bl	d737c <strlen>
   d6066:	6823      	ldr	r3, [r4, #0]
   d6068:	9901      	ldr	r1, [sp, #4]
   d606a:	68db      	ldr	r3, [r3, #12]
   d606c:	4602      	mov	r2, r0
   d606e:	4620      	mov	r0, r4
    }
   d6070:	b002      	add	sp, #8
   d6072:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d6076:	4718      	bx	r3
    }
   d6078:	b002      	add	sp, #8
   d607a:	bd10      	pop	{r4, pc}

000d607c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d607c:	6803      	ldr	r3, [r0, #0]
   d607e:	689b      	ldr	r3, [r3, #8]
   d6080:	4718      	bx	r3

000d6082 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6082:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6084:	210d      	movs	r1, #13
{
   d6086:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6088:	f7ff fff8 	bl	d607c <_ZN5Print5printEc>
  n += print('\n');
   d608c:	210a      	movs	r1, #10
  size_t n = print('\r');
   d608e:	4604      	mov	r4, r0
  n += print('\n');
   d6090:	4628      	mov	r0, r5
   d6092:	f7ff fff3 	bl	d607c <_ZN5Print5printEc>
  return n;
}
   d6096:	4420      	add	r0, r4
   d6098:	bd38      	pop	{r3, r4, r5, pc}

000d609a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d609a:	b530      	push	{r4, r5, lr}
   d609c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d609e:	2300      	movs	r3, #0
   d60a0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d60a4:	2a01      	cmp	r2, #1
   d60a6:	bf98      	it	ls
   d60a8:	220a      	movls	r2, #10
   d60aa:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d60ac:	460d      	mov	r5, r1
   d60ae:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d60b2:	fb01 5312 	mls	r3, r1, r2, r5
   d60b6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d60ba:	2b09      	cmp	r3, #9
   d60bc:	bf94      	ite	ls
   d60be:	3330      	addls	r3, #48	; 0x30
   d60c0:	3337      	addhi	r3, #55	; 0x37
   d60c2:	b2db      	uxtb	r3, r3
  } while(n);
   d60c4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d60c6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d60ca:	d9ef      	bls.n	d60ac <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d60cc:	4621      	mov	r1, r4
   d60ce:	f7ff ffc3 	bl	d6058 <_ZN5Print5writeEPKc>
}
   d60d2:	b00b      	add	sp, #44	; 0x2c
   d60d4:	bd30      	pop	{r4, r5, pc}

000d60d6 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d60d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d60da:	b086      	sub	sp, #24
   d60dc:	af00      	add	r7, sp, #0
   d60de:	4605      	mov	r5, r0
   d60e0:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d60e2:	1d38      	adds	r0, r7, #4
   d60e4:	2114      	movs	r1, #20
{
   d60e6:	4614      	mov	r4, r2
    va_copy(args2, args);
   d60e8:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d60ea:	f7ff fb3b 	bl	d5764 <vsnprintf>

    if (n<bufsize)
   d60ee:	2813      	cmp	r0, #19
   d60f0:	d80e      	bhi.n	d6110 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d60f2:	1d39      	adds	r1, r7, #4
   d60f4:	4628      	mov	r0, r5
   d60f6:	f7ff ffaf 	bl	d6058 <_ZN5Print5writeEPKc>
   d60fa:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d60fc:	b11e      	cbz	r6, d6106 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d60fe:	4628      	mov	r0, r5
   d6100:	f7ff ffbf 	bl	d6082 <_ZN5Print7printlnEv>
   d6104:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d6106:	4620      	mov	r0, r4
   d6108:	3718      	adds	r7, #24
   d610a:	46bd      	mov	sp, r7
   d610c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d6110:	f100 0308 	add.w	r3, r0, #8
   d6114:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d6118:	46e8      	mov	r8, sp
        char bigger[n+1];
   d611a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d611e:	4622      	mov	r2, r4
   d6120:	1c41      	adds	r1, r0, #1
   d6122:	683b      	ldr	r3, [r7, #0]
   d6124:	4668      	mov	r0, sp
   d6126:	f7ff fb1d 	bl	d5764 <vsnprintf>
  return write(str);
   d612a:	4669      	mov	r1, sp
   d612c:	4628      	mov	r0, r5
   d612e:	f7ff ff93 	bl	d6058 <_ZN5Print5writeEPKc>
   d6132:	4604      	mov	r4, r0
   d6134:	46c5      	mov	sp, r8
   d6136:	e7e1      	b.n	d60fc <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d6138 <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
   d6138:	b510      	push	{r4, lr}
   d613a:	4604      	mov	r4, r0
    return LED_RGB_IsOverRidden();
   d613c:	f7ff fa0e 	bl	d555c <LED_RGB_IsOverRidden>
    if (override == controlled()) {
   d6140:	4284      	cmp	r4, r0
   d6142:	d008      	beq.n	d6156 <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
   d6144:	b11c      	cbz	r4, d614e <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
   d6146:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Start();
   d614a:	f7ff b9ef 	b.w	d552c <LED_Signaling_Start>
}
   d614e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Stop();
   d6152:	f7ff b9f3 	b.w	d553c <LED_Signaling_Stop>
}
   d6156:	bd10      	pop	{r4, pc}

000d6158 <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
   d6158:	b570      	push	{r4, r5, r6, lr}
   d615a:	4605      	mov	r5, r0
   d615c:	460e      	mov	r6, r1
   d615e:	4614      	mov	r4, r2
    return LED_RGB_IsOverRidden();
   d6160:	f7ff f9fc 	bl	d555c <LED_RGB_IsOverRidden>
    if (!controlled()) {
   d6164:	b150      	cbz	r0, d617c <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
   d6166:	ea44 2006 	orr.w	r0, r4, r6, lsl #8
   d616a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   d616e:	f7ff f9d5 	bl	d551c <LED_SetSignalingColor>
    LED_On(LED_RGB);
}
   d6172:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LED_On(LED_RGB);
   d6176:	20e7      	movs	r0, #231	; 0xe7
   d6178:	f7ff b9f8 	b.w	d556c <LED_On>
}
   d617c:	bd70      	pop	{r4, r5, r6, pc}

000d617e <_ZN8RGBClass10brightnessEhb>:

void RGBClass::brightness(uint8_t brightness, bool update)
{
   d617e:	b510      	push	{r4, lr}
   d6180:	460c      	mov	r4, r1
    LED_SetBrightness(brightness);
   d6182:	f7ff f9e3 	bl	d554c <LED_SetBrightness>
    return LED_RGB_IsOverRidden();
   d6186:	f7ff f9e9 	bl	d555c <LED_RGB_IsOverRidden>
    if (controlled() && update) {
   d618a:	b128      	cbz	r0, d6198 <_ZN8RGBClass10brightnessEhb+0x1a>
   d618c:	b124      	cbz	r4, d6198 <_ZN8RGBClass10brightnessEhb+0x1a>
        LED_On(LED_RGB);
    }
}
   d618e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_On(LED_RGB);
   d6192:	20e7      	movs	r0, #231	; 0xe7
   d6194:	f7ff b9ea 	b.w	d556c <LED_On>
}
   d6198:	bd10      	pop	{r4, pc}

000d619a <_ZN8RGBClass10brightnessEv>:

uint8_t RGBClass::brightness()
{
    return Get_LED_Brightness();
   d619a:	f7ff b9ef 	b.w	d557c <Get_LED_Brightness>
	...

000d61a0 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   d61a0:	4b01      	ldr	r3, [pc, #4]	; (d61a8 <_GLOBAL__sub_I_RGB+0x8>)
   d61a2:	2200      	movs	r2, #0
   d61a4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d61a6:	4770      	bx	lr
   d61a8:	2003e5c0 	.word	0x2003e5c0

000d61ac <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d61ac:	b510      	push	{r4, lr}
   d61ae:	4604      	mov	r4, r0
   d61b0:	4608      	mov	r0, r1
{
    _spi = spi;
   d61b2:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d61b4:	f7ff f92a 	bl	d540c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d61b8:	2300      	movs	r3, #0
   d61ba:	6063      	str	r3, [r4, #4]
}
   d61bc:	4620      	mov	r0, r4
   d61be:	bd10      	pop	{r4, pc}

000d61c0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d61c0:	b510      	push	{r4, lr}
   d61c2:	4604      	mov	r4, r0
{
	free(buffer);
   d61c4:	6800      	ldr	r0, [r0, #0]
   d61c6:	f7ff fabd 	bl	d5744 <free>
}
   d61ca:	4620      	mov	r0, r4
   d61cc:	bd10      	pop	{r4, pc}

000d61ce <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d61ce:	b510      	push	{r4, lr}
   d61d0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d61d2:	6800      	ldr	r0, [r0, #0]
   d61d4:	b108      	cbz	r0, d61da <_ZN6String10invalidateEv+0xc>
   d61d6:	f7ff fab5 	bl	d5744 <free>
	buffer = NULL;
   d61da:	2300      	movs	r3, #0
	capacity = len = 0;
   d61dc:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d61e0:	6023      	str	r3, [r4, #0]
}
   d61e2:	bd10      	pop	{r4, pc}

000d61e4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d61e4:	b538      	push	{r3, r4, r5, lr}
   d61e6:	4604      	mov	r4, r0
   d61e8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d61ea:	6800      	ldr	r0, [r0, #0]
   d61ec:	3101      	adds	r1, #1
   d61ee:	f7ff fab1 	bl	d5754 <realloc>
	if (newbuffer) {
   d61f2:	b110      	cbz	r0, d61fa <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d61f4:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d61f8:	2001      	movs	r0, #1
	}
	return 0;
}
   d61fa:	bd38      	pop	{r3, r4, r5, pc}

000d61fc <_ZN6String7reserveEj>:
{
   d61fc:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d61fe:	6803      	ldr	r3, [r0, #0]
{
   d6200:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d6202:	b123      	cbz	r3, d620e <_ZN6String7reserveEj+0x12>
   d6204:	6843      	ldr	r3, [r0, #4]
   d6206:	428b      	cmp	r3, r1
   d6208:	d301      	bcc.n	d620e <_ZN6String7reserveEj+0x12>
   d620a:	2001      	movs	r0, #1
}
   d620c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d620e:	4620      	mov	r0, r4
   d6210:	f7ff ffe8 	bl	d61e4 <_ZN6String12changeBufferEj>
   d6214:	2800      	cmp	r0, #0
   d6216:	d0f9      	beq.n	d620c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d6218:	68a3      	ldr	r3, [r4, #8]
   d621a:	2b00      	cmp	r3, #0
   d621c:	d1f5      	bne.n	d620a <_ZN6String7reserveEj+0xe>
   d621e:	6822      	ldr	r2, [r4, #0]
   d6220:	7013      	strb	r3, [r2, #0]
   d6222:	e7f2      	b.n	d620a <_ZN6String7reserveEj+0xe>

000d6224 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6224:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6226:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d6228:	4611      	mov	r1, r2
   d622a:	9201      	str	r2, [sp, #4]
{
   d622c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d622e:	f7ff ffe5 	bl	d61fc <_ZN6String7reserveEj>
   d6232:	9a01      	ldr	r2, [sp, #4]
   d6234:	b928      	cbnz	r0, d6242 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d6236:	4620      	mov	r0, r4
   d6238:	f7ff ffc9 	bl	d61ce <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d623c:	4620      	mov	r0, r4
   d623e:	b003      	add	sp, #12
   d6240:	bd30      	pop	{r4, r5, pc}
	len = length;
   d6242:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d6244:	4629      	mov	r1, r5
   d6246:	6820      	ldr	r0, [r4, #0]
   d6248:	f001 f832 	bl	d72b0 <memcpy>
	buffer[len] = 0;
   d624c:	6822      	ldr	r2, [r4, #0]
   d624e:	68a3      	ldr	r3, [r4, #8]
   d6250:	2100      	movs	r1, #0
   d6252:	54d1      	strb	r1, [r2, r3]
	return *this;
   d6254:	e7f2      	b.n	d623c <_ZN6String4copyEPKcj+0x18>

000d6256 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d6256:	2300      	movs	r3, #0
String::String(const char *cstr)
   d6258:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d625a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d625e:	4604      	mov	r4, r0
	len = 0;
   d6260:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6262:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d6264:	b141      	cbz	r1, d6278 <_ZN6StringC1EPKc+0x22>
   d6266:	4608      	mov	r0, r1
   d6268:	9101      	str	r1, [sp, #4]
   d626a:	f001 f887 	bl	d737c <strlen>
   d626e:	9901      	ldr	r1, [sp, #4]
   d6270:	4602      	mov	r2, r0
   d6272:	4620      	mov	r0, r4
   d6274:	f7ff ffd6 	bl	d6224 <_ZN6String4copyEPKcj>
}
   d6278:	4620      	mov	r0, r4
   d627a:	b002      	add	sp, #8
   d627c:	bd10      	pop	{r4, pc}

000d627e <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d627e:	b538      	push	{r3, r4, r5, lr}
   d6280:	4605      	mov	r5, r0
	if (buffer) {
   d6282:	6800      	ldr	r0, [r0, #0]
{
   d6284:	460c      	mov	r4, r1
	if (buffer) {
   d6286:	b168      	cbz	r0, d62a4 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d6288:	686a      	ldr	r2, [r5, #4]
   d628a:	688b      	ldr	r3, [r1, #8]
   d628c:	429a      	cmp	r2, r3
   d628e:	d307      	bcc.n	d62a0 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d6290:	6809      	ldr	r1, [r1, #0]
   d6292:	f001 f86b 	bl	d736c <strcpy>
			len = rhs.len;
   d6296:	68a3      	ldr	r3, [r4, #8]
   d6298:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d629a:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d629c:	60a3      	str	r3, [r4, #8]
}
   d629e:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d62a0:	f7ff fa50 	bl	d5744 <free>
	buffer = rhs.buffer;
   d62a4:	6823      	ldr	r3, [r4, #0]
   d62a6:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d62a8:	6863      	ldr	r3, [r4, #4]
   d62aa:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d62ac:	68a3      	ldr	r3, [r4, #8]
   d62ae:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d62b0:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d62b2:	e9c4 3300 	strd	r3, r3, [r4]
   d62b6:	e7f1      	b.n	d629c <_ZN6String4moveERS_+0x1e>

000d62b8 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d62b8:	4288      	cmp	r0, r1
{
   d62ba:	b510      	push	{r4, lr}
   d62bc:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d62be:	d005      	beq.n	d62cc <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d62c0:	680b      	ldr	r3, [r1, #0]
   d62c2:	b12b      	cbz	r3, d62d0 <_ZN6StringaSERKS_+0x18>
   d62c4:	688a      	ldr	r2, [r1, #8]
   d62c6:	4619      	mov	r1, r3
   d62c8:	f7ff ffac 	bl	d6224 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d62cc:	4620      	mov	r0, r4
   d62ce:	bd10      	pop	{r4, pc}
	else invalidate();
   d62d0:	f7ff ff7d 	bl	d61ce <_ZN6String10invalidateEv>
   d62d4:	e7fa      	b.n	d62cc <_ZN6StringaSERKS_+0x14>

000d62d6 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d62d6:	b510      	push	{r4, lr}
	buffer = NULL;
   d62d8:	2300      	movs	r3, #0
String::String(const String &value)
   d62da:	4604      	mov	r4, r0
	capacity = 0;
   d62dc:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d62e0:	6083      	str	r3, [r0, #8]
	flags = 0;
   d62e2:	7303      	strb	r3, [r0, #12]
	*this = value;
   d62e4:	f7ff ffe8 	bl	d62b8 <_ZN6StringaSERKS_>
}
   d62e8:	4620      	mov	r0, r4
   d62ea:	bd10      	pop	{r4, pc}

000d62ec <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d62ec:	4288      	cmp	r0, r1
{
   d62ee:	b510      	push	{r4, lr}
   d62f0:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d62f2:	d001      	beq.n	d62f8 <_ZN6StringaSEOS_+0xc>
   d62f4:	f7ff ffc3 	bl	d627e <_ZN6String4moveERS_>
	return *this;
}
   d62f8:	4620      	mov	r0, r4
   d62fa:	bd10      	pop	{r4, pc}

000d62fc <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d62fc:	b513      	push	{r0, r1, r4, lr}
   d62fe:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d6300:	b159      	cbz	r1, d631a <_ZN6StringaSEPKc+0x1e>
   d6302:	4608      	mov	r0, r1
   d6304:	9101      	str	r1, [sp, #4]
   d6306:	f001 f839 	bl	d737c <strlen>
   d630a:	9901      	ldr	r1, [sp, #4]
   d630c:	4602      	mov	r2, r0
   d630e:	4620      	mov	r0, r4
   d6310:	f7ff ff88 	bl	d6224 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d6314:	4620      	mov	r0, r4
   d6316:	b002      	add	sp, #8
   d6318:	bd10      	pop	{r4, pc}
	else invalidate();
   d631a:	f7ff ff58 	bl	d61ce <_ZN6String10invalidateEv>
   d631e:	e7f9      	b.n	d6314 <_ZN6StringaSEPKc+0x18>

000d6320 <_ZN6StringC1Ec>:
String::String(char c)
   d6320:	b513      	push	{r0, r1, r4, lr}
	buffer = NULL;
   d6322:	2300      	movs	r3, #0
	buf[0] = c;
   d6324:	f88d 1004 	strb.w	r1, [sp, #4]
	capacity = 0;
   d6328:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d632c:	6083      	str	r3, [r0, #8]
	flags = 0;
   d632e:	7303      	strb	r3, [r0, #12]
	*this = buf;
   d6330:	a901      	add	r1, sp, #4
String::String(char c)
   d6332:	4604      	mov	r4, r0
	buf[1] = 0;
   d6334:	f88d 3005 	strb.w	r3, [sp, #5]
	*this = buf;
   d6338:	f7ff ffe0 	bl	d62fc <_ZN6StringaSEPKc>
}
   d633c:	4620      	mov	r0, r4
   d633e:	b002      	add	sp, #8
   d6340:	bd10      	pop	{r4, pc}

000d6342 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d6342:	b570      	push	{r4, r5, r6, lr}
   d6344:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d6346:	460e      	mov	r6, r1
   d6348:	b909      	cbnz	r1, d634e <_ZN6String6concatEPKcj+0xc>
   d634a:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d634c:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d634e:	b16a      	cbz	r2, d636c <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d6350:	6884      	ldr	r4, [r0, #8]
   d6352:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d6354:	4621      	mov	r1, r4
   d6356:	f7ff ff51 	bl	d61fc <_ZN6String7reserveEj>
   d635a:	2800      	cmp	r0, #0
   d635c:	d0f5      	beq.n	d634a <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d635e:	6828      	ldr	r0, [r5, #0]
   d6360:	68ab      	ldr	r3, [r5, #8]
   d6362:	4631      	mov	r1, r6
   d6364:	4418      	add	r0, r3
   d6366:	f001 f801 	bl	d736c <strcpy>
	len = newlen;
   d636a:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d636c:	2001      	movs	r0, #1
   d636e:	e7ed      	b.n	d634c <_ZN6String6concatEPKcj+0xa>

000d6370 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   d6370:	688a      	ldr	r2, [r1, #8]
   d6372:	6809      	ldr	r1, [r1, #0]
   d6374:	f7ff bfe5 	b.w	d6342 <_ZN6String6concatEPKcj>

000d6378 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   d6378:	b40e      	push	{r1, r2, r3}
   d637a:	b570      	push	{r4, r5, r6, lr}
   d637c:	b087      	sub	sp, #28
   d637e:	ad0b      	add	r5, sp, #44	; 0x2c
   d6380:	4604      	mov	r4, r0
   d6382:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d6386:	9201      	str	r2, [sp, #4]
   d6388:	462b      	mov	r3, r5
   d638a:	2105      	movs	r1, #5
   d638c:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   d638e:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d6390:	f7ff f9e8 	bl	d5764 <vsnprintf>
    va_end(marker);

    String result;
   d6394:	490b      	ldr	r1, [pc, #44]	; (d63c4 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d6396:	4606      	mov	r6, r0
    String result;
   d6398:	4620      	mov	r0, r4
   d639a:	f7ff ff5c 	bl	d6256 <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
   d639e:	4631      	mov	r1, r6
   d63a0:	4620      	mov	r0, r4
   d63a2:	f7ff ff2b 	bl	d61fc <_ZN6String7reserveEj>
    if (result.buffer) {
   d63a6:	6820      	ldr	r0, [r4, #0]
   d63a8:	b130      	cbz	r0, d63b8 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d63aa:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   d63ac:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d63ae:	462b      	mov	r3, r5
   d63b0:	1c71      	adds	r1, r6, #1
   d63b2:	f7ff f9d7 	bl	d5764 <vsnprintf>
        va_end(marker);
        result.len = n;
   d63b6:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   d63b8:	4620      	mov	r0, r4
   d63ba:	b007      	add	sp, #28
   d63bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d63c0:	b003      	add	sp, #12
   d63c2:	4770      	bx	lr
   d63c4:	000d7793 	.word	0x000d7793

000d63c8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d63c8:	4b05      	ldr	r3, [pc, #20]	; (d63e0 <_GLOBAL__sub_I_System+0x18>)
   d63ca:	2202      	movs	r2, #2
   d63cc:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d63ce:	4b05      	ldr	r3, [pc, #20]	; (d63e4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   d63d0:	4a05      	ldr	r2, [pc, #20]	; (d63e8 <_GLOBAL__sub_I_System+0x20>)
   d63d2:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d63d4:	2000      	movs	r0, #0
   d63d6:	6018      	str	r0, [r3, #0]
   d63d8:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   d63da:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d63dc:	f7ff b8f6 	b.w	d55cc <set_system_mode>
   d63e0:	2003e5dc 	.word	0x2003e5dc
   d63e4:	2003e5d0 	.word	0x2003e5d0
   d63e8:	ffff0000 	.word	0xffff0000

000d63ec <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d63ec:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d63ee:	2000      	movs	r0, #0
   d63f0:	f7ff f930 	bl	d5654 <spark_sync_time_pending>
   d63f4:	b128      	cbz	r0, d6402 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d63f6:	f7ff f925 	bl	d5644 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d63fa:	f080 0001 	eor.w	r0, r0, #1
   d63fe:	b2c0      	uxtb	r0, r0
    }
   d6400:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d6402:	2001      	movs	r0, #1
   d6404:	e7fc      	b.n	d6400 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d6406 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d6406:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d6408:	2000      	movs	r0, #0
   d640a:	f7fe ff5f 	bl	d52cc <hal_rtc_time_is_valid>
    if (rtcstate)
   d640e:	4604      	mov	r4, r0
   d6410:	b9a0      	cbnz	r0, d643c <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d6412:	f7ff f8d3 	bl	d55bc <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d6416:	2801      	cmp	r0, #1
   d6418:	d110      	bne.n	d643c <_ZN9TimeClass7isValidEv+0x36>
   d641a:	4620      	mov	r0, r4
   d641c:	f7ff f8ee 	bl	d55fc <system_thread_get_state>
   d6420:	b960      	cbnz	r0, d643c <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d6422:	f7ff ffe3 	bl	d63ec <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d6426:	b910      	cbnz	r0, d642e <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d6428:	f7ff f904 	bl	d5634 <spark_process>
        while (_while() && !_condition()) {
   d642c:	e7f9      	b.n	d6422 <_ZN9TimeClass7isValidEv+0x1c>
   d642e:	f7ff ffdd 	bl	d63ec <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d6432:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d6436:	2000      	movs	r0, #0
   d6438:	f7fe bf48 	b.w	d52cc <hal_rtc_time_is_valid>
}
   d643c:	4620      	mov	r0, r4
   d643e:	bd10      	pop	{r4, pc}

000d6440 <_ZN9TimeClass3nowEv>:
{
   d6440:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d6442:	f7ff ffe0 	bl	d6406 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d6446:	2210      	movs	r2, #16
   d6448:	2100      	movs	r1, #0
   d644a:	4668      	mov	r0, sp
   d644c:	f000 ff58 	bl	d7300 <memset>
    hal_rtc_get_time(&tv, nullptr);
   d6450:	2100      	movs	r1, #0
   d6452:	4668      	mov	r0, sp
   d6454:	f7fe ff42 	bl	d52dc <hal_rtc_get_time>
}
   d6458:	9800      	ldr	r0, [sp, #0]
   d645a:	b005      	add	sp, #20
   d645c:	f85d fb04 	ldr.w	pc, [sp], #4

000d6460 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6460:	4b02      	ldr	r3, [pc, #8]	; (d646c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6462:	681a      	ldr	r2, [r3, #0]
   d6464:	4b02      	ldr	r3, [pc, #8]	; (d6470 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6466:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d6468:	4770      	bx	lr
   d646a:	bf00      	nop
   d646c:	2003e44c 	.word	0x2003e44c
   d6470:	2003e5e0 	.word	0x2003e5e0

000d6474 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d6474:	4770      	bx	lr

000d6476 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6476:	7441      	strb	r1, [r0, #17]
}
   d6478:	4770      	bx	lr

000d647a <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d647a:	4770      	bx	lr

000d647c <_ZN11USARTSerial17availableForWriteEv>:
{
   d647c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d647e:	7c00      	ldrb	r0, [r0, #16]
   d6480:	f7ff f80c 	bl	d549c <hal_usart_available_data_for_write>
}
   d6484:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6488:	bd08      	pop	{r3, pc}

000d648a <_ZN11USARTSerial9availableEv>:
{
   d648a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d648c:	7c00      	ldrb	r0, [r0, #16]
   d648e:	f7fe ffdd 	bl	d544c <hal_usart_available>
}
   d6492:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6496:	bd08      	pop	{r3, pc}

000d6498 <_ZN11USARTSerial4peekEv>:
{
   d6498:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d649a:	7c00      	ldrb	r0, [r0, #16]
   d649c:	f7fe ffe6 	bl	d546c <hal_usart_peek>
}
   d64a0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d64a4:	bd08      	pop	{r3, pc}

000d64a6 <_ZN11USARTSerial4readEv>:
{
   d64a6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d64a8:	7c00      	ldrb	r0, [r0, #16]
   d64aa:	f7fe ffd7 	bl	d545c <hal_usart_read>
}
   d64ae:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d64b2:	bd08      	pop	{r3, pc}

000d64b4 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   d64b4:	7c00      	ldrb	r0, [r0, #16]
   d64b6:	f7fe bfe1 	b.w	d547c <hal_usart_flush>

000d64ba <_ZN11USARTSerial5writeEh>:
{
   d64ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d64bc:	7c45      	ldrb	r5, [r0, #17]
{
   d64be:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d64c0:	b12d      	cbz	r5, d64ce <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   d64c2:	7c20      	ldrb	r0, [r4, #16]
}
   d64c4:	b003      	add	sp, #12
   d64c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d64ca:	f7fe bfb7 	b.w	d543c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d64ce:	7c00      	ldrb	r0, [r0, #16]
   d64d0:	9101      	str	r1, [sp, #4]
   d64d2:	f7fe ffe3 	bl	d549c <hal_usart_available_data_for_write>
   d64d6:	2800      	cmp	r0, #0
   d64d8:	9901      	ldr	r1, [sp, #4]
   d64da:	dcf2      	bgt.n	d64c2 <_ZN11USARTSerial5writeEh+0x8>
}
   d64dc:	4628      	mov	r0, r5
   d64de:	b003      	add	sp, #12
   d64e0:	bd30      	pop	{r4, r5, pc}

000d64e2 <_ZN11USARTSerialD0Ev>:
   d64e2:	b510      	push	{r4, lr}
   d64e4:	2114      	movs	r1, #20
   d64e6:	4604      	mov	r4, r0
   d64e8:	f000 fa58 	bl	d699c <_ZdlPvj>
   d64ec:	4620      	mov	r0, r4
   d64ee:	bd10      	pop	{r4, pc}

000d64f0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d64f0:	b510      	push	{r4, lr}
   d64f2:	f04f 0c00 	mov.w	ip, #0
   d64f6:	4604      	mov	r4, r0
   d64f8:	4608      	mov	r0, r1
   d64fa:	4611      	mov	r1, r2
   d64fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6500:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d6504:	4a04      	ldr	r2, [pc, #16]	; (d6518 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d6506:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d6508:	2201      	movs	r2, #1
  _serial = serial;
   d650a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d650c:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d650e:	461a      	mov	r2, r3
   d6510:	f7fe ff8c 	bl	d542c <hal_usart_init>
}
   d6514:	4620      	mov	r0, r4
   d6516:	bd10      	pop	{r4, pc}
   d6518:	000d781c 	.word	0x000d781c

000d651c <_Z22__fetch_global_Serial1v>:
{
   d651c:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d651e:	4c0d      	ldr	r4, [pc, #52]	; (d6554 <_Z22__fetch_global_Serial1v+0x38>)
   d6520:	7821      	ldrb	r1, [r4, #0]
   d6522:	f3bf 8f5b 	dmb	ish
   d6526:	f011 0101 	ands.w	r1, r1, #1
   d652a:	d110      	bne.n	d654e <_Z22__fetch_global_Serial1v+0x32>
   d652c:	4620      	mov	r0, r4
   d652e:	9101      	str	r1, [sp, #4]
   d6530:	f7fd fdb9 	bl	d40a6 <__cxa_guard_acquire>
   d6534:	9901      	ldr	r1, [sp, #4]
   d6536:	b150      	cbz	r0, d654e <_Z22__fetch_global_Serial1v+0x32>
   d6538:	4b07      	ldr	r3, [pc, #28]	; (d6558 <_Z22__fetch_global_Serial1v+0x3c>)
   d653a:	4a08      	ldr	r2, [pc, #32]	; (d655c <_Z22__fetch_global_Serial1v+0x40>)
   d653c:	4808      	ldr	r0, [pc, #32]	; (d6560 <_Z22__fetch_global_Serial1v+0x44>)
   d653e:	f7ff ffd7 	bl	d64f0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d6542:	4620      	mov	r0, r4
   d6544:	f7fd fdb4 	bl	d40b0 <__cxa_guard_release>
   d6548:	4806      	ldr	r0, [pc, #24]	; (d6564 <_Z22__fetch_global_Serial1v+0x48>)
   d654a:	f000 feab 	bl	d72a4 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d654e:	4804      	ldr	r0, [pc, #16]	; (d6560 <_Z22__fetch_global_Serial1v+0x44>)
   d6550:	b002      	add	sp, #8
   d6552:	bd10      	pop	{r4, pc}
   d6554:	2003e5e4 	.word	0x2003e5e4
   d6558:	2003e66c 	.word	0x2003e66c
   d655c:	2003e5e8 	.word	0x2003e5e8
   d6560:	2003e6f0 	.word	0x2003e6f0
   d6564:	000d647b 	.word	0x000d647b

000d6568 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6568:	7441      	strb	r1, [r0, #17]
}
   d656a:	4770      	bx	lr

000d656c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d656c:	4770      	bx	lr

000d656e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d656e:	4770      	bx	lr

000d6570 <_ZN9USBSerial4readEv>:
{
   d6570:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6572:	2100      	movs	r1, #0
   d6574:	7c00      	ldrb	r0, [r0, #16]
   d6576:	f7fe ffb9 	bl	d54ec <HAL_USB_USART_Receive_Data>
}
   d657a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d657e:	bd08      	pop	{r3, pc}

000d6580 <_ZN9USBSerial4peekEv>:
{
   d6580:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6582:	2101      	movs	r1, #1
   d6584:	7c00      	ldrb	r0, [r0, #16]
   d6586:	f7fe ffb1 	bl	d54ec <HAL_USB_USART_Receive_Data>
}
   d658a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d658e:	bd08      	pop	{r3, pc}

000d6590 <_ZN9USBSerial17availableForWriteEv>:
{
   d6590:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6592:	7c00      	ldrb	r0, [r0, #16]
   d6594:	f7fe ffa2 	bl	d54dc <HAL_USB_USART_Available_Data_For_Write>
}
   d6598:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d659c:	bd08      	pop	{r3, pc}

000d659e <_ZN9USBSerial9availableEv>:
{
   d659e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d65a0:	7c00      	ldrb	r0, [r0, #16]
   d65a2:	f7fe ff93 	bl	d54cc <HAL_USB_USART_Available_Data>
}
   d65a6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d65aa:	bd08      	pop	{r3, pc}

000d65ac <_ZN9USBSerial5writeEh>:
{
   d65ac:	b513      	push	{r0, r1, r4, lr}
   d65ae:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d65b0:	7c00      	ldrb	r0, [r0, #16]
{
   d65b2:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d65b4:	f7fe ff92 	bl	d54dc <HAL_USB_USART_Available_Data_For_Write>
   d65b8:	2800      	cmp	r0, #0
   d65ba:	9901      	ldr	r1, [sp, #4]
   d65bc:	dc01      	bgt.n	d65c2 <_ZN9USBSerial5writeEh+0x16>
   d65be:	7c60      	ldrb	r0, [r4, #17]
   d65c0:	b120      	cbz	r0, d65cc <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d65c2:	7c20      	ldrb	r0, [r4, #16]
   d65c4:	f7fe ff9a 	bl	d54fc <HAL_USB_USART_Send_Data>
   d65c8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d65cc:	b002      	add	sp, #8
   d65ce:	bd10      	pop	{r4, pc}

000d65d0 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d65d0:	7c00      	ldrb	r0, [r0, #16]
   d65d2:	f7fe bf9b 	b.w	d550c <HAL_USB_USART_Flush_Data>

000d65d6 <_ZN9USBSerialD0Ev>:
   d65d6:	b510      	push	{r4, lr}
   d65d8:	2114      	movs	r1, #20
   d65da:	4604      	mov	r4, r0
   d65dc:	f000 f9de 	bl	d699c <_ZdlPvj>
   d65e0:	4620      	mov	r0, r4
   d65e2:	bd10      	pop	{r4, pc}

000d65e4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d65e4:	b510      	push	{r4, lr}
   d65e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d65ea:	4604      	mov	r4, r0
   d65ec:	4608      	mov	r0, r1
   d65ee:	2100      	movs	r1, #0
   d65f0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d65f4:	4b04      	ldr	r3, [pc, #16]	; (d6608 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d65f6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d65f8:	2301      	movs	r3, #1
  _serial = serial;
   d65fa:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d65fc:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d65fe:	4611      	mov	r1, r2
   d6600:	f7fe ff54 	bl	d54ac <HAL_USB_USART_Init>
}
   d6604:	4620      	mov	r0, r4
   d6606:	bd10      	pop	{r4, pc}
   d6608:	000d784c 	.word	0x000d784c

000d660c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d660c:	7c00      	ldrb	r0, [r0, #16]
   d660e:	2200      	movs	r2, #0
   d6610:	f7fe bf54 	b.w	d54bc <HAL_USB_USART_Begin>

000d6614 <_Z19acquireSerialBufferv>:
{
   d6614:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6616:	2214      	movs	r2, #20
{
   d6618:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d661a:	2100      	movs	r1, #0
   d661c:	f000 fe70 	bl	d7300 <memset>
}
   d6620:	4620      	mov	r0, r4
   d6622:	bd10      	pop	{r4, pc}

000d6624 <_Z16_fetch_usbserialv>:
{
   d6624:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6626:	4c0f      	ldr	r4, [pc, #60]	; (d6664 <_Z16_fetch_usbserialv+0x40>)
{
   d6628:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d662a:	a803      	add	r0, sp, #12
   d662c:	f7ff fff2 	bl	d6614 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6630:	7821      	ldrb	r1, [r4, #0]
   d6632:	f3bf 8f5b 	dmb	ish
   d6636:	f011 0101 	ands.w	r1, r1, #1
   d663a:	d10f      	bne.n	d665c <_Z16_fetch_usbserialv+0x38>
   d663c:	4620      	mov	r0, r4
   d663e:	9101      	str	r1, [sp, #4]
   d6640:	f7fd fd31 	bl	d40a6 <__cxa_guard_acquire>
   d6644:	9901      	ldr	r1, [sp, #4]
   d6646:	b148      	cbz	r0, d665c <_Z16_fetch_usbserialv+0x38>
   d6648:	aa03      	add	r2, sp, #12
   d664a:	4807      	ldr	r0, [pc, #28]	; (d6668 <_Z16_fetch_usbserialv+0x44>)
   d664c:	f7ff ffca 	bl	d65e4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6650:	4620      	mov	r0, r4
   d6652:	f7fd fd2d 	bl	d40b0 <__cxa_guard_release>
   d6656:	4805      	ldr	r0, [pc, #20]	; (d666c <_Z16_fetch_usbserialv+0x48>)
   d6658:	f000 fe24 	bl	d72a4 <atexit>
	return _usbserial;
}
   d665c:	4802      	ldr	r0, [pc, #8]	; (d6668 <_Z16_fetch_usbserialv+0x44>)
   d665e:	b008      	add	sp, #32
   d6660:	bd10      	pop	{r4, pc}
   d6662:	bf00      	nop
   d6664:	2003e704 	.word	0x2003e704
   d6668:	2003e708 	.word	0x2003e708
   d666c:	000d656d 	.word	0x000d656d

000d6670 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6670:	2200      	movs	r2, #0
   d6672:	6840      	ldr	r0, [r0, #4]
   d6674:	4611      	mov	r1, r2
   d6676:	f7ff b815 	b.w	d56a4 <network_ready>

000d667a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d667a:	2200      	movs	r2, #0
   d667c:	6840      	ldr	r0, [r0, #4]
   d667e:	4611      	mov	r1, r2
   d6680:	f7ff b830 	b.w	d56e4 <network_listening>

000d6684 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d6684:	2200      	movs	r2, #0
   d6686:	6840      	ldr	r0, [r0, #4]
   d6688:	4611      	mov	r1, r2
   d668a:	f7ff b83b 	b.w	d5704 <network_get_listen_timeout>

000d668e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d668e:	6840      	ldr	r0, [r0, #4]
   d6690:	2200      	movs	r2, #0
   d6692:	f7ff b82f 	b.w	d56f4 <network_set_listen_timeout>

000d6696 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d6696:	6840      	ldr	r0, [r0, #4]
   d6698:	2200      	movs	r2, #0
   d669a:	f081 0101 	eor.w	r1, r1, #1
   d669e:	f7ff b819 	b.w	d56d4 <network_listen>

000d66a2 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d66a2:	2300      	movs	r3, #0
   d66a4:	6840      	ldr	r0, [r0, #4]
   d66a6:	461a      	mov	r2, r3
   d66a8:	4619      	mov	r1, r3
   d66aa:	f7ff b80b 	b.w	d56c4 <network_off>

000d66ae <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d66ae:	2300      	movs	r3, #0
   d66b0:	6840      	ldr	r0, [r0, #4]
   d66b2:	461a      	mov	r2, r3
   d66b4:	4619      	mov	r1, r3
   d66b6:	f7fe bffd 	b.w	d56b4 <network_on>

000d66ba <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d66ba:	2200      	movs	r2, #0
   d66bc:	6840      	ldr	r0, [r0, #4]
   d66be:	4611      	mov	r1, r2
   d66c0:	f7fe bfe0 	b.w	d5684 <network_connecting>

000d66c4 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d66c4:	6840      	ldr	r0, [r0, #4]
   d66c6:	2200      	movs	r2, #0
   d66c8:	2102      	movs	r1, #2
   d66ca:	f7fe bfe3 	b.w	d5694 <network_disconnect>

000d66ce <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d66ce:	2300      	movs	r3, #0
   d66d0:	6840      	ldr	r0, [r0, #4]
   d66d2:	461a      	mov	r2, r3
   d66d4:	f7fe bfce 	b.w	d5674 <network_connect>

000d66d8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d66d8:	4b02      	ldr	r3, [pc, #8]	; (d66e4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d66da:	2204      	movs	r2, #4
   d66dc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d66de:	4a02      	ldr	r2, [pc, #8]	; (d66e8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d66e0:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d66e2:	4770      	bx	lr
   d66e4:	2003e71c 	.word	0x2003e71c
   d66e8:	000d787c 	.word	0x000d787c

000d66ec <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d66ec:	4b01      	ldr	r3, [pc, #4]	; (d66f4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d66ee:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d66f0:	4770      	bx	lr
   d66f2:	bf00      	nop
   d66f4:	2003e450 	.word	0x2003e450

000d66f8 <serialEventRun>:
{
   d66f8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d66fa:	4b0b      	ldr	r3, [pc, #44]	; (d6728 <serialEventRun+0x30>)
   d66fc:	b143      	cbz	r3, d6710 <serialEventRun+0x18>
   d66fe:	f7ff ff91 	bl	d6624 <_Z16_fetch_usbserialv>
   d6702:	6803      	ldr	r3, [r0, #0]
   d6704:	691b      	ldr	r3, [r3, #16]
   d6706:	4798      	blx	r3
   d6708:	2800      	cmp	r0, #0
   d670a:	dd01      	ble.n	d6710 <serialEventRun+0x18>
        serialEvent();
   d670c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d6710:	4b06      	ldr	r3, [pc, #24]	; (d672c <serialEventRun+0x34>)
   d6712:	b143      	cbz	r3, d6726 <serialEventRun+0x2e>
   d6714:	f7ff ff02 	bl	d651c <_Z22__fetch_global_Serial1v>
   d6718:	6803      	ldr	r3, [r0, #0]
   d671a:	691b      	ldr	r3, [r3, #16]
   d671c:	4798      	blx	r3
   d671e:	2800      	cmp	r0, #0
   d6720:	dd01      	ble.n	d6726 <serialEventRun+0x2e>
        serialEvent1();
   d6722:	f3af 8000 	nop.w
}
   d6726:	bd08      	pop	{r3, pc}
	...

000d6730 <_post_loop>:
{
   d6730:	b508      	push	{r3, lr}
	serialEventRun();
   d6732:	f7ff ffe1 	bl	d66f8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6736:	f7fe fdc1 	bl	d52bc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d673a:	4b01      	ldr	r3, [pc, #4]	; (d6740 <_post_loop+0x10>)
   d673c:	6018      	str	r0, [r3, #0]
}
   d673e:	bd08      	pop	{r3, pc}
   d6740:	2003e738 	.word	0x2003e738

000d6744 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d6744:	4805      	ldr	r0, [pc, #20]	; (d675c <_Z33system_initialize_user_backup_ramv+0x18>)
   d6746:	4a06      	ldr	r2, [pc, #24]	; (d6760 <_Z33system_initialize_user_backup_ramv+0x1c>)
   d6748:	4906      	ldr	r1, [pc, #24]	; (d6764 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   d674a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d674c:	1a12      	subs	r2, r2, r0
   d674e:	f000 fdaf 	bl	d72b0 <memcpy>
    __backup_sram_signature = signature;
   d6752:	4b05      	ldr	r3, [pc, #20]	; (d6768 <_Z33system_initialize_user_backup_ramv+0x24>)
   d6754:	4a05      	ldr	r2, [pc, #20]	; (d676c <_Z33system_initialize_user_backup_ramv+0x28>)
   d6756:	601a      	str	r2, [r3, #0]
}
   d6758:	bd08      	pop	{r3, pc}
   d675a:	bf00      	nop
   d675c:	2003f400 	.word	0x2003f400
   d6760:	2003f404 	.word	0x2003f404
   d6764:	000d79e0 	.word	0x000d79e0
   d6768:	2003f400 	.word	0x2003f400
   d676c:	9a271c1e 	.word	0x9a271c1e

000d6770 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6770:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6772:	2300      	movs	r3, #0
   d6774:	9300      	str	r3, [sp, #0]
   d6776:	461a      	mov	r2, r3
   d6778:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d677c:	f7fe ff50 	bl	d5620 <system_ctrl_set_result>
}
   d6780:	b003      	add	sp, #12
   d6782:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6788 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d6788:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d678a:	8843      	ldrh	r3, [r0, #2]
   d678c:	2b0a      	cmp	r3, #10
   d678e:	d008      	beq.n	d67a2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6790:	2b50      	cmp	r3, #80	; 0x50
   d6792:	d10b      	bne.n	d67ac <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d6794:	4b09      	ldr	r3, [pc, #36]	; (d67bc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6796:	681b      	ldr	r3, [r3, #0]
   d6798:	b14b      	cbz	r3, d67ae <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d679a:	b003      	add	sp, #12
   d679c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d67a0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d67a2:	f7ff ffe5 	bl	d6770 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d67a6:	b003      	add	sp, #12
   d67a8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d67ac:	2300      	movs	r3, #0
   d67ae:	9300      	str	r3, [sp, #0]
   d67b0:	461a      	mov	r2, r3
   d67b2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d67b6:	f7fe ff33 	bl	d5620 <system_ctrl_set_result>
}
   d67ba:	e7f4      	b.n	d67a6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d67bc:	2003e728 	.word	0x2003e728

000d67c0 <module_user_init_hook>:
{
   d67c0:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d67c2:	4812      	ldr	r0, [pc, #72]	; (d680c <module_user_init_hook+0x4c>)
   d67c4:	2100      	movs	r1, #0
   d67c6:	f7fe ffd5 	bl	d5774 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   d67ca:	4b11      	ldr	r3, [pc, #68]	; (d6810 <module_user_init_hook+0x50>)
   d67cc:	681a      	ldr	r2, [r3, #0]
   d67ce:	4b11      	ldr	r3, [pc, #68]	; (d6814 <module_user_init_hook+0x54>)
   d67d0:	429a      	cmp	r2, r3
   d67d2:	4b11      	ldr	r3, [pc, #68]	; (d6818 <module_user_init_hook+0x58>)
   d67d4:	bf0c      	ite	eq
   d67d6:	2201      	moveq	r2, #1
   d67d8:	2200      	movne	r2, #0
   d67da:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d67dc:	d001      	beq.n	d67e2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   d67de:	f7ff ffb1 	bl	d6744 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d67e2:	f7fe fd5b 	bl	d529c <HAL_RNG_GetRandomNumber>
   d67e6:	4604      	mov	r4, r0
    srand(seed);
   d67e8:	f000 fd92 	bl	d7310 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d67ec:	4b0b      	ldr	r3, [pc, #44]	; (d681c <module_user_init_hook+0x5c>)
   d67ee:	b113      	cbz	r3, d67f6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   d67f0:	4620      	mov	r0, r4
   d67f2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d67f6:	2100      	movs	r1, #0
   d67f8:	4808      	ldr	r0, [pc, #32]	; (d681c <module_user_init_hook+0x5c>)
   d67fa:	f7fe ff33 	bl	d5664 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d67fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6802:	4807      	ldr	r0, [pc, #28]	; (d6820 <module_user_init_hook+0x60>)
   d6804:	2100      	movs	r1, #0
   d6806:	f7fe bf01 	b.w	d560c <system_ctrl_set_app_request_handler>
   d680a:	bf00      	nop
   d680c:	000d66ed 	.word	0x000d66ed
   d6810:	2003f400 	.word	0x2003f400
   d6814:	9a271c1e 	.word	0x9a271c1e
   d6818:	2003e724 	.word	0x2003e724
   d681c:	00000000 	.word	0x00000000
   d6820:	000d6789 	.word	0x000d6789

000d6824 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d6824:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d6826:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d6828:	d902      	bls.n	d6830 <pinAvailable+0xc>
    return false;
   d682a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d682c:	b002      	add	sp, #8
   d682e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d6830:	f1a0 030b 	sub.w	r3, r0, #11
   d6834:	2b02      	cmp	r3, #2
   d6836:	d81a      	bhi.n	d686e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d6838:	4c17      	ldr	r4, [pc, #92]	; (d6898 <pinAvailable+0x74>)
   d683a:	7821      	ldrb	r1, [r4, #0]
   d683c:	f3bf 8f5b 	dmb	ish
   d6840:	f011 0101 	ands.w	r1, r1, #1
   d6844:	d10b      	bne.n	d685e <pinAvailable+0x3a>
   d6846:	4620      	mov	r0, r4
   d6848:	9101      	str	r1, [sp, #4]
   d684a:	f7fd fc2c 	bl	d40a6 <__cxa_guard_acquire>
   d684e:	9901      	ldr	r1, [sp, #4]
   d6850:	b128      	cbz	r0, d685e <pinAvailable+0x3a>
   d6852:	4812      	ldr	r0, [pc, #72]	; (d689c <pinAvailable+0x78>)
   d6854:	f7ff fcaa 	bl	d61ac <_ZN8SPIClassC1E19hal_spi_interface_t>
   d6858:	4620      	mov	r0, r4
   d685a:	f7fd fc29 	bl	d40b0 <__cxa_guard_release>
   d685e:	4b0f      	ldr	r3, [pc, #60]	; (d689c <pinAvailable+0x78>)
   d6860:	7818      	ldrb	r0, [r3, #0]
   d6862:	f7fe fddb 	bl	d541c <hal_spi_is_enabled>
   d6866:	2800      	cmp	r0, #0
   d6868:	d1df      	bne.n	d682a <pinAvailable+0x6>
  return true; // 'pin' is available
   d686a:	2001      	movs	r0, #1
   d686c:	e7de      	b.n	d682c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d686e:	2801      	cmp	r0, #1
   d6870:	d809      	bhi.n	d6886 <pinAvailable+0x62>
   d6872:	f000 f86f 	bl	d6954 <_Z19__fetch_global_Wirev>
   d6876:	2100      	movs	r1, #0
   d6878:	7c00      	ldrb	r0, [r0, #16]
   d687a:	f7fe fd9f 	bl	d53bc <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d687e:	f080 0001 	eor.w	r0, r0, #1
   d6882:	b2c0      	uxtb	r0, r0
   d6884:	e7d2      	b.n	d682c <pinAvailable+0x8>
   d6886:	3809      	subs	r0, #9
   d6888:	2801      	cmp	r0, #1
   d688a:	d8ee      	bhi.n	d686a <pinAvailable+0x46>
   d688c:	f7ff fe46 	bl	d651c <_Z22__fetch_global_Serial1v>
   d6890:	7c00      	ldrb	r0, [r0, #16]
   d6892:	f7fe fdfb 	bl	d548c <hal_usart_is_enabled>
   d6896:	e7f2      	b.n	d687e <pinAvailable+0x5a>
   d6898:	2003e72c 	.word	0x2003e72c
   d689c:	2003e730 	.word	0x2003e730

000d68a0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d68a0:	2823      	cmp	r0, #35	; 0x23
{
   d68a2:	b538      	push	{r3, r4, r5, lr}
   d68a4:	4604      	mov	r4, r0
   d68a6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d68a8:	d80a      	bhi.n	d68c0 <pinMode+0x20>
   d68aa:	29ff      	cmp	r1, #255	; 0xff
   d68ac:	d008      	beq.n	d68c0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d68ae:	f7ff ffb9 	bl	d6824 <pinAvailable>
   d68b2:	b128      	cbz	r0, d68c0 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d68b4:	4629      	mov	r1, r5
   d68b6:	4620      	mov	r0, r4
}
   d68b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d68bc:	f7fe bd26 	b.w	d530c <HAL_Pin_Mode>
}
   d68c0:	bd38      	pop	{r3, r4, r5, pc}

000d68c2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d68c2:	b538      	push	{r3, r4, r5, lr}
   d68c4:	4604      	mov	r4, r0
   d68c6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d68c8:	f7fe fd28 	bl	d531c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d68cc:	28ff      	cmp	r0, #255	; 0xff
   d68ce:	d010      	beq.n	d68f2 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d68d0:	2806      	cmp	r0, #6
   d68d2:	d804      	bhi.n	d68de <digitalWrite+0x1c>
   d68d4:	234d      	movs	r3, #77	; 0x4d
   d68d6:	fa23 f000 	lsr.w	r0, r3, r0
   d68da:	07c3      	lsls	r3, r0, #31
   d68dc:	d409      	bmi.n	d68f2 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d68de:	4620      	mov	r0, r4
   d68e0:	f7ff ffa0 	bl	d6824 <pinAvailable>
   d68e4:	b128      	cbz	r0, d68f2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d68e6:	4629      	mov	r1, r5
   d68e8:	4620      	mov	r0, r4
}
   d68ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d68ee:	f7fe bd1d 	b.w	d532c <HAL_GPIO_Write>
}
   d68f2:	bd38      	pop	{r3, r4, r5, pc}

000d68f4 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d68f4:	280d      	cmp	r0, #13
{
   d68f6:	b510      	push	{r4, lr}
   d68f8:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d68fa:	bf9c      	itt	ls
   d68fc:	340e      	addls	r4, #14
   d68fe:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6900:	4620      	mov	r0, r4
   d6902:	f7ff ff8f 	bl	d6824 <pinAvailable>
   d6906:	b150      	cbz	r0, d691e <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d6908:	2103      	movs	r1, #3
   d690a:	4620      	mov	r0, r4
   d690c:	f7fe fcf6 	bl	d52fc <HAL_Validate_Pin_Function>
   d6910:	2803      	cmp	r0, #3
   d6912:	d104      	bne.n	d691e <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d6914:	4620      	mov	r0, r4
}
   d6916:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d691a:	f7fe bd1f 	b.w	d535c <hal_adc_read>
}
   d691e:	2000      	movs	r0, #0
   d6920:	bd10      	pop	{r4, pc}

000d6922 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6922:	4770      	bx	lr

000d6924 <_Z17acquireWireBufferv>:
{
   d6924:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d6926:	2300      	movs	r3, #0
   d6928:	2520      	movs	r5, #32
   d692a:	8043      	strh	r3, [r0, #2]
   d692c:	2314      	movs	r3, #20
{
   d692e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d6930:	8003      	strh	r3, [r0, #0]
   d6932:	6085      	str	r5, [r0, #8]
   d6934:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6936:	4906      	ldr	r1, [pc, #24]	; (d6950 <_Z17acquireWireBufferv+0x2c>)
   d6938:	4628      	mov	r0, r5
   d693a:	f000 f833 	bl	d69a4 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d693e:	4904      	ldr	r1, [pc, #16]	; (d6950 <_Z17acquireWireBufferv+0x2c>)
	};
   d6940:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6942:	4628      	mov	r0, r5
   d6944:	f000 f82e 	bl	d69a4 <_ZnajRKSt9nothrow_t>
	};
   d6948:	60e0      	str	r0, [r4, #12]
}
   d694a:	4620      	mov	r0, r4
   d694c:	bd38      	pop	{r3, r4, r5, pc}
   d694e:	bf00      	nop
   d6950:	000d78b0 	.word	0x000d78b0

000d6954 <_Z19__fetch_global_Wirev>:
{
   d6954:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6956:	4d0e      	ldr	r5, [pc, #56]	; (d6990 <_Z19__fetch_global_Wirev+0x3c>)
   d6958:	7829      	ldrb	r1, [r5, #0]
   d695a:	f3bf 8f5b 	dmb	ish
   d695e:	f011 0401 	ands.w	r4, r1, #1
{
   d6962:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6964:	d111      	bne.n	d698a <_Z19__fetch_global_Wirev+0x36>
   d6966:	4628      	mov	r0, r5
   d6968:	f7fd fb9d 	bl	d40a6 <__cxa_guard_acquire>
   d696c:	b168      	cbz	r0, d698a <_Z19__fetch_global_Wirev+0x36>
   d696e:	a801      	add	r0, sp, #4
   d6970:	f7ff ffd8 	bl	d6924 <_Z17acquireWireBufferv>
   d6974:	aa01      	add	r2, sp, #4
   d6976:	4621      	mov	r1, r4
   d6978:	4806      	ldr	r0, [pc, #24]	; (d6994 <_Z19__fetch_global_Wirev+0x40>)
   d697a:	f7fe ff79 	bl	d5870 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d697e:	4628      	mov	r0, r5
   d6980:	f7fd fb96 	bl	d40b0 <__cxa_guard_release>
   d6984:	4804      	ldr	r0, [pc, #16]	; (d6998 <_Z19__fetch_global_Wirev+0x44>)
   d6986:	f000 fc8d 	bl	d72a4 <atexit>
	return wire;
}
   d698a:	4802      	ldr	r0, [pc, #8]	; (d6994 <_Z19__fetch_global_Wirev+0x40>)
   d698c:	b007      	add	sp, #28
   d698e:	bd30      	pop	{r4, r5, pc}
   d6990:	2003e73c 	.word	0x2003e73c
   d6994:	2003e740 	.word	0x2003e740
   d6998:	000d6923 	.word	0x000d6923

000d699c <_ZdlPvj>:
   d699c:	f7fd bb7f 	b.w	d409e <_ZdlPv>

000d69a0 <_ZnwjRKSt9nothrow_t>:
   d69a0:	f7fd bb79 	b.w	d4096 <_Znwj>

000d69a4 <_ZnajRKSt9nothrow_t>:
   d69a4:	f7fd bb79 	b.w	d409a <_Znaj>

000d69a8 <__aeabi_drsub>:
   d69a8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d69ac:	e002      	b.n	d69b4 <__adddf3>
   d69ae:	bf00      	nop

000d69b0 <__aeabi_dsub>:
   d69b0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d69b4 <__adddf3>:
   d69b4:	b530      	push	{r4, r5, lr}
   d69b6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d69ba:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d69be:	ea94 0f05 	teq	r4, r5
   d69c2:	bf08      	it	eq
   d69c4:	ea90 0f02 	teqeq	r0, r2
   d69c8:	bf1f      	itttt	ne
   d69ca:	ea54 0c00 	orrsne.w	ip, r4, r0
   d69ce:	ea55 0c02 	orrsne.w	ip, r5, r2
   d69d2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d69d6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d69da:	f000 80e2 	beq.w	d6ba2 <__adddf3+0x1ee>
   d69de:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d69e2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d69e6:	bfb8      	it	lt
   d69e8:	426d      	neglt	r5, r5
   d69ea:	dd0c      	ble.n	d6a06 <__adddf3+0x52>
   d69ec:	442c      	add	r4, r5
   d69ee:	ea80 0202 	eor.w	r2, r0, r2
   d69f2:	ea81 0303 	eor.w	r3, r1, r3
   d69f6:	ea82 0000 	eor.w	r0, r2, r0
   d69fa:	ea83 0101 	eor.w	r1, r3, r1
   d69fe:	ea80 0202 	eor.w	r2, r0, r2
   d6a02:	ea81 0303 	eor.w	r3, r1, r3
   d6a06:	2d36      	cmp	r5, #54	; 0x36
   d6a08:	bf88      	it	hi
   d6a0a:	bd30      	pophi	{r4, r5, pc}
   d6a0c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6a10:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6a14:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d6a18:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d6a1c:	d002      	beq.n	d6a24 <__adddf3+0x70>
   d6a1e:	4240      	negs	r0, r0
   d6a20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6a24:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d6a28:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6a2c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6a30:	d002      	beq.n	d6a38 <__adddf3+0x84>
   d6a32:	4252      	negs	r2, r2
   d6a34:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d6a38:	ea94 0f05 	teq	r4, r5
   d6a3c:	f000 80a7 	beq.w	d6b8e <__adddf3+0x1da>
   d6a40:	f1a4 0401 	sub.w	r4, r4, #1
   d6a44:	f1d5 0e20 	rsbs	lr, r5, #32
   d6a48:	db0d      	blt.n	d6a66 <__adddf3+0xb2>
   d6a4a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d6a4e:	fa22 f205 	lsr.w	r2, r2, r5
   d6a52:	1880      	adds	r0, r0, r2
   d6a54:	f141 0100 	adc.w	r1, r1, #0
   d6a58:	fa03 f20e 	lsl.w	r2, r3, lr
   d6a5c:	1880      	adds	r0, r0, r2
   d6a5e:	fa43 f305 	asr.w	r3, r3, r5
   d6a62:	4159      	adcs	r1, r3
   d6a64:	e00e      	b.n	d6a84 <__adddf3+0xd0>
   d6a66:	f1a5 0520 	sub.w	r5, r5, #32
   d6a6a:	f10e 0e20 	add.w	lr, lr, #32
   d6a6e:	2a01      	cmp	r2, #1
   d6a70:	fa03 fc0e 	lsl.w	ip, r3, lr
   d6a74:	bf28      	it	cs
   d6a76:	f04c 0c02 	orrcs.w	ip, ip, #2
   d6a7a:	fa43 f305 	asr.w	r3, r3, r5
   d6a7e:	18c0      	adds	r0, r0, r3
   d6a80:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d6a84:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6a88:	d507      	bpl.n	d6a9a <__adddf3+0xe6>
   d6a8a:	f04f 0e00 	mov.w	lr, #0
   d6a8e:	f1dc 0c00 	rsbs	ip, ip, #0
   d6a92:	eb7e 0000 	sbcs.w	r0, lr, r0
   d6a96:	eb6e 0101 	sbc.w	r1, lr, r1
   d6a9a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d6a9e:	d31b      	bcc.n	d6ad8 <__adddf3+0x124>
   d6aa0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d6aa4:	d30c      	bcc.n	d6ac0 <__adddf3+0x10c>
   d6aa6:	0849      	lsrs	r1, r1, #1
   d6aa8:	ea5f 0030 	movs.w	r0, r0, rrx
   d6aac:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d6ab0:	f104 0401 	add.w	r4, r4, #1
   d6ab4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d6ab8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d6abc:	f080 809a 	bcs.w	d6bf4 <__adddf3+0x240>
   d6ac0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d6ac4:	bf08      	it	eq
   d6ac6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6aca:	f150 0000 	adcs.w	r0, r0, #0
   d6ace:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6ad2:	ea41 0105 	orr.w	r1, r1, r5
   d6ad6:	bd30      	pop	{r4, r5, pc}
   d6ad8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d6adc:	4140      	adcs	r0, r0
   d6ade:	eb41 0101 	adc.w	r1, r1, r1
   d6ae2:	3c01      	subs	r4, #1
   d6ae4:	bf28      	it	cs
   d6ae6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d6aea:	d2e9      	bcs.n	d6ac0 <__adddf3+0x10c>
   d6aec:	f091 0f00 	teq	r1, #0
   d6af0:	bf04      	itt	eq
   d6af2:	4601      	moveq	r1, r0
   d6af4:	2000      	moveq	r0, #0
   d6af6:	fab1 f381 	clz	r3, r1
   d6afa:	bf08      	it	eq
   d6afc:	3320      	addeq	r3, #32
   d6afe:	f1a3 030b 	sub.w	r3, r3, #11
   d6b02:	f1b3 0220 	subs.w	r2, r3, #32
   d6b06:	da0c      	bge.n	d6b22 <__adddf3+0x16e>
   d6b08:	320c      	adds	r2, #12
   d6b0a:	dd08      	ble.n	d6b1e <__adddf3+0x16a>
   d6b0c:	f102 0c14 	add.w	ip, r2, #20
   d6b10:	f1c2 020c 	rsb	r2, r2, #12
   d6b14:	fa01 f00c 	lsl.w	r0, r1, ip
   d6b18:	fa21 f102 	lsr.w	r1, r1, r2
   d6b1c:	e00c      	b.n	d6b38 <__adddf3+0x184>
   d6b1e:	f102 0214 	add.w	r2, r2, #20
   d6b22:	bfd8      	it	le
   d6b24:	f1c2 0c20 	rsble	ip, r2, #32
   d6b28:	fa01 f102 	lsl.w	r1, r1, r2
   d6b2c:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6b30:	bfdc      	itt	le
   d6b32:	ea41 010c 	orrle.w	r1, r1, ip
   d6b36:	4090      	lslle	r0, r2
   d6b38:	1ae4      	subs	r4, r4, r3
   d6b3a:	bfa2      	ittt	ge
   d6b3c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6b40:	4329      	orrge	r1, r5
   d6b42:	bd30      	popge	{r4, r5, pc}
   d6b44:	ea6f 0404 	mvn.w	r4, r4
   d6b48:	3c1f      	subs	r4, #31
   d6b4a:	da1c      	bge.n	d6b86 <__adddf3+0x1d2>
   d6b4c:	340c      	adds	r4, #12
   d6b4e:	dc0e      	bgt.n	d6b6e <__adddf3+0x1ba>
   d6b50:	f104 0414 	add.w	r4, r4, #20
   d6b54:	f1c4 0220 	rsb	r2, r4, #32
   d6b58:	fa20 f004 	lsr.w	r0, r0, r4
   d6b5c:	fa01 f302 	lsl.w	r3, r1, r2
   d6b60:	ea40 0003 	orr.w	r0, r0, r3
   d6b64:	fa21 f304 	lsr.w	r3, r1, r4
   d6b68:	ea45 0103 	orr.w	r1, r5, r3
   d6b6c:	bd30      	pop	{r4, r5, pc}
   d6b6e:	f1c4 040c 	rsb	r4, r4, #12
   d6b72:	f1c4 0220 	rsb	r2, r4, #32
   d6b76:	fa20 f002 	lsr.w	r0, r0, r2
   d6b7a:	fa01 f304 	lsl.w	r3, r1, r4
   d6b7e:	ea40 0003 	orr.w	r0, r0, r3
   d6b82:	4629      	mov	r1, r5
   d6b84:	bd30      	pop	{r4, r5, pc}
   d6b86:	fa21 f004 	lsr.w	r0, r1, r4
   d6b8a:	4629      	mov	r1, r5
   d6b8c:	bd30      	pop	{r4, r5, pc}
   d6b8e:	f094 0f00 	teq	r4, #0
   d6b92:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d6b96:	bf06      	itte	eq
   d6b98:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d6b9c:	3401      	addeq	r4, #1
   d6b9e:	3d01      	subne	r5, #1
   d6ba0:	e74e      	b.n	d6a40 <__adddf3+0x8c>
   d6ba2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6ba6:	bf18      	it	ne
   d6ba8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6bac:	d029      	beq.n	d6c02 <__adddf3+0x24e>
   d6bae:	ea94 0f05 	teq	r4, r5
   d6bb2:	bf08      	it	eq
   d6bb4:	ea90 0f02 	teqeq	r0, r2
   d6bb8:	d005      	beq.n	d6bc6 <__adddf3+0x212>
   d6bba:	ea54 0c00 	orrs.w	ip, r4, r0
   d6bbe:	bf04      	itt	eq
   d6bc0:	4619      	moveq	r1, r3
   d6bc2:	4610      	moveq	r0, r2
   d6bc4:	bd30      	pop	{r4, r5, pc}
   d6bc6:	ea91 0f03 	teq	r1, r3
   d6bca:	bf1e      	ittt	ne
   d6bcc:	2100      	movne	r1, #0
   d6bce:	2000      	movne	r0, #0
   d6bd0:	bd30      	popne	{r4, r5, pc}
   d6bd2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d6bd6:	d105      	bne.n	d6be4 <__adddf3+0x230>
   d6bd8:	0040      	lsls	r0, r0, #1
   d6bda:	4149      	adcs	r1, r1
   d6bdc:	bf28      	it	cs
   d6bde:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d6be2:	bd30      	pop	{r4, r5, pc}
   d6be4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6be8:	bf3c      	itt	cc
   d6bea:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d6bee:	bd30      	popcc	{r4, r5, pc}
   d6bf0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6bf4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6bf8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6bfc:	f04f 0000 	mov.w	r0, #0
   d6c00:	bd30      	pop	{r4, r5, pc}
   d6c02:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6c06:	bf1a      	itte	ne
   d6c08:	4619      	movne	r1, r3
   d6c0a:	4610      	movne	r0, r2
   d6c0c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d6c10:	bf1c      	itt	ne
   d6c12:	460b      	movne	r3, r1
   d6c14:	4602      	movne	r2, r0
   d6c16:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6c1a:	bf06      	itte	eq
   d6c1c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6c20:	ea91 0f03 	teqeq	r1, r3
   d6c24:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6c28:	bd30      	pop	{r4, r5, pc}
   d6c2a:	bf00      	nop

000d6c2c <__aeabi_ui2d>:
   d6c2c:	f090 0f00 	teq	r0, #0
   d6c30:	bf04      	itt	eq
   d6c32:	2100      	moveq	r1, #0
   d6c34:	4770      	bxeq	lr
   d6c36:	b530      	push	{r4, r5, lr}
   d6c38:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6c3c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6c40:	f04f 0500 	mov.w	r5, #0
   d6c44:	f04f 0100 	mov.w	r1, #0
   d6c48:	e750      	b.n	d6aec <__adddf3+0x138>
   d6c4a:	bf00      	nop

000d6c4c <__aeabi_i2d>:
   d6c4c:	f090 0f00 	teq	r0, #0
   d6c50:	bf04      	itt	eq
   d6c52:	2100      	moveq	r1, #0
   d6c54:	4770      	bxeq	lr
   d6c56:	b530      	push	{r4, r5, lr}
   d6c58:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6c5c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6c60:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6c64:	bf48      	it	mi
   d6c66:	4240      	negmi	r0, r0
   d6c68:	f04f 0100 	mov.w	r1, #0
   d6c6c:	e73e      	b.n	d6aec <__adddf3+0x138>
   d6c6e:	bf00      	nop

000d6c70 <__aeabi_f2d>:
   d6c70:	0042      	lsls	r2, r0, #1
   d6c72:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d6c76:	ea4f 0131 	mov.w	r1, r1, rrx
   d6c7a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d6c7e:	bf1f      	itttt	ne
   d6c80:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6c84:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6c88:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6c8c:	4770      	bxne	lr
   d6c8e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d6c92:	bf08      	it	eq
   d6c94:	4770      	bxeq	lr
   d6c96:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d6c9a:	bf04      	itt	eq
   d6c9c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d6ca0:	4770      	bxeq	lr
   d6ca2:	b530      	push	{r4, r5, lr}
   d6ca4:	f44f 7460 	mov.w	r4, #896	; 0x380
   d6ca8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6cac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6cb0:	e71c      	b.n	d6aec <__adddf3+0x138>
   d6cb2:	bf00      	nop

000d6cb4 <__aeabi_ul2d>:
   d6cb4:	ea50 0201 	orrs.w	r2, r0, r1
   d6cb8:	bf08      	it	eq
   d6cba:	4770      	bxeq	lr
   d6cbc:	b530      	push	{r4, r5, lr}
   d6cbe:	f04f 0500 	mov.w	r5, #0
   d6cc2:	e00a      	b.n	d6cda <__aeabi_l2d+0x16>

000d6cc4 <__aeabi_l2d>:
   d6cc4:	ea50 0201 	orrs.w	r2, r0, r1
   d6cc8:	bf08      	it	eq
   d6cca:	4770      	bxeq	lr
   d6ccc:	b530      	push	{r4, r5, lr}
   d6cce:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d6cd2:	d502      	bpl.n	d6cda <__aeabi_l2d+0x16>
   d6cd4:	4240      	negs	r0, r0
   d6cd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6cda:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6cde:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6ce2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d6ce6:	f43f aed8 	beq.w	d6a9a <__adddf3+0xe6>
   d6cea:	f04f 0203 	mov.w	r2, #3
   d6cee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6cf2:	bf18      	it	ne
   d6cf4:	3203      	addne	r2, #3
   d6cf6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6cfa:	bf18      	it	ne
   d6cfc:	3203      	addne	r2, #3
   d6cfe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d6d02:	f1c2 0320 	rsb	r3, r2, #32
   d6d06:	fa00 fc03 	lsl.w	ip, r0, r3
   d6d0a:	fa20 f002 	lsr.w	r0, r0, r2
   d6d0e:	fa01 fe03 	lsl.w	lr, r1, r3
   d6d12:	ea40 000e 	orr.w	r0, r0, lr
   d6d16:	fa21 f102 	lsr.w	r1, r1, r2
   d6d1a:	4414      	add	r4, r2
   d6d1c:	e6bd      	b.n	d6a9a <__adddf3+0xe6>
   d6d1e:	bf00      	nop

000d6d20 <__aeabi_dmul>:
   d6d20:	b570      	push	{r4, r5, r6, lr}
   d6d22:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6d26:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6d2a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6d2e:	bf1d      	ittte	ne
   d6d30:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6d34:	ea94 0f0c 	teqne	r4, ip
   d6d38:	ea95 0f0c 	teqne	r5, ip
   d6d3c:	f000 f8de 	bleq	d6efc <__aeabi_dmul+0x1dc>
   d6d40:	442c      	add	r4, r5
   d6d42:	ea81 0603 	eor.w	r6, r1, r3
   d6d46:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d6d4a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d6d4e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d6d52:	bf18      	it	ne
   d6d54:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6d58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6d5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6d60:	d038      	beq.n	d6dd4 <__aeabi_dmul+0xb4>
   d6d62:	fba0 ce02 	umull	ip, lr, r0, r2
   d6d66:	f04f 0500 	mov.w	r5, #0
   d6d6a:	fbe1 e502 	umlal	lr, r5, r1, r2
   d6d6e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d6d72:	fbe0 e503 	umlal	lr, r5, r0, r3
   d6d76:	f04f 0600 	mov.w	r6, #0
   d6d7a:	fbe1 5603 	umlal	r5, r6, r1, r3
   d6d7e:	f09c 0f00 	teq	ip, #0
   d6d82:	bf18      	it	ne
   d6d84:	f04e 0e01 	orrne.w	lr, lr, #1
   d6d88:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d6d8c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6d90:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6d94:	d204      	bcs.n	d6da0 <__aeabi_dmul+0x80>
   d6d96:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d6d9a:	416d      	adcs	r5, r5
   d6d9c:	eb46 0606 	adc.w	r6, r6, r6
   d6da0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d6da4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d6da8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6dac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6db0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6db4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6db8:	bf88      	it	hi
   d6dba:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6dbe:	d81e      	bhi.n	d6dfe <__aeabi_dmul+0xde>
   d6dc0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d6dc4:	bf08      	it	eq
   d6dc6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d6dca:	f150 0000 	adcs.w	r0, r0, #0
   d6dce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6dd2:	bd70      	pop	{r4, r5, r6, pc}
   d6dd4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d6dd8:	ea46 0101 	orr.w	r1, r6, r1
   d6ddc:	ea40 0002 	orr.w	r0, r0, r2
   d6de0:	ea81 0103 	eor.w	r1, r1, r3
   d6de4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d6de8:	bfc2      	ittt	gt
   d6dea:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6dee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6df2:	bd70      	popgt	{r4, r5, r6, pc}
   d6df4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6df8:	f04f 0e00 	mov.w	lr, #0
   d6dfc:	3c01      	subs	r4, #1
   d6dfe:	f300 80ab 	bgt.w	d6f58 <__aeabi_dmul+0x238>
   d6e02:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d6e06:	bfde      	ittt	le
   d6e08:	2000      	movle	r0, #0
   d6e0a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d6e0e:	bd70      	pople	{r4, r5, r6, pc}
   d6e10:	f1c4 0400 	rsb	r4, r4, #0
   d6e14:	3c20      	subs	r4, #32
   d6e16:	da35      	bge.n	d6e84 <__aeabi_dmul+0x164>
   d6e18:	340c      	adds	r4, #12
   d6e1a:	dc1b      	bgt.n	d6e54 <__aeabi_dmul+0x134>
   d6e1c:	f104 0414 	add.w	r4, r4, #20
   d6e20:	f1c4 0520 	rsb	r5, r4, #32
   d6e24:	fa00 f305 	lsl.w	r3, r0, r5
   d6e28:	fa20 f004 	lsr.w	r0, r0, r4
   d6e2c:	fa01 f205 	lsl.w	r2, r1, r5
   d6e30:	ea40 0002 	orr.w	r0, r0, r2
   d6e34:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d6e38:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6e3c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6e40:	fa21 f604 	lsr.w	r6, r1, r4
   d6e44:	eb42 0106 	adc.w	r1, r2, r6
   d6e48:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6e4c:	bf08      	it	eq
   d6e4e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6e52:	bd70      	pop	{r4, r5, r6, pc}
   d6e54:	f1c4 040c 	rsb	r4, r4, #12
   d6e58:	f1c4 0520 	rsb	r5, r4, #32
   d6e5c:	fa00 f304 	lsl.w	r3, r0, r4
   d6e60:	fa20 f005 	lsr.w	r0, r0, r5
   d6e64:	fa01 f204 	lsl.w	r2, r1, r4
   d6e68:	ea40 0002 	orr.w	r0, r0, r2
   d6e6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6e70:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6e74:	f141 0100 	adc.w	r1, r1, #0
   d6e78:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6e7c:	bf08      	it	eq
   d6e7e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6e82:	bd70      	pop	{r4, r5, r6, pc}
   d6e84:	f1c4 0520 	rsb	r5, r4, #32
   d6e88:	fa00 f205 	lsl.w	r2, r0, r5
   d6e8c:	ea4e 0e02 	orr.w	lr, lr, r2
   d6e90:	fa20 f304 	lsr.w	r3, r0, r4
   d6e94:	fa01 f205 	lsl.w	r2, r1, r5
   d6e98:	ea43 0302 	orr.w	r3, r3, r2
   d6e9c:	fa21 f004 	lsr.w	r0, r1, r4
   d6ea0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6ea4:	fa21 f204 	lsr.w	r2, r1, r4
   d6ea8:	ea20 0002 	bic.w	r0, r0, r2
   d6eac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d6eb0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6eb4:	bf08      	it	eq
   d6eb6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6eba:	bd70      	pop	{r4, r5, r6, pc}
   d6ebc:	f094 0f00 	teq	r4, #0
   d6ec0:	d10f      	bne.n	d6ee2 <__aeabi_dmul+0x1c2>
   d6ec2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d6ec6:	0040      	lsls	r0, r0, #1
   d6ec8:	eb41 0101 	adc.w	r1, r1, r1
   d6ecc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6ed0:	bf08      	it	eq
   d6ed2:	3c01      	subeq	r4, #1
   d6ed4:	d0f7      	beq.n	d6ec6 <__aeabi_dmul+0x1a6>
   d6ed6:	ea41 0106 	orr.w	r1, r1, r6
   d6eda:	f095 0f00 	teq	r5, #0
   d6ede:	bf18      	it	ne
   d6ee0:	4770      	bxne	lr
   d6ee2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d6ee6:	0052      	lsls	r2, r2, #1
   d6ee8:	eb43 0303 	adc.w	r3, r3, r3
   d6eec:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d6ef0:	bf08      	it	eq
   d6ef2:	3d01      	subeq	r5, #1
   d6ef4:	d0f7      	beq.n	d6ee6 <__aeabi_dmul+0x1c6>
   d6ef6:	ea43 0306 	orr.w	r3, r3, r6
   d6efa:	4770      	bx	lr
   d6efc:	ea94 0f0c 	teq	r4, ip
   d6f00:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6f04:	bf18      	it	ne
   d6f06:	ea95 0f0c 	teqne	r5, ip
   d6f0a:	d00c      	beq.n	d6f26 <__aeabi_dmul+0x206>
   d6f0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6f10:	bf18      	it	ne
   d6f12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6f16:	d1d1      	bne.n	d6ebc <__aeabi_dmul+0x19c>
   d6f18:	ea81 0103 	eor.w	r1, r1, r3
   d6f1c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6f20:	f04f 0000 	mov.w	r0, #0
   d6f24:	bd70      	pop	{r4, r5, r6, pc}
   d6f26:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6f2a:	bf06      	itte	eq
   d6f2c:	4610      	moveq	r0, r2
   d6f2e:	4619      	moveq	r1, r3
   d6f30:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6f34:	d019      	beq.n	d6f6a <__aeabi_dmul+0x24a>
   d6f36:	ea94 0f0c 	teq	r4, ip
   d6f3a:	d102      	bne.n	d6f42 <__aeabi_dmul+0x222>
   d6f3c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6f40:	d113      	bne.n	d6f6a <__aeabi_dmul+0x24a>
   d6f42:	ea95 0f0c 	teq	r5, ip
   d6f46:	d105      	bne.n	d6f54 <__aeabi_dmul+0x234>
   d6f48:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6f4c:	bf1c      	itt	ne
   d6f4e:	4610      	movne	r0, r2
   d6f50:	4619      	movne	r1, r3
   d6f52:	d10a      	bne.n	d6f6a <__aeabi_dmul+0x24a>
   d6f54:	ea81 0103 	eor.w	r1, r1, r3
   d6f58:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6f5c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6f60:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6f64:	f04f 0000 	mov.w	r0, #0
   d6f68:	bd70      	pop	{r4, r5, r6, pc}
   d6f6a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6f6e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d6f72:	bd70      	pop	{r4, r5, r6, pc}

000d6f74 <__aeabi_ddiv>:
   d6f74:	b570      	push	{r4, r5, r6, lr}
   d6f76:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6f7a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6f7e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6f82:	bf1d      	ittte	ne
   d6f84:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6f88:	ea94 0f0c 	teqne	r4, ip
   d6f8c:	ea95 0f0c 	teqne	r5, ip
   d6f90:	f000 f8a7 	bleq	d70e2 <__aeabi_ddiv+0x16e>
   d6f94:	eba4 0405 	sub.w	r4, r4, r5
   d6f98:	ea81 0e03 	eor.w	lr, r1, r3
   d6f9c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6fa0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6fa4:	f000 8088 	beq.w	d70b8 <__aeabi_ddiv+0x144>
   d6fa8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6fac:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d6fb0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d6fb4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d6fb8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d6fbc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d6fc0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d6fc4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d6fc8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d6fcc:	429d      	cmp	r5, r3
   d6fce:	bf08      	it	eq
   d6fd0:	4296      	cmpeq	r6, r2
   d6fd2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d6fd6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d6fda:	d202      	bcs.n	d6fe2 <__aeabi_ddiv+0x6e>
   d6fdc:	085b      	lsrs	r3, r3, #1
   d6fde:	ea4f 0232 	mov.w	r2, r2, rrx
   d6fe2:	1ab6      	subs	r6, r6, r2
   d6fe4:	eb65 0503 	sbc.w	r5, r5, r3
   d6fe8:	085b      	lsrs	r3, r3, #1
   d6fea:	ea4f 0232 	mov.w	r2, r2, rrx
   d6fee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d6ff2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d6ff6:	ebb6 0e02 	subs.w	lr, r6, r2
   d6ffa:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6ffe:	bf22      	ittt	cs
   d7000:	1ab6      	subcs	r6, r6, r2
   d7002:	4675      	movcs	r5, lr
   d7004:	ea40 000c 	orrcs.w	r0, r0, ip
   d7008:	085b      	lsrs	r3, r3, #1
   d700a:	ea4f 0232 	mov.w	r2, r2, rrx
   d700e:	ebb6 0e02 	subs.w	lr, r6, r2
   d7012:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7016:	bf22      	ittt	cs
   d7018:	1ab6      	subcs	r6, r6, r2
   d701a:	4675      	movcs	r5, lr
   d701c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d7020:	085b      	lsrs	r3, r3, #1
   d7022:	ea4f 0232 	mov.w	r2, r2, rrx
   d7026:	ebb6 0e02 	subs.w	lr, r6, r2
   d702a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d702e:	bf22      	ittt	cs
   d7030:	1ab6      	subcs	r6, r6, r2
   d7032:	4675      	movcs	r5, lr
   d7034:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d7038:	085b      	lsrs	r3, r3, #1
   d703a:	ea4f 0232 	mov.w	r2, r2, rrx
   d703e:	ebb6 0e02 	subs.w	lr, r6, r2
   d7042:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7046:	bf22      	ittt	cs
   d7048:	1ab6      	subcs	r6, r6, r2
   d704a:	4675      	movcs	r5, lr
   d704c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d7050:	ea55 0e06 	orrs.w	lr, r5, r6
   d7054:	d018      	beq.n	d7088 <__aeabi_ddiv+0x114>
   d7056:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d705a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d705e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d7062:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d7066:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d706a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d706e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d7072:	d1c0      	bne.n	d6ff6 <__aeabi_ddiv+0x82>
   d7074:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7078:	d10b      	bne.n	d7092 <__aeabi_ddiv+0x11e>
   d707a:	ea41 0100 	orr.w	r1, r1, r0
   d707e:	f04f 0000 	mov.w	r0, #0
   d7082:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d7086:	e7b6      	b.n	d6ff6 <__aeabi_ddiv+0x82>
   d7088:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d708c:	bf04      	itt	eq
   d708e:	4301      	orreq	r1, r0
   d7090:	2000      	moveq	r0, #0
   d7092:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7096:	bf88      	it	hi
   d7098:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d709c:	f63f aeaf 	bhi.w	d6dfe <__aeabi_dmul+0xde>
   d70a0:	ebb5 0c03 	subs.w	ip, r5, r3
   d70a4:	bf04      	itt	eq
   d70a6:	ebb6 0c02 	subseq.w	ip, r6, r2
   d70aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d70ae:	f150 0000 	adcs.w	r0, r0, #0
   d70b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d70b6:	bd70      	pop	{r4, r5, r6, pc}
   d70b8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d70bc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d70c0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d70c4:	bfc2      	ittt	gt
   d70c6:	ebd4 050c 	rsbsgt	r5, r4, ip
   d70ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d70ce:	bd70      	popgt	{r4, r5, r6, pc}
   d70d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d70d4:	f04f 0e00 	mov.w	lr, #0
   d70d8:	3c01      	subs	r4, #1
   d70da:	e690      	b.n	d6dfe <__aeabi_dmul+0xde>
   d70dc:	ea45 0e06 	orr.w	lr, r5, r6
   d70e0:	e68d      	b.n	d6dfe <__aeabi_dmul+0xde>
   d70e2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d70e6:	ea94 0f0c 	teq	r4, ip
   d70ea:	bf08      	it	eq
   d70ec:	ea95 0f0c 	teqeq	r5, ip
   d70f0:	f43f af3b 	beq.w	d6f6a <__aeabi_dmul+0x24a>
   d70f4:	ea94 0f0c 	teq	r4, ip
   d70f8:	d10a      	bne.n	d7110 <__aeabi_ddiv+0x19c>
   d70fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d70fe:	f47f af34 	bne.w	d6f6a <__aeabi_dmul+0x24a>
   d7102:	ea95 0f0c 	teq	r5, ip
   d7106:	f47f af25 	bne.w	d6f54 <__aeabi_dmul+0x234>
   d710a:	4610      	mov	r0, r2
   d710c:	4619      	mov	r1, r3
   d710e:	e72c      	b.n	d6f6a <__aeabi_dmul+0x24a>
   d7110:	ea95 0f0c 	teq	r5, ip
   d7114:	d106      	bne.n	d7124 <__aeabi_ddiv+0x1b0>
   d7116:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d711a:	f43f aefd 	beq.w	d6f18 <__aeabi_dmul+0x1f8>
   d711e:	4610      	mov	r0, r2
   d7120:	4619      	mov	r1, r3
   d7122:	e722      	b.n	d6f6a <__aeabi_dmul+0x24a>
   d7124:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7128:	bf18      	it	ne
   d712a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d712e:	f47f aec5 	bne.w	d6ebc <__aeabi_dmul+0x19c>
   d7132:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d7136:	f47f af0d 	bne.w	d6f54 <__aeabi_dmul+0x234>
   d713a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d713e:	f47f aeeb 	bne.w	d6f18 <__aeabi_dmul+0x1f8>
   d7142:	e712      	b.n	d6f6a <__aeabi_dmul+0x24a>

000d7144 <__gedf2>:
   d7144:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d7148:	e006      	b.n	d7158 <__cmpdf2+0x4>
   d714a:	bf00      	nop

000d714c <__ledf2>:
   d714c:	f04f 0c01 	mov.w	ip, #1
   d7150:	e002      	b.n	d7158 <__cmpdf2+0x4>
   d7152:	bf00      	nop

000d7154 <__cmpdf2>:
   d7154:	f04f 0c01 	mov.w	ip, #1
   d7158:	f84d cd04 	str.w	ip, [sp, #-4]!
   d715c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7160:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7164:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7168:	bf18      	it	ne
   d716a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d716e:	d01b      	beq.n	d71a8 <__cmpdf2+0x54>
   d7170:	b001      	add	sp, #4
   d7172:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d7176:	bf0c      	ite	eq
   d7178:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d717c:	ea91 0f03 	teqne	r1, r3
   d7180:	bf02      	ittt	eq
   d7182:	ea90 0f02 	teqeq	r0, r2
   d7186:	2000      	moveq	r0, #0
   d7188:	4770      	bxeq	lr
   d718a:	f110 0f00 	cmn.w	r0, #0
   d718e:	ea91 0f03 	teq	r1, r3
   d7192:	bf58      	it	pl
   d7194:	4299      	cmppl	r1, r3
   d7196:	bf08      	it	eq
   d7198:	4290      	cmpeq	r0, r2
   d719a:	bf2c      	ite	cs
   d719c:	17d8      	asrcs	r0, r3, #31
   d719e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d71a2:	f040 0001 	orr.w	r0, r0, #1
   d71a6:	4770      	bx	lr
   d71a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d71ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d71b0:	d102      	bne.n	d71b8 <__cmpdf2+0x64>
   d71b2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d71b6:	d107      	bne.n	d71c8 <__cmpdf2+0x74>
   d71b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d71bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d71c0:	d1d6      	bne.n	d7170 <__cmpdf2+0x1c>
   d71c2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d71c6:	d0d3      	beq.n	d7170 <__cmpdf2+0x1c>
   d71c8:	f85d 0b04 	ldr.w	r0, [sp], #4
   d71cc:	4770      	bx	lr
   d71ce:	bf00      	nop

000d71d0 <__aeabi_cdrcmple>:
   d71d0:	4684      	mov	ip, r0
   d71d2:	4610      	mov	r0, r2
   d71d4:	4662      	mov	r2, ip
   d71d6:	468c      	mov	ip, r1
   d71d8:	4619      	mov	r1, r3
   d71da:	4663      	mov	r3, ip
   d71dc:	e000      	b.n	d71e0 <__aeabi_cdcmpeq>
   d71de:	bf00      	nop

000d71e0 <__aeabi_cdcmpeq>:
   d71e0:	b501      	push	{r0, lr}
   d71e2:	f7ff ffb7 	bl	d7154 <__cmpdf2>
   d71e6:	2800      	cmp	r0, #0
   d71e8:	bf48      	it	mi
   d71ea:	f110 0f00 	cmnmi.w	r0, #0
   d71ee:	bd01      	pop	{r0, pc}

000d71f0 <__aeabi_dcmpeq>:
   d71f0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d71f4:	f7ff fff4 	bl	d71e0 <__aeabi_cdcmpeq>
   d71f8:	bf0c      	ite	eq
   d71fa:	2001      	moveq	r0, #1
   d71fc:	2000      	movne	r0, #0
   d71fe:	f85d fb08 	ldr.w	pc, [sp], #8
   d7202:	bf00      	nop

000d7204 <__aeabi_dcmplt>:
   d7204:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7208:	f7ff ffea 	bl	d71e0 <__aeabi_cdcmpeq>
   d720c:	bf34      	ite	cc
   d720e:	2001      	movcc	r0, #1
   d7210:	2000      	movcs	r0, #0
   d7212:	f85d fb08 	ldr.w	pc, [sp], #8
   d7216:	bf00      	nop

000d7218 <__aeabi_dcmple>:
   d7218:	f84d ed08 	str.w	lr, [sp, #-8]!
   d721c:	f7ff ffe0 	bl	d71e0 <__aeabi_cdcmpeq>
   d7220:	bf94      	ite	ls
   d7222:	2001      	movls	r0, #1
   d7224:	2000      	movhi	r0, #0
   d7226:	f85d fb08 	ldr.w	pc, [sp], #8
   d722a:	bf00      	nop

000d722c <__aeabi_dcmpge>:
   d722c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7230:	f7ff ffce 	bl	d71d0 <__aeabi_cdrcmple>
   d7234:	bf94      	ite	ls
   d7236:	2001      	movls	r0, #1
   d7238:	2000      	movhi	r0, #0
   d723a:	f85d fb08 	ldr.w	pc, [sp], #8
   d723e:	bf00      	nop

000d7240 <__aeabi_dcmpgt>:
   d7240:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7244:	f7ff ffc4 	bl	d71d0 <__aeabi_cdrcmple>
   d7248:	bf34      	ite	cc
   d724a:	2001      	movcc	r0, #1
   d724c:	2000      	movcs	r0, #0
   d724e:	f85d fb08 	ldr.w	pc, [sp], #8
   d7252:	bf00      	nop

000d7254 <__aeabi_d2iz>:
   d7254:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d7258:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d725c:	d215      	bcs.n	d728a <__aeabi_d2iz+0x36>
   d725e:	d511      	bpl.n	d7284 <__aeabi_d2iz+0x30>
   d7260:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d7264:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d7268:	d912      	bls.n	d7290 <__aeabi_d2iz+0x3c>
   d726a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d726e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d7272:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d7276:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d727a:	fa23 f002 	lsr.w	r0, r3, r2
   d727e:	bf18      	it	ne
   d7280:	4240      	negne	r0, r0
   d7282:	4770      	bx	lr
   d7284:	f04f 0000 	mov.w	r0, #0
   d7288:	4770      	bx	lr
   d728a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d728e:	d105      	bne.n	d729c <__aeabi_d2iz+0x48>
   d7290:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d7294:	bf08      	it	eq
   d7296:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d729a:	4770      	bx	lr
   d729c:	f04f 0000 	mov.w	r0, #0
   d72a0:	4770      	bx	lr
   d72a2:	bf00      	nop

000d72a4 <atexit>:
   d72a4:	2300      	movs	r3, #0
   d72a6:	4601      	mov	r1, r0
   d72a8:	461a      	mov	r2, r3
   d72aa:	4618      	mov	r0, r3
   d72ac:	f000 b8f2 	b.w	d7494 <__register_exitproc>

000d72b0 <memcpy>:
   d72b0:	440a      	add	r2, r1
   d72b2:	4291      	cmp	r1, r2
   d72b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d72b8:	d100      	bne.n	d72bc <memcpy+0xc>
   d72ba:	4770      	bx	lr
   d72bc:	b510      	push	{r4, lr}
   d72be:	f811 4b01 	ldrb.w	r4, [r1], #1
   d72c2:	f803 4f01 	strb.w	r4, [r3, #1]!
   d72c6:	4291      	cmp	r1, r2
   d72c8:	d1f9      	bne.n	d72be <memcpy+0xe>
   d72ca:	bd10      	pop	{r4, pc}

000d72cc <memmove>:
   d72cc:	4288      	cmp	r0, r1
   d72ce:	b510      	push	{r4, lr}
   d72d0:	eb01 0402 	add.w	r4, r1, r2
   d72d4:	d902      	bls.n	d72dc <memmove+0x10>
   d72d6:	4284      	cmp	r4, r0
   d72d8:	4623      	mov	r3, r4
   d72da:	d807      	bhi.n	d72ec <memmove+0x20>
   d72dc:	1e43      	subs	r3, r0, #1
   d72de:	42a1      	cmp	r1, r4
   d72e0:	d008      	beq.n	d72f4 <memmove+0x28>
   d72e2:	f811 2b01 	ldrb.w	r2, [r1], #1
   d72e6:	f803 2f01 	strb.w	r2, [r3, #1]!
   d72ea:	e7f8      	b.n	d72de <memmove+0x12>
   d72ec:	4402      	add	r2, r0
   d72ee:	4601      	mov	r1, r0
   d72f0:	428a      	cmp	r2, r1
   d72f2:	d100      	bne.n	d72f6 <memmove+0x2a>
   d72f4:	bd10      	pop	{r4, pc}
   d72f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d72fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d72fe:	e7f7      	b.n	d72f0 <memmove+0x24>

000d7300 <memset>:
   d7300:	4402      	add	r2, r0
   d7302:	4603      	mov	r3, r0
   d7304:	4293      	cmp	r3, r2
   d7306:	d100      	bne.n	d730a <memset+0xa>
   d7308:	4770      	bx	lr
   d730a:	f803 1b01 	strb.w	r1, [r3], #1
   d730e:	e7f9      	b.n	d7304 <memset+0x4>

000d7310 <srand>:
   d7310:	b538      	push	{r3, r4, r5, lr}
   d7312:	4b0d      	ldr	r3, [pc, #52]	; (d7348 <srand+0x38>)
   d7314:	681d      	ldr	r5, [r3, #0]
   d7316:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d7318:	4604      	mov	r4, r0
   d731a:	b97b      	cbnz	r3, d733c <srand+0x2c>
   d731c:	2018      	movs	r0, #24
   d731e:	f7fe fa09 	bl	d5734 <malloc>
   d7322:	4a0a      	ldr	r2, [pc, #40]	; (d734c <srand+0x3c>)
   d7324:	4b0a      	ldr	r3, [pc, #40]	; (d7350 <srand+0x40>)
   d7326:	63a8      	str	r0, [r5, #56]	; 0x38
   d7328:	e9c0 2300 	strd	r2, r3, [r0]
   d732c:	4b09      	ldr	r3, [pc, #36]	; (d7354 <srand+0x44>)
   d732e:	6083      	str	r3, [r0, #8]
   d7330:	230b      	movs	r3, #11
   d7332:	8183      	strh	r3, [r0, #12]
   d7334:	2201      	movs	r2, #1
   d7336:	2300      	movs	r3, #0
   d7338:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d733c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d733e:	2200      	movs	r2, #0
   d7340:	611c      	str	r4, [r3, #16]
   d7342:	615a      	str	r2, [r3, #20]
   d7344:	bd38      	pop	{r3, r4, r5, pc}
   d7346:	bf00      	nop
   d7348:	2003e450 	.word	0x2003e450
   d734c:	abcd330e 	.word	0xabcd330e
   d7350:	e66d1234 	.word	0xe66d1234
   d7354:	0005deec 	.word	0x0005deec

000d7358 <strcmp>:
   d7358:	f810 2b01 	ldrb.w	r2, [r0], #1
   d735c:	f811 3b01 	ldrb.w	r3, [r1], #1
   d7360:	2a01      	cmp	r2, #1
   d7362:	bf28      	it	cs
   d7364:	429a      	cmpcs	r2, r3
   d7366:	d0f7      	beq.n	d7358 <strcmp>
   d7368:	1ad0      	subs	r0, r2, r3
   d736a:	4770      	bx	lr

000d736c <strcpy>:
   d736c:	4603      	mov	r3, r0
   d736e:	f811 2b01 	ldrb.w	r2, [r1], #1
   d7372:	f803 2b01 	strb.w	r2, [r3], #1
   d7376:	2a00      	cmp	r2, #0
   d7378:	d1f9      	bne.n	d736e <strcpy+0x2>
   d737a:	4770      	bx	lr

000d737c <strlen>:
   d737c:	4603      	mov	r3, r0
   d737e:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7382:	2a00      	cmp	r2, #0
   d7384:	d1fb      	bne.n	d737e <strlen+0x2>
   d7386:	1a18      	subs	r0, r3, r0
   d7388:	3801      	subs	r0, #1
   d738a:	4770      	bx	lr

000d738c <_strtol_l.isra.0>:
   d738c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7390:	4e3a      	ldr	r6, [pc, #232]	; (d747c <_strtol_l.isra.0+0xf0>)
   d7392:	4686      	mov	lr, r0
   d7394:	468c      	mov	ip, r1
   d7396:	4660      	mov	r0, ip
   d7398:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d739c:	5da5      	ldrb	r5, [r4, r6]
   d739e:	f015 0508 	ands.w	r5, r5, #8
   d73a2:	d1f8      	bne.n	d7396 <_strtol_l.isra.0+0xa>
   d73a4:	2c2d      	cmp	r4, #45	; 0x2d
   d73a6:	d133      	bne.n	d7410 <_strtol_l.isra.0+0x84>
   d73a8:	f89c 4000 	ldrb.w	r4, [ip]
   d73ac:	f04f 0801 	mov.w	r8, #1
   d73b0:	f100 0c02 	add.w	ip, r0, #2
   d73b4:	2b00      	cmp	r3, #0
   d73b6:	d05c      	beq.n	d7472 <_strtol_l.isra.0+0xe6>
   d73b8:	2b10      	cmp	r3, #16
   d73ba:	d10c      	bne.n	d73d6 <_strtol_l.isra.0+0x4a>
   d73bc:	2c30      	cmp	r4, #48	; 0x30
   d73be:	d10a      	bne.n	d73d6 <_strtol_l.isra.0+0x4a>
   d73c0:	f89c 0000 	ldrb.w	r0, [ip]
   d73c4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d73c8:	2858      	cmp	r0, #88	; 0x58
   d73ca:	d14d      	bne.n	d7468 <_strtol_l.isra.0+0xdc>
   d73cc:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d73d0:	2310      	movs	r3, #16
   d73d2:	f10c 0c02 	add.w	ip, ip, #2
   d73d6:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d73da:	3f01      	subs	r7, #1
   d73dc:	2600      	movs	r6, #0
   d73de:	fbb7 f9f3 	udiv	r9, r7, r3
   d73e2:	4630      	mov	r0, r6
   d73e4:	fb03 7a19 	mls	sl, r3, r9, r7
   d73e8:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d73ec:	2d09      	cmp	r5, #9
   d73ee:	d818      	bhi.n	d7422 <_strtol_l.isra.0+0x96>
   d73f0:	462c      	mov	r4, r5
   d73f2:	42a3      	cmp	r3, r4
   d73f4:	dd24      	ble.n	d7440 <_strtol_l.isra.0+0xb4>
   d73f6:	1c75      	adds	r5, r6, #1
   d73f8:	d007      	beq.n	d740a <_strtol_l.isra.0+0x7e>
   d73fa:	4581      	cmp	r9, r0
   d73fc:	d31d      	bcc.n	d743a <_strtol_l.isra.0+0xae>
   d73fe:	d101      	bne.n	d7404 <_strtol_l.isra.0+0x78>
   d7400:	45a2      	cmp	sl, r4
   d7402:	db1a      	blt.n	d743a <_strtol_l.isra.0+0xae>
   d7404:	fb00 4003 	mla	r0, r0, r3, r4
   d7408:	2601      	movs	r6, #1
   d740a:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d740e:	e7eb      	b.n	d73e8 <_strtol_l.isra.0+0x5c>
   d7410:	2c2b      	cmp	r4, #43	; 0x2b
   d7412:	bf08      	it	eq
   d7414:	f89c 4000 	ldrbeq.w	r4, [ip]
   d7418:	46a8      	mov	r8, r5
   d741a:	bf08      	it	eq
   d741c:	f100 0c02 	addeq.w	ip, r0, #2
   d7420:	e7c8      	b.n	d73b4 <_strtol_l.isra.0+0x28>
   d7422:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d7426:	2d19      	cmp	r5, #25
   d7428:	d801      	bhi.n	d742e <_strtol_l.isra.0+0xa2>
   d742a:	3c37      	subs	r4, #55	; 0x37
   d742c:	e7e1      	b.n	d73f2 <_strtol_l.isra.0+0x66>
   d742e:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d7432:	2d19      	cmp	r5, #25
   d7434:	d804      	bhi.n	d7440 <_strtol_l.isra.0+0xb4>
   d7436:	3c57      	subs	r4, #87	; 0x57
   d7438:	e7db      	b.n	d73f2 <_strtol_l.isra.0+0x66>
   d743a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d743e:	e7e4      	b.n	d740a <_strtol_l.isra.0+0x7e>
   d7440:	1c73      	adds	r3, r6, #1
   d7442:	d106      	bne.n	d7452 <_strtol_l.isra.0+0xc6>
   d7444:	2322      	movs	r3, #34	; 0x22
   d7446:	f8ce 3000 	str.w	r3, [lr]
   d744a:	4638      	mov	r0, r7
   d744c:	b942      	cbnz	r2, d7460 <_strtol_l.isra.0+0xd4>
   d744e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7452:	f1b8 0f00 	cmp.w	r8, #0
   d7456:	d000      	beq.n	d745a <_strtol_l.isra.0+0xce>
   d7458:	4240      	negs	r0, r0
   d745a:	2a00      	cmp	r2, #0
   d745c:	d0f7      	beq.n	d744e <_strtol_l.isra.0+0xc2>
   d745e:	b10e      	cbz	r6, d7464 <_strtol_l.isra.0+0xd8>
   d7460:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   d7464:	6011      	str	r1, [r2, #0]
   d7466:	e7f2      	b.n	d744e <_strtol_l.isra.0+0xc2>
   d7468:	2430      	movs	r4, #48	; 0x30
   d746a:	2b00      	cmp	r3, #0
   d746c:	d1b3      	bne.n	d73d6 <_strtol_l.isra.0+0x4a>
   d746e:	2308      	movs	r3, #8
   d7470:	e7b1      	b.n	d73d6 <_strtol_l.isra.0+0x4a>
   d7472:	2c30      	cmp	r4, #48	; 0x30
   d7474:	d0a4      	beq.n	d73c0 <_strtol_l.isra.0+0x34>
   d7476:	230a      	movs	r3, #10
   d7478:	e7ad      	b.n	d73d6 <_strtol_l.isra.0+0x4a>
   d747a:	bf00      	nop
   d747c:	000d78b2 	.word	0x000d78b2

000d7480 <strtol>:
   d7480:	4613      	mov	r3, r2
   d7482:	460a      	mov	r2, r1
   d7484:	4601      	mov	r1, r0
   d7486:	4802      	ldr	r0, [pc, #8]	; (d7490 <strtol+0x10>)
   d7488:	6800      	ldr	r0, [r0, #0]
   d748a:	f7ff bf7f 	b.w	d738c <_strtol_l.isra.0>
   d748e:	bf00      	nop
   d7490:	2003e450 	.word	0x2003e450

000d7494 <__register_exitproc>:
   d7494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d7498:	f8df 80b8 	ldr.w	r8, [pc, #184]	; d7554 <__register_exitproc+0xc0>
   d749c:	4606      	mov	r6, r0
   d749e:	f8d8 0000 	ldr.w	r0, [r8]
   d74a2:	461f      	mov	r7, r3
   d74a4:	460d      	mov	r5, r1
   d74a6:	4691      	mov	r9, r2
   d74a8:	f000 f856 	bl	d7558 <__retarget_lock_acquire_recursive>
   d74ac:	4b25      	ldr	r3, [pc, #148]	; (d7544 <__register_exitproc+0xb0>)
   d74ae:	681c      	ldr	r4, [r3, #0]
   d74b0:	b934      	cbnz	r4, d74c0 <__register_exitproc+0x2c>
   d74b2:	4c25      	ldr	r4, [pc, #148]	; (d7548 <__register_exitproc+0xb4>)
   d74b4:	601c      	str	r4, [r3, #0]
   d74b6:	4b25      	ldr	r3, [pc, #148]	; (d754c <__register_exitproc+0xb8>)
   d74b8:	b113      	cbz	r3, d74c0 <__register_exitproc+0x2c>
   d74ba:	681b      	ldr	r3, [r3, #0]
   d74bc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   d74c0:	6863      	ldr	r3, [r4, #4]
   d74c2:	2b1f      	cmp	r3, #31
   d74c4:	dd07      	ble.n	d74d6 <__register_exitproc+0x42>
   d74c6:	f8d8 0000 	ldr.w	r0, [r8]
   d74ca:	f000 f847 	bl	d755c <__retarget_lock_release_recursive>
   d74ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d74d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d74d6:	b34e      	cbz	r6, d752c <__register_exitproc+0x98>
   d74d8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   d74dc:	b988      	cbnz	r0, d7502 <__register_exitproc+0x6e>
   d74de:	4b1c      	ldr	r3, [pc, #112]	; (d7550 <__register_exitproc+0xbc>)
   d74e0:	b923      	cbnz	r3, d74ec <__register_exitproc+0x58>
   d74e2:	f8d8 0000 	ldr.w	r0, [r8]
   d74e6:	f000 f838 	bl	d755a <__retarget_lock_release>
   d74ea:	e7f0      	b.n	d74ce <__register_exitproc+0x3a>
   d74ec:	f44f 7084 	mov.w	r0, #264	; 0x108
   d74f0:	f7fe f920 	bl	d5734 <malloc>
   d74f4:	2800      	cmp	r0, #0
   d74f6:	d0f4      	beq.n	d74e2 <__register_exitproc+0x4e>
   d74f8:	2300      	movs	r3, #0
   d74fa:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   d74fe:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   d7502:	6863      	ldr	r3, [r4, #4]
   d7504:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   d7508:	2201      	movs	r2, #1
   d750a:	409a      	lsls	r2, r3
   d750c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   d7510:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   d7514:	4313      	orrs	r3, r2
   d7516:	2e02      	cmp	r6, #2
   d7518:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   d751c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   d7520:	bf02      	ittt	eq
   d7522:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   d7526:	431a      	orreq	r2, r3
   d7528:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   d752c:	6863      	ldr	r3, [r4, #4]
   d752e:	f8d8 0000 	ldr.w	r0, [r8]
   d7532:	1c5a      	adds	r2, r3, #1
   d7534:	3302      	adds	r3, #2
   d7536:	6062      	str	r2, [r4, #4]
   d7538:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   d753c:	f000 f80e 	bl	d755c <__retarget_lock_release_recursive>
   d7540:	2000      	movs	r0, #0
   d7542:	e7c6      	b.n	d74d2 <__register_exitproc+0x3e>
   d7544:	2003e7e0 	.word	0x2003e7e0
   d7548:	2003e754 	.word	0x2003e754
   d754c:	00000000 	.word	0x00000000
   d7550:	000d5735 	.word	0x000d5735
   d7554:	2003e4b4 	.word	0x2003e4b4

000d7558 <__retarget_lock_acquire_recursive>:
   d7558:	4770      	bx	lr

000d755a <__retarget_lock_release>:
   d755a:	4770      	bx	lr

000d755c <__retarget_lock_release_recursive>:
   d755c:	4770      	bx	lr

000d755e <link_code_end>:
	...

000d7560 <dynalib_user>:
   d7560:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   d7570:	0000 0000 6d73 7261 6c74 6769 7468 6400     ....smartlight.d
   d7580:	6f6f 0072 7973 7473 6d65 6f43 746e 6f72     oor.systemContro
   d7590:	006c 227b 6146 6c69 3a22 2520 7d64 7b00     l.{"Fail": %d}.{
   d75a0:	7422 3a22 6425 222c 696c 6867 2274 253a     "t":%d,"light":%
   d75b0:	2c73 2220 6f64 726f 3a22 7325 202c 7422     s, "door":%s, "t
   d75c0:	6568 6d72 736f 6174 2274 253a 2c73 2220     hermostat":%s, "
   d75d0:	7548 696d 2264 253a 322e 2c66 2220 6554     Humid":%.2f, "Te
   d75e0:	706d 3a22 2e25 6632 202c 6322 2274 253a     mp":%.2f, "ct":%
   d75f0:	646c 202c 6d22 6e69 7475 2265 253a 7d64     ld, "minute":%d}
   d7600:	7b00 007d 227b 304c 3a22 6425 222c 314c     .{}.{"L0":%d,"L1
   d7610:	3a22 6425 222c 2262 253a 2c64 7322 3a22     ":%d,"b":%d,"s":
   d7620:	6425 222c 226d 253a 2c64 4d22 3a22 6425     %d,"m":%d,"M":%d
   d7630:	007d 6e6f 6100 7475 006f 7262 6769 7468     }.on.auto.bright
   d7640:	656e 7373 6d00 6e69 6d00 7861 7300 656c     ness.min.max.sle
   d7650:	7065 6954 656d 7700 6b61 5465 6d69 0065     epTime.wakeTime.
   d7660:	227b 6c43 736f 2265 253a 2c64 2220 6f64     {"Close":%d, "do
   d7670:	726f 7250 786f 6d69 7469 2279 253a 322e     orProximity":%.2
   d7680:	2c66 2220 6573 736e 726f 6156 226c 253a     f, "sensorVal":%
   d7690:	2c64 2220 6c61 7265 2274 253a 7d64 6400     d, "alert":%d}.d
   d76a0:	6f6f 5072 6f72 6978 696d 7974 7300 6174     oorProximity.sta
   d76b0:	7574 0073 227b 6568 7461 7453 7461 7375     tus.{"heatStatus
   d76c0:	3a22 6425 222c 6f63 6c6f 7453 7461 7375     ":%d,"coolStatus
   d76d0:	3a22 6425 222c 6166 536e 6174 7574 2273     ":%d,"fanStatus"
   d76e0:	253a 2c64 2220 6f70 6577 2272 253a 2c64     :%d, "power":%d,
   d76f0:	2220 6573 5474 6d65 2270 253a 7d64 6800      "setTemp":%d}.h
   d7700:	6165 0074 6f63 6c6f 6f00 6666 6600 6e61     eat.cool.off.fan
   d7710:	7400 6d65 0070 0000                         .temp...

000d7718 <_ZTVN5spark13EthernetClassE>:
	...
   d7720:	57fb 000d 57f1 000d 57e7 000d 57dd 000d     .W...W...W...W..
   d7730:	57d1 000d 57c5 000d 5f0d 000d 5f15 000d     .W...W..._..._..
   d7740:	57b9 000d 57b1 000d 57a7 000d 579d 000d     .W...W...W...W..
   d7750:	5f45 000d                                   E_..

000d7754 <_ZTV7TwoWire>:
	...
   d775c:	5819 000d 5863 000d 583b 000d 581b 000d     .X..cX..;X...X..
   d776c:	5843 000d 584b 000d 5853 000d 585b 000d     CX..KX..SX..[X..

000d777c <_ZTV9IPAddress>:
	...
   d7784:	58ad 000d 589d 000d 589f 000d 2e30 0030     .X...X...X..0.0.
   d7794:	6166 736c 0065 0000                         false...

000d779c <_ZTVSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d77a4:	59ad 000d 59b3 000d 59c9 000d 59c1 000d     .Y...Y...Y...Y..
   d77b4:	59af 000d 7061 0070                         .Y..app.

000d77bc <_ZTVN5spark12NetworkClassE>:
	...
   d77c4:	5ecd 000d 5ed7 000d 5ee1 000d 5eeb 000d     .^...^...^...^..
   d77d4:	5ef5 000d 5f01 000d 5f0d 000d 5f15 000d     .^..._..._..._..
   d77e4:	5f1d 000d 5f29 000d 5f31 000d 5f3b 000d     ._..)_..1_..;_..
   d77f4:	5f45 000d 5925 252d 2d6d 6425 2554 3a48     E_..%Y-%m-%dT%H:
   d7804:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000d7814 <_ZTV11USARTSerial>:
	...
   d781c:	6475 000d 64e3 000d 64bb 000d 602d 000d     ud...d...d..-`..
   d782c:	648b 000d 64a7 000d 6499 000d 64b5 000d     .d...d...d...d..
   d783c:	6477 000d 647d 000d                         wd..}d..

000d7844 <_ZTV9USBSerial>:
	...
   d784c:	656f 000d 65d7 000d 65ad 000d 602d 000d     oe...e...e..-`..
   d785c:	659f 000d 6571 000d 6581 000d 65d1 000d     .e..qe...e...e..
   d786c:	6591 000d 6569 000d                         .e..ie..

000d7874 <_ZTVN5spark9WiFiClassE>:
	...
   d787c:	66cf 000d 66c5 000d 66bb 000d 6671 000d     .f...f...f..qf..
   d788c:	66af 000d 66a3 000d 5f0d 000d 5f15 000d     .f...f..._..._..
   d789c:	6697 000d 668f 000d 6685 000d 667b 000d     .f...f...f..{f..
   d78ac:	5f45 000d                                   E_..

000d78b0 <_ZSt7nothrow>:
	...

000d78b1 <_ctype_>:
   d78b1:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d78c1:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d78d1:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d78e1:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d78f1:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d7901:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d7911:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d7921:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d7931:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000d79b2 <link_const_variable_data_end>:
	...

000d79b4 <link_constructors_location>:
   d79b4:	000d446d 	.word	0x000d446d
   d79b8:	000d578d 	.word	0x000d578d
   d79bc:	000d5805 	.word	0x000d5805
   d79c0:	000d5ebd 	.word	0x000d5ebd
   d79c4:	000d6019 	.word	0x000d6019
   d79c8:	000d61a1 	.word	0x000d61a1
   d79cc:	000d63c9 	.word	0x000d63c9
   d79d0:	000d6461 	.word	0x000d6461
   d79d4:	000d66d9 	.word	0x000d66d9

000d79d8 <link_constructors_end>:
	...
