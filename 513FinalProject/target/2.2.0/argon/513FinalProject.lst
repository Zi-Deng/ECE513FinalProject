
/Users/zi/Documents/UofA/ECE513FinalProject/513FinalProject/target/2.2.0/argon/513FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003570  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d7590  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  2003e460  000d7594  0001e460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000324  2003e4cc  2003e4cc  0002e4cc  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d7600  000d7600  00027600  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d7628  000d7628  00027628  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00177fb9  00000000  00000000  0002762c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00018fae  00000000  00000000  0019f5e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002c294  00000000  00000000  001b8593  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000029d0  00000000  00000000  001e4827  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000075b0  00000000  00000000  001e71f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003adcd  00000000  00000000  001ee7a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003dbdd  00000000  00000000  00229574  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00105be4  00000000  00000000  00267151  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00007394  00000000  00000000  0036cd38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f002 ff51 	bl	d6ed8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f002 ff73 	bl	d6f28 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e460 	.word	0x2003e460
   d404c:	000d7594 	.word	0x000d7594
   d4050:	2003e4cc 	.word	0x2003e4cc
   d4054:	2003e4cc 	.word	0x2003e4cc
   d4058:	2003e7ed 	.word	0x2003e7ed

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f002 fa61 	bl	d6528 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d7564 	.word	0x000d7564
   d4080:	000d7588 	.word	0x000d7588

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b826 	b.w	d40d4 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f937 	bl	d42fc <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f002 ba01 	b.w	d6498 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f001 ba01 	b.w	d549c <malloc>

000d409a <_Znaj>:
   d409a:	f001 b9ff 	b.w	d549c <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f001 ba05 	b.w	d54ac <free>

000d40a2 <_ZdaPv>:
   d40a2:	f001 ba03 	b.w	d54ac <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr

000d40b6 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d40b6:	b40e      	push	{r1, r2, r3}
   d40b8:	b503      	push	{r0, r1, lr}
   d40ba:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d40bc:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d40be:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d40c2:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d40c4:	f001 febb 	bl	d5e3e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d40c8:	b002      	add	sp, #8
   d40ca:	f85d eb04 	ldr.w	lr, [sp], #4
   d40ce:	b003      	add	sp, #12
   d40d0:	4770      	bx	lr
	...

000d40d4 <setup>:
void myWebhookHandler(const char *event, const char *data) {
  String output = String::format("Response: %s", data);
  Serial.println(output);
}

void setup() {
   d40d4:	b508      	push	{r3, lr}
  pinMode(LED, OUTPUT);
   d40d6:	2101      	movs	r1, #1
   d40d8:	2000      	movs	r0, #0
   d40da:	f002 fa95 	bl	d6608 <pinMode>
  pinMode(LED2, OUTPUT);
   d40de:	2101      	movs	r1, #1
   d40e0:	2007      	movs	r0, #7
   d40e2:	f002 fa91 	bl	d6608 <pinMode>
  RGB.control(true);
   d40e6:	2001      	movs	r0, #1
   d40e8:	f001 feda 	bl	d5ea0 <_ZN8RGBClass7controlEb>
  RGB.color(255, 255, 255);
   d40ec:	22ff      	movs	r2, #255	; 0xff
   d40ee:	4611      	mov	r1, r2
   d40f0:	4610      	mov	r0, r2
   d40f2:	f001 fee5 	bl	d5ec0 <_ZN8RGBClass5colorEiii>

	Serial.begin();
   d40f6:	f002 f949 	bl	d638c <_Z16_fetch_usbserialv>
   d40fa:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40fe:	f002 f939 	bl	d6374 <_ZN9USBSerial5beginEl>

  dht.begin();
   d4102:	4806      	ldr	r0, [pc, #24]	; (d411c <setup+0x48>)
   d4104:	f000 fa06 	bl	d4514 <_ZN3DHT5beginEv>

  counter = 0;
   d4108:	4b05      	ldr	r3, [pc, #20]	; (d4120 <setup+0x4c>)

  // bPublish = false;
  // rxCloudCmdStr = "";
  finalStatusStr = "";
   d410a:	4906      	ldr	r1, [pc, #24]	; (d4124 <setup+0x50>)
   d410c:	4806      	ldr	r0, [pc, #24]	; (d4128 <setup+0x54>)
  counter = 0;
   d410e:	2200      	movs	r2, #0
   d4110:	601a      	str	r2, [r3, #0]

  // Particle.function("cloundcmd", updateRxCmd);
  // Particle.subscribe("hook-response/smarthome", myWebhookHandler);
}
   d4112:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  finalStatusStr = "";
   d4116:	f001 bfa5 	b.w	d6064 <_ZN6StringaSEPKc>
   d411a:	bf00      	nop
   d411c:	2003e4d0 	.word	0x2003e4d0
   d4120:	2003e4cc 	.word	0x2003e4cc
   d4124:	000d7343 	.word	0x000d7343
   d4128:	2003e518 	.word	0x2003e518

000d412c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d412c:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d412e:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d4130:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d4132:	b17c      	cbz	r4, d4154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d4134:	6863      	ldr	r3, [r4, #4]
   d4136:	3b01      	subs	r3, #1
   d4138:	6063      	str	r3, [r4, #4]
   d413a:	b95b      	cbnz	r3, d4154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d413c:	6823      	ldr	r3, [r4, #0]
   d413e:	4620      	mov	r0, r4
   d4140:	689b      	ldr	r3, [r3, #8]
   d4142:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4144:	68a3      	ldr	r3, [r4, #8]
   d4146:	3b01      	subs	r3, #1
   d4148:	60a3      	str	r3, [r4, #8]
   d414a:	b91b      	cbnz	r3, d4154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d414c:	6823      	ldr	r3, [r4, #0]
   d414e:	4620      	mov	r0, r4
   d4150:	68db      	ldr	r3, [r3, #12]
   d4152:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d4154:	4628      	mov	r0, r5
   d4156:	bd38      	pop	{r3, r4, r5, pc}

000d4158 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4158:	680b      	ldr	r3, [r1, #0]
   d415a:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d415c:	b113      	cbz	r3, d4164 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d415e:	685a      	ldr	r2, [r3, #4]
   d4160:	3201      	adds	r2, #1
   d4162:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d4164:	4770      	bx	lr

000d4166 <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d4166:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   d4168:	68cd      	ldr	r5, [r1, #12]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d416a:	f851 3b04 	ldr.w	r3, [r1], #4
   d416e:	9300      	str	r3, [sp, #0]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d4170:	4604      	mov	r4, r0
   d4172:	a801      	add	r0, sp, #4
   d4174:	f7ff fff0 	bl	d4158 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d4178:	466a      	mov	r2, sp
   d417a:	4629      	mov	r1, r5
   d417c:	4620      	mov	r0, r4
   d417e:	f001 fc97 	bl	d5ab0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4182:	a801      	add	r0, sp, #4
   d4184:	f7ff ffd2 	bl	d412c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4188:	4620      	mov	r0, r4
   d418a:	b003      	add	sp, #12
   d418c:	bd30      	pop	{r4, r5, pc}

000d418e <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d418e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   d4190:	690d      	ldr	r5, [r1, #16]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4192:	f851 3b04 	ldr.w	r3, [r1], #4
   d4196:	9300      	str	r3, [sp, #0]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d4198:	4604      	mov	r4, r0
   d419a:	a801      	add	r0, sp, #4
   d419c:	f7ff ffdc 	bl	d4158 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d41a0:	466a      	mov	r2, sp
   d41a2:	4629      	mov	r1, r5
   d41a4:	4620      	mov	r0, r4
   d41a6:	f001 fafe 	bl	d57a6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d41aa:	a801      	add	r0, sp, #4
   d41ac:	f7ff ffbe 	bl	d412c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d41b0:	4620      	mov	r0, r4
   d41b2:	b003      	add	sp, #12
   d41b4:	bd30      	pop	{r4, r5, pc}
	...

000d41b8 <_Z19serialCmdProcessingv>:
void serialCmdProcessing() {
   d41b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d41ba:	b095      	sub	sp, #84	; 0x54
  if (Serial.available() <= 0) return;
   d41bc:	f002 f8e6 	bl	d638c <_Z16_fetch_usbserialv>
   d41c0:	6803      	ldr	r3, [r0, #0]
   d41c2:	691b      	ldr	r3, [r3, #16]
   d41c4:	4798      	blx	r3
   d41c6:	2800      	cmp	r0, #0
   d41c8:	f340 8087 	ble.w	d42da <_Z19serialCmdProcessingv+0x122>
  String cmdStr = "";
   d41cc:	4944      	ldr	r1, [pc, #272]	; (d42e0 <_Z19serialCmdProcessingv+0x128>)
   d41ce:	a806      	add	r0, sp, #24
   d41d0:	f001 fef5 	bl	d5fbe <_ZN6StringC1EPKc>
  while (Serial.available()) {
   d41d4:	f002 f8da 	bl	d638c <_Z16_fetch_usbserialv>
   d41d8:	6803      	ldr	r3, [r0, #0]
   d41da:	691b      	ldr	r3, [r3, #16]
   d41dc:	4798      	blx	r3
   d41de:	b180      	cbz	r0, d4202 <_Z19serialCmdProcessingv+0x4a>
      char c = Serial.read();
   d41e0:	f002 f8d4 	bl	d638c <_Z16_fetch_usbserialv>
   d41e4:	6803      	ldr	r3, [r0, #0]
   d41e6:	695b      	ldr	r3, [r3, #20]
   d41e8:	4798      	blx	r3
      cmdStr += String(c);
   d41ea:	b2c1      	uxtb	r1, r0
   d41ec:	a80e      	add	r0, sp, #56	; 0x38
   d41ee:	f001 ff4b 	bl	d6088 <_ZN6StringC1Ec>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d41f2:	a90e      	add	r1, sp, #56	; 0x38
   d41f4:	a806      	add	r0, sp, #24
   d41f6:	f001 ff6f 	bl	d60d8 <_ZN6String6concatERKS_>
   d41fa:	a80e      	add	r0, sp, #56	; 0x38
   d41fc:	f001 fe94 	bl	d5f28 <_ZN6StringD1Ev>
  while (Serial.available()) {
   d4200:	e7e8      	b.n	d41d4 <_Z19serialCmdProcessingv+0x1c>
  JSONValue cmdJson = JSONValue::parseCopy(cmdStr.c_str());
   d4202:	9906      	ldr	r1, [sp, #24]
    return parseCopy(json, strlen(json));
   d4204:	9101      	str	r1, [sp, #4]
   d4206:	4608      	mov	r0, r1
   d4208:	f002 fecc 	bl	d6fa4 <strlen>
   d420c:	9901      	ldr	r1, [sp, #4]
    return strcmp(s_, str) == 0;
   d420e:	4d35      	ldr	r5, [pc, #212]	; (d42e4 <_Z19serialCmdProcessingv+0x12c>)
   d4210:	4e35      	ldr	r6, [pc, #212]	; (d42e8 <_Z19serialCmdProcessingv+0x130>)
   d4212:	4f36      	ldr	r7, [pc, #216]	; (d42ec <_Z19serialCmdProcessingv+0x134>)
    return parseCopy(json, strlen(json));
   d4214:	4602      	mov	r2, r0
   d4216:	a803      	add	r0, sp, #12
   d4218:	f001 fcae 	bl	d5b78 <_ZN5spark9JSONValue9parseCopyEPKcj>
        JSONObjectIterator(value.t_, value.d_) {
   d421c:	9c05      	ldr	r4, [sp, #20]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d421e:	9b03      	ldr	r3, [sp, #12]
   d4220:	930a      	str	r3, [sp, #40]	; 0x28
   d4222:	a904      	add	r1, sp, #16
   d4224:	a80b      	add	r0, sp, #44	; 0x2c
   d4226:	f7ff ff97 	bl	d4158 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d422a:	aa0a      	add	r2, sp, #40	; 0x28
   d422c:	4621      	mov	r1, r4
   d422e:	a80e      	add	r0, sp, #56	; 0x38
   d4230:	f001 fc62 	bl	d5af8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4234:	a80b      	add	r0, sp, #44	; 0x2c
   d4236:	f7ff ff79 	bl	d412c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  while (iter.next()) {
   d423a:	a80e      	add	r0, sp, #56	; 0x38
   d423c:	f001 fc74 	bl	d5b28 <_ZN5spark18JSONObjectIterator4nextEv>
   d4240:	2800      	cmp	r0, #0
   d4242:	d041      	beq.n	d42c8 <_Z19serialCmdProcessingv+0x110>
    if (iter.name() == "smartlight") {
   d4244:	a90e      	add	r1, sp, #56	; 0x38
   d4246:	a80a      	add	r0, sp, #40	; 0x28
   d4248:	f7ff ff8d 	bl	d4166 <_ZNK5spark18JSONObjectIterator4nameEv>
    return strcmp(s_, str) == 0;
   d424c:	4629      	mov	r1, r5
   d424e:	980c      	ldr	r0, [sp, #48]	; 0x30
   d4250:	f002 fe96 	bl	d6f80 <strcmp>
   d4254:	4604      	mov	r4, r0
   d4256:	a80b      	add	r0, sp, #44	; 0x2c
   d4258:	f7ff ff68 	bl	d412c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      smartLight.cmdProcessing(iter.value());
   d425c:	a90e      	add	r1, sp, #56	; 0x38
   d425e:	a80a      	add	r0, sp, #40	; 0x28
    if (iter.name() == "smartlight") {
   d4260:	b94c      	cbnz	r4, d4276 <_Z19serialCmdProcessingv+0xbe>
      smartLight.cmdProcessing(iter.value());
   d4262:	f7ff ff94 	bl	d418e <_ZNK5spark18JSONObjectIterator5valueEv>
   d4266:	4822      	ldr	r0, [pc, #136]	; (d42f0 <_Z19serialCmdProcessingv+0x138>)
   d4268:	a90a      	add	r1, sp, #40	; 0x28
   d426a:	f000 fc91 	bl	d4b90 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE>
   d426e:	a80b      	add	r0, sp, #44	; 0x2c
   d4270:	f7ff ff5c 	bl	d412c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4274:	e7e1      	b.n	d423a <_Z19serialCmdProcessingv+0x82>
    } else if (iter.name() == "door") {
   d4276:	f7ff ff76 	bl	d4166 <_ZNK5spark18JSONObjectIterator4nameEv>
   d427a:	4631      	mov	r1, r6
   d427c:	980c      	ldr	r0, [sp, #48]	; 0x30
   d427e:	f002 fe7f 	bl	d6f80 <strcmp>
   d4282:	4604      	mov	r4, r0
   d4284:	a80b      	add	r0, sp, #44	; 0x2c
   d4286:	f7ff ff51 	bl	d412c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      door.cmdProcessing(iter.value());
   d428a:	a90e      	add	r1, sp, #56	; 0x38
   d428c:	a80a      	add	r0, sp, #40	; 0x28
    } else if (iter.name() == "door") {
   d428e:	b934      	cbnz	r4, d429e <_Z19serialCmdProcessingv+0xe6>
      door.cmdProcessing(iter.value());
   d4290:	f7ff ff7d 	bl	d418e <_ZNK5spark18JSONObjectIterator5valueEv>
   d4294:	4817      	ldr	r0, [pc, #92]	; (d42f4 <_Z19serialCmdProcessingv+0x13c>)
   d4296:	a90a      	add	r1, sp, #40	; 0x28
   d4298:	f000 fd32 	bl	d4d00 <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE>
   d429c:	e7e7      	b.n	d426e <_Z19serialCmdProcessingv+0xb6>
    } else if (iter.name() == "systemControl") {
   d429e:	f7ff ff62 	bl	d4166 <_ZNK5spark18JSONObjectIterator4nameEv>
   d42a2:	980c      	ldr	r0, [sp, #48]	; 0x30
   d42a4:	4639      	mov	r1, r7
   d42a6:	f002 fe6b 	bl	d6f80 <strcmp>
   d42aa:	4604      	mov	r4, r0
   d42ac:	a80b      	add	r0, sp, #44	; 0x2c
   d42ae:	f7ff ff3d 	bl	d412c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d42b2:	2c00      	cmp	r4, #0
   d42b4:	d1c1      	bne.n	d423a <_Z19serialCmdProcessingv+0x82>
      thermostat.cmdProcessing(iter.value());
   d42b6:	a90e      	add	r1, sp, #56	; 0x38
   d42b8:	a80a      	add	r0, sp, #40	; 0x28
   d42ba:	f7ff ff68 	bl	d418e <_ZNK5spark18JSONObjectIterator5valueEv>
   d42be:	480e      	ldr	r0, [pc, #56]	; (d42f8 <_Z19serialCmdProcessingv+0x140>)
   d42c0:	a90a      	add	r1, sp, #40	; 0x28
   d42c2:	f000 fe05 	bl	d4ed0 <_ZN11CThermostat13cmdProcessingEN5spark9JSONValueE>
   d42c6:	e7d2      	b.n	d426e <_Z19serialCmdProcessingv+0xb6>
   d42c8:	a80f      	add	r0, sp, #60	; 0x3c
   d42ca:	f7ff ff2f 	bl	d412c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d42ce:	a804      	add	r0, sp, #16
   d42d0:	f7ff ff2c 	bl	d412c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  String cmdStr = "";
   d42d4:	a806      	add	r0, sp, #24
   d42d6:	f001 fe27 	bl	d5f28 <_ZN6StringD1Ev>
}
   d42da:	b015      	add	sp, #84	; 0x54
   d42dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d42de:	bf00      	nop
   d42e0:	000d7343 	.word	0x000d7343
   d42e4:	000d719c 	.word	0x000d719c
   d42e8:	000d71a7 	.word	0x000d71a7
   d42ec:	000d71ac 	.word	0x000d71ac
   d42f0:	2003e528 	.word	0x2003e528
   d42f4:	2003e4e4 	.word	0x2003e4e4
   d42f8:	2003e558 	.word	0x2003e558

000d42fc <loop>:

void loop() {
   d42fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d42fe:	ed2d 8b04 	vpush	{d8-d9}
   d4302:	b09b      	sub	sp, #108	; 0x6c

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4304:	f000 fe9e 	bl	d5044 <HAL_Timer_Get_Milli_Seconds>
   d4308:	4604      	mov	r4, r0
  unsigned long t = millis();
  //cloudCmdProcessing();


	float h = dht.getHumidity();
   d430a:	4848      	ldr	r0, [pc, #288]	; (d442c <loop+0x130>)
  thermostat.execute(temp);
  //door.execute();
  unsigned long period = millis() - t;


  if (counter % (SERAIL_COMM_FREQUENCY * LOOP_FREQUENCY) == 0) {
   d430c:	4d48      	ldr	r5, [pc, #288]	; (d4430 <loop+0x134>)
	float h = dht.getHumidity();
   d430e:	f000 fb2f 	bl	d4970 <_ZN3DHT11getHumidityEv>
	float temp = dht.getTempCelcius();
   d4312:	4846      	ldr	r0, [pc, #280]	; (d442c <loop+0x130>)
	float h = dht.getHumidity();
   d4314:	eef0 8a40 	vmov.f32	s17, s0
	float temp = dht.getTempCelcius();
   d4318:	f000 faea 	bl	d48f0 <_ZN3DHT14getTempCelciusEv>
	float f = dht.getTempFarenheit();
   d431c:	4843      	ldr	r0, [pc, #268]	; (d442c <loop+0x130>)
	float temp = dht.getTempCelcius();
   d431e:	eeb0 8a40 	vmov.f32	s16, s0
	float f = dht.getTempFarenheit();
   d4322:	f000 fae7 	bl	d48f4 <_ZN3DHT16getTempFarenheitEv>
   d4326:	eeb0 9a40 	vmov.f32	s18, s0
  serialCmdProcessing();
   d432a:	f7ff ff45 	bl	d41b8 <_Z19serialCmdProcessingv>
  smartLight.execute();
   d432e:	4841      	ldr	r0, [pc, #260]	; (d4434 <loop+0x138>)
   d4330:	f000 fbf6 	bl	d4b20 <_ZN11CSmartLight7executeEv>
  thermostat.execute(temp);
   d4334:	4840      	ldr	r0, [pc, #256]	; (d4438 <loop+0x13c>)
   d4336:	eeb0 0a48 	vmov.f32	s0, s16
   d433a:	f000 fd9b 	bl	d4e74 <_ZN11CThermostat7executeEf>
   d433e:	f000 fe81 	bl	d5044 <HAL_Timer_Get_Milli_Seconds>
   d4342:	6829      	ldr	r1, [r5, #0]
   d4344:	220a      	movs	r2, #10
   d4346:	fb91 f3f2 	sdiv	r3, r1, r2
   d434a:	fb02 1313 	mls	r3, r2, r3, r1
   d434e:	4606      	mov	r6, r0
  if (counter % (SERAIL_COMM_FREQUENCY * LOOP_FREQUENCY) == 0) {
   d4350:	2b00      	cmp	r3, #0
   d4352:	d160      	bne.n	d4416 <loop+0x11a>
    counter = 0;
    if (isnan(h) || isnan(temp) || isnan(f)) {
   d4354:	eef4 8a68 	vcmp.f32	s17, s17
   d4358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    counter = 0;
   d435c:	602b      	str	r3, [r5, #0]
    if (isnan(h) || isnan(temp) || isnan(f)) {
   d435e:	d609      	bvs.n	d4374 <loop+0x78>
   d4360:	eeb4 8a48 	vcmp.f32	s16, s16
   d4364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4368:	d604      	bvs.n	d4374 <loop+0x78>
   d436a:	eeb4 9a49 	vcmp.f32	s18, s18
   d436e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4372:	d70d      	bvc.n	d4390 <loop+0x94>
      Serial.printf("{\"Fail\": %d}", true);
   d4374:	f002 f80a 	bl	d638c <_Z16_fetch_usbserialv>
   d4378:	4930      	ldr	r1, [pc, #192]	; (d443c <loop+0x140>)
   d437a:	2201      	movs	r2, #1
   d437c:	f7ff fe9b 	bl	d40b6 <_ZN5Print6printfEPKcz>
      Serial.println();
   d4380:	f002 f804 	bl	d638c <_Z16_fetch_usbserialv>
   d4384:	f001 fd31 	bl	d5dea <_ZN5Print7printlnEv>
  }
  counter++;

  period = PERIOD - (millis() - t);
  if (period > 0) delay(period);
}
   d4388:	b01b      	add	sp, #108	; 0x6c
   d438a:	ecbd 8b04 	vpop	{d8-d9}
   d438e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      (int)Time.now(), smartLight.getStatusStr().c_str(), door.getStatusStr().c_str(), thermostat.getStatusStr().c_str(), h, temp,
   d4390:	f001 ff0a 	bl	d61a8 <_ZN9TimeClass3nowEv>

    void execute();

    int getSensorVal();
    void readSensorVal();
    String getStatusStr() {return statusStr;};
   d4394:	492a      	ldr	r1, [pc, #168]	; (d4440 <loop+0x144>)
   d4396:	9009      	str	r0, [sp, #36]	; 0x24
   d4398:	a80a      	add	r0, sp, #40	; 0x28
   d439a:	f001 fe50 	bl	d603e <_ZN6StringC1ERKS_>
    finalStatusStr = String::format("{\"t\":%d,\"light\":%s, \"door\":%s, \"thermostat\":%s, \"Humid\":%.2f, \"Temp\":%.2f, \"ct\":%ld}",
   d439e:	9b0a      	ldr	r3, [sp, #40]	; 0x28

    void execute();

    int getSensorVal();
    void readSensorVal();
    String getStatusStr() {return statusStr;};
   d43a0:	4928      	ldr	r1, [pc, #160]	; (d4444 <loop+0x148>)
   d43a2:	9308      	str	r3, [sp, #32]
   d43a4:	a80e      	add	r0, sp, #56	; 0x38
   d43a6:	f001 fe4a 	bl	d603e <_ZN6StringC1ERKS_>
  public:
    CThermostat();
    void cmdProcessing(JSONValue cmdJson);
    void execute(float currTemp);
    void createStatusStr();
    String getStatusStr() {return statusStr;};
   d43aa:	4927      	ldr	r1, [pc, #156]	; (d4448 <loop+0x14c>)
   d43ac:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   d43ae:	a812      	add	r0, sp, #72	; 0x48
   d43b0:	f001 fe45 	bl	d603e <_ZN6StringC1ERKS_>
  unsigned long period = millis() - t;
   d43b4:	1b36      	subs	r6, r6, r4
    finalStatusStr = String::format("{\"t\":%d,\"light\":%s, \"door\":%s, \"thermostat\":%s, \"Humid\":%.2f, \"Temp\":%.2f, \"ct\":%ld}",
   d43b6:	ee18 0a10 	vmov	r0, s16
   d43ba:	9606      	str	r6, [sp, #24]
   d43bc:	f002 faf4 	bl	d69a8 <__aeabi_f2d>
   d43c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d43c4:	ee18 0a90 	vmov	r0, s17
   d43c8:	f002 faee 	bl	d69a8 <__aeabi_f2d>
   d43cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d43d0:	9912      	ldr	r1, [sp, #72]	; 0x48
      period);
   d43d2:	4e1e      	ldr	r6, [pc, #120]	; (d444c <loop+0x150>)
    finalStatusStr = String::format("{\"t\":%d,\"light\":%s, \"door\":%s, \"thermostat\":%s, \"Humid\":%.2f, \"Temp\":%.2f, \"ct\":%ld}",
   d43d4:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
   d43d8:	e9cd 7100 	strd	r7, r1, [sp]
   d43dc:	a816      	add	r0, sp, #88	; 0x58
   d43de:	491c      	ldr	r1, [pc, #112]	; (d4450 <loop+0x154>)
   d43e0:	f001 fe7e 	bl	d60e0 <_ZN6String6formatEPKcz>
      period);
   d43e4:	a916      	add	r1, sp, #88	; 0x58
   d43e6:	4630      	mov	r0, r6
   d43e8:	f001 fe34 	bl	d6054 <_ZN6StringaSEOS_>
   d43ec:	a816      	add	r0, sp, #88	; 0x58
   d43ee:	f001 fd9b 	bl	d5f28 <_ZN6StringD1Ev>
      (int)Time.now(), smartLight.getStatusStr().c_str(), door.getStatusStr().c_str(), thermostat.getStatusStr().c_str(), h, temp,
   d43f2:	a812      	add	r0, sp, #72	; 0x48
   d43f4:	f001 fd98 	bl	d5f28 <_ZN6StringD1Ev>
   d43f8:	a80e      	add	r0, sp, #56	; 0x38
   d43fa:	f001 fd95 	bl	d5f28 <_ZN6StringD1Ev>
   d43fe:	a80a      	add	r0, sp, #40	; 0x28
   d4400:	f001 fd92 	bl	d5f28 <_ZN6StringD1Ev>
    Serial.printf(finalStatusStr);
   d4404:	f001 ffc2 	bl	d638c <_Z16_fetch_usbserialv>
   d4408:	6831      	ldr	r1, [r6, #0]
   d440a:	f7ff fe54 	bl	d40b6 <_ZN5Print6printfEPKcz>
    Serial.println();
   d440e:	f001 ffbd 	bl	d638c <_Z16_fetch_usbserialv>
   d4412:	f001 fcea 	bl	d5dea <_ZN5Print7printlnEv>
  counter++;
   d4416:	682b      	ldr	r3, [r5, #0]
   d4418:	3301      	adds	r3, #1
   d441a:	602b      	str	r3, [r5, #0]
   d441c:	f000 fe12 	bl	d5044 <HAL_Timer_Get_Milli_Seconds>
  period = PERIOD - (millis() - t);
   d4420:	3464      	adds	r4, #100	; 0x64
  if (period > 0) delay(period);
   d4422:	1a20      	subs	r0, r4, r0
   d4424:	d0b0      	beq.n	d4388 <loop+0x8c>
   d4426:	f001 f861 	bl	d54ec <delay>
   d442a:	e7ad      	b.n	d4388 <loop+0x8c>
   d442c:	2003e4d0 	.word	0x2003e4d0
   d4430:	2003e4cc 	.word	0x2003e4cc
   d4434:	2003e528 	.word	0x2003e528
   d4438:	2003e558 	.word	0x2003e558
   d443c:	000d71ba 	.word	0x000d71ba
   d4440:	2003e548 	.word	0x2003e548
   d4444:	2003e508 	.word	0x2003e508
   d4448:	2003e57c 	.word	0x2003e57c
   d444c:	2003e518 	.word	0x2003e518
   d4450:	000d71c7 	.word	0x000d71c7

000d4454 <_GLOBAL__sub_I_dht>:
}
   d4454:	b508      	push	{r3, lr}
SYSTEM_THREAD(ENABLED);
   d4456:	2100      	movs	r1, #0
   d4458:	2001      	movs	r0, #1
   d445a:	f000 ff7b 	bl	d5354 <system_thread_set_state>
DHT dht(DHTPIN, DHTTYPE);
   d445e:	2306      	movs	r3, #6
   d4460:	2102      	movs	r1, #2
   d4462:	220b      	movs	r2, #11
   d4464:	4808      	ldr	r0, [pc, #32]	; (d4488 <_GLOBAL__sub_I_dht+0x34>)
   d4466:	f000 f84e 	bl	d4506 <_ZN3DHTC1Ehhh>
CSmartLight smartLight;
   d446a:	4808      	ldr	r0, [pc, #32]	; (d448c <_GLOBAL__sub_I_dht+0x38>)
   d446c:	f000 fa82 	bl	d4974 <_ZN11CSmartLightC1Ev>
CDoor door;
   d4470:	4807      	ldr	r0, [pc, #28]	; (d4490 <_GLOBAL__sub_I_dht+0x3c>)
   d4472:	f000 fc23 	bl	d4cbc <_ZN5CDoorC1Ev>
CThermostat thermostat;
   d4476:	4807      	ldr	r0, [pc, #28]	; (d4494 <_GLOBAL__sub_I_dht+0x40>)
   d4478:	f000 fcc2 	bl	d4e00 <_ZN11CThermostatC1Ev>
}
   d447c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
String finalStatusStr;
   d4480:	4905      	ldr	r1, [pc, #20]	; (d4498 <_GLOBAL__sub_I_dht+0x44>)
   d4482:	4806      	ldr	r0, [pc, #24]	; (d449c <_GLOBAL__sub_I_dht+0x48>)
   d4484:	f001 bd9b 	b.w	d5fbe <_ZN6StringC1EPKc>
   d4488:	2003e4d0 	.word	0x2003e4d0
   d448c:	2003e528 	.word	0x2003e528
   d4490:	2003e4e4 	.word	0x2003e4e4
   d4494:	2003e558 	.word	0x2003e558
   d4498:	000d7343 	.word	0x000d7343
   d449c:	2003e518 	.word	0x2003e518

000d44a0 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d44a0:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d44a2:	6803      	ldr	r3, [r0, #0]
   d44a4:	2b2f      	cmp	r3, #47	; 0x2f
{
   d44a6:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d44a8:	d904      	bls.n	d44b4 <nrf_gpio_pin_port_decode+0x14>
   d44aa:	4a07      	ldr	r2, [pc, #28]	; (d44c8 <nrf_gpio_pin_port_decode+0x28>)
   d44ac:	2100      	movs	r1, #0
   d44ae:	200a      	movs	r0, #10
   d44b0:	f000 ff20 	bl	d52f4 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d44b4:	6823      	ldr	r3, [r4, #0]
   d44b6:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d44b8:	bf83      	ittte	hi
   d44ba:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   d44be:	4803      	ldrhi	r0, [pc, #12]	; (d44cc <nrf_gpio_pin_port_decode+0x2c>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d44c0:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   d44c2:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    }
#endif
}
   d44c6:	bd10      	pop	{r4, pc}
   d44c8:	000d5035 	.word	0x000d5035
   d44cc:	50000300 	.word	0x50000300

000d44d0 <nrf_gpio_pin_set>:
    }
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
   d44d0:	b507      	push	{r0, r1, r2, lr}
   d44d2:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d44d4:	a801      	add	r0, sp, #4
   d44d6:	f7ff ffe3 	bl	d44a0 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d44da:	9a01      	ldr	r2, [sp, #4]
   d44dc:	2301      	movs	r3, #1
   d44de:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d44e0:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   d44e4:	b003      	add	sp, #12
   d44e6:	f85d fb04 	ldr.w	pc, [sp], #4

000d44ea <nrf_gpio_pin_read>:
{
   d44ea:	b507      	push	{r0, r1, r2, lr}
   d44ec:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d44ee:	a801      	add	r0, sp, #4
   d44f0:	f7ff ffd6 	bl	d44a0 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d44f4:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   d44f6:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d44fa:	40d8      	lsrs	r0, r3
}
   d44fc:	f000 0001 	and.w	r0, r0, #1
   d4500:	b003      	add	sp, #12
   d4502:	f85d fb04 	ldr.w	pc, [sp], #4

000d4506 <_ZN3DHTC1Ehhh>:
 * modified for Spark Core by RussGrue
 * */

#include "Adafruit_DHT.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
   d4506:	b510      	push	{r4, lr}
	_pin = pin;
	_type = type;
	_count = count;
   d4508:	7203      	strb	r3, [r0, #8]
	firstreading = true;
   d450a:	2301      	movs	r3, #1
	_pin = pin;
   d450c:	7181      	strb	r1, [r0, #6]
	_type = type;
   d450e:	71c2      	strb	r2, [r0, #7]
	firstreading = true;
   d4510:	7403      	strb	r3, [r0, #16]
}
   d4512:	bd10      	pop	{r4, pc}

000d4514 <_ZN3DHT5beginEv>:

void DHT::begin(void) {
   d4514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4518:	4605      	mov	r5, r0
/* Disabling USE_BIT_BAND since bitbanding is much slower! as per comment
 * by @pkourany on PR: https://github.com/spark/firmware/pull/556 */
#define USE_BIT_BAND 0

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d451a:	4c1e      	ldr	r4, [pc, #120]	; (d4594 <_ZN3DHT5beginEv+0x80>)
// set up the pins!
	pinMode(_pin, INPUT);
   d451c:	7980      	ldrb	r0, [r0, #6]
   d451e:	f8df 8078 	ldr.w	r8, [pc, #120]	; d4598 <_ZN3DHT5beginEv+0x84>
   d4522:	2100      	movs	r1, #0
   d4524:	f002 f870 	bl	d6608 <pinMode>
	pinSetFast(_pin);
   d4528:	79ae      	ldrb	r6, [r5, #6]
   d452a:	7823      	ldrb	r3, [r4, #0]
   d452c:	f3bf 8f5b 	dmb	ish
   d4530:	f013 0f01 	tst.w	r3, #1
   d4534:	d10a      	bne.n	d454c <_ZN3DHT5beginEv+0x38>
   d4536:	4620      	mov	r0, r4
   d4538:	f7ff fdb5 	bl	d40a6 <__cxa_guard_acquire>
   d453c:	b130      	cbz	r0, d454c <_ZN3DHT5beginEv+0x38>
   d453e:	f000 fd99 	bl	d5074 <HAL_Pin_Map>
   d4542:	f8c8 0000 	str.w	r0, [r8]
   d4546:	4620      	mov	r0, r4
   d4548:	f7ff fdb2 	bl	d40b0 <__cxa_guard_release>
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));


inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d454c:	f8d8 3000 	ldr.w	r3, [r8]
   d4550:	0136      	lsls	r6, r6, #4
   d4552:	5d9f      	ldrb	r7, [r3, r6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4554:	7823      	ldrb	r3, [r4, #0]
   d4556:	f3bf 8f5b 	dmb	ish
   d455a:	07db      	lsls	r3, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d455c:	ea4f 1747 	mov.w	r7, r7, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4560:	d40a      	bmi.n	d4578 <_ZN3DHT5beginEv+0x64>
   d4562:	480c      	ldr	r0, [pc, #48]	; (d4594 <_ZN3DHT5beginEv+0x80>)
   d4564:	f7ff fd9f 	bl	d40a6 <__cxa_guard_acquire>
   d4568:	b130      	cbz	r0, d4578 <_ZN3DHT5beginEv+0x64>
   d456a:	f000 fd83 	bl	d5074 <HAL_Pin_Map>
   d456e:	f8c8 0000 	str.w	r0, [r8]
   d4572:	4808      	ldr	r0, [pc, #32]	; (d4594 <_ZN3DHT5beginEv+0x80>)
   d4574:	f7ff fd9c 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4578:	f8d8 3000 	ldr.w	r3, [r8]
   d457c:	4433      	add	r3, r6
   d457e:	785b      	ldrb	r3, [r3, #1]
   d4580:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_pin_set(nrf_pin);
   d4584:	ea43 0007 	orr.w	r0, r3, r7
   d4588:	f7ff ffa2 	bl	d44d0 <nrf_gpio_pin_set>
	_lastreadtime = 0;
   d458c:	2300      	movs	r3, #0
   d458e:	60eb      	str	r3, [r5, #12]
}
   d4590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4594:	2003e5a0 	.word	0x2003e5a0
   d4598:	2003e5a4 	.word	0x2003e5a4

000d459c <_ZN3DHT4readEv>:
	double tC = (a * (float) tempCelcius) / (b + (float) tempCelcius) + log( (float) percentHumidity / 100);
	double Td = (b * tC) / (a - tC);
	return Td;
}

boolean DHT::read(void) {
   d459c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d45a0:	4604      	mov	r4, r0
   d45a2:	b085      	sub	sp, #20
   d45a4:	f000 fd4e 	bl	d5044 <HAL_Timer_Get_Milli_Seconds>
	unsigned long currenttime;

// Check if sensor was read less than two seconds ago and return early
// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime) {
   d45a8:	68e3      	ldr	r3, [r4, #12]
   d45aa:	4283      	cmp	r3, r0
// ie there was a rollover
		_lastreadtime = 0;
   d45ac:	bf84      	itt	hi
   d45ae:	2300      	movhi	r3, #0
   d45b0:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
   d45b2:	7c23      	ldrb	r3, [r4, #16]
   d45b4:	b92b      	cbnz	r3, d45c2 <_ZN3DHT4readEv+0x26>
   d45b6:	68e3      	ldr	r3, [r4, #12]
   d45b8:	1ac0      	subs	r0, r0, r3
   d45ba:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d45be:	f0c0 815d 	bcc.w	d487c <_ZN3DHT4readEv+0x2e0>
		return true; // return last correct measurement
//		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
   d45c2:	2500      	movs	r5, #0
   d45c4:	7425      	strb	r5, [r4, #16]
   d45c6:	f000 fd3d 	bl	d5044 <HAL_Timer_Get_Milli_Seconds>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d45ca:	4eae      	ldr	r6, [pc, #696]	; (d4884 <_ZN3DHT4readEv+0x2e8>)
	Serial.print("Currtime: "); Serial.print(currenttime);
	Serial.print(" Lasttime: "); Serial.print(_lastreadtime);
*/
	_lastreadtime = millis();

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   d45cc:	6025      	str	r5, [r4, #0]
   d45ce:	7125      	strb	r5, [r4, #4]
	_lastreadtime = millis();
   d45d0:	60e0      	str	r0, [r4, #12]

// pull the pin high and wait 250 milliseconds
	pinSetFast(_pin);
   d45d2:	79a7      	ldrb	r7, [r4, #6]
   d45d4:	7833      	ldrb	r3, [r6, #0]
   d45d6:	4dac      	ldr	r5, [pc, #688]	; (d4888 <_ZN3DHT4readEv+0x2ec>)
   d45d8:	f3bf 8f5b 	dmb	ish
   d45dc:	f013 0f01 	tst.w	r3, #1
   d45e0:	d109      	bne.n	d45f6 <_ZN3DHT4readEv+0x5a>
   d45e2:	4630      	mov	r0, r6
   d45e4:	f7ff fd5f 	bl	d40a6 <__cxa_guard_acquire>
   d45e8:	b128      	cbz	r0, d45f6 <_ZN3DHT4readEv+0x5a>
   d45ea:	f000 fd43 	bl	d5074 <HAL_Pin_Map>
   d45ee:	6028      	str	r0, [r5, #0]
   d45f0:	4630      	mov	r0, r6
   d45f2:	f7ff fd5d 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d45f6:	682b      	ldr	r3, [r5, #0]
   d45f8:	013f      	lsls	r7, r7, #4
   d45fa:	f813 8007 	ldrb.w	r8, [r3, r7]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d45fe:	7833      	ldrb	r3, [r6, #0]
   d4600:	f3bf 8f5b 	dmb	ish
   d4604:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4606:	ea4f 1848 	mov.w	r8, r8, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d460a:	d409      	bmi.n	d4620 <_ZN3DHT4readEv+0x84>
   d460c:	489d      	ldr	r0, [pc, #628]	; (d4884 <_ZN3DHT4readEv+0x2e8>)
   d460e:	f7ff fd4a 	bl	d40a6 <__cxa_guard_acquire>
   d4612:	b128      	cbz	r0, d4620 <_ZN3DHT4readEv+0x84>
   d4614:	f000 fd2e 	bl	d5074 <HAL_Pin_Map>
   d4618:	6028      	str	r0, [r5, #0]
   d461a:	489a      	ldr	r0, [pc, #616]	; (d4884 <_ZN3DHT4readEv+0x2e8>)
   d461c:	f7ff fd48 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4620:	682b      	ldr	r3, [r5, #0]
   d4622:	441f      	add	r7, r3
   d4624:	7878      	ldrb	r0, [r7, #1]
   d4626:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_pin_set(nrf_pin);
   d462a:	ea40 0008 	orr.w	r0, r0, r8
   d462e:	f7ff ff4f 	bl	d44d0 <nrf_gpio_pin_set>
	//delay(250);

// now pull it low for ~20 milliseconds
	pinMode(_pin, OUTPUT);
   d4632:	79a0      	ldrb	r0, [r4, #6]
   d4634:	2101      	movs	r1, #1
   d4636:	f001 ffe7 	bl	d6608 <pinMode>
	pinResetFast(_pin);
   d463a:	79a7      	ldrb	r7, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d463c:	7833      	ldrb	r3, [r6, #0]
   d463e:	f3bf 8f5b 	dmb	ish
   d4642:	07da      	lsls	r2, r3, #31
   d4644:	d409      	bmi.n	d465a <_ZN3DHT4readEv+0xbe>
   d4646:	488f      	ldr	r0, [pc, #572]	; (d4884 <_ZN3DHT4readEv+0x2e8>)
   d4648:	f7ff fd2d 	bl	d40a6 <__cxa_guard_acquire>
   d464c:	b128      	cbz	r0, d465a <_ZN3DHT4readEv+0xbe>
   d464e:	f000 fd11 	bl	d5074 <HAL_Pin_Map>
   d4652:	6028      	str	r0, [r5, #0]
   d4654:	488b      	ldr	r0, [pc, #556]	; (d4884 <_ZN3DHT4readEv+0x2e8>)
   d4656:	f7ff fd2b 	bl	d40b0 <__cxa_guard_release>
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d465a:	682b      	ldr	r3, [r5, #0]
   d465c:	013f      	lsls	r7, r7, #4
   d465e:	5ddb      	ldrb	r3, [r3, r7]
   d4660:	ea4f 1843 	mov.w	r8, r3, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4664:	7833      	ldrb	r3, [r6, #0]
   d4666:	f3bf 8f5b 	dmb	ish
   d466a:	07db      	lsls	r3, r3, #31
   d466c:	d409      	bmi.n	d4682 <_ZN3DHT4readEv+0xe6>
   d466e:	4885      	ldr	r0, [pc, #532]	; (d4884 <_ZN3DHT4readEv+0x2e8>)
   d4670:	f7ff fd19 	bl	d40a6 <__cxa_guard_acquire>
   d4674:	b128      	cbz	r0, d4682 <_ZN3DHT4readEv+0xe6>
   d4676:	f000 fcfd 	bl	d5074 <HAL_Pin_Map>
   d467a:	6028      	str	r0, [r5, #0]
   d467c:	4881      	ldr	r0, [pc, #516]	; (d4884 <_ZN3DHT4readEv+0x2e8>)
   d467e:	f7ff fd17 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4682:	682b      	ldr	r3, [r5, #0]
   d4684:	441f      	add	r7, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4686:	a803      	add	r0, sp, #12
   d4688:	787b      	ldrb	r3, [r7, #1]
   d468a:	f003 031f 	and.w	r3, r3, #31
   d468e:	ea43 0308 	orr.w	r3, r3, r8
   d4692:	9303      	str	r3, [sp, #12]
   d4694:	f7ff ff04 	bl	d44a0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d4698:	9a03      	ldr	r2, [sp, #12]
   d469a:	2301      	movs	r3, #1
   d469c:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d469e:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
	delay(20);
   d46a2:	2014      	movs	r0, #20
   d46a4:	f000 ff22 	bl	d54ec <delay>
	noInterrupts();
   d46a8:	f000 ffa8 	bl	d55fc <_Z12noInterruptsv>
	pinSetFast(_pin);
   d46ac:	79a7      	ldrb	r7, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d46ae:	7833      	ldrb	r3, [r6, #0]
   d46b0:	f3bf 8f5b 	dmb	ish
   d46b4:	07d8      	lsls	r0, r3, #31
   d46b6:	d409      	bmi.n	d46cc <_ZN3DHT4readEv+0x130>
   d46b8:	4872      	ldr	r0, [pc, #456]	; (d4884 <_ZN3DHT4readEv+0x2e8>)
   d46ba:	f7ff fcf4 	bl	d40a6 <__cxa_guard_acquire>
   d46be:	b128      	cbz	r0, d46cc <_ZN3DHT4readEv+0x130>
   d46c0:	f000 fcd8 	bl	d5074 <HAL_Pin_Map>
   d46c4:	6028      	str	r0, [r5, #0]
   d46c6:	486f      	ldr	r0, [pc, #444]	; (d4884 <_ZN3DHT4readEv+0x2e8>)
   d46c8:	f7ff fcf2 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d46cc:	682b      	ldr	r3, [r5, #0]
   d46ce:	013f      	lsls	r7, r7, #4
   d46d0:	f813 8007 	ldrb.w	r8, [r3, r7]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d46d4:	7833      	ldrb	r3, [r6, #0]
   d46d6:	f3bf 8f5b 	dmb	ish
   d46da:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d46dc:	ea4f 1848 	mov.w	r8, r8, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d46e0:	d409      	bmi.n	d46f6 <_ZN3DHT4readEv+0x15a>
   d46e2:	4868      	ldr	r0, [pc, #416]	; (d4884 <_ZN3DHT4readEv+0x2e8>)
   d46e4:	f7ff fcdf 	bl	d40a6 <__cxa_guard_acquire>
   d46e8:	b128      	cbz	r0, d46f6 <_ZN3DHT4readEv+0x15a>
   d46ea:	f000 fcc3 	bl	d5074 <HAL_Pin_Map>
   d46ee:	6028      	str	r0, [r5, #0]
   d46f0:	4864      	ldr	r0, [pc, #400]	; (d4884 <_ZN3DHT4readEv+0x2e8>)
   d46f2:	f7ff fcdd 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d46f6:	682b      	ldr	r3, [r5, #0]
   d46f8:	441f      	add	r7, r3
   d46fa:	7878      	ldrb	r0, [r7, #1]
   d46fc:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_pin_set(nrf_pin);
   d4700:	ea40 0008 	orr.w	r0, r0, r8
   d4704:	f7ff fee4 	bl	d44d0 <nrf_gpio_pin_set>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d4708:	2028      	movs	r0, #40	; 0x28
   d470a:	f000 fc93 	bl	d5034 <HAL_Delay_Microseconds>
	delayMicroseconds(40);
	pinMode(_pin, INPUT);
   d470e:	79a0      	ldrb	r0, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4710:	f8df 8170 	ldr.w	r8, [pc, #368]	; d4884 <_ZN3DHT4readEv+0x2e8>
   d4714:	2100      	movs	r1, #0
   d4716:	f001 ff77 	bl	d6608 <pinMode>

// read in timings
	for ( i=0; i< MAXTIMINGS; i++) {
   d471a:	2700      	movs	r7, #0
	uint8_t laststate = HIGH;
   d471c:	2301      	movs	r3, #1
	uint8_t j = 0, i;
   d471e:	46ba      	mov	sl, r7
	uint8_t laststate = HIGH;
   d4720:	9300      	str	r3, [sp, #0]
		counter = 0;
   d4722:	f04f 0900 	mov.w	r9, #0
		while (pinReadFast(_pin) == laststate) {
   d4726:	f894 b006 	ldrb.w	fp, [r4, #6]
   d472a:	7833      	ldrb	r3, [r6, #0]
   d472c:	f3bf 8f5b 	dmb	ish
   d4730:	07da      	lsls	r2, r3, #31
   d4732:	d409      	bmi.n	d4748 <_ZN3DHT4readEv+0x1ac>
   d4734:	4640      	mov	r0, r8
   d4736:	f7ff fcb6 	bl	d40a6 <__cxa_guard_acquire>
   d473a:	b128      	cbz	r0, d4748 <_ZN3DHT4readEv+0x1ac>
   d473c:	f000 fc9a 	bl	d5074 <HAL_Pin_Map>
   d4740:	6028      	str	r0, [r5, #0]
   d4742:	4640      	mov	r0, r8
   d4744:	f7ff fcb4 	bl	d40b0 <__cxa_guard_release>
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4748:	682b      	ldr	r3, [r5, #0]
   d474a:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
   d474e:	f813 300b 	ldrb.w	r3, [r3, fp]
   d4752:	015b      	lsls	r3, r3, #5
   d4754:	9301      	str	r3, [sp, #4]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4756:	7833      	ldrb	r3, [r6, #0]
   d4758:	f3bf 8f5b 	dmb	ish
   d475c:	07db      	lsls	r3, r3, #31
   d475e:	d409      	bmi.n	d4774 <_ZN3DHT4readEv+0x1d8>
   d4760:	4640      	mov	r0, r8
   d4762:	f7ff fca0 	bl	d40a6 <__cxa_guard_acquire>
   d4766:	b128      	cbz	r0, d4774 <_ZN3DHT4readEv+0x1d8>
   d4768:	f000 fc84 	bl	d5074 <HAL_Pin_Map>
   d476c:	6028      	str	r0, [r5, #0]
   d476e:	4640      	mov	r0, r8
   d4770:	f7ff fc9e 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4774:	682b      	ldr	r3, [r5, #0]
   d4776:	445b      	add	r3, fp
   d4778:	f893 b001 	ldrb.w	fp, [r3, #1]
   d477c:	9b01      	ldr	r3, [sp, #4]
   d477e:	f00b 0b1f 	and.w	fp, fp, #31
   d4782:	ea4b 0b03 	orr.w	fp, fp, r3
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
   d4786:	4658      	mov	r0, fp
   d4788:	f7ff feaf 	bl	d44ea <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d478c:	4658      	mov	r0, fp
   d478e:	f7ff feac 	bl	d44ea <nrf_gpio_pin_read>
   d4792:	9b00      	ldr	r3, [sp, #0]
   d4794:	4283      	cmp	r3, r0
   d4796:	d109      	bne.n	d47ac <_ZN3DHT4readEv+0x210>
			counter++;
   d4798:	f109 0901 	add.w	r9, r9, #1
   d479c:	fa5f f989 	uxtb.w	r9, r9
   d47a0:	2001      	movs	r0, #1
   d47a2:	f000 fc47 	bl	d5034 <HAL_Delay_Microseconds>
			delayMicroseconds(1);
			if (counter == 255) {
   d47a6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   d47aa:	d1bc      	bne.n	d4726 <_ZN3DHT4readEv+0x18a>
				break;
			}
		}
		laststate = pinReadFast(_pin);
   d47ac:	f894 b006 	ldrb.w	fp, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d47b0:	7833      	ldrb	r3, [r6, #0]
   d47b2:	f3bf 8f5b 	dmb	ish
   d47b6:	07d8      	lsls	r0, r3, #31
   d47b8:	d409      	bmi.n	d47ce <_ZN3DHT4readEv+0x232>
   d47ba:	4640      	mov	r0, r8
   d47bc:	f7ff fc73 	bl	d40a6 <__cxa_guard_acquire>
   d47c0:	b128      	cbz	r0, d47ce <_ZN3DHT4readEv+0x232>
   d47c2:	f000 fc57 	bl	d5074 <HAL_Pin_Map>
   d47c6:	6028      	str	r0, [r5, #0]
   d47c8:	4640      	mov	r0, r8
   d47ca:	f7ff fc71 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d47ce:	682b      	ldr	r3, [r5, #0]
   d47d0:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
   d47d4:	f813 300b 	ldrb.w	r3, [r3, fp]
   d47d8:	015b      	lsls	r3, r3, #5
   d47da:	9300      	str	r3, [sp, #0]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d47dc:	7833      	ldrb	r3, [r6, #0]
   d47de:	f3bf 8f5b 	dmb	ish
   d47e2:	07d9      	lsls	r1, r3, #31
   d47e4:	d409      	bmi.n	d47fa <_ZN3DHT4readEv+0x25e>
   d47e6:	4640      	mov	r0, r8
   d47e8:	f7ff fc5d 	bl	d40a6 <__cxa_guard_acquire>
   d47ec:	b128      	cbz	r0, d47fa <_ZN3DHT4readEv+0x25e>
   d47ee:	f000 fc41 	bl	d5074 <HAL_Pin_Map>
   d47f2:	6028      	str	r0, [r5, #0]
   d47f4:	4640      	mov	r0, r8
   d47f6:	f7ff fc5b 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d47fa:	682b      	ldr	r3, [r5, #0]
   d47fc:	445b      	add	r3, fp
   d47fe:	f893 b001 	ldrb.w	fp, [r3, #1]
   d4802:	9b00      	ldr	r3, [sp, #0]
   d4804:	f00b 0b1f 	and.w	fp, fp, #31
   d4808:	ea4b 0b03 	orr.w	fp, fp, r3
    (void)nrf_gpio_pin_read(nrf_pin);
   d480c:	4658      	mov	r0, fp
   d480e:	f7ff fe6c 	bl	d44ea <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d4812:	4658      	mov	r0, fp
   d4814:	f7ff fe69 	bl	d44ea <nrf_gpio_pin_read>

		if (counter == 255) break;
   d4818:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
		laststate = pinReadFast(_pin);
   d481c:	b2c3      	uxtb	r3, r0
   d481e:	9300      	str	r3, [sp, #0]
		if (counter == 255) break;
   d4820:	d018      	beq.n	d4854 <_ZN3DHT4readEv+0x2b8>

// ignore first 3 transitions
		if ((i >= 4) && (i%2 == 0)) {
   d4822:	2f03      	cmp	r7, #3
   d4824:	d911      	bls.n	d484a <_ZN3DHT4readEv+0x2ae>
   d4826:	07fa      	lsls	r2, r7, #31
   d4828:	d40f      	bmi.n	d484a <_ZN3DHT4readEv+0x2ae>
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   d482a:	ea4f 02da 	mov.w	r2, sl, lsr #3
			if (counter > _count)
				data[j/8] |= 1;
			j++;
   d482e:	f10a 0a01 	add.w	sl, sl, #1
			data[j/8] <<= 1;
   d4832:	5ca3      	ldrb	r3, [r4, r2]
   d4834:	005b      	lsls	r3, r3, #1
   d4836:	b2db      	uxtb	r3, r3
   d4838:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
   d483a:	7a21      	ldrb	r1, [r4, #8]
   d483c:	4549      	cmp	r1, r9
				data[j/8] |= 1;
   d483e:	bf3c      	itt	cc
   d4840:	f043 0301 	orrcc.w	r3, r3, #1
   d4844:	54a3      	strbcc	r3, [r4, r2]
			j++;
   d4846:	fa5f fa8a 	uxtb.w	sl, sl
	for ( i=0; i< MAXTIMINGS; i++) {
   d484a:	3701      	adds	r7, #1
   d484c:	b2ff      	uxtb	r7, r7
   d484e:	2f55      	cmp	r7, #85	; 0x55
   d4850:	f47f af67 	bne.w	d4722 <_ZN3DHT4readEv+0x186>
		}
	}

	interrupts();
   d4854:	f000 fed4 	bl	d5600 <_Z10interruptsv>
	Serial.print(data[4], HEX); Serial.print(" =? ");
	Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
*/

// check we read 40 bits and that the checksum matches
	if ((j >= 40) &&
   d4858:	f1ba 0f27 	cmp.w	sl, #39	; 0x27
   d485c:	d910      	bls.n	d4880 <_ZN3DHT4readEv+0x2e4>
	   (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
   d485e:	7863      	ldrb	r3, [r4, #1]
   d4860:	7820      	ldrb	r0, [r4, #0]
   d4862:	4418      	add	r0, r3
   d4864:	78a3      	ldrb	r3, [r4, #2]
   d4866:	4418      	add	r0, r3
   d4868:	78e3      	ldrb	r3, [r4, #3]
   d486a:	4418      	add	r0, r3
   d486c:	7923      	ldrb	r3, [r4, #4]
   d486e:	b2c0      	uxtb	r0, r0
	if ((j >= 40) &&
   d4870:	1ac3      	subs	r3, r0, r3
   d4872:	4258      	negs	r0, r3
   d4874:	4158      	adcs	r0, r3
		return true;
	}

	return false;

}
   d4876:	b005      	add	sp, #20
   d4878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return true; // return last correct measurement
   d487c:	2001      	movs	r0, #1
   d487e:	e7fa      	b.n	d4876 <_ZN3DHT4readEv+0x2da>
	return false;
   d4880:	2000      	movs	r0, #0
   d4882:	e7f8      	b.n	d4876 <_ZN3DHT4readEv+0x2da>
   d4884:	2003e5a0 	.word	0x2003e5a0
   d4888:	2003e5a4 	.word	0x2003e5a4

000d488c <_ZN3DHT15readTemperatureEv>:
float DHT::readTemperature() {
   d488c:	b510      	push	{r4, lr}
   d488e:	4604      	mov	r4, r0
	if (read()) {
   d4890:	f7ff fe84 	bl	d459c <_ZN3DHT4readEv>
   d4894:	b320      	cbz	r0, d48e0 <_ZN3DHT15readTemperatureEv+0x54>
		switch (_type) {
   d4896:	79e3      	ldrb	r3, [r4, #7]
   d4898:	2b0b      	cmp	r3, #11
   d489a:	d01b      	beq.n	d48d4 <_ZN3DHT15readTemperatureEv+0x48>
   d489c:	3b15      	subs	r3, #21
   d489e:	2b01      	cmp	r3, #1
   d48a0:	d81e      	bhi.n	d48e0 <_ZN3DHT15readTemperatureEv+0x54>
				f = data[2] & 0x7F;
   d48a2:	78a3      	ldrb	r3, [r4, #2]
				f += data[3];
   d48a4:	eddf 6a10 	vldr	s13, [pc, #64]	; d48e8 <_ZN3DHT15readTemperatureEv+0x5c>
				f = data[2] & 0x7F;
   d48a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   d48ac:	ee07 2a10 	vmov	s14, r2
				f += data[3];
   d48b0:	78e2      	ldrb	r2, [r4, #3]
   d48b2:	ee07 2a90 	vmov	s15, r2
				f = data[2] & 0x7F;
   d48b6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
				f += data[3];
   d48ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				if (data[2] & 0x80)
   d48be:	061b      	lsls	r3, r3, #24
				f += data[3];
   d48c0:	eee7 7a26 	vfma.f32	s15, s14, s13
				f /= 10;
   d48c4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   d48c8:	ee87 0a87 	vdiv.f32	s0, s15, s14
				if (data[2] & 0x80)
   d48cc:	d507      	bpl.n	d48de <_ZN3DHT15readTemperatureEv+0x52>
					f *= -1;
   d48ce:	eeb1 0a40 	vneg.f32	s0, s0
   d48d2:	e004      	b.n	d48de <_ZN3DHT15readTemperatureEv+0x52>
				f = data[2];
   d48d4:	78a3      	ldrb	r3, [r4, #2]
   d48d6:	ee00 3a10 	vmov	s0, r3
   d48da:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
   d48de:	bd10      	pop	{r4, pc}
		switch (_type) {
   d48e0:	ed9f 0a02 	vldr	s0, [pc, #8]	; d48ec <_ZN3DHT15readTemperatureEv+0x60>
   d48e4:	e7fb      	b.n	d48de <_ZN3DHT15readTemperatureEv+0x52>
   d48e6:	bf00      	nop
   d48e8:	43800000 	.word	0x43800000
   d48ec:	7fc00000 	.word	0x7fc00000

000d48f0 <_ZN3DHT14getTempCelciusEv>:
	return readTemperature();
   d48f0:	f7ff bfcc 	b.w	d488c <_ZN3DHT15readTemperatureEv>

000d48f4 <_ZN3DHT16getTempFarenheitEv>:
float DHT::getTempFarenheit() {
   d48f4:	b508      	push	{r3, lr}
	return convertCtoF(readTemperature());
   d48f6:	f7ff ffc9 	bl	d488c <_ZN3DHT15readTemperatureEv>
	return c * 9 / 5 + 32;
   d48fa:	eef2 7a02 	vmov.f32	s15, #34	; 0x41100000  9.0
   d48fe:	ee20 0a27 	vmul.f32	s0, s0, s15
   d4902:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
   d4906:	ee80 7a27 	vdiv.f32	s14, s0, s15
}
   d490a:	ed9f 0a02 	vldr	s0, [pc, #8]	; d4914 <_ZN3DHT16getTempFarenheitEv+0x20>
   d490e:	ee37 0a00 	vadd.f32	s0, s14, s0
   d4912:	bd08      	pop	{r3, pc}
   d4914:	42000000 	.word	0x42000000

000d4918 <_ZN3DHT12readHumidityEv>:
float DHT::readHumidity(void) {
   d4918:	b510      	push	{r4, lr}
   d491a:	4604      	mov	r4, r0
	if (read()) {
   d491c:	f7ff fe3e 	bl	d459c <_ZN3DHT4readEv>
   d4920:	b1f0      	cbz	r0, d4960 <_ZN3DHT12readHumidityEv+0x48>
		switch (_type) {
   d4922:	79e3      	ldrb	r3, [r4, #7]
   d4924:	2b0b      	cmp	r3, #11
   d4926:	d015      	beq.n	d4954 <_ZN3DHT12readHumidityEv+0x3c>
   d4928:	3b15      	subs	r3, #21
   d492a:	2b01      	cmp	r3, #1
   d492c:	d818      	bhi.n	d4960 <_ZN3DHT12readHumidityEv+0x48>
				f = data[0];
   d492e:	7823      	ldrb	r3, [r4, #0]
				f += data[1];
   d4930:	eddf 6a0d 	vldr	s13, [pc, #52]	; d4968 <_ZN3DHT12readHumidityEv+0x50>
				f = data[0];
   d4934:	ee07 3a10 	vmov	s14, r3
				f += data[1];
   d4938:	7863      	ldrb	r3, [r4, #1]
   d493a:	ee07 3a90 	vmov	s15, r3
				f = data[0];
   d493e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
				f += data[1];
   d4942:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4946:	eee7 7a26 	vfma.f32	s15, s14, s13
				f /= 10;
   d494a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   d494e:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   d4952:	bd10      	pop	{r4, pc}
				f = data[0];
   d4954:	7823      	ldrb	r3, [r4, #0]
   d4956:	ee00 3a10 	vmov	s0, r3
   d495a:	eeb8 0a40 	vcvt.f32.u32	s0, s0
				return f;
   d495e:	e7f8      	b.n	d4952 <_ZN3DHT12readHumidityEv+0x3a>
		switch (_type) {
   d4960:	ed9f 0a02 	vldr	s0, [pc, #8]	; d496c <_ZN3DHT12readHumidityEv+0x54>
   d4964:	e7f5      	b.n	d4952 <_ZN3DHT12readHumidityEv+0x3a>
   d4966:	bf00      	nop
   d4968:	43800000 	.word	0x43800000
   d496c:	7fc00000 	.word	0x7fc00000

000d4970 <_ZN3DHT11getHumidityEv>:
	return readHumidity();
   d4970:	f7ff bfd2 	b.w	d4918 <_ZN3DHT12readHumidityEv>

000d4974 <_ZN11CSmartLightC1Ev>:
#include "smartlight.h"

CSmartLight::CSmartLight() {
   d4974:	b538      	push	{r3, r4, r5, lr}
   d4976:	f100 0520 	add.w	r5, r0, #32
   d497a:	4604      	mov	r4, r0
   d497c:	490c      	ldr	r1, [pc, #48]	; (d49b0 <_ZN11CSmartLightC1Ev+0x3c>)
   d497e:	4628      	mov	r0, r5
   d4980:	f001 fb1d 	bl	d5fbe <_ZN6StringC1EPKc>
    state_L0 = CSmartLight::S_ON;
   d4984:	f240 1301 	movw	r3, #257	; 0x101
   d4988:	8023      	strh	r3, [r4, #0]
    state_L1 = CSmartLight::S_AUTO;
    brightness = RGB_BRIGHTNESS_DEAULT;
   d498a:	2380      	movs	r3, #128	; 0x80
   d498c:	6063      	str	r3, [r4, #4]
    sensorMax = LIGHT_SENSOR_MAX;
    sensorMin = LIGHT_SENSOR_MIN;
   d498e:	f640 11c4 	movw	r1, #2500	; 0x9c4
   d4992:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d4996:	e9c4 1303 	strd	r1, r3, [r4, #12]

    statusStr = "{}";
   d499a:	4628      	mov	r0, r5
   d499c:	4905      	ldr	r1, [pc, #20]	; (d49b4 <_ZN11CSmartLightC1Ev+0x40>)
   d499e:	f001 fb61 	bl	d6064 <_ZN6StringaSEPKc>
    resetCmd();
    createStatusStr();
}

void CSmartLight::resetCmd() {
    cmd.On = INVALID_CMD;
   d49a2:	4b05      	ldr	r3, [pc, #20]	; (d49b8 <_ZN11CSmartLightC1Ev+0x44>)
    cmd.Auto = INVALID_CMD;
    cmd.Brightness = INVALID_CMD;
   d49a4:	61e3      	str	r3, [r4, #28]
    cmd.Auto = INVALID_CMD;
   d49a6:	e9c4 3305 	strd	r3, r3, [r4, #20]
}
   d49aa:	4620      	mov	r0, r4
   d49ac:	bd38      	pop	{r3, r4, r5, pc}
   d49ae:	bf00      	nop
   d49b0:	000d7343 	.word	0x000d7343
   d49b4:	000d721c 	.word	0x000d721c
   d49b8:	fffe7961 	.word	0xfffe7961

000d49bc <_ZN11CSmartLight12turnOffLightEv>:
}

void CSmartLight::turnOffLight() {
   d49bc:	b508      	push	{r3, lr}
    if (RGB.brightness() != 0) RGB.brightness(0);
   d49be:	f001 faa0 	bl	d5f02 <_ZN8RGBClass10brightnessEv>
   d49c2:	b128      	cbz	r0, d49d0 <_ZN11CSmartLight12turnOffLightEv+0x14>
}
   d49c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (RGB.brightness() != 0) RGB.brightness(0);
   d49c8:	2101      	movs	r1, #1
   d49ca:	2000      	movs	r0, #0
   d49cc:	f001 ba8b 	b.w	d5ee6 <_ZN8RGBClass10brightnessEhb>
}
   d49d0:	bd08      	pop	{r3, pc}
   d49d2:	0000      	movs	r0, r0
   d49d4:	0000      	movs	r0, r0
	...

000d49d8 <_ZN11CSmartLight24updateBrightnessManuallyEi>:

// 0 <= val <= 100 (i.e., %)
void CSmartLight::updateBrightnessManually(int val) {
   d49d8:	b538      	push	{r3, r4, r5, lr}
    if (val == INVALID_CMD) {
   d49da:	4b13      	ldr	r3, [pc, #76]	; (d4a28 <_ZN11CSmartLight24updateBrightnessManuallyEi+0x50>)
   d49dc:	4299      	cmp	r1, r3
void CSmartLight::updateBrightnessManually(int val) {
   d49de:	4604      	mov	r4, r0
   d49e0:	4608      	mov	r0, r1
    if (val == INVALID_CMD) {
   d49e2:	d10a      	bne.n	d49fa <_ZN11CSmartLight24updateBrightnessManuallyEi+0x22>
        if (brightness != RGB.brightness()) RGB.brightness(brightness);
   d49e4:	6865      	ldr	r5, [r4, #4]
   d49e6:	f001 fa8c 	bl	d5f02 <_ZN8RGBClass10brightnessEv>
   d49ea:	4285      	cmp	r5, r0
   d49ec:	d016      	beq.n	d4a1c <_ZN11CSmartLight24updateBrightnessManuallyEi+0x44>
   d49ee:	7920      	ldrb	r0, [r4, #4]
   d49f0:	2101      	movs	r1, #1
        return;
    }
    brightness = (int)((val/100.0)*RGB_BRIGHTNESS_MAX);
    RGB.brightness(brightness);
}
   d49f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    RGB.brightness(brightness);
   d49f6:	f001 ba76 	b.w	d5ee6 <_ZN8RGBClass10brightnessEhb>
    brightness = (int)((val/100.0)*RGB_BRIGHTNESS_MAX);
   d49fa:	f001 ffc3 	bl	d6984 <__aeabi_i2d>
   d49fe:	4b0b      	ldr	r3, [pc, #44]	; (d4a2c <_ZN11CSmartLight24updateBrightnessManuallyEi+0x54>)
   d4a00:	2200      	movs	r2, #0
   d4a02:	f002 f953 	bl	d6cac <__aeabi_ddiv>
   d4a06:	a306      	add	r3, pc, #24	; (adr r3, d4a20 <_ZN11CSmartLight24updateBrightnessManuallyEi+0x48>)
   d4a08:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4a0c:	f002 f824 	bl	d6a58 <__aeabi_dmul>
   d4a10:	f002 fa34 	bl	d6e7c <__aeabi_d2iz>
    RGB.brightness(brightness);
   d4a14:	2101      	movs	r1, #1
    brightness = (int)((val/100.0)*RGB_BRIGHTNESS_MAX);
   d4a16:	6060      	str	r0, [r4, #4]
    RGB.brightness(brightness);
   d4a18:	b2c0      	uxtb	r0, r0
   d4a1a:	e7ea      	b.n	d49f2 <_ZN11CSmartLight24updateBrightnessManuallyEi+0x1a>
}
   d4a1c:	bd38      	pop	{r3, r4, r5, pc}
   d4a1e:	bf00      	nop
   d4a20:	00000000 	.word	0x00000000
   d4a24:	406fe000 	.word	0x406fe000
   d4a28:	fffe7961 	.word	0xfffe7961
   d4a2c:	40590000 	.word	0x40590000

000d4a30 <_ZN11CSmartLight13readSensorValEv>:

    RGB.brightness(brightness);
}


void CSmartLight::readSensorVal() {
   d4a30:	b510      	push	{r4, lr}
   d4a32:	4604      	mov	r4, r0
    sensorVal = analogRead(LIGHT_SENSOR);
   d4a34:	2013      	movs	r0, #19
   d4a36:	f001 fdf8 	bl	d662a <analogRead>
   d4a3a:	60a0      	str	r0, [r4, #8]
}
   d4a3c:	bd10      	pop	{r4, pc}
	...

000d4a40 <_ZN11CSmartLight29updataBrightnessAutomaticallyEv>:
void CSmartLight::updataBrightnessAutomatically() {
   d4a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4a44:	4604      	mov	r4, r0
    readSensorVal();
   d4a46:	f7ff fff3 	bl	d4a30 <_ZN11CSmartLight13readSensorValEv>
    if (curSensorVal < sensorMin) curSensorVal = sensorMin;
   d4a4a:	6925      	ldr	r5, [r4, #16]
   d4a4c:	68a0      	ldr	r0, [r4, #8]
    if (curSensorVal > sensorMax) curSensorVal = sensorMax;
   d4a4e:	f8d4 800c 	ldr.w	r8, [r4, #12]
   d4a52:	42a8      	cmp	r0, r5
   d4a54:	bfb8      	it	lt
   d4a56:	4628      	movlt	r0, r5
    double amountOfLight = (double)(curSensorVal-sensorMin) / (double)(sensorMax-sensorMin);
   d4a58:	4580      	cmp	r8, r0
   d4a5a:	bfd4      	ite	le
   d4a5c:	ebc5 0008 	rsble	r0, r5, r8
   d4a60:	ebc5 0000 	rsbgt	r0, r5, r0
   d4a64:	f001 ff8e 	bl	d6984 <__aeabi_i2d>
   d4a68:	4606      	mov	r6, r0
   d4a6a:	eba8 0005 	sub.w	r0, r8, r5
   d4a6e:	460f      	mov	r7, r1
   d4a70:	f001 ff88 	bl	d6984 <__aeabi_i2d>
   d4a74:	4602      	mov	r2, r0
   d4a76:	460b      	mov	r3, r1
   d4a78:	4630      	mov	r0, r6
   d4a7a:	4639      	mov	r1, r7
   d4a7c:	f002 f916 	bl	d6cac <__aeabi_ddiv>
   d4a80:	4602      	mov	r2, r0
   d4a82:	460b      	mov	r3, r1
    brightness = (int)((double)RGB_BRIGHTNESS_MAX*(1.0-amountOfLight));
   d4a84:	2000      	movs	r0, #0
   d4a86:	490a      	ldr	r1, [pc, #40]	; (d4ab0 <_ZN11CSmartLight29updataBrightnessAutomaticallyEv+0x70>)
   d4a88:	f001 fe2e 	bl	d66e8 <__aeabi_dsub>
   d4a8c:	a306      	add	r3, pc, #24	; (adr r3, d4aa8 <_ZN11CSmartLight29updataBrightnessAutomaticallyEv+0x68>)
   d4a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4a92:	f001 ffe1 	bl	d6a58 <__aeabi_dmul>
   d4a96:	f002 f9f1 	bl	d6e7c <__aeabi_d2iz>
    RGB.brightness(brightness);
   d4a9a:	2101      	movs	r1, #1
    brightness = (int)((double)RGB_BRIGHTNESS_MAX*(1.0-amountOfLight));
   d4a9c:	6060      	str	r0, [r4, #4]
}
   d4a9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    RGB.brightness(brightness);
   d4aa2:	b2c0      	uxtb	r0, r0
   d4aa4:	f001 ba1f 	b.w	d5ee6 <_ZN8RGBClass10brightnessEhb>
   d4aa8:	00000000 	.word	0x00000000
   d4aac:	406fe000 	.word	0x406fe000
   d4ab0:	3ff00000 	.word	0x3ff00000
   d4ab4:	00000000 	.word	0x00000000

000d4ab8 <_ZN11CSmartLight15createStatusStrEv>:
int CSmartLight::getSensorVal() {
    return sensorVal;
}


void CSmartLight::createStatusStr() {
   d4ab8:	b570      	push	{r4, r5, r6, lr}
   d4aba:	b088      	sub	sp, #32
    statusStr = String::format("{\"L0\":%d,\"L1\":%d,\"b\":%d,\"s\":%d,\"m\":%d,\"M\":%d}",
   d4abc:	68c3      	ldr	r3, [r0, #12]
   d4abe:	7846      	ldrb	r6, [r0, #1]
   d4ac0:	7805      	ldrb	r5, [r0, #0]
   d4ac2:	9303      	str	r3, [sp, #12]
   d4ac4:	6903      	ldr	r3, [r0, #16]
   d4ac6:	9302      	str	r3, [sp, #8]
   d4ac8:	6883      	ldr	r3, [r0, #8]
   d4aca:	9301      	str	r3, [sp, #4]
void CSmartLight::createStatusStr() {
   d4acc:	4604      	mov	r4, r0
        state_L0, state_L1, (int)((double)brightness/RGB_BRIGHTNESS_MAX*100.0), sensorVal, sensorMin, sensorMax);
   d4ace:	6840      	ldr	r0, [r0, #4]
   d4ad0:	f001 ff58 	bl	d6984 <__aeabi_i2d>
   d4ad4:	a310      	add	r3, pc, #64	; (adr r3, d4b18 <_ZN11CSmartLight15createStatusStrEv+0x60>)
   d4ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4ada:	f002 f8e7 	bl	d6cac <__aeabi_ddiv>
   d4ade:	4b0c      	ldr	r3, [pc, #48]	; (d4b10 <_ZN11CSmartLight15createStatusStrEv+0x58>)
   d4ae0:	2200      	movs	r2, #0
   d4ae2:	f001 ffb9 	bl	d6a58 <__aeabi_dmul>
    statusStr = String::format("{\"L0\":%d,\"L1\":%d,\"b\":%d,\"s\":%d,\"m\":%d,\"M\":%d}",
   d4ae6:	f002 f9c9 	bl	d6e7c <__aeabi_d2iz>
   d4aea:	4633      	mov	r3, r6
   d4aec:	462a      	mov	r2, r5
   d4aee:	9000      	str	r0, [sp, #0]
   d4af0:	4908      	ldr	r1, [pc, #32]	; (d4b14 <_ZN11CSmartLight15createStatusStrEv+0x5c>)
   d4af2:	a804      	add	r0, sp, #16
   d4af4:	f001 faf4 	bl	d60e0 <_ZN6String6formatEPKcz>
        state_L0, state_L1, (int)((double)brightness/RGB_BRIGHTNESS_MAX*100.0), sensorVal, sensorMin, sensorMax);
   d4af8:	a904      	add	r1, sp, #16
   d4afa:	f104 0020 	add.w	r0, r4, #32
   d4afe:	f001 faa9 	bl	d6054 <_ZN6StringaSEOS_>
   d4b02:	a804      	add	r0, sp, #16
   d4b04:	f001 fa10 	bl	d5f28 <_ZN6StringD1Ev>
}
   d4b08:	b008      	add	sp, #32
   d4b0a:	bd70      	pop	{r4, r5, r6, pc}
   d4b0c:	f3af 8000 	nop.w
   d4b10:	40590000 	.word	0x40590000
   d4b14:	000d721f 	.word	0x000d721f
   d4b18:	00000000 	.word	0x00000000
   d4b1c:	406fe000 	.word	0x406fe000

000d4b20 <_ZN11CSmartLight7executeEv>:
void CSmartLight::execute() {
   d4b20:	b538      	push	{r3, r4, r5, lr}
    switch (state_L0) {
   d4b22:	7805      	ldrb	r5, [r0, #0]
void CSmartLight::execute() {
   d4b24:	4604      	mov	r4, r0
    switch (state_L0) {
   d4b26:	b155      	cbz	r5, d4b3e <_ZN11CSmartLight7executeEv+0x1e>
   d4b28:	2d01      	cmp	r5, #1
   d4b2a:	d013      	beq.n	d4b54 <_ZN11CSmartLight7executeEv+0x34>
    cmd.On = INVALID_CMD;
   d4b2c:	4b17      	ldr	r3, [pc, #92]	; (d4b8c <_ZN11CSmartLight7executeEv+0x6c>)
    cmd.Brightness = INVALID_CMD;
   d4b2e:	61e3      	str	r3, [r4, #28]
    cmd.Auto = INVALID_CMD;
   d4b30:	e9c4 3305 	strd	r3, r3, [r4, #20]
    createStatusStr();
   d4b34:	4620      	mov	r0, r4
}
   d4b36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    createStatusStr();
   d4b3a:	f7ff bfbd 	b.w	d4ab8 <_ZN11CSmartLight15createStatusStrEv>
            turnOffLight();
   d4b3e:	f7ff ff3d 	bl	d49bc <_ZN11CSmartLight12turnOffLightEv>
            if (cmd.On != INVALID_CMD) {
   d4b42:	6963      	ldr	r3, [r4, #20]
   d4b44:	4a11      	ldr	r2, [pc, #68]	; (d4b8c <_ZN11CSmartLight7executeEv+0x6c>)
   d4b46:	4293      	cmp	r3, r2
   d4b48:	d0f0      	beq.n	d4b2c <_ZN11CSmartLight7executeEv+0xc>
                if (cmd.On) {
   d4b4a:	2b00      	cmp	r3, #0
   d4b4c:	d0ee      	beq.n	d4b2c <_ZN11CSmartLight7executeEv+0xc>
                    state_L0 = CSmartLight::S_ON;
   d4b4e:	2301      	movs	r3, #1
   d4b50:	8023      	strh	r3, [r4, #0]
   d4b52:	e7eb      	b.n	d4b2c <_ZN11CSmartLight7executeEv+0xc>
            switch (state_L1) {
   d4b54:	7843      	ldrb	r3, [r0, #1]
   d4b56:	b133      	cbz	r3, d4b66 <_ZN11CSmartLight7executeEv+0x46>
   d4b58:	2b01      	cmp	r3, #1
   d4b5a:	d00f      	beq.n	d4b7c <_ZN11CSmartLight7executeEv+0x5c>
                if (!cmd.On) state_L0 = CSmartLight::S_OFF;
   d4b5c:	6963      	ldr	r3, [r4, #20]
   d4b5e:	2b00      	cmp	r3, #0
   d4b60:	d1e4      	bne.n	d4b2c <_ZN11CSmartLight7executeEv+0xc>
   d4b62:	7023      	strb	r3, [r4, #0]
   d4b64:	e7e2      	b.n	d4b2c <_ZN11CSmartLight7executeEv+0xc>
                    updateBrightnessManually(cmd.Brightness);
   d4b66:	69c1      	ldr	r1, [r0, #28]
   d4b68:	f7ff ff36 	bl	d49d8 <_ZN11CSmartLight24updateBrightnessManuallyEi>
                    if (cmd.Auto != INVALID_CMD) {
   d4b6c:	69a3      	ldr	r3, [r4, #24]
   d4b6e:	4a07      	ldr	r2, [pc, #28]	; (d4b8c <_ZN11CSmartLight7executeEv+0x6c>)
   d4b70:	4293      	cmp	r3, r2
   d4b72:	d0f3      	beq.n	d4b5c <_ZN11CSmartLight7executeEv+0x3c>
                        if (cmd.Auto) state_L1 = CSmartLight::S_AUTO;
   d4b74:	2b00      	cmp	r3, #0
   d4b76:	d0f1      	beq.n	d4b5c <_ZN11CSmartLight7executeEv+0x3c>
   d4b78:	7065      	strb	r5, [r4, #1]
   d4b7a:	e7ef      	b.n	d4b5c <_ZN11CSmartLight7executeEv+0x3c>
                    updataBrightnessAutomatically();
   d4b7c:	f7ff ff60 	bl	d4a40 <_ZN11CSmartLight29updataBrightnessAutomaticallyEv>
                        if (!cmd.Auto) state_L1 = CSmartLight::S_MANUAL;
   d4b80:	69a3      	ldr	r3, [r4, #24]
   d4b82:	2b00      	cmp	r3, #0
   d4b84:	d1ea      	bne.n	d4b5c <_ZN11CSmartLight7executeEv+0x3c>
   d4b86:	7063      	strb	r3, [r4, #1]
   d4b88:	e7e8      	b.n	d4b5c <_ZN11CSmartLight7executeEv+0x3c>
   d4b8a:	bf00      	nop
   d4b8c:	fffe7961 	.word	0xfffe7961

000d4b90 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE>:
void CSmartLight::cmdProcessing(JSONValue cmdJson) {
   d4b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4b94:	b08a      	sub	sp, #40	; 0x28
        JSONObjectIterator(value.t_, value.d_) {
   d4b96:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4b98:	f851 3b04 	ldr.w	r3, [r1], #4
   d4b9c:	9300      	str	r3, [sp, #0]
   d4b9e:	4604      	mov	r4, r0
   d4ba0:	a801      	add	r0, sp, #4
   d4ba2:	f7ff fad9 	bl	d4158 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d4ba6:	466a      	mov	r2, sp
   d4ba8:	4629      	mov	r1, r5
   d4baa:	a804      	add	r0, sp, #16
   d4bac:	f000 ffa4 	bl	d5af8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4bb0:	a801      	add	r0, sp, #4
   d4bb2:	f7ff fabb 	bl	d412c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return strcmp(s_, str) == 0;
   d4bb6:	4e3c      	ldr	r6, [pc, #240]	; (d4ca8 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x118>)
   d4bb8:	4f3c      	ldr	r7, [pc, #240]	; (d4cac <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x11c>)
   d4bba:	f8df 80fc 	ldr.w	r8, [pc, #252]	; d4cb8 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x128>
    while (iter.next()) {
   d4bbe:	a804      	add	r0, sp, #16
   d4bc0:	f000 ffb2 	bl	d5b28 <_ZN5spark18JSONObjectIterator4nextEv>
   d4bc4:	2800      	cmp	r0, #0
   d4bc6:	d069      	beq.n	d4c9c <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x10c>
        if (iter.name() == "on") {
   d4bc8:	a904      	add	r1, sp, #16
   d4bca:	4668      	mov	r0, sp
   d4bcc:	f7ff facb 	bl	d4166 <_ZNK5spark18JSONObjectIterator4nameEv>
   d4bd0:	4631      	mov	r1, r6
   d4bd2:	9802      	ldr	r0, [sp, #8]
   d4bd4:	f002 f9d4 	bl	d6f80 <strcmp>
   d4bd8:	4605      	mov	r5, r0
   d4bda:	a801      	add	r0, sp, #4
   d4bdc:	f7ff faa6 	bl	d412c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            cmd.On = (int)iter.value().toBool();
   d4be0:	a904      	add	r1, sp, #16
   d4be2:	4668      	mov	r0, sp
        if (iter.name() == "on") {
   d4be4:	b94d      	cbnz	r5, d4bfa <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x6a>
            cmd.On = (int)iter.value().toBool();
   d4be6:	f7ff fad2 	bl	d418e <_ZNK5spark18JSONObjectIterator5valueEv>
   d4bea:	4668      	mov	r0, sp
   d4bec:	f000 fe12 	bl	d5814 <_ZNK5spark9JSONValue6toBoolEv>
   d4bf0:	6160      	str	r0, [r4, #20]
   d4bf2:	a801      	add	r0, sp, #4
   d4bf4:	f7ff fa9a 	bl	d412c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4bf8:	e7e1      	b.n	d4bbe <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x2e>
        else if (iter.name() == "auto") {
   d4bfa:	f7ff fab4 	bl	d4166 <_ZNK5spark18JSONObjectIterator4nameEv>
   d4bfe:	4639      	mov	r1, r7
   d4c00:	9802      	ldr	r0, [sp, #8]
   d4c02:	f002 f9bd 	bl	d6f80 <strcmp>
   d4c06:	4605      	mov	r5, r0
   d4c08:	a801      	add	r0, sp, #4
   d4c0a:	f7ff fa8f 	bl	d412c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            cmd.Auto = (int)iter.value().toBool();
   d4c0e:	a904      	add	r1, sp, #16
   d4c10:	4668      	mov	r0, sp
        else if (iter.name() == "auto") {
   d4c12:	b935      	cbnz	r5, d4c22 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x92>
            cmd.Auto = (int)iter.value().toBool();
   d4c14:	f7ff fabb 	bl	d418e <_ZNK5spark18JSONObjectIterator5valueEv>
   d4c18:	4668      	mov	r0, sp
   d4c1a:	f000 fdfb 	bl	d5814 <_ZNK5spark9JSONValue6toBoolEv>
   d4c1e:	61a0      	str	r0, [r4, #24]
   d4c20:	e7e7      	b.n	d4bf2 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x62>
        else if (iter.name() == "brightness") {
   d4c22:	f7ff faa0 	bl	d4166 <_ZNK5spark18JSONObjectIterator4nameEv>
   d4c26:	4641      	mov	r1, r8
   d4c28:	9802      	ldr	r0, [sp, #8]
   d4c2a:	f002 f9a9 	bl	d6f80 <strcmp>
   d4c2e:	4605      	mov	r5, r0
   d4c30:	a801      	add	r0, sp, #4
   d4c32:	f7ff fa7b 	bl	d412c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            cmd.Brightness = iter.value().toInt();
   d4c36:	a904      	add	r1, sp, #16
   d4c38:	4668      	mov	r0, sp
        else if (iter.name() == "brightness") {
   d4c3a:	b935      	cbnz	r5, d4c4a <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0xba>
            cmd.Brightness = iter.value().toInt();
   d4c3c:	f7ff faa7 	bl	d418e <_ZNK5spark18JSONObjectIterator5valueEv>
   d4c40:	4668      	mov	r0, sp
   d4c42:	f000 fe25 	bl	d5890 <_ZNK5spark9JSONValue5toIntEv>
   d4c46:	61e0      	str	r0, [r4, #28]
   d4c48:	e7d3      	b.n	d4bf2 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x62>
        else if (iter.name() == "min") {
   d4c4a:	f7ff fa8c 	bl	d4166 <_ZNK5spark18JSONObjectIterator4nameEv>
   d4c4e:	4918      	ldr	r1, [pc, #96]	; (d4cb0 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x120>)
   d4c50:	9802      	ldr	r0, [sp, #8]
   d4c52:	f002 f995 	bl	d6f80 <strcmp>
   d4c56:	4605      	mov	r5, r0
   d4c58:	a801      	add	r0, sp, #4
   d4c5a:	f7ff fa67 	bl	d412c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            sensorMin = iter.value().toInt();
   d4c5e:	a904      	add	r1, sp, #16
   d4c60:	4668      	mov	r0, sp
        else if (iter.name() == "min") {
   d4c62:	b935      	cbnz	r5, d4c72 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0xe2>
            sensorMin = iter.value().toInt();
   d4c64:	f7ff fa93 	bl	d418e <_ZNK5spark18JSONObjectIterator5valueEv>
   d4c68:	4668      	mov	r0, sp
   d4c6a:	f000 fe11 	bl	d5890 <_ZNK5spark9JSONValue5toIntEv>
   d4c6e:	6120      	str	r0, [r4, #16]
   d4c70:	e7bf      	b.n	d4bf2 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x62>
        else if ( iter.name() == "max") {
   d4c72:	f7ff fa78 	bl	d4166 <_ZNK5spark18JSONObjectIterator4nameEv>
   d4c76:	490f      	ldr	r1, [pc, #60]	; (d4cb4 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x124>)
   d4c78:	9802      	ldr	r0, [sp, #8]
   d4c7a:	f002 f981 	bl	d6f80 <strcmp>
   d4c7e:	4605      	mov	r5, r0
   d4c80:	a801      	add	r0, sp, #4
   d4c82:	f7ff fa53 	bl	d412c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4c86:	2d00      	cmp	r5, #0
   d4c88:	d199      	bne.n	d4bbe <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x2e>
            sensorMax = iter.value().toInt();
   d4c8a:	a904      	add	r1, sp, #16
   d4c8c:	4668      	mov	r0, sp
   d4c8e:	f7ff fa7e 	bl	d418e <_ZNK5spark18JSONObjectIterator5valueEv>
   d4c92:	4668      	mov	r0, sp
   d4c94:	f000 fdfc 	bl	d5890 <_ZNK5spark9JSONValue5toIntEv>
   d4c98:	60e0      	str	r0, [r4, #12]
   d4c9a:	e7aa      	b.n	d4bf2 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x62>
   d4c9c:	a805      	add	r0, sp, #20
   d4c9e:	f7ff fa45 	bl	d412c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4ca2:	b00a      	add	sp, #40	; 0x28
   d4ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4ca8:	000d724d 	.word	0x000d724d
   d4cac:	000d7250 	.word	0x000d7250
   d4cb0:	000d7260 	.word	0x000d7260
   d4cb4:	000d7264 	.word	0x000d7264
   d4cb8:	000d7255 	.word	0x000d7255

000d4cbc <_ZN5CDoorC1Ev>:
#include "door.h"

CDoor::CDoor() {
   d4cbc:	b538      	push	{r3, r4, r5, lr}
   d4cbe:	f100 0524 	add.w	r5, r0, #36	; 0x24
   d4cc2:	4604      	mov	r4, r0
   d4cc4:	490b      	ldr	r1, [pc, #44]	; (d4cf4 <_ZN5CDoorC1Ev+0x38>)
   d4cc6:	4628      	mov	r0, r5
   d4cc8:	f001 f979 	bl	d5fbe <_ZN6StringC1EPKc>
  state_D0 = CDoor::S_CLOSED;
   d4ccc:	2301      	movs	r3, #1
   d4cce:	7023      	strb	r3, [r4, #0]
  doorProximity = RGB_BRIGHTNESS_DEAULT;
   d4cd0:	2380      	movs	r3, #128	; 0x80
   d4cd2:	6063      	str	r3, [r4, #4]
  sensorMax = LIGHT_SENSOR_MAX;
  sensorMin = LIGHT_SENSOR_MIN;
   d4cd4:	f640 11c4 	movw	r1, #2500	; 0x9c4
   d4cd8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d4cdc:	e9c4 1303 	strd	r1, r3, [r4, #12]

  statusStr = "{}";
   d4ce0:	4628      	mov	r0, r5
   d4ce2:	4905      	ldr	r1, [pc, #20]	; (d4cf8 <_ZN5CDoorC1Ev+0x3c>)
   d4ce4:	f001 f9be 	bl	d6064 <_ZN6StringaSEPKc>
    state_D0, doorProximity, sensorVal
  );
}

void CDoor::resetCmd() {
  cmd.DoorProximity = INVALID_CMD;
   d4ce8:	4b04      	ldr	r3, [pc, #16]	; (d4cfc <_ZN5CDoorC1Ev+0x40>)
}
   d4cea:	4620      	mov	r0, r4
  cmd.Status = INVALID_CMD;
   d4cec:	e9c4 3307 	strd	r3, r3, [r4, #28]
}
   d4cf0:	bd38      	pop	{r3, r4, r5, pc}
   d4cf2:	bf00      	nop
   d4cf4:	000d7343 	.word	0x000d7343
   d4cf8:	000d721c 	.word	0x000d721c
   d4cfc:	fffe7961 	.word	0xfffe7961

000d4d00 <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE>:
void CDoor::cmdProcessing(JSONValue cmdJson) {
   d4d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4d04:	b08a      	sub	sp, #40	; 0x28
        JSONObjectIterator(value.t_, value.d_) {
   d4d06:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4d08:	f851 3b04 	ldr.w	r3, [r1], #4
   d4d0c:	9300      	str	r3, [sp, #0]
   d4d0e:	4604      	mov	r4, r0
   d4d10:	a801      	add	r0, sp, #4
   d4d12:	f7ff fa21 	bl	d4158 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d4d16:	466a      	mov	r2, sp
   d4d18:	4629      	mov	r1, r5
   d4d1a:	a804      	add	r0, sp, #16
   d4d1c:	f000 feec 	bl	d5af8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4d20:	a801      	add	r0, sp, #4
   d4d22:	f7ff fa03 	bl	d412c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return strcmp(s_, str) == 0;
   d4d26:	4e32      	ldr	r6, [pc, #200]	; (d4df0 <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0xf0>)
   d4d28:	4f32      	ldr	r7, [pc, #200]	; (d4df4 <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0xf4>)
   d4d2a:	f8df 80d0 	ldr.w	r8, [pc, #208]	; d4dfc <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0xfc>
  while (iter.next()) {
   d4d2e:	a804      	add	r0, sp, #16
   d4d30:	f000 fefa 	bl	d5b28 <_ZN5spark18JSONObjectIterator4nextEv>
   d4d34:	2800      	cmp	r0, #0
   d4d36:	d055      	beq.n	d4de4 <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0xe4>
    if (iter.name() == "min") {
   d4d38:	a904      	add	r1, sp, #16
   d4d3a:	4668      	mov	r0, sp
   d4d3c:	f7ff fa13 	bl	d4166 <_ZNK5spark18JSONObjectIterator4nameEv>
   d4d40:	4631      	mov	r1, r6
   d4d42:	9802      	ldr	r0, [sp, #8]
   d4d44:	f002 f91c 	bl	d6f80 <strcmp>
   d4d48:	4605      	mov	r5, r0
   d4d4a:	a801      	add	r0, sp, #4
   d4d4c:	f7ff f9ee 	bl	d412c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      sensorMin = iter.value().toInt();
   d4d50:	a904      	add	r1, sp, #16
   d4d52:	4668      	mov	r0, sp
    if (iter.name() == "min") {
   d4d54:	b94d      	cbnz	r5, d4d6a <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0x6a>
      sensorMin = iter.value().toInt();
   d4d56:	f7ff fa1a 	bl	d418e <_ZNK5spark18JSONObjectIterator5valueEv>
   d4d5a:	4668      	mov	r0, sp
   d4d5c:	f000 fd98 	bl	d5890 <_ZNK5spark9JSONValue5toIntEv>
   d4d60:	6120      	str	r0, [r4, #16]
   d4d62:	a801      	add	r0, sp, #4
   d4d64:	f7ff f9e2 	bl	d412c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4d68:	e7e1      	b.n	d4d2e <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0x2e>
    } else if (iter.name() == "max") {
   d4d6a:	f7ff f9fc 	bl	d4166 <_ZNK5spark18JSONObjectIterator4nameEv>
   d4d6e:	4639      	mov	r1, r7
   d4d70:	9802      	ldr	r0, [sp, #8]
   d4d72:	f002 f905 	bl	d6f80 <strcmp>
   d4d76:	4605      	mov	r5, r0
   d4d78:	a801      	add	r0, sp, #4
   d4d7a:	f7ff f9d7 	bl	d412c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      sensorMax = iter.value().toInt();
   d4d7e:	a904      	add	r1, sp, #16
   d4d80:	4668      	mov	r0, sp
    } else if (iter.name() == "max") {
   d4d82:	b935      	cbnz	r5, d4d92 <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0x92>
      sensorMax = iter.value().toInt();
   d4d84:	f7ff fa03 	bl	d418e <_ZNK5spark18JSONObjectIterator5valueEv>
   d4d88:	4668      	mov	r0, sp
   d4d8a:	f000 fd81 	bl	d5890 <_ZNK5spark9JSONValue5toIntEv>
   d4d8e:	60e0      	str	r0, [r4, #12]
   d4d90:	e7e7      	b.n	d4d62 <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0x62>
    } else if (iter.name() == "doorProximity") {
   d4d92:	f7ff f9e8 	bl	d4166 <_ZNK5spark18JSONObjectIterator4nameEv>
   d4d96:	4641      	mov	r1, r8
   d4d98:	9802      	ldr	r0, [sp, #8]
   d4d9a:	f002 f8f1 	bl	d6f80 <strcmp>
   d4d9e:	4605      	mov	r5, r0
   d4da0:	a801      	add	r0, sp, #4
   d4da2:	f7ff f9c3 	bl	d412c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      cmd.DoorProximity = iter.value().toInt();
   d4da6:	a904      	add	r1, sp, #16
   d4da8:	4668      	mov	r0, sp
    } else if (iter.name() == "doorProximity") {
   d4daa:	b935      	cbnz	r5, d4dba <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0xba>
      cmd.DoorProximity = iter.value().toInt();
   d4dac:	f7ff f9ef 	bl	d418e <_ZNK5spark18JSONObjectIterator5valueEv>
   d4db0:	4668      	mov	r0, sp
   d4db2:	f000 fd6d 	bl	d5890 <_ZNK5spark9JSONValue5toIntEv>
   d4db6:	6220      	str	r0, [r4, #32]
   d4db8:	e7d3      	b.n	d4d62 <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0x62>
    } else if (iter.name() == "status") {
   d4dba:	f7ff f9d4 	bl	d4166 <_ZNK5spark18JSONObjectIterator4nameEv>
   d4dbe:	490e      	ldr	r1, [pc, #56]	; (d4df8 <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0xf8>)
   d4dc0:	9802      	ldr	r0, [sp, #8]
   d4dc2:	f002 f8dd 	bl	d6f80 <strcmp>
   d4dc6:	4605      	mov	r5, r0
   d4dc8:	a801      	add	r0, sp, #4
   d4dca:	f7ff f9af 	bl	d412c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4dce:	2d00      	cmp	r5, #0
   d4dd0:	d1ad      	bne.n	d4d2e <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0x2e>
      cmd.Status = (int)iter.value().toBool();
   d4dd2:	a904      	add	r1, sp, #16
   d4dd4:	4668      	mov	r0, sp
   d4dd6:	f7ff f9da 	bl	d418e <_ZNK5spark18JSONObjectIterator5valueEv>
   d4dda:	4668      	mov	r0, sp
   d4ddc:	f000 fd1a 	bl	d5814 <_ZNK5spark9JSONValue6toBoolEv>
   d4de0:	61e0      	str	r0, [r4, #28]
   d4de2:	e7be      	b.n	d4d62 <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0x62>
   d4de4:	a805      	add	r0, sp, #20
   d4de6:	f7ff f9a1 	bl	d412c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4dea:	b00a      	add	sp, #40	; 0x28
   d4dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4df0:	000d7260 	.word	0x000d7260
   d4df4:	000d7264 	.word	0x000d7264
   d4df8:	000d7276 	.word	0x000d7276
   d4dfc:	000d7268 	.word	0x000d7268

000d4e00 <_ZN11CThermostatC1Ev>:
#include "thermostat.h"

CThermostat::CThermostat() {
   d4e00:	b538      	push	{r3, r4, r5, lr}
   d4e02:	490e      	ldr	r1, [pc, #56]	; (d4e3c <_ZN11CThermostatC1Ev+0x3c>)
   d4e04:	4604      	mov	r4, r0
   d4e06:	f104 0524 	add.w	r5, r4, #36	; 0x24
   d4e0a:	f001 f8d8 	bl	d5fbe <_ZN6StringC1EPKc>
   d4e0e:	490b      	ldr	r1, [pc, #44]	; (d4e3c <_ZN11CThermostatC1Ev+0x3c>)
   d4e10:	f104 0010 	add.w	r0, r4, #16
   d4e14:	f001 f8d3 	bl	d5fbe <_ZN6StringC1EPKc>
   d4e18:	4908      	ldr	r1, [pc, #32]	; (d4e3c <_ZN11CThermostatC1Ev+0x3c>)
   d4e1a:	4628      	mov	r0, r5
   d4e1c:	f001 f8cf 	bl	d5fbe <_ZN6StringC1EPKc>
struct ThermostatStruct {
   d4e20:	2300      	movs	r3, #0
   d4e22:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
   d4e26:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
  sys_state = CThermostat::S_OFF;
  fan_state = CThermostat::S_ON;

  statusStr = "{}";
   d4e2a:	4905      	ldr	r1, [pc, #20]	; (d4e40 <_ZN11CThermostatC1Ev+0x40>)
   d4e2c:	6463      	str	r3, [r4, #68]	; 0x44
  sys_state = CThermostat::S_OFF;
   d4e2e:	8423      	strh	r3, [r4, #32]
  statusStr = "{}";
   d4e30:	4628      	mov	r0, r5
   d4e32:	f001 f917 	bl	d6064 <_ZN6StringaSEPKc>
  //resetCmd();
}
   d4e36:	4620      	mov	r0, r4
   d4e38:	bd38      	pop	{r3, r4, r5, pc}
   d4e3a:	bf00      	nop
   d4e3c:	000d7343 	.word	0x000d7343
   d4e40:	000d721c 	.word	0x000d721c

000d4e44 <_ZN11CThermostat15createStatusStrEv>:
  thermoStruct.cool = INVALID_CMD;
  thermoStruct.assignedTemp = INVALID_CMD;
  thermoStruct.fanMode = INVALID_CMD;
}

void CThermostat::createStatusStr() {
   d4e44:	b510      	push	{r4, lr}
   d4e46:	b086      	sub	sp, #24
    statusStr = String::format("{\"heatStatus\":%d,\"coolStatus\":%d,\"fanStatus\":%d}",
   d4e48:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   d4e4a:	9300      	str	r3, [sp, #0]
   d4e4c:	e9d0 230d 	ldrd	r2, r3, [r0, #52]	; 0x34
void CThermostat::createStatusStr() {
   d4e50:	4604      	mov	r4, r0
    statusStr = String::format("{\"heatStatus\":%d,\"coolStatus\":%d,\"fanStatus\":%d}",
   d4e52:	4907      	ldr	r1, [pc, #28]	; (d4e70 <_ZN11CThermostat15createStatusStrEv+0x2c>)
   d4e54:	a802      	add	r0, sp, #8
   d4e56:	f001 f943 	bl	d60e0 <_ZN6String6formatEPKcz>
      thermoStruct.heat, thermoStruct.cool, thermoStruct.fanMode);
   d4e5a:	a902      	add	r1, sp, #8
   d4e5c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d4e60:	f001 f8f8 	bl	d6054 <_ZN6StringaSEOS_>
   d4e64:	a802      	add	r0, sp, #8
   d4e66:	f001 f85f 	bl	d5f28 <_ZN6StringD1Ev>
}
   d4e6a:	b006      	add	sp, #24
   d4e6c:	bd10      	pop	{r4, pc}
   d4e6e:	bf00      	nop
   d4e70:	000d727d 	.word	0x000d727d

000d4e74 <_ZN11CThermostat7executeEf>:
  thermoStruct.assignedTemp = 30;
   d4e74:	231e      	movs	r3, #30
   d4e76:	6443      	str	r3, [r0, #68]	; 0x44
  switch (sys_state) {
   d4e78:	f890 3020 	ldrb.w	r3, [r0, #32]
   d4e7c:	2b01      	cmp	r3, #1
   d4e7e:	d005      	beq.n	d4e8c <_ZN11CThermostat7executeEf+0x18>
   d4e80:	2b02      	cmp	r3, #2
   d4e82:	d017      	beq.n	d4eb4 <_ZN11CThermostat7executeEf+0x40>
   d4e84:	b9a3      	cbnz	r3, d4eb0 <_ZN11CThermostat7executeEf+0x3c>
      thermoStruct.heat = 0;
   d4e86:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
   d4e8a:	e00c      	b.n	d4ea6 <_ZN11CThermostat7executeEf+0x32>
      if (currTemp > thermoStruct.assignedTemp) {
   d4e8c:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
   d4e90:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d4e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4e98:	dd09      	ble.n	d4eae <_ZN11CThermostat7executeEf+0x3a>
        thermoStruct.heat = 0;
   d4e9a:	2300      	movs	r3, #0
   d4e9c:	6343      	str	r3, [r0, #52]	; 0x34
        if (thermoStruct.fanMode == 1) {
   d4e9e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   d4ea0:	2b01      	cmp	r3, #1
   d4ea2:	d102      	bne.n	d4eaa <_ZN11CThermostat7executeEf+0x36>
          thermoStruct.fanStatus = 1;
   d4ea4:	2301      	movs	r3, #1
      thermoStruct.fanStatus = 0;
   d4ea6:	6403      	str	r3, [r0, #64]	; 0x40
      break;
   d4ea8:	e002      	b.n	d4eb0 <_ZN11CThermostat7executeEf+0x3c>
          thermoStruct.fanStatus = 0;
   d4eaa:	2300      	movs	r3, #0
   d4eac:	e7fb      	b.n	d4ea6 <_ZN11CThermostat7executeEf+0x32>
      } else if (currTemp < thermoStruct.assignedTemp) {
   d4eae:	d4f5      	bmi.n	d4e9c <_ZN11CThermostat7executeEf+0x28>
  createStatusStr();
   d4eb0:	f7ff bfc8 	b.w	d4e44 <_ZN11CThermostat15createStatusStrEv>
      if (currTemp > thermoStruct.assignedTemp) {
   d4eb4:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
   d4eb8:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d4ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4ec0:	dd02      	ble.n	d4ec8 <_ZN11CThermostat7executeEf+0x54>
        thermoStruct.cool = 1;
   d4ec2:	2301      	movs	r3, #1
   d4ec4:	6383      	str	r3, [r0, #56]	; 0x38
        if (thermoStruct.fanMode == 1) {
   d4ec6:	e7ed      	b.n	d4ea4 <_ZN11CThermostat7executeEf+0x30>
      } else if (currTemp < thermoStruct.assignedTemp) {
   d4ec8:	d5f2      	bpl.n	d4eb0 <_ZN11CThermostat7executeEf+0x3c>
        thermoStruct.cool = 0;
   d4eca:	2300      	movs	r3, #0
   d4ecc:	6383      	str	r3, [r0, #56]	; 0x38
        if (thermoStruct.fanMode == 1) {
   d4ece:	e7e6      	b.n	d4e9e <_ZN11CThermostat7executeEf+0x2a>

000d4ed0 <_ZN11CThermostat13cmdProcessingEN5spark9JSONValueE>:
void CThermostat::cmdProcessing(JSONValue cmdJson) {
   d4ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4ed4:	b08c      	sub	sp, #48	; 0x30
        JSONObjectIterator(value.t_, value.d_) {
   d4ed6:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4ed8:	f851 3b04 	ldr.w	r3, [r1], #4
   d4edc:	9302      	str	r3, [sp, #8]
   d4ede:	4604      	mov	r4, r0
   d4ee0:	a803      	add	r0, sp, #12
   d4ee2:	f7ff f939 	bl	d4158 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d4ee6:	aa02      	add	r2, sp, #8
   d4ee8:	4629      	mov	r1, r5
   d4eea:	a806      	add	r0, sp, #24
   d4eec:	f000 fe04 	bl	d5af8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4ef0:	a803      	add	r0, sp, #12
   d4ef2:	f7ff f91b 	bl	d412c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return strcmp(s_, str) == 0;
   d4ef6:	4e42      	ldr	r6, [pc, #264]	; (d5000 <_ZN11CThermostat13cmdProcessingEN5spark9JSONValueE+0x130>)
   d4ef8:	4f42      	ldr	r7, [pc, #264]	; (d5004 <_ZN11CThermostat13cmdProcessingEN5spark9JSONValueE+0x134>)
   d4efa:	f8df 8114 	ldr.w	r8, [pc, #276]	; d5010 <_ZN11CThermostat13cmdProcessingEN5spark9JSONValueE+0x140>
  while (iter.next()) {
   d4efe:	a806      	add	r0, sp, #24
   d4f00:	f000 fe12 	bl	d5b28 <_ZN5spark18JSONObjectIterator4nextEv>
   d4f04:	2800      	cmp	r0, #0
   d4f06:	d075      	beq.n	d4ff4 <_ZN11CThermostat13cmdProcessingEN5spark9JSONValueE+0x124>
    if (iter.name() == "heat") {
   d4f08:	a906      	add	r1, sp, #24
   d4f0a:	a802      	add	r0, sp, #8
   d4f0c:	f7ff f92b 	bl	d4166 <_ZNK5spark18JSONObjectIterator4nameEv>
   d4f10:	9804      	ldr	r0, [sp, #16]
   d4f12:	4631      	mov	r1, r6
   d4f14:	f002 f834 	bl	d6f80 <strcmp>
   d4f18:	4605      	mov	r5, r0
   d4f1a:	a803      	add	r0, sp, #12
   d4f1c:	f7ff f906 	bl	d412c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4f20:	b91d      	cbnz	r5, d4f2a <_ZN11CThermostat13cmdProcessingEN5spark9JSONValueE+0x5a>
      sys_state = CThermostat::S_HEAT;
   d4f22:	2301      	movs	r3, #1
      sys_state = CThermostat::S_COOL;
   d4f24:	f884 3020 	strb.w	r3, [r4, #32]
   d4f28:	e7e9      	b.n	d4efe <_ZN11CThermostat13cmdProcessingEN5spark9JSONValueE+0x2e>
    } else if (iter.name() == "cool") {
   d4f2a:	a906      	add	r1, sp, #24
   d4f2c:	a802      	add	r0, sp, #8
   d4f2e:	f7ff f91a 	bl	d4166 <_ZNK5spark18JSONObjectIterator4nameEv>
   d4f32:	9804      	ldr	r0, [sp, #16]
   d4f34:	4639      	mov	r1, r7
   d4f36:	f002 f823 	bl	d6f80 <strcmp>
   d4f3a:	4605      	mov	r5, r0
   d4f3c:	a803      	add	r0, sp, #12
   d4f3e:	f7ff f8f5 	bl	d412c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4f42:	b90d      	cbnz	r5, d4f48 <_ZN11CThermostat13cmdProcessingEN5spark9JSONValueE+0x78>
      sys_state = CThermostat::S_COOL;
   d4f44:	2302      	movs	r3, #2
   d4f46:	e7ed      	b.n	d4f24 <_ZN11CThermostat13cmdProcessingEN5spark9JSONValueE+0x54>
    } else if (iter.name() == "off") {
   d4f48:	a906      	add	r1, sp, #24
   d4f4a:	a802      	add	r0, sp, #8
   d4f4c:	f7ff f90b 	bl	d4166 <_ZNK5spark18JSONObjectIterator4nameEv>
   d4f50:	9804      	ldr	r0, [sp, #16]
   d4f52:	4641      	mov	r1, r8
   d4f54:	f002 f814 	bl	d6f80 <strcmp>
   d4f58:	4605      	mov	r5, r0
   d4f5a:	a803      	add	r0, sp, #12
   d4f5c:	f7ff f8e6 	bl	d412c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4f60:	b915      	cbnz	r5, d4f68 <_ZN11CThermostat13cmdProcessingEN5spark9JSONValueE+0x98>
      sys_state = CThermostat::S_OFF;
   d4f62:	f884 5020 	strb.w	r5, [r4, #32]
   d4f66:	e7ca      	b.n	d4efe <_ZN11CThermostat13cmdProcessingEN5spark9JSONValueE+0x2e>
    } else if (iter.name() == "fan") {
   d4f68:	a906      	add	r1, sp, #24
   d4f6a:	a802      	add	r0, sp, #8
   d4f6c:	f7ff f8fb 	bl	d4166 <_ZNK5spark18JSONObjectIterator4nameEv>
   d4f70:	4925      	ldr	r1, [pc, #148]	; (d5008 <_ZN11CThermostat13cmdProcessingEN5spark9JSONValueE+0x138>)
   d4f72:	9804      	ldr	r0, [sp, #16]
   d4f74:	f002 f804 	bl	d6f80 <strcmp>
   d4f78:	4605      	mov	r5, r0
   d4f7a:	a803      	add	r0, sp, #12
   d4f7c:	f7ff f8d6 	bl	d412c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4f80:	b9b5      	cbnz	r5, d4fb0 <_ZN11CThermostat13cmdProcessingEN5spark9JSONValueE+0xe0>
    return JSONValue(v_, d_);
   d4f82:	9d0a      	ldr	r5, [sp, #40]	; 0x28
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4f84:	9b06      	ldr	r3, [sp, #24]
   d4f86:	9300      	str	r3, [sp, #0]
   d4f88:	a907      	add	r1, sp, #28
   d4f8a:	a801      	add	r0, sp, #4
   d4f8c:	f7ff f8e4 	bl	d4158 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d4f90:	466a      	mov	r2, sp
   d4f92:	4629      	mov	r1, r5
   d4f94:	a802      	add	r0, sp, #8
   d4f96:	f000 fc06 	bl	d57a6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4f9a:	a801      	add	r0, sp, #4
   d4f9c:	f7ff f8c6 	bl	d412c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      thermoStruct.fanMode = iter.value().toInt();
   d4fa0:	a802      	add	r0, sp, #8
   d4fa2:	f000 fc75 	bl	d5890 <_ZNK5spark9JSONValue5toIntEv>
   d4fa6:	63e0      	str	r0, [r4, #60]	; 0x3c
   d4fa8:	a803      	add	r0, sp, #12
   d4faa:	f7ff f8bf 	bl	d412c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4fae:	e7a6      	b.n	d4efe <_ZN11CThermostat13cmdProcessingEN5spark9JSONValueE+0x2e>
    } else if (iter.name() == "temp") {
   d4fb0:	a906      	add	r1, sp, #24
   d4fb2:	a802      	add	r0, sp, #8
   d4fb4:	f7ff f8d7 	bl	d4166 <_ZNK5spark18JSONObjectIterator4nameEv>
    return strcmp(s_, str) == 0;
   d4fb8:	4914      	ldr	r1, [pc, #80]	; (d500c <_ZN11CThermostat13cmdProcessingEN5spark9JSONValueE+0x13c>)
   d4fba:	9804      	ldr	r0, [sp, #16]
   d4fbc:	f001 ffe0 	bl	d6f80 <strcmp>
   d4fc0:	4605      	mov	r5, r0
   d4fc2:	a803      	add	r0, sp, #12
   d4fc4:	f7ff f8b2 	bl	d412c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4fc8:	2d00      	cmp	r5, #0
   d4fca:	d198      	bne.n	d4efe <_ZN11CThermostat13cmdProcessingEN5spark9JSONValueE+0x2e>
    return JSONValue(v_, d_);
   d4fcc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4fce:	9b06      	ldr	r3, [sp, #24]
   d4fd0:	9300      	str	r3, [sp, #0]
   d4fd2:	a907      	add	r1, sp, #28
   d4fd4:	a801      	add	r0, sp, #4
   d4fd6:	f7ff f8bf 	bl	d4158 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d4fda:	466a      	mov	r2, sp
   d4fdc:	4629      	mov	r1, r5
   d4fde:	a802      	add	r0, sp, #8
   d4fe0:	f000 fbe1 	bl	d57a6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4fe4:	a801      	add	r0, sp, #4
   d4fe6:	f7ff f8a1 	bl	d412c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      thermoStruct.assignedTemp = iter.value().toInt();
   d4fea:	a802      	add	r0, sp, #8
   d4fec:	f000 fc50 	bl	d5890 <_ZNK5spark9JSONValue5toIntEv>
   d4ff0:	6460      	str	r0, [r4, #68]	; 0x44
   d4ff2:	e7d9      	b.n	d4fa8 <_ZN11CThermostat13cmdProcessingEN5spark9JSONValueE+0xd8>
   d4ff4:	a807      	add	r0, sp, #28
   d4ff6:	f7ff f899 	bl	d412c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4ffa:	b00c      	add	sp, #48	; 0x30
   d4ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5000:	000d72ae 	.word	0x000d72ae
   d5004:	000d72b3 	.word	0x000d72b3
   d5008:	000d72bc 	.word	0x000d72bc
   d500c:	000d72c0 	.word	0x000d72c0
   d5010:	000d72b8 	.word	0x000d72b8

000d5014 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5014:	b508      	push	{r3, lr}
   d5016:	4b02      	ldr	r3, [pc, #8]	; (d5020 <os_mutex_recursive_create+0xc>)
   d5018:	681b      	ldr	r3, [r3, #0]
   d501a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d501c:	9301      	str	r3, [sp, #4]
   d501e:	bd08      	pop	{r3, pc}
   d5020:	00030248 	.word	0x00030248

000d5024 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5024:	b508      	push	{r3, lr}
   d5026:	4b02      	ldr	r3, [pc, #8]	; (d5030 <HAL_RNG_GetRandomNumber+0xc>)
   d5028:	681b      	ldr	r3, [r3, #0]
   d502a:	685b      	ldr	r3, [r3, #4]
   d502c:	9301      	str	r3, [sp, #4]
   d502e:	bd08      	pop	{r3, pc}
   d5030:	00030218 	.word	0x00030218

000d5034 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5034:	b508      	push	{r3, lr}
   d5036:	4b02      	ldr	r3, [pc, #8]	; (d5040 <HAL_Delay_Microseconds+0xc>)
   d5038:	681b      	ldr	r3, [r3, #0]
   d503a:	68db      	ldr	r3, [r3, #12]
   d503c:	9301      	str	r3, [sp, #4]
   d503e:	bd08      	pop	{r3, pc}
   d5040:	00030218 	.word	0x00030218

000d5044 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5044:	b508      	push	{r3, lr}
   d5046:	4b02      	ldr	r3, [pc, #8]	; (d5050 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5048:	681b      	ldr	r3, [r3, #0]
   d504a:	695b      	ldr	r3, [r3, #20]
   d504c:	9301      	str	r3, [sp, #4]
   d504e:	bd08      	pop	{r3, pc}
   d5050:	00030218 	.word	0x00030218

000d5054 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d5054:	b508      	push	{r3, lr}
   d5056:	4b02      	ldr	r3, [pc, #8]	; (d5060 <hal_rtc_time_is_valid+0xc>)
   d5058:	681b      	ldr	r3, [r3, #0]
   d505a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d505c:	9301      	str	r3, [sp, #4]
   d505e:	bd08      	pop	{r3, pc}
   d5060:	00030218 	.word	0x00030218

000d5064 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d5064:	b508      	push	{r3, lr}
   d5066:	4b02      	ldr	r3, [pc, #8]	; (d5070 <hal_rtc_get_time+0xc>)
   d5068:	681b      	ldr	r3, [r3, #0]
   d506a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d506c:	9301      	str	r3, [sp, #4]
   d506e:	bd08      	pop	{r3, pc}
   d5070:	00030218 	.word	0x00030218

000d5074 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d5074:	b508      	push	{r3, lr}
   d5076:	4b02      	ldr	r3, [pc, #8]	; (d5080 <HAL_Pin_Map+0xc>)
   d5078:	681b      	ldr	r3, [r3, #0]
   d507a:	681b      	ldr	r3, [r3, #0]
   d507c:	9301      	str	r3, [sp, #4]
   d507e:	bd08      	pop	{r3, pc}
   d5080:	0003022c 	.word	0x0003022c

000d5084 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d5084:	b508      	push	{r3, lr}
   d5086:	4b02      	ldr	r3, [pc, #8]	; (d5090 <HAL_Validate_Pin_Function+0xc>)
   d5088:	681b      	ldr	r3, [r3, #0]
   d508a:	685b      	ldr	r3, [r3, #4]
   d508c:	9301      	str	r3, [sp, #4]
   d508e:	bd08      	pop	{r3, pc}
   d5090:	0003022c 	.word	0x0003022c

000d5094 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5094:	b508      	push	{r3, lr}
   d5096:	4b02      	ldr	r3, [pc, #8]	; (d50a0 <HAL_Pin_Mode+0xc>)
   d5098:	681b      	ldr	r3, [r3, #0]
   d509a:	689b      	ldr	r3, [r3, #8]
   d509c:	9301      	str	r3, [sp, #4]
   d509e:	bd08      	pop	{r3, pc}
   d50a0:	0003022c 	.word	0x0003022c

000d50a4 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d50a4:	b508      	push	{r3, lr}
   d50a6:	4b02      	ldr	r3, [pc, #8]	; (d50b0 <HAL_Interrupts_Enable_All+0xc>)
   d50a8:	681b      	ldr	r3, [r3, #0]
   d50aa:	6a1b      	ldr	r3, [r3, #32]
   d50ac:	9301      	str	r3, [sp, #4]
   d50ae:	bd08      	pop	{r3, pc}
   d50b0:	0003022c 	.word	0x0003022c

000d50b4 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d50b4:	b508      	push	{r3, lr}
   d50b6:	4b02      	ldr	r3, [pc, #8]	; (d50c0 <HAL_Interrupts_Disable_All+0xc>)
   d50b8:	681b      	ldr	r3, [r3, #0]
   d50ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d50bc:	9301      	str	r3, [sp, #4]
   d50be:	bd08      	pop	{r3, pc}
   d50c0:	0003022c 	.word	0x0003022c

000d50c4 <hal_adc_read>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d50c4:	b508      	push	{r3, lr}
   d50c6:	4b02      	ldr	r3, [pc, #8]	; (d50d0 <hal_adc_read+0xc>)
   d50c8:	681b      	ldr	r3, [r3, #0]
   d50ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d50cc:	9301      	str	r3, [sp, #4]
   d50ce:	bd08      	pop	{r3, pc}
   d50d0:	0003022c 	.word	0x0003022c

000d50d4 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d50d4:	b508      	push	{r3, lr}
   d50d6:	4b02      	ldr	r3, [pc, #8]	; (d50e0 <hal_i2c_write+0xc>)
   d50d8:	681b      	ldr	r3, [r3, #0]
   d50da:	6a1b      	ldr	r3, [r3, #32]
   d50dc:	9301      	str	r3, [sp, #4]
   d50de:	bd08      	pop	{r3, pc}
   d50e0:	00030228 	.word	0x00030228

000d50e4 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d50e4:	b508      	push	{r3, lr}
   d50e6:	4b02      	ldr	r3, [pc, #8]	; (d50f0 <hal_i2c_available+0xc>)
   d50e8:	681b      	ldr	r3, [r3, #0]
   d50ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d50ec:	9301      	str	r3, [sp, #4]
   d50ee:	bd08      	pop	{r3, pc}
   d50f0:	00030228 	.word	0x00030228

000d50f4 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d50f4:	b508      	push	{r3, lr}
   d50f6:	4b02      	ldr	r3, [pc, #8]	; (d5100 <hal_i2c_read+0xc>)
   d50f8:	681b      	ldr	r3, [r3, #0]
   d50fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d50fc:	9301      	str	r3, [sp, #4]
   d50fe:	bd08      	pop	{r3, pc}
   d5100:	00030228 	.word	0x00030228

000d5104 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d5104:	b508      	push	{r3, lr}
   d5106:	4b02      	ldr	r3, [pc, #8]	; (d5110 <hal_i2c_peek+0xc>)
   d5108:	681b      	ldr	r3, [r3, #0]
   d510a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d510c:	9301      	str	r3, [sp, #4]
   d510e:	bd08      	pop	{r3, pc}
   d5110:	00030228 	.word	0x00030228

000d5114 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d5114:	b508      	push	{r3, lr}
   d5116:	4b02      	ldr	r3, [pc, #8]	; (d5120 <hal_i2c_flush+0xc>)
   d5118:	681b      	ldr	r3, [r3, #0]
   d511a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d511c:	9301      	str	r3, [sp, #4]
   d511e:	bd08      	pop	{r3, pc}
   d5120:	00030228 	.word	0x00030228

000d5124 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d5124:	b508      	push	{r3, lr}
   d5126:	4b02      	ldr	r3, [pc, #8]	; (d5130 <hal_i2c_is_enabled+0xc>)
   d5128:	681b      	ldr	r3, [r3, #0]
   d512a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d512c:	9301      	str	r3, [sp, #4]
   d512e:	bd08      	pop	{r3, pc}
   d5130:	00030228 	.word	0x00030228

000d5134 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d5134:	b508      	push	{r3, lr}
   d5136:	4b02      	ldr	r3, [pc, #8]	; (d5140 <hal_i2c_init+0xc>)
   d5138:	681b      	ldr	r3, [r3, #0]
   d513a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d513c:	9301      	str	r3, [sp, #4]
   d513e:	bd08      	pop	{r3, pc}
   d5140:	00030228 	.word	0x00030228

000d5144 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5144:	b508      	push	{r3, lr}
   d5146:	4b02      	ldr	r3, [pc, #8]	; (d5150 <inet_inet_ntop+0xc>)
   d5148:	681b      	ldr	r3, [r3, #0]
   d514a:	695b      	ldr	r3, [r3, #20]
   d514c:	9301      	str	r3, [sp, #4]
   d514e:	bd08      	pop	{r3, pc}
   d5150:	00030264 	.word	0x00030264

000d5154 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5154:	b508      	push	{r3, lr}
   d5156:	4b02      	ldr	r3, [pc, #8]	; (d5160 <netdb_freeaddrinfo+0xc>)
   d5158:	681b      	ldr	r3, [r3, #0]
   d515a:	689b      	ldr	r3, [r3, #8]
   d515c:	9301      	str	r3, [sp, #4]
   d515e:	bd08      	pop	{r3, pc}
   d5160:	00030268 	.word	0x00030268

000d5164 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5164:	b508      	push	{r3, lr}
   d5166:	4b02      	ldr	r3, [pc, #8]	; (d5170 <netdb_getaddrinfo+0xc>)
   d5168:	681b      	ldr	r3, [r3, #0]
   d516a:	68db      	ldr	r3, [r3, #12]
   d516c:	9301      	str	r3, [sp, #4]
   d516e:	bd08      	pop	{r3, pc}
   d5170:	00030268 	.word	0x00030268

000d5174 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d5174:	b508      	push	{r3, lr}
   d5176:	4b02      	ldr	r3, [pc, #8]	; (d5180 <hal_spi_init+0xc>)
   d5178:	681b      	ldr	r3, [r3, #0]
   d517a:	69db      	ldr	r3, [r3, #28]
   d517c:	9301      	str	r3, [sp, #4]
   d517e:	bd08      	pop	{r3, pc}
   d5180:	00030230 	.word	0x00030230

000d5184 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d5184:	b508      	push	{r3, lr}
   d5186:	4b02      	ldr	r3, [pc, #8]	; (d5190 <hal_spi_is_enabled+0xc>)
   d5188:	681b      	ldr	r3, [r3, #0]
   d518a:	6a1b      	ldr	r3, [r3, #32]
   d518c:	9301      	str	r3, [sp, #4]
   d518e:	bd08      	pop	{r3, pc}
   d5190:	00030230 	.word	0x00030230

000d5194 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d5194:	b508      	push	{r3, lr}
   d5196:	4b02      	ldr	r3, [pc, #8]	; (d51a0 <hal_usart_init+0xc>)
   d5198:	681b      	ldr	r3, [r3, #0]
   d519a:	681b      	ldr	r3, [r3, #0]
   d519c:	9301      	str	r3, [sp, #4]
   d519e:	bd08      	pop	{r3, pc}
   d51a0:	0003023c 	.word	0x0003023c

000d51a4 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d51a4:	b508      	push	{r3, lr}
   d51a6:	4b02      	ldr	r3, [pc, #8]	; (d51b0 <hal_usart_write+0xc>)
   d51a8:	681b      	ldr	r3, [r3, #0]
   d51aa:	68db      	ldr	r3, [r3, #12]
   d51ac:	9301      	str	r3, [sp, #4]
   d51ae:	bd08      	pop	{r3, pc}
   d51b0:	0003023c 	.word	0x0003023c

000d51b4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d51b4:	b508      	push	{r3, lr}
   d51b6:	4b02      	ldr	r3, [pc, #8]	; (d51c0 <hal_usart_available+0xc>)
   d51b8:	681b      	ldr	r3, [r3, #0]
   d51ba:	691b      	ldr	r3, [r3, #16]
   d51bc:	9301      	str	r3, [sp, #4]
   d51be:	bd08      	pop	{r3, pc}
   d51c0:	0003023c 	.word	0x0003023c

000d51c4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d51c4:	b508      	push	{r3, lr}
   d51c6:	4b02      	ldr	r3, [pc, #8]	; (d51d0 <hal_usart_read+0xc>)
   d51c8:	681b      	ldr	r3, [r3, #0]
   d51ca:	695b      	ldr	r3, [r3, #20]
   d51cc:	9301      	str	r3, [sp, #4]
   d51ce:	bd08      	pop	{r3, pc}
   d51d0:	0003023c 	.word	0x0003023c

000d51d4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d51d4:	b508      	push	{r3, lr}
   d51d6:	4b02      	ldr	r3, [pc, #8]	; (d51e0 <hal_usart_peek+0xc>)
   d51d8:	681b      	ldr	r3, [r3, #0]
   d51da:	699b      	ldr	r3, [r3, #24]
   d51dc:	9301      	str	r3, [sp, #4]
   d51de:	bd08      	pop	{r3, pc}
   d51e0:	0003023c 	.word	0x0003023c

000d51e4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d51e4:	b508      	push	{r3, lr}
   d51e6:	4b02      	ldr	r3, [pc, #8]	; (d51f0 <hal_usart_flush+0xc>)
   d51e8:	681b      	ldr	r3, [r3, #0]
   d51ea:	69db      	ldr	r3, [r3, #28]
   d51ec:	9301      	str	r3, [sp, #4]
   d51ee:	bd08      	pop	{r3, pc}
   d51f0:	0003023c 	.word	0x0003023c

000d51f4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d51f4:	b508      	push	{r3, lr}
   d51f6:	4b02      	ldr	r3, [pc, #8]	; (d5200 <hal_usart_is_enabled+0xc>)
   d51f8:	681b      	ldr	r3, [r3, #0]
   d51fa:	6a1b      	ldr	r3, [r3, #32]
   d51fc:	9301      	str	r3, [sp, #4]
   d51fe:	bd08      	pop	{r3, pc}
   d5200:	0003023c 	.word	0x0003023c

000d5204 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d5204:	b508      	push	{r3, lr}
   d5206:	4b02      	ldr	r3, [pc, #8]	; (d5210 <hal_usart_available_data_for_write+0xc>)
   d5208:	681b      	ldr	r3, [r3, #0]
   d520a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d520c:	9301      	str	r3, [sp, #4]
   d520e:	bd08      	pop	{r3, pc}
   d5210:	0003023c 	.word	0x0003023c

000d5214 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5214:	b508      	push	{r3, lr}
   d5216:	4b02      	ldr	r3, [pc, #8]	; (d5220 <HAL_USB_USART_Init+0xc>)
   d5218:	681b      	ldr	r3, [r3, #0]
   d521a:	681b      	ldr	r3, [r3, #0]
   d521c:	9301      	str	r3, [sp, #4]
   d521e:	bd08      	pop	{r3, pc}
   d5220:	0003024c 	.word	0x0003024c

000d5224 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5224:	b508      	push	{r3, lr}
   d5226:	4b02      	ldr	r3, [pc, #8]	; (d5230 <HAL_USB_USART_Begin+0xc>)
   d5228:	681b      	ldr	r3, [r3, #0]
   d522a:	685b      	ldr	r3, [r3, #4]
   d522c:	9301      	str	r3, [sp, #4]
   d522e:	bd08      	pop	{r3, pc}
   d5230:	0003024c 	.word	0x0003024c

000d5234 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5234:	b508      	push	{r3, lr}
   d5236:	4b02      	ldr	r3, [pc, #8]	; (d5240 <HAL_USB_USART_Available_Data+0xc>)
   d5238:	681b      	ldr	r3, [r3, #0]
   d523a:	691b      	ldr	r3, [r3, #16]
   d523c:	9301      	str	r3, [sp, #4]
   d523e:	bd08      	pop	{r3, pc}
   d5240:	0003024c 	.word	0x0003024c

000d5244 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5244:	b508      	push	{r3, lr}
   d5246:	4b02      	ldr	r3, [pc, #8]	; (d5250 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5248:	681b      	ldr	r3, [r3, #0]
   d524a:	695b      	ldr	r3, [r3, #20]
   d524c:	9301      	str	r3, [sp, #4]
   d524e:	bd08      	pop	{r3, pc}
   d5250:	0003024c 	.word	0x0003024c

000d5254 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5254:	b508      	push	{r3, lr}
   d5256:	4b02      	ldr	r3, [pc, #8]	; (d5260 <HAL_USB_USART_Receive_Data+0xc>)
   d5258:	681b      	ldr	r3, [r3, #0]
   d525a:	699b      	ldr	r3, [r3, #24]
   d525c:	9301      	str	r3, [sp, #4]
   d525e:	bd08      	pop	{r3, pc}
   d5260:	0003024c 	.word	0x0003024c

000d5264 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5264:	b508      	push	{r3, lr}
   d5266:	4b02      	ldr	r3, [pc, #8]	; (d5270 <HAL_USB_USART_Send_Data+0xc>)
   d5268:	681b      	ldr	r3, [r3, #0]
   d526a:	69db      	ldr	r3, [r3, #28]
   d526c:	9301      	str	r3, [sp, #4]
   d526e:	bd08      	pop	{r3, pc}
   d5270:	0003024c 	.word	0x0003024c

000d5274 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5274:	b508      	push	{r3, lr}
   d5276:	4b02      	ldr	r3, [pc, #8]	; (d5280 <HAL_USB_USART_Flush_Data+0xc>)
   d5278:	681b      	ldr	r3, [r3, #0]
   d527a:	6a1b      	ldr	r3, [r3, #32]
   d527c:	9301      	str	r3, [sp, #4]
   d527e:	bd08      	pop	{r3, pc}
   d5280:	0003024c 	.word	0x0003024c

000d5284 <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
   d5284:	b508      	push	{r3, lr}
   d5286:	4b02      	ldr	r3, [pc, #8]	; (d5290 <LED_SetSignalingColor+0xc>)
   d5288:	681b      	ldr	r3, [r3, #0]
   d528a:	685b      	ldr	r3, [r3, #4]
   d528c:	9301      	str	r3, [sp, #4]
   d528e:	bd08      	pop	{r3, pc}
   d5290:	00030260 	.word	0x00030260

000d5294 <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
   d5294:	b508      	push	{r3, lr}
   d5296:	4b02      	ldr	r3, [pc, #8]	; (d52a0 <LED_Signaling_Start+0xc>)
   d5298:	681b      	ldr	r3, [r3, #0]
   d529a:	689b      	ldr	r3, [r3, #8]
   d529c:	9301      	str	r3, [sp, #4]
   d529e:	bd08      	pop	{r3, pc}
   d52a0:	00030260 	.word	0x00030260

000d52a4 <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
   d52a4:	b508      	push	{r3, lr}
   d52a6:	4b02      	ldr	r3, [pc, #8]	; (d52b0 <LED_Signaling_Stop+0xc>)
   d52a8:	681b      	ldr	r3, [r3, #0]
   d52aa:	68db      	ldr	r3, [r3, #12]
   d52ac:	9301      	str	r3, [sp, #4]
   d52ae:	bd08      	pop	{r3, pc}
   d52b0:	00030260 	.word	0x00030260

000d52b4 <LED_SetBrightness>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
   d52b4:	b508      	push	{r3, lr}
   d52b6:	4b02      	ldr	r3, [pc, #8]	; (d52c0 <LED_SetBrightness+0xc>)
   d52b8:	681b      	ldr	r3, [r3, #0]
   d52ba:	691b      	ldr	r3, [r3, #16]
   d52bc:	9301      	str	r3, [sp, #4]
   d52be:	bd08      	pop	{r3, pc}
   d52c0:	00030260 	.word	0x00030260

000d52c4 <LED_RGB_IsOverRidden>:
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   d52c4:	b508      	push	{r3, lr}
   d52c6:	4b02      	ldr	r3, [pc, #8]	; (d52d0 <LED_RGB_IsOverRidden+0xc>)
   d52c8:	681b      	ldr	r3, [r3, #0]
   d52ca:	699b      	ldr	r3, [r3, #24]
   d52cc:	9301      	str	r3, [sp, #4]
   d52ce:	bd08      	pop	{r3, pc}
   d52d0:	00030260 	.word	0x00030260

000d52d4 <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   d52d4:	b508      	push	{r3, lr}
   d52d6:	4b02      	ldr	r3, [pc, #8]	; (d52e0 <LED_On+0xc>)
   d52d8:	681b      	ldr	r3, [r3, #0]
   d52da:	69db      	ldr	r3, [r3, #28]
   d52dc:	9301      	str	r3, [sp, #4]
   d52de:	bd08      	pop	{r3, pc}
   d52e0:	00030260 	.word	0x00030260

000d52e4 <Get_LED_Brightness>:
DYNALIB_FN(8, services, LED_Off, void(Led_TypeDef))
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))
   d52e4:	b508      	push	{r3, lr}
   d52e6:	4b02      	ldr	r3, [pc, #8]	; (d52f0 <Get_LED_Brightness+0xc>)
   d52e8:	681b      	ldr	r3, [r3, #0]
   d52ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d52ec:	9301      	str	r3, [sp, #4]
   d52ee:	bd08      	pop	{r3, pc}
   d52f0:	00030260 	.word	0x00030260

000d52f4 <panic_>:

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d52f4:	b508      	push	{r3, lr}
   d52f6:	4b02      	ldr	r3, [pc, #8]	; (d5300 <panic_+0xc>)
   d52f8:	681b      	ldr	r3, [r3, #0]
   d52fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d52fc:	9301      	str	r3, [sp, #4]
   d52fe:	bd08      	pop	{r3, pc}
   d5300:	00030260 	.word	0x00030260

000d5304 <jsmn_init>:

DYNALIB_FN(14, services, jsmn_init, void(jsmn_parser*, void*))
   d5304:	b508      	push	{r3, lr}
   d5306:	4b02      	ldr	r3, [pc, #8]	; (d5310 <jsmn_init+0xc>)
   d5308:	681b      	ldr	r3, [r3, #0]
   d530a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d530c:	9301      	str	r3, [sp, #4]
   d530e:	bd08      	pop	{r3, pc}
   d5310:	00030260 	.word	0x00030260

000d5314 <jsmn_parse_deprecated>:
DYNALIB_FN(15, services, jsmn_parse_deprecated, jsmnerr_t(jsmn_parser*, const char*, size_t, jsmntok_t*, unsigned int, void*))
   d5314:	b508      	push	{r3, lr}
   d5316:	4b02      	ldr	r3, [pc, #8]	; (d5320 <jsmn_parse_deprecated+0xc>)
   d5318:	681b      	ldr	r3, [r3, #0]
   d531a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d531c:	9301      	str	r3, [sp, #4]
   d531e:	bd08      	pop	{r3, pc}
   d5320:	00030260 	.word	0x00030260

000d5324 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d5324:	b508      	push	{r3, lr}
   d5326:	4b02      	ldr	r3, [pc, #8]	; (d5330 <system_mode+0xc>)
   d5328:	681b      	ldr	r3, [r3, #0]
   d532a:	681b      	ldr	r3, [r3, #0]
   d532c:	9301      	str	r3, [sp, #4]
   d532e:	bd08      	pop	{r3, pc}
   d5330:	00030220 	.word	0x00030220

000d5334 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5334:	b508      	push	{r3, lr}
   d5336:	4b02      	ldr	r3, [pc, #8]	; (d5340 <set_system_mode+0xc>)
   d5338:	681b      	ldr	r3, [r3, #0]
   d533a:	685b      	ldr	r3, [r3, #4]
   d533c:	9301      	str	r3, [sp, #4]
   d533e:	bd08      	pop	{r3, pc}
   d5340:	00030220 	.word	0x00030220

000d5344 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5344:	b508      	push	{r3, lr}
   d5346:	4b02      	ldr	r3, [pc, #8]	; (d5350 <system_delay_ms+0xc>)
   d5348:	681b      	ldr	r3, [r3, #0]
   d534a:	695b      	ldr	r3, [r3, #20]
   d534c:	9301      	str	r3, [sp, #4]
   d534e:	bd08      	pop	{r3, pc}
   d5350:	00030220 	.word	0x00030220

000d5354 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d5354:	b508      	push	{r3, lr}
   d5356:	4b02      	ldr	r3, [pc, #8]	; (d5360 <system_thread_set_state+0xc>)
   d5358:	681b      	ldr	r3, [r3, #0]
   d535a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d535c:	9301      	str	r3, [sp, #4]
   d535e:	bd08      	pop	{r3, pc}
   d5360:	00030220 	.word	0x00030220

000d5364 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d5364:	b508      	push	{r3, lr}
   d5366:	4b02      	ldr	r3, [pc, #8]	; (d5370 <system_thread_get_state+0xc>)
   d5368:	681b      	ldr	r3, [r3, #0]
   d536a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d536c:	9301      	str	r3, [sp, #4]
   d536e:	bd08      	pop	{r3, pc}
   d5370:	00030220 	.word	0x00030220

000d5374 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5374:	b508      	push	{r3, lr}
   d5376:	4b03      	ldr	r3, [pc, #12]	; (d5384 <system_ctrl_set_app_request_handler+0x10>)
   d5378:	681b      	ldr	r3, [r3, #0]
   d537a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d537e:	9301      	str	r3, [sp, #4]
   d5380:	bd08      	pop	{r3, pc}
   d5382:	0000      	.short	0x0000
   d5384:	00030220 	.word	0x00030220

000d5388 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5388:	b508      	push	{r3, lr}
   d538a:	4b03      	ldr	r3, [pc, #12]	; (d5398 <system_ctrl_set_result+0x10>)
   d538c:	681b      	ldr	r3, [r3, #0]
   d538e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5392:	9301      	str	r3, [sp, #4]
   d5394:	bd08      	pop	{r3, pc}
   d5396:	0000      	.short	0x0000
   d5398:	00030220 	.word	0x00030220

000d539c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d539c:	b508      	push	{r3, lr}
   d539e:	4b02      	ldr	r3, [pc, #8]	; (d53a8 <spark_process+0xc>)
   d53a0:	681b      	ldr	r3, [r3, #0]
   d53a2:	689b      	ldr	r3, [r3, #8]
   d53a4:	9301      	str	r3, [sp, #4]
   d53a6:	bd08      	pop	{r3, pc}
   d53a8:	00030244 	.word	0x00030244

000d53ac <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d53ac:	b508      	push	{r3, lr}
   d53ae:	4b02      	ldr	r3, [pc, #8]	; (d53b8 <spark_cloud_flag_connected+0xc>)
   d53b0:	681b      	ldr	r3, [r3, #0]
   d53b2:	695b      	ldr	r3, [r3, #20]
   d53b4:	9301      	str	r3, [sp, #4]
   d53b6:	bd08      	pop	{r3, pc}
   d53b8:	00030244 	.word	0x00030244

000d53bc <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d53bc:	b508      	push	{r3, lr}
   d53be:	4b02      	ldr	r3, [pc, #8]	; (d53c8 <spark_sync_time_pending+0xc>)
   d53c0:	681b      	ldr	r3, [r3, #0]
   d53c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d53c4:	9301      	str	r3, [sp, #4]
   d53c6:	bd08      	pop	{r3, pc}
   d53c8:	00030244 	.word	0x00030244

000d53cc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d53cc:	b508      	push	{r3, lr}
   d53ce:	4b02      	ldr	r3, [pc, #8]	; (d53d8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d53d0:	681b      	ldr	r3, [r3, #0]
   d53d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d53d4:	9301      	str	r3, [sp, #4]
   d53d6:	bd08      	pop	{r3, pc}
   d53d8:	00030244 	.word	0x00030244

000d53dc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d53dc:	b508      	push	{r3, lr}
   d53de:	4b02      	ldr	r3, [pc, #8]	; (d53e8 <network_connect+0xc>)
   d53e0:	681b      	ldr	r3, [r3, #0]
   d53e2:	685b      	ldr	r3, [r3, #4]
   d53e4:	9301      	str	r3, [sp, #4]
   d53e6:	bd08      	pop	{r3, pc}
   d53e8:	00030240 	.word	0x00030240

000d53ec <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d53ec:	b508      	push	{r3, lr}
   d53ee:	4b02      	ldr	r3, [pc, #8]	; (d53f8 <network_connecting+0xc>)
   d53f0:	681b      	ldr	r3, [r3, #0]
   d53f2:	689b      	ldr	r3, [r3, #8]
   d53f4:	9301      	str	r3, [sp, #4]
   d53f6:	bd08      	pop	{r3, pc}
   d53f8:	00030240 	.word	0x00030240

000d53fc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d53fc:	b508      	push	{r3, lr}
   d53fe:	4b02      	ldr	r3, [pc, #8]	; (d5408 <network_disconnect+0xc>)
   d5400:	681b      	ldr	r3, [r3, #0]
   d5402:	68db      	ldr	r3, [r3, #12]
   d5404:	9301      	str	r3, [sp, #4]
   d5406:	bd08      	pop	{r3, pc}
   d5408:	00030240 	.word	0x00030240

000d540c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d540c:	b508      	push	{r3, lr}
   d540e:	4b02      	ldr	r3, [pc, #8]	; (d5418 <network_ready+0xc>)
   d5410:	681b      	ldr	r3, [r3, #0]
   d5412:	691b      	ldr	r3, [r3, #16]
   d5414:	9301      	str	r3, [sp, #4]
   d5416:	bd08      	pop	{r3, pc}
   d5418:	00030240 	.word	0x00030240

000d541c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d541c:	b508      	push	{r3, lr}
   d541e:	4b02      	ldr	r3, [pc, #8]	; (d5428 <network_on+0xc>)
   d5420:	681b      	ldr	r3, [r3, #0]
   d5422:	695b      	ldr	r3, [r3, #20]
   d5424:	9301      	str	r3, [sp, #4]
   d5426:	bd08      	pop	{r3, pc}
   d5428:	00030240 	.word	0x00030240

000d542c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d542c:	b508      	push	{r3, lr}
   d542e:	4b02      	ldr	r3, [pc, #8]	; (d5438 <network_off+0xc>)
   d5430:	681b      	ldr	r3, [r3, #0]
   d5432:	699b      	ldr	r3, [r3, #24]
   d5434:	9301      	str	r3, [sp, #4]
   d5436:	bd08      	pop	{r3, pc}
   d5438:	00030240 	.word	0x00030240

000d543c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d543c:	b508      	push	{r3, lr}
   d543e:	4b02      	ldr	r3, [pc, #8]	; (d5448 <network_listen+0xc>)
   d5440:	681b      	ldr	r3, [r3, #0]
   d5442:	69db      	ldr	r3, [r3, #28]
   d5444:	9301      	str	r3, [sp, #4]
   d5446:	bd08      	pop	{r3, pc}
   d5448:	00030240 	.word	0x00030240

000d544c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d544c:	b508      	push	{r3, lr}
   d544e:	4b02      	ldr	r3, [pc, #8]	; (d5458 <network_listening+0xc>)
   d5450:	681b      	ldr	r3, [r3, #0]
   d5452:	6a1b      	ldr	r3, [r3, #32]
   d5454:	9301      	str	r3, [sp, #4]
   d5456:	bd08      	pop	{r3, pc}
   d5458:	00030240 	.word	0x00030240

000d545c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d545c:	b508      	push	{r3, lr}
   d545e:	4b02      	ldr	r3, [pc, #8]	; (d5468 <network_set_listen_timeout+0xc>)
   d5460:	681b      	ldr	r3, [r3, #0]
   d5462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5464:	9301      	str	r3, [sp, #4]
   d5466:	bd08      	pop	{r3, pc}
   d5468:	00030240 	.word	0x00030240

000d546c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d546c:	b508      	push	{r3, lr}
   d546e:	4b02      	ldr	r3, [pc, #8]	; (d5478 <network_get_listen_timeout+0xc>)
   d5470:	681b      	ldr	r3, [r3, #0]
   d5472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5474:	9301      	str	r3, [sp, #4]
   d5476:	bd08      	pop	{r3, pc}
   d5478:	00030240 	.word	0x00030240

000d547c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d547c:	b508      	push	{r3, lr}
   d547e:	4b02      	ldr	r3, [pc, #8]	; (d5488 <network_is_on+0xc>)
   d5480:	681b      	ldr	r3, [r3, #0]
   d5482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5484:	9301      	str	r3, [sp, #4]
   d5486:	bd08      	pop	{r3, pc}
   d5488:	00030240 	.word	0x00030240

000d548c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d548c:	b508      	push	{r3, lr}
   d548e:	4b02      	ldr	r3, [pc, #8]	; (d5498 <network_is_off+0xc>)
   d5490:	681b      	ldr	r3, [r3, #0]
   d5492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5494:	9301      	str	r3, [sp, #4]
   d5496:	bd08      	pop	{r3, pc}
   d5498:	00030240 	.word	0x00030240

000d549c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d549c:	b508      	push	{r3, lr}
   d549e:	4b02      	ldr	r3, [pc, #8]	; (d54a8 <malloc+0xc>)
   d54a0:	681b      	ldr	r3, [r3, #0]
   d54a2:	681b      	ldr	r3, [r3, #0]
   d54a4:	9301      	str	r3, [sp, #4]
   d54a6:	bd08      	pop	{r3, pc}
   d54a8:	0003021c 	.word	0x0003021c

000d54ac <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d54ac:	b508      	push	{r3, lr}
   d54ae:	4b02      	ldr	r3, [pc, #8]	; (d54b8 <free+0xc>)
   d54b0:	681b      	ldr	r3, [r3, #0]
   d54b2:	685b      	ldr	r3, [r3, #4]
   d54b4:	9301      	str	r3, [sp, #4]
   d54b6:	bd08      	pop	{r3, pc}
   d54b8:	0003021c 	.word	0x0003021c

000d54bc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d54bc:	b508      	push	{r3, lr}
   d54be:	4b02      	ldr	r3, [pc, #8]	; (d54c8 <realloc+0xc>)
   d54c0:	681b      	ldr	r3, [r3, #0]
   d54c2:	689b      	ldr	r3, [r3, #8]
   d54c4:	9301      	str	r3, [sp, #4]
   d54c6:	bd08      	pop	{r3, pc}
   d54c8:	0003021c 	.word	0x0003021c

000d54cc <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d54cc:	b508      	push	{r3, lr}
   d54ce:	4b02      	ldr	r3, [pc, #8]	; (d54d8 <vsnprintf+0xc>)
   d54d0:	681b      	ldr	r3, [r3, #0]
   d54d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d54d4:	9301      	str	r3, [sp, #4]
   d54d6:	bd08      	pop	{r3, pc}
   d54d8:	0003021c 	.word	0x0003021c

000d54dc <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d54dc:	b508      	push	{r3, lr}
   d54de:	4b02      	ldr	r3, [pc, #8]	; (d54e8 <newlib_impure_ptr_callback+0xc>)
   d54e0:	681b      	ldr	r3, [r3, #0]
   d54e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d54e4:	9301      	str	r3, [sp, #4]
   d54e6:	bd08      	pop	{r3, pc}
   d54e8:	0003021c 	.word	0x0003021c

000d54ec <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d54ec:	2100      	movs	r1, #0
   d54ee:	f7ff bf29 	b.w	d5344 <system_delay_ms>
	...

000d54f4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d54f4:	4802      	ldr	r0, [pc, #8]	; (d5500 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d54f6:	2300      	movs	r3, #0
   d54f8:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d54fa:	f7ff bd8b 	b.w	d5014 <os_mutex_recursive_create>
   d54fe:	bf00      	nop
   d5500:	2003e5a8 	.word	0x2003e5a8

000d5504 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5504:	2200      	movs	r2, #0
   d5506:	6840      	ldr	r0, [r0, #4]
   d5508:	4611      	mov	r1, r2
   d550a:	f7ff bf9f 	b.w	d544c <network_listening>

000d550e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d550e:	2200      	movs	r2, #0
   d5510:	6840      	ldr	r0, [r0, #4]
   d5512:	4611      	mov	r1, r2
   d5514:	f7ff bfaa 	b.w	d546c <network_get_listen_timeout>

000d5518 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5518:	6840      	ldr	r0, [r0, #4]
   d551a:	2200      	movs	r2, #0
   d551c:	f7ff bf9e 	b.w	d545c <network_set_listen_timeout>

000d5520 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5520:	6840      	ldr	r0, [r0, #4]
   d5522:	2200      	movs	r2, #0
   d5524:	f081 0101 	eor.w	r1, r1, #1
   d5528:	f7ff bf88 	b.w	d543c <network_listen>

000d552c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d552c:	2300      	movs	r3, #0
   d552e:	6840      	ldr	r0, [r0, #4]
   d5530:	461a      	mov	r2, r3
   d5532:	4619      	mov	r1, r3
   d5534:	f7ff bf7a 	b.w	d542c <network_off>

000d5538 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5538:	2300      	movs	r3, #0
   d553a:	6840      	ldr	r0, [r0, #4]
   d553c:	461a      	mov	r2, r3
   d553e:	4619      	mov	r1, r3
   d5540:	f7ff bf6c 	b.w	d541c <network_on>

000d5544 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5544:	2200      	movs	r2, #0
   d5546:	6840      	ldr	r0, [r0, #4]
   d5548:	4611      	mov	r1, r2
   d554a:	f7ff bf5f 	b.w	d540c <network_ready>

000d554e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d554e:	2200      	movs	r2, #0
   d5550:	6840      	ldr	r0, [r0, #4]
   d5552:	4611      	mov	r1, r2
   d5554:	f7ff bf4a 	b.w	d53ec <network_connecting>

000d5558 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5558:	6840      	ldr	r0, [r0, #4]
   d555a:	2200      	movs	r2, #0
   d555c:	2102      	movs	r1, #2
   d555e:	f7ff bf4d 	b.w	d53fc <network_disconnect>

000d5562 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5562:	2300      	movs	r3, #0
   d5564:	6840      	ldr	r0, [r0, #4]
   d5566:	461a      	mov	r2, r3
   d5568:	f7ff bf38 	b.w	d53dc <network_connect>

000d556c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d556c:	4b02      	ldr	r3, [pc, #8]	; (d5578 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d556e:	2203      	movs	r2, #3
   d5570:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5572:	4a02      	ldr	r2, [pc, #8]	; (d557c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5574:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d5576:	4770      	bx	lr
   d5578:	2003e5ac 	.word	0x2003e5ac
   d557c:	000d72d0 	.word	0x000d72d0

000d5580 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d5580:	4770      	bx	lr

000d5582 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5582:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5584:	4606      	mov	r6, r0
   d5586:	4615      	mov	r5, r2
   d5588:	460c      	mov	r4, r1
   d558a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d558c:	42bc      	cmp	r4, r7
   d558e:	d006      	beq.n	d559e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5590:	6833      	ldr	r3, [r6, #0]
   d5592:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5596:	689b      	ldr	r3, [r3, #8]
   d5598:	4630      	mov	r0, r6
   d559a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d559c:	e7f6      	b.n	d558c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d559e:	4628      	mov	r0, r5
   d55a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d55a2 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d55a2:	7c00      	ldrb	r0, [r0, #16]
   d55a4:	2200      	movs	r2, #0
   d55a6:	f7ff bd95 	b.w	d50d4 <hal_i2c_write>

000d55aa <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d55aa:	7c00      	ldrb	r0, [r0, #16]
   d55ac:	2100      	movs	r1, #0
   d55ae:	f7ff bd99 	b.w	d50e4 <hal_i2c_available>

000d55b2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d55b2:	7c00      	ldrb	r0, [r0, #16]
   d55b4:	2100      	movs	r1, #0
   d55b6:	f7ff bd9d 	b.w	d50f4 <hal_i2c_read>

000d55ba <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d55ba:	7c00      	ldrb	r0, [r0, #16]
   d55bc:	2100      	movs	r1, #0
   d55be:	f7ff bda1 	b.w	d5104 <hal_i2c_peek>

000d55c2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d55c2:	7c00      	ldrb	r0, [r0, #16]
   d55c4:	2100      	movs	r1, #0
   d55c6:	f7ff bda5 	b.w	d5114 <hal_i2c_flush>

000d55ca <_ZN7TwoWireD0Ev>:
   d55ca:	b510      	push	{r4, lr}
   d55cc:	2114      	movs	r1, #20
   d55ce:	4604      	mov	r4, r0
   d55d0:	f001 f880 	bl	d66d4 <_ZdlPvj>
   d55d4:	4620      	mov	r0, r4
   d55d6:	bd10      	pop	{r4, pc}

000d55d8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d55d8:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d55da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d55de:	4604      	mov	r4, r0
   d55e0:	4608      	mov	r0, r1
   d55e2:	2100      	movs	r1, #0
   d55e4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d55e8:	4b03      	ldr	r3, [pc, #12]	; (d55f8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d55ea:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d55ec:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d55ee:	4611      	mov	r1, r2
   d55f0:	f7ff fda0 	bl	d5134 <hal_i2c_init>
}
   d55f4:	4620      	mov	r0, r4
   d55f6:	bd10      	pop	{r4, pc}
   d55f8:	000d730c 	.word	0x000d730c

000d55fc <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d55fc:	f7ff bd5a 	b.w	d50b4 <HAL_Interrupts_Disable_All>

000d5600 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d5600:	f7ff bd50 	b.w	d50a4 <HAL_Interrupts_Enable_All>

000d5604 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5604:	4770      	bx	lr

000d5606 <_ZN9IPAddressD0Ev>:
   d5606:	b510      	push	{r4, lr}
   d5608:	2118      	movs	r1, #24
   d560a:	4604      	mov	r4, r0
   d560c:	f001 f862 	bl	d66d4 <_ZdlPvj>
   d5610:	4620      	mov	r0, r4
   d5612:	bd10      	pop	{r4, pc}

000d5614 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5614:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5616:	7d03      	ldrb	r3, [r0, #20]
   d5618:	2b06      	cmp	r3, #6
{
   d561a:	b08d      	sub	sp, #52	; 0x34
   d561c:	460e      	mov	r6, r1
   d561e:	f100 0704 	add.w	r7, r0, #4
   d5622:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d5626:	d012      	beq.n	d564e <_ZNK9IPAddress7printToER5Print+0x3a>
   d5628:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d562c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5630:	220a      	movs	r2, #10
   d5632:	4630      	mov	r0, r6
   d5634:	f000 fbe5 	bl	d5e02 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5638:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d563a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d563c:	d019      	beq.n	d5672 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d563e:	2c00      	cmp	r4, #0
   d5640:	d0f4      	beq.n	d562c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d5642:	212e      	movs	r1, #46	; 0x2e
   d5644:	4630      	mov	r0, r6
   d5646:	f000 fbcd 	bl	d5de4 <_ZN5Print5printEc>
   d564a:	4404      	add	r4, r0
   d564c:	e7ee      	b.n	d562c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d564e:	232f      	movs	r3, #47	; 0x2f
   d5650:	466a      	mov	r2, sp
   d5652:	4639      	mov	r1, r7
   d5654:	200a      	movs	r0, #10
		buf[0] = 0;
   d5656:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d565a:	f7ff fd73 	bl	d5144 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d565e:	4668      	mov	r0, sp
   d5660:	f001 fca0 	bl	d6fa4 <strlen>
   d5664:	6833      	ldr	r3, [r6, #0]
   d5666:	4602      	mov	r2, r0
   d5668:	68db      	ldr	r3, [r3, #12]
   d566a:	4669      	mov	r1, sp
   d566c:	4630      	mov	r0, r6
   d566e:	4798      	blx	r3
   d5670:	4604      	mov	r4, r0
    }
    return n;
}
   d5672:	4620      	mov	r0, r4
   d5674:	b00d      	add	sp, #52	; 0x34
   d5676:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5678 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d5678:	b510      	push	{r4, lr}
   d567a:	4b05      	ldr	r3, [pc, #20]	; (d5690 <_ZN9IPAddressC1Ev+0x18>)
   d567c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d567e:	2211      	movs	r2, #17
   d5680:	f840 3b04 	str.w	r3, [r0], #4
   d5684:	2100      	movs	r1, #0
   d5686:	f001 fc4f 	bl	d6f28 <memset>
}
   d568a:	4620      	mov	r0, r4
   d568c:	bd10      	pop	{r4, pc}
   d568e:	bf00      	nop
   d5690:	000d7334 	.word	0x000d7334

000d5694 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d5694:	4603      	mov	r3, r0
   d5696:	4a07      	ldr	r2, [pc, #28]	; (d56b4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5698:	b510      	push	{r4, lr}
   d569a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d569e:	f101 0210 	add.w	r2, r1, #16
   d56a2:	f851 4b04 	ldr.w	r4, [r1], #4
   d56a6:	f843 4b04 	str.w	r4, [r3], #4
   d56aa:	4291      	cmp	r1, r2
   d56ac:	d1f9      	bne.n	d56a2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d56ae:	780a      	ldrb	r2, [r1, #0]
   d56b0:	701a      	strb	r2, [r3, #0]
}
   d56b2:	bd10      	pop	{r4, pc}
   d56b4:	000d7334 	.word	0x000d7334

000d56b8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d56b8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d56ba:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d56be:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d56c2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d56c6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d56ca:	2304      	movs	r3, #4
   d56cc:	6041      	str	r1, [r0, #4]
   d56ce:	7503      	strb	r3, [r0, #20]
}
   d56d0:	bd10      	pop	{r4, pc}

000d56d2 <_ZN9IPAddressaSEPKh>:
{
   d56d2:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d56d4:	78cb      	ldrb	r3, [r1, #3]
   d56d6:	9300      	str	r3, [sp, #0]
   d56d8:	788b      	ldrb	r3, [r1, #2]
   d56da:	784a      	ldrb	r2, [r1, #1]
   d56dc:	7809      	ldrb	r1, [r1, #0]
   d56de:	f7ff ffeb 	bl	d56b8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d56e2:	b002      	add	sp, #8
   d56e4:	bd10      	pop	{r4, pc}

000d56e6 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   d56e6:	f100 0310 	add.w	r3, r0, #16
   d56ea:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d56ec:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d56f0:	2901      	cmp	r1, #1
   d56f2:	4618      	mov	r0, r3
   d56f4:	d108      	bne.n	d5708 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   d56f6:	f853 1c04 	ldr.w	r1, [r3, #-4]
   d56fa:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   d56fe:	3a01      	subs	r2, #1
   d5700:	f103 0310 	add.w	r3, r3, #16
   d5704:	d1f2      	bne.n	d56ec <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   d5706:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   d5708:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d570a:	bf04      	itt	eq
   d570c:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   d5710:	1852      	addeq	r2, r2, r1
   d5712:	e7f4      	b.n	d56fe <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000d5714 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5714:	4770      	bx	lr

000d5716 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d5716:	2000      	movs	r0, #0
   d5718:	4770      	bx	lr

000d571a <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d571a:	b510      	push	{r4, lr}
   d571c:	2110      	movs	r1, #16
   d571e:	4604      	mov	r4, r0
   d5720:	f000 ffd8 	bl	d66d4 <_ZdlPvj>
   d5724:	4620      	mov	r0, r4
   d5726:	bd10      	pop	{r4, pc}

000d5728 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d5728:	b508      	push	{r3, lr}
      { delete this; }
   d572a:	f7ff fff6 	bl	d571a <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d572e:	bd08      	pop	{r3, pc}

000d5730 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d5730:	b510      	push	{r4, lr}
      { delete _M_ptr; }
   d5732:	68c4      	ldr	r4, [r0, #12]
   d5734:	b17c      	cbz	r4, d5756 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
            json(nullptr),
            freeJson(false) {
    }

    ~JSONData() {
        delete[] tokens;
   d5736:	6820      	ldr	r0, [r4, #0]
   d5738:	b108      	cbz	r0, d573e <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0xe>
   d573a:	f7fe fcb2 	bl	d40a2 <_ZdaPv>
        if (freeJson) {
   d573e:	7a23      	ldrb	r3, [r4, #8]
   d5740:	b11b      	cbz	r3, d574a <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
            delete[] json;
   d5742:	6860      	ldr	r0, [r4, #4]
   d5744:	b108      	cbz	r0, d574a <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
   d5746:	f7fe fcac 	bl	d40a2 <_ZdaPv>
   d574a:	4620      	mov	r0, r4
   d574c:	210c      	movs	r1, #12
   d574e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5752:	f000 bfbf 	b.w	d66d4 <_ZdlPvj>
   d5756:	bd10      	pop	{r4, pc}

000d5758 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5758:	b510      	push	{r4, lr}
          _M_dispose();
   d575a:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d575c:	4604      	mov	r4, r0
          _M_dispose();
   d575e:	689b      	ldr	r3, [r3, #8]
   d5760:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5762:	68a3      	ldr	r3, [r4, #8]
   d5764:	3b01      	subs	r3, #1
   d5766:	60a3      	str	r3, [r4, #8]
   d5768:	b92b      	cbnz	r3, d5776 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d576a:	6823      	ldr	r3, [r4, #0]
   d576c:	4620      	mov	r0, r4
   d576e:	68db      	ldr	r3, [r3, #12]
    }
   d5770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d5774:	4718      	bx	r3
    }
   d5776:	bd10      	pop	{r4, pc}

000d5778 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   d5778:	b538      	push	{r3, r4, r5, lr}
   d577a:	680b      	ldr	r3, [r1, #0]
   d577c:	6003      	str	r3, [r0, #0]
   d577e:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   d5780:	6843      	ldr	r3, [r0, #4]
   d5782:	429d      	cmp	r5, r3
    class __shared_ptr
   d5784:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   d5786:	d00c      	beq.n	d57a2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   d5788:	b115      	cbz	r5, d5790 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   d578a:	686b      	ldr	r3, [r5, #4]
   d578c:	3301      	adds	r3, #1
   d578e:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   d5790:	6860      	ldr	r0, [r4, #4]
   d5792:	b128      	cbz	r0, d57a0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   d5794:	6843      	ldr	r3, [r0, #4]
   d5796:	3b01      	subs	r3, #1
   d5798:	6043      	str	r3, [r0, #4]
   d579a:	b90b      	cbnz	r3, d57a0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   d579c:	f7ff ffdc 	bl	d5758 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d57a0:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   d57a2:	4620      	mov	r0, r4
   d57a4:	bd38      	pop	{r3, r4, r5, pc}

000d57a6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
        }
    }
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d57a6:	460b      	mov	r3, r1
   d57a8:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   d57aa:	2200      	movs	r2, #0
   d57ac:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   d57ae:	e9c0 2200 	strd	r2, r2, [r0]
   d57b2:	4604      	mov	r4, r0
        JSONValue() {
    if (t) {
        t_ = t;
   d57b4:	6083      	str	r3, [r0, #8]
    if (t) {
   d57b6:	b90b      	cbnz	r3, d57bc <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
        d_ = d;
    }
}
   d57b8:	4620      	mov	r0, r4
   d57ba:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   d57bc:	f7ff ffdc 	bl	d5778 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   d57c0:	e7fa      	b.n	d57b8 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000d57c2 <_ZNK5spark9JSONValue4typeEv>:
        return 0.0;
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
   d57c2:	6883      	ldr	r3, [r0, #8]
   d57c4:	b1eb      	cbz	r3, d5802 <_ZNK5spark9JSONValue4typeEv+0x40>
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
   d57c6:	781a      	ldrb	r2, [r3, #0]
   d57c8:	2a03      	cmp	r2, #3
   d57ca:	d81a      	bhi.n	d5802 <_ZNK5spark9JSONValue4typeEv+0x40>
   d57cc:	e8df f002 	tbb	[pc, r2]
   d57d0:	1b021704 	.word	0x1b021704
   d57d4:	2005      	movs	r0, #5
   d57d6:	4770      	bx	lr
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
   d57d8:	6802      	ldr	r2, [r0, #0]
   d57da:	685b      	ldr	r3, [r3, #4]
   d57dc:	6852      	ldr	r2, [r2, #4]
   d57de:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d57e0:	282d      	cmp	r0, #45	; 0x2d
   d57e2:	d012      	beq.n	d580a <_ZNK5spark9JSONValue4typeEv+0x48>
   d57e4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d57e8:	2b09      	cmp	r3, #9
   d57ea:	d90e      	bls.n	d580a <_ZNK5spark9JSONValue4typeEv+0x48>
            return JSON_TYPE_NUMBER;
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d57ec:	2874      	cmp	r0, #116	; 0x74
   d57ee:	d00e      	beq.n	d580e <_ZNK5spark9JSONValue4typeEv+0x4c>
   d57f0:	2866      	cmp	r0, #102	; 0x66
   d57f2:	d00c      	beq.n	d580e <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   d57f4:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d57f8:	4258      	negs	r0, r3
   d57fa:	4158      	adcs	r0, r3
   d57fc:	4770      	bx	lr
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
   d57fe:	2006      	movs	r0, #6
   d5800:	4770      	bx	lr
    default:
        return JSON_TYPE_INVALID;
   d5802:	2000      	movs	r0, #0
   d5804:	4770      	bx	lr
        return JSON_TYPE_STRING;
   d5806:	2004      	movs	r0, #4
   d5808:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   d580a:	2003      	movs	r0, #3
   d580c:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   d580e:	2002      	movs	r0, #2
    }
}
   d5810:	4770      	bx	lr
	...

000d5814 <_ZNK5spark9JSONValue6toBoolEv>:
bool spark::JSONValue::toBool() const {
   d5814:	b510      	push	{r4, lr}
   d5816:	4604      	mov	r4, r0
    switch (type()) {
   d5818:	f7ff ffd3 	bl	d57c2 <_ZNK5spark9JSONValue4typeEv>
   d581c:	2803      	cmp	r0, #3
   d581e:	d00d      	beq.n	d583c <_ZNK5spark9JSONValue6toBoolEv+0x28>
   d5820:	2804      	cmp	r0, #4
   d5822:	d01e      	beq.n	d5862 <_ZNK5spark9JSONValue6toBoolEv+0x4e>
   d5824:	2802      	cmp	r0, #2
   d5826:	d12b      	bne.n	d5880 <_ZNK5spark9JSONValue6toBoolEv+0x6c>
        const char* const s = d_->json + t_->start;
   d5828:	6822      	ldr	r2, [r4, #0]
   d582a:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d582c:	6852      	ldr	r2, [r2, #4]
   d582e:	685b      	ldr	r3, [r3, #4]
   d5830:	5cd0      	ldrb	r0, [r2, r3]
   d5832:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d5836:	4258      	negs	r0, r3
   d5838:	4158      	adcs	r0, r3
}
   d583a:	bd10      	pop	{r4, pc}
        const char* const s = d_->json + t_->start;
   d583c:	68a3      	ldr	r3, [r4, #8]
   d583e:	6822      	ldr	r2, [r4, #0]
   d5840:	685b      	ldr	r3, [r3, #4]
   d5842:	6854      	ldr	r4, [r2, #4]
   d5844:	441c      	add	r4, r3
        if (*s == '\0' || strcmp(s, "false") == 0 || strcmp(s, "0") == 0 || strcmp(s, "0.0") == 0) {
   d5846:	490f      	ldr	r1, [pc, #60]	; (d5884 <_ZNK5spark9JSONValue6toBoolEv+0x70>)
   d5848:	4620      	mov	r0, r4
   d584a:	f001 fb99 	bl	d6f80 <strcmp>
   d584e:	2800      	cmp	r0, #0
   d5850:	d0f3      	beq.n	d583a <_ZNK5spark9JSONValue6toBoolEv+0x26>
   d5852:	490d      	ldr	r1, [pc, #52]	; (d5888 <_ZNK5spark9JSONValue6toBoolEv+0x74>)
   d5854:	4620      	mov	r0, r4
   d5856:	f001 fb93 	bl	d6f80 <strcmp>
   d585a:	3800      	subs	r0, #0
   d585c:	bf18      	it	ne
   d585e:	2001      	movne	r0, #1
   d5860:	e7eb      	b.n	d583a <_ZNK5spark9JSONValue6toBoolEv+0x26>
        const char* const s = d_->json + t_->start;
   d5862:	6822      	ldr	r2, [r4, #0]
   d5864:	68a3      	ldr	r3, [r4, #8]
   d5866:	6852      	ldr	r2, [r2, #4]
   d5868:	685b      	ldr	r3, [r3, #4]
        if (*s == '\0' || strcmp(s, "false") == 0 || strcmp(s, "0") == 0 || strcmp(s, "0.0") == 0) {
   d586a:	5cd0      	ldrb	r0, [r2, r3]
        const char* const s = d_->json + t_->start;
   d586c:	18d4      	adds	r4, r2, r3
        if (*s == '\0' || strcmp(s, "false") == 0 || strcmp(s, "0") == 0 || strcmp(s, "0.0") == 0) {
   d586e:	2800      	cmp	r0, #0
   d5870:	d0e3      	beq.n	d583a <_ZNK5spark9JSONValue6toBoolEv+0x26>
   d5872:	4906      	ldr	r1, [pc, #24]	; (d588c <_ZNK5spark9JSONValue6toBoolEv+0x78>)
   d5874:	4620      	mov	r0, r4
   d5876:	f001 fb83 	bl	d6f80 <strcmp>
   d587a:	2800      	cmp	r0, #0
   d587c:	d1e3      	bne.n	d5846 <_ZNK5spark9JSONValue6toBoolEv+0x32>
   d587e:	e7dc      	b.n	d583a <_ZNK5spark9JSONValue6toBoolEv+0x26>
    switch (type()) {
   d5880:	2000      	movs	r0, #0
   d5882:	e7da      	b.n	d583a <_ZNK5spark9JSONValue6toBoolEv+0x26>
   d5884:	000d7342 	.word	0x000d7342
   d5888:	000d7340 	.word	0x000d7340
   d588c:	000d7344 	.word	0x000d7344

000d5890 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   d5890:	b510      	push	{r4, lr}
   d5892:	4604      	mov	r4, r0
    switch (type()) {
   d5894:	f7ff ff95 	bl	d57c2 <_ZNK5spark9JSONValue4typeEv>
   d5898:	2802      	cmp	r0, #2
   d589a:	d00e      	beq.n	d58ba <_ZNK5spark9JSONValue5toIntEv+0x2a>
   d589c:	1ec3      	subs	r3, r0, #3
   d589e:	b2db      	uxtb	r3, r3
   d58a0:	2b01      	cmp	r3, #1
   d58a2:	d814      	bhi.n	d58ce <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   d58a4:	6822      	ldr	r2, [r4, #0]
   d58a6:	68a3      	ldr	r3, [r4, #8]
   d58a8:	6850      	ldr	r0, [r2, #4]
   d58aa:	685b      	ldr	r3, [r3, #4]
}
   d58ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   d58b0:	220a      	movs	r2, #10
   d58b2:	2100      	movs	r1, #0
   d58b4:	4418      	add	r0, r3
   d58b6:	f001 bbf7 	b.w	d70a8 <strtol>
        const char* const s = d_->json + t_->start;
   d58ba:	6822      	ldr	r2, [r4, #0]
   d58bc:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d58be:	6852      	ldr	r2, [r2, #4]
   d58c0:	685b      	ldr	r3, [r3, #4]
   d58c2:	5cd0      	ldrb	r0, [r2, r3]
   d58c4:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d58c8:	4258      	negs	r0, r3
   d58ca:	4158      	adcs	r0, r3
}
   d58cc:	bd10      	pop	{r4, pc}
    switch (type()) {
   d58ce:	2000      	movs	r0, #0
   d58d0:	e7fc      	b.n	d58cc <_ZNK5spark9JSONValue5toIntEv+0x3c>
	...

000d58d4 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>:
        return JSONValue();
    }
    return JSONValue(d->tokens, d);
}

bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   d58d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d58d8:	4699      	mov	r9, r3
   d58da:	b088      	sub	sp, #32
    jsmn_parser parser;
    parser.size = sizeof(jsmn_parser);
   d58dc:	2310      	movs	r3, #16
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   d58de:	4607      	mov	r7, r0
   d58e0:	4688      	mov	r8, r1
    jsmn_init(&parser, nullptr);
   d58e2:	eb0d 0003 	add.w	r0, sp, r3
   d58e6:	2100      	movs	r1, #0
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   d58e8:	4692      	mov	sl, r2
    parser.size = sizeof(jsmn_parser);
   d58ea:	9304      	str	r3, [sp, #16]
    int nExt = -1;
    int n = jsmn_parse_deprecated(&parser, json, size, nullptr, 0, &nExt); // Get number of tokens
   d58ec:	2400      	movs	r4, #0
    jsmn_init(&parser, nullptr);
   d58ee:	f7ff fd09 	bl	d5304 <jsmn_init>
    int n = jsmn_parse_deprecated(&parser, json, size, nullptr, 0, &nExt); // Get number of tokens
   d58f2:	ab03      	add	r3, sp, #12
   d58f4:	9301      	str	r3, [sp, #4]
    int nExt = -1;
   d58f6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    int n = jsmn_parse_deprecated(&parser, json, size, nullptr, 0, &nExt); // Get number of tokens
   d58fa:	9400      	str	r4, [sp, #0]
   d58fc:	4623      	mov	r3, r4
   d58fe:	4642      	mov	r2, r8
   d5900:	4639      	mov	r1, r7
   d5902:	a804      	add	r0, sp, #16
    int nExt = -1;
   d5904:	9603      	str	r6, [sp, #12]
    int n = jsmn_parse_deprecated(&parser, json, size, nullptr, 0, &nExt); // Get number of tokens
   d5906:	f7ff fd05 	bl	d5314 <jsmn_parse_deprecated>
    if (n <= 0) {
   d590a:	1e05      	subs	r5, r0, #0
   d590c:	dd27      	ble.n	d595e <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x8a>
        return false; // Parsing error
    }
    if (nExt > n) {
   d590e:	9803      	ldr	r0, [sp, #12]
        n = nExt;
    }
    std::unique_ptr<jsmntok_t[]> t(new(std::nothrow) jsmntok_t[n]);
   d5910:	4914      	ldr	r1, [pc, #80]	; (d5964 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x90>)
   d5912:	4285      	cmp	r5, r0
   d5914:	bfb8      	it	lt
   d5916:	4605      	movlt	r5, r0
   d5918:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
   d591c:	bfac      	ite	ge
   d591e:	4630      	movge	r0, r6
   d5920:	0128      	lsllt	r0, r5, #4
   d5922:	f000 fedb 	bl	d66dc <_ZnajRKSt9nothrow_t>
    if (!t) {
   d5926:	4606      	mov	r6, r0
   d5928:	b198      	cbz	r0, d5952 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x7e>
        return false;
    }
    jsmn_init(&parser, nullptr); // Reset parser
   d592a:	2100      	movs	r1, #0
   d592c:	a804      	add	r0, sp, #16
    if (jsmn_parse_deprecated(&parser, json, size, t.get(), n, nullptr) <= 0) {
   d592e:	2400      	movs	r4, #0
    jsmn_init(&parser, nullptr); // Reset parser
   d5930:	f7ff fce8 	bl	d5304 <jsmn_init>
    if (jsmn_parse_deprecated(&parser, json, size, t.get(), n, nullptr) <= 0) {
   d5934:	e9cd 5400 	strd	r5, r4, [sp]
   d5938:	4633      	mov	r3, r6
   d593a:	4642      	mov	r2, r8
   d593c:	4639      	mov	r1, r7
   d593e:	a804      	add	r0, sp, #16
   d5940:	f7ff fce8 	bl	d5314 <jsmn_parse_deprecated>
   d5944:	42a0      	cmp	r0, r4
   d5946:	dd07      	ble.n	d5958 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x84>
        return false;
    }
    *tokens = t.release();
   d5948:	f8ca 6000 	str.w	r6, [sl]
    *count = n;
    return true;
   d594c:	2001      	movs	r0, #1
    *count = n;
   d594e:	f8c9 5000 	str.w	r5, [r9]
}
   d5952:	b008      	add	sp, #32
   d5954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      typename enable_if<is_convertible<_Up(*)[], _Tp(*)[]>::value>::type
	operator()(_Up* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5958:	4630      	mov	r0, r6
   d595a:	f7fe fba2 	bl	d40a2 <_ZdaPv>
      }
   d595e:	4620      	mov	r0, r4
   d5960:	e7f7      	b.n	d5952 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x7e>
   d5962:	bf00      	nop
   d5964:	000d7460 	.word	0x000d7460

000d5968 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>:
        ++t;
    }
    return true;
}

bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   d5968:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    char *str = json + t->start; // Destination string
   d596c:	6843      	ldr	r3, [r0, #4]
    const char* const end = json + t->end; // End of the source string
   d596e:	6886      	ldr	r6, [r0, #8]
    char *str = json + t->start; // Destination string
   d5970:	440b      	add	r3, r1
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   d5972:	4688      	mov	r8, r1
    const char* const end = json + t->end; // End of the source string
   d5974:	440e      	add	r6, r1
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   d5976:	4607      	mov	r7, r0
    const char *s1 = str; // Beginning of an unescaped sequence
    const char *s = s1;
   d5978:	461c      	mov	r4, r3
    const char *s1 = str; // Beginning of an unescaped sequence
   d597a:	4619      	mov	r1, r3
                    break;
                case 'f': // Form feed
                    *str = 0x0c;
                    break;
                case 'r': // Carriage return
                    *str = 0x0d;
   d597c:	f04f 090d 	mov.w	r9, #13
                    *str = 0x09;
   d5980:	f04f 0a09 	mov.w	sl, #9
    while (s != end) {
   d5984:	42b4      	cmp	r4, r6
   d5986:	d063      	beq.n	d5a50 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xe8>
        if (*s == '\\') {
   d5988:	4625      	mov	r5, r4
   d598a:	f815 2b01 	ldrb.w	r2, [r5], #1
   d598e:	2a5c      	cmp	r2, #92	; 0x5c
   d5990:	d12b      	bne.n	d59ea <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x82>
            if (s != s1) {
   d5992:	42a1      	cmp	r1, r4
   d5994:	d007      	beq.n	d59a6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x3e>
                const size_t n = s - s1;
   d5996:	eba4 0b01 	sub.w	fp, r4, r1
                memmove(str, s1, n); // Shift preceeding characters
   d599a:	4618      	mov	r0, r3
   d599c:	465a      	mov	r2, fp
   d599e:	f001 faa9 	bl	d6ef4 <memmove>
   d59a2:	4603      	mov	r3, r0
                str += n;
   d59a4:	445b      	add	r3, fp
            if (s == end) {
   d59a6:	42b5      	cmp	r5, r6
   d59a8:	d039      	beq.n	d5a1e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
            if (*s == 'u') { // Arbitrary character, e.g. "\u001f"
   d59aa:	7862      	ldrb	r2, [r4, #1]
   d59ac:	2a75      	cmp	r2, #117	; 0x75
   d59ae:	d12a      	bne.n	d5a06 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x9e>
                ++s;
   d59b0:	1ca2      	adds	r2, r4, #2
                if (end - s < 4) {
   d59b2:	1ab2      	subs	r2, r6, r2
   d59b4:	2a03      	cmp	r2, #3
   d59b6:	dd32      	ble.n	d5a1e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
    const char* const end = s + size;
   d59b8:	1da0      	adds	r0, r4, #6
   d59ba:	f104 0e05 	add.w	lr, r4, #5
    uint32_t v = 0;
   d59be:	f04f 0c00 	mov.w	ip, #0
    while (s != end) {
   d59c2:	45ae      	cmp	lr, r5
   d59c4:	d053      	beq.n	d5a6e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x106>
        const char c = *s;
   d59c6:	f815 1f01 	ldrb.w	r1, [r5, #1]!
        if (c >= '0' && c <= '9') {
   d59ca:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   d59ce:	fa5f fb82 	uxtb.w	fp, r2
   d59d2:	f1bb 0f09 	cmp.w	fp, #9
   d59d6:	d905      	bls.n	d59e4 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x7c>
        } else if (c >= 'a' && c <= 'f') {
   d59d8:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
   d59dc:	2a05      	cmp	r2, #5
   d59de:	d807      	bhi.n	d59f0 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x88>
            n = c - 'a' + 10;
   d59e0:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
        v = (v << 4) | n;
   d59e4:	ea42 1c0c 	orr.w	ip, r2, ip, lsl #4
    while (s != end) {
   d59e8:	e7eb      	b.n	d59c2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x5a>
   d59ea:	4628      	mov	r0, r5
   d59ec:	4604      	mov	r4, r0
   d59ee:	e7c9      	b.n	d5984 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x1c>
        } else if (c >= 'A' && c <= 'F') {
   d59f0:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
   d59f4:	2a05      	cmp	r2, #5
   d59f6:	d812      	bhi.n	d5a1e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
            n = c - 'A' + 10;
   d59f8:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
   d59fc:	e7f2      	b.n	d59e4 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x7c>
                    *str = u;
   d59fe:	f803 cb01 	strb.w	ip, [r3], #1
                    s1 += 6; // Skip escaped sequence
   d5a02:	4601      	mov	r1, r0
   d5a04:	e7f2      	b.n	d59ec <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>
                switch (*s) {
   d5a06:	2a6e      	cmp	r2, #110	; 0x6e
   d5a08:	d01c      	beq.n	d5a44 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xdc>
   d5a0a:	d80e      	bhi.n	d5a2a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xc2>
   d5a0c:	2a62      	cmp	r2, #98	; 0x62
   d5a0e:	d013      	beq.n	d5a38 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd0>
   d5a10:	d807      	bhi.n	d5a22 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xba>
   d5a12:	2a2f      	cmp	r2, #47	; 0x2f
   d5a14:	d011      	beq.n	d5a3a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
   d5a16:	2a5c      	cmp	r2, #92	; 0x5c
   d5a18:	d00f      	beq.n	d5a3a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
   d5a1a:	2a22      	cmp	r2, #34	; 0x22
   d5a1c:	d00d      	beq.n	d5a3a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                return false; // Unexpected end of string
   d5a1e:	2000      	movs	r0, #0
   d5a20:	e023      	b.n	d5a6a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x102>
                switch (*s) {
   d5a22:	2a66      	cmp	r2, #102	; 0x66
   d5a24:	d1fb      	bne.n	d5a1e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
                    *str = 0x0c;
   d5a26:	220c      	movs	r2, #12
   d5a28:	e007      	b.n	d5a3a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                switch (*s) {
   d5a2a:	2a72      	cmp	r2, #114	; 0x72
   d5a2c:	d00d      	beq.n	d5a4a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xe2>
   d5a2e:	2a74      	cmp	r2, #116	; 0x74
   d5a30:	d1f5      	bne.n	d5a1e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
                    *str = 0x09;
   d5a32:	f883 a000 	strb.w	sl, [r3]
                    break;
   d5a36:	e001      	b.n	d5a3c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd4>
                    *str = 0x08;
   d5a38:	2208      	movs	r2, #8
   d5a3a:	701a      	strb	r2, [r3, #0]
                    break;
                default:
                    return false; // Invalid escaped sequence
                }
                ++str;
                ++s;
   d5a3c:	1ca1      	adds	r1, r4, #2
                ++str;
   d5a3e:	3301      	adds	r3, #1
                ++s;
   d5a40:	4608      	mov	r0, r1
   d5a42:	e7d3      	b.n	d59ec <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>
                    *str = 0x0a;
   d5a44:	f04f 020a 	mov.w	r2, #10
   d5a48:	e7f7      	b.n	d5a3a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                    *str = 0x0d;
   d5a4a:	f883 9000 	strb.w	r9, [r3]
                    break;
   d5a4e:	e7f5      	b.n	d5a3c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd4>
            }
        } else {
            ++s;
        }
    }
    if (s != s1) {
   d5a50:	42a1      	cmp	r1, r4
   d5a52:	d006      	beq.n	d5a62 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xfa>
        const size_t n = s - s1;
   d5a54:	1a64      	subs	r4, r4, r1
        memmove(str, s1, n); // Shift remaining characters
   d5a56:	4618      	mov	r0, r3
   d5a58:	4622      	mov	r2, r4
   d5a5a:	f001 fa4b 	bl	d6ef4 <memmove>
   d5a5e:	4603      	mov	r3, r0
        str += n;
   d5a60:	4423      	add	r3, r4
    }
    t->end = str - json; // Update string length
   d5a62:	eba3 0308 	sub.w	r3, r3, r8
   d5a66:	60bb      	str	r3, [r7, #8]
    return true;
   d5a68:	2001      	movs	r0, #1
}
   d5a6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if (u <= 0x7f) { // Processing only code points within the basic latin block
   d5a6e:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
   d5a72:	d9c4      	bls.n	d59fe <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x96>
   d5a74:	4621      	mov	r1, r4
   d5a76:	e7b9      	b.n	d59ec <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>

000d5a78 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>:
bool spark::JSONValue::stringize(jsmntok_t *t, size_t count, char *json) {
   d5a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5a7a:	4604      	mov	r4, r0
   d5a7c:	4615      	mov	r5, r2
    const jsmntok_t* const end = t + count;
   d5a7e:	eb00 1601 	add.w	r6, r0, r1, lsl #4
            json[t->end] = '\0';
   d5a82:	2700      	movs	r7, #0
    while (t != end) {
   d5a84:	42b4      	cmp	r4, r6
   d5a86:	d010      	beq.n	d5aaa <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x32>
        if (t->type == JSMN_STRING) {
   d5a88:	7823      	ldrb	r3, [r4, #0]
   d5a8a:	2b03      	cmp	r3, #3
   d5a8c:	d108      	bne.n	d5aa0 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x28>
            if (!unescape(t, json)) {
   d5a8e:	4629      	mov	r1, r5
   d5a90:	4620      	mov	r0, r4
   d5a92:	f7ff ff69 	bl	d5968 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>
   d5a96:	b148      	cbz	r0, d5aac <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x34>
            json[t->end] = '\0';
   d5a98:	68a3      	ldr	r3, [r4, #8]
   d5a9a:	54ef      	strb	r7, [r5, r3]
        ++t;
   d5a9c:	3410      	adds	r4, #16
    while (t != end) {
   d5a9e:	e7f1      	b.n	d5a84 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0xc>
        } else if (t->type == JSMN_PRIMITIVE) {
   d5aa0:	2b00      	cmp	r3, #0
   d5aa2:	d1fb      	bne.n	d5a9c <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x24>
            json[t->end] = '\0';
   d5aa4:	68a2      	ldr	r2, [r4, #8]
   d5aa6:	54ab      	strb	r3, [r5, r2]
   d5aa8:	e7f8      	b.n	d5a9c <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x24>
    return true;
   d5aaa:	2001      	movs	r0, #1
}
   d5aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d5ab0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

// spark::JSONString
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d5ab0:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d5ab2:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d5ab4:	e9c0 3300 	strd	r3, r3, [r0]
   d5ab8:	4604      	mov	r4, r0
}

// spark::JSONString
inline spark::JSONString::JSONString() :
        s_(""),
        n_(0) {
   d5aba:	480e      	ldr	r0, [pc, #56]	; (d5af4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   d5abc:	e9c4 0302 	strd	r0, r3, [r4, #8]
        JSONString() {
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d5ac0:	b1a9      	cbz	r1, d5aee <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   d5ac2:	780b      	ldrb	r3, [r1, #0]
   d5ac4:	2b03      	cmp	r3, #3
   d5ac6:	d006      	beq.n	d5ad6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d5ac8:	b98b      	cbnz	r3, d5aee <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d5aca:	6813      	ldr	r3, [r2, #0]
   d5acc:	6858      	ldr	r0, [r3, #4]
   d5ace:	684b      	ldr	r3, [r1, #4]
   d5ad0:	5cc3      	ldrb	r3, [r0, r3]
   d5ad2:	2b6e      	cmp	r3, #110	; 0x6e
   d5ad4:	d007      	beq.n	d5ae6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   d5ad6:	6813      	ldr	r3, [r2, #0]
   d5ad8:	684d      	ldr	r5, [r1, #4]
   d5ada:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   d5adc:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   d5ade:	4428      	add	r0, r5
            n_ = t->end - t->start;
   d5ae0:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   d5ae2:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   d5ae4:	60e3      	str	r3, [r4, #12]
   d5ae6:	4611      	mov	r1, r2
   d5ae8:	4620      	mov	r0, r4
   d5aea:	f7ff fe45 	bl	d5778 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
        }
        d_ = d;
    }
}
   d5aee:	4620      	mov	r0, r4
   d5af0:	bd38      	pop	{r3, r4, r5, pc}
   d5af2:	bf00      	nop
   d5af4:	000d7343 	.word	0x000d7343

000d5af8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
bool spark::JSONString::operator==(const JSONString &str) const {
    return n_ == str.n_ && strncmp(s_, str.s_, n_) == 0;
}

// spark::JSONObjectIterator
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d5af8:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d5afa:	2500      	movs	r5, #0
   d5afc:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   d5afe:	e9c0 5500 	strd	r5, r5, [r0]
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
   d5b02:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d5b06:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d5b0a:	4604      	mov	r4, r0
   d5b0c:	4611      	mov	r1, r2
        JSONObjectIterator() {
    if (t && t->type == JSMN_OBJECT) {
   d5b0e:	b14b      	cbz	r3, d5b24 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   d5b10:	781a      	ldrb	r2, [r3, #0]
   d5b12:	2a01      	cmp	r2, #1
   d5b14:	d106      	bne.n	d5b24 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   d5b16:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   d5b1a:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   d5b1c:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   d5b1e:	6143      	str	r3, [r0, #20]
   d5b20:	f7ff fe2a 	bl	d5778 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
        d_ = d;
    }
}
   d5b24:	4620      	mov	r0, r4
   d5b26:	bd38      	pop	{r3, r4, r5, pc}

000d5b28 <_ZN5spark18JSONObjectIterator4nextEv>:

bool spark::JSONObjectIterator::next() {
   d5b28:	b510      	push	{r4, lr}
    if (!n_) {
   d5b2a:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   d5b2c:	4604      	mov	r4, r0
    if (!n_) {
   d5b2e:	b163      	cbz	r3, d5b4a <_ZN5spark18JSONObjectIterator4nextEv+0x22>
        return false;
    }
    k_ = t_; // Name
   d5b30:	6880      	ldr	r0, [r0, #8]
   d5b32:	60e0      	str	r0, [r4, #12]
    ++t_;
    v_ = t_; // Value
    --n_;
   d5b34:	3b01      	subs	r3, #1
    ++t_;
   d5b36:	3010      	adds	r0, #16
   d5b38:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d5b3a:	6120      	str	r0, [r4, #16]
    --n_;
   d5b3c:	6163      	str	r3, [r4, #20]
    if (n_) {
   d5b3e:	b113      	cbz	r3, d5b46 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   d5b40:	f7ff fdd1 	bl	d56e6 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d5b44:	60a0      	str	r0, [r4, #8]
    }
    return true;
   d5b46:	2001      	movs	r0, #1
   d5b48:	e000      	b.n	d5b4c <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   d5b4a:	4618      	mov	r0, r3
}
   d5b4c:	bd10      	pop	{r4, pc}
	...

000d5b50 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d5b50:	b538      	push	{r3, r4, r5, lr}
   d5b52:	2300      	movs	r3, #0
   d5b54:	4604      	mov	r4, r0
   d5b56:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5b58:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d5b5a:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5b5c:	f7fe fa9b 	bl	d4096 <_Znwj>
   d5b60:	b128      	cbz	r0, d5b6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d5b62:	2301      	movs	r3, #1
   d5b64:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d5b68:	4b02      	ldr	r3, [pc, #8]	; (d5b74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x24>)
   d5b6a:	6003      	str	r3, [r0, #0]
   d5b6c:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5b6e:	6020      	str	r0, [r4, #0]
	}
   d5b70:	4620      	mov	r0, r4
   d5b72:	bd38      	pop	{r3, r4, r5, pc}
   d5b74:	000d7354 	.word	0x000d7354

000d5b78 <_ZN5spark9JSONValue9parseCopyEPKcj>:
spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
   d5b78:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5b7a:	4604      	mov	r4, r0
   d5b7c:	b087      	sub	sp, #28
   d5b7e:	460e      	mov	r6, r1
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
   d5b80:	200c      	movs	r0, #12
   d5b82:	4927      	ldr	r1, [pc, #156]	; (d5c20 <_ZN5spark9JSONValue9parseCopyEPKcj+0xa8>)
spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
   d5b84:	4615      	mov	r5, r2
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
   d5b86:	f000 fda7 	bl	d66d8 <_ZnwjRKSt9nothrow_t>
   d5b8a:	4601      	mov	r1, r0
   d5b8c:	b118      	cbz	r0, d5b96 <_ZN5spark9JSONValue9parseCopyEPKcj+0x1e>
            freeJson(false) {
   d5b8e:	2300      	movs	r3, #0
   d5b90:	e9c0 3300 	strd	r3, r3, [r0]
   d5b94:	7203      	strb	r3, [r0, #8]
	: __shared_count(__p)
   d5b96:	a803      	add	r0, sp, #12
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5b98:	9102      	str	r1, [sp, #8]
	: __shared_count(__p)
   d5b9a:	f7ff ffd9 	bl	d5b50 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>
    if (!d) {
   d5b9e:	9a02      	ldr	r2, [sp, #8]
   d5ba0:	b942      	cbnz	r2, d5bb4 <_ZN5spark9JSONValue9parseCopyEPKcj+0x3c>
      constexpr __shared_count() noexcept : _M_pi(0)
   d5ba2:	e9c4 2200 	strd	r2, r2, [r4]
        t_(nullptr) {
   d5ba6:	60a2      	str	r2, [r4, #8]
      ~__shared_ptr() = default;
   d5ba8:	a803      	add	r0, sp, #12
   d5baa:	f7fe fabf 	bl	d412c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5bae:	4620      	mov	r0, r4
   d5bb0:	b007      	add	sp, #28
   d5bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    size_t tokenCount = 0;
   d5bb4:	2300      	movs	r3, #0
   d5bb6:	9301      	str	r3, [sp, #4]
    if (!tokenize(json, size, &d->tokens, &tokenCount)) {
   d5bb8:	4629      	mov	r1, r5
   d5bba:	ab01      	add	r3, sp, #4
   d5bbc:	4630      	mov	r0, r6
   d5bbe:	f7ff fe89 	bl	d58d4 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>
   d5bc2:	b918      	cbnz	r0, d5bcc <_ZN5spark9JSONValue9parseCopyEPKcj+0x54>
      constexpr __shared_count() noexcept : _M_pi(0)
   d5bc4:	e9c4 0000 	strd	r0, r0, [r4]
   d5bc8:	60a0      	str	r0, [r4, #8]
}
   d5bca:	e7ed      	b.n	d5ba8 <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
    d->json = new(std::nothrow) char[size + 1];
   d5bcc:	4914      	ldr	r1, [pc, #80]	; (d5c20 <_ZN5spark9JSONValue9parseCopyEPKcj+0xa8>)
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d5bce:	9f02      	ldr	r7, [sp, #8]
   d5bd0:	1c68      	adds	r0, r5, #1
   d5bd2:	f000 fd83 	bl	d66dc <_ZnajRKSt9nothrow_t>
    if (!d->json) {
   d5bd6:	9b02      	ldr	r3, [sp, #8]
    d->json = new(std::nothrow) char[size + 1];
   d5bd8:	6078      	str	r0, [r7, #4]
    if (!d->json) {
   d5bda:	6858      	ldr	r0, [r3, #4]
   d5bdc:	2800      	cmp	r0, #0
   d5bde:	d0f1      	beq.n	d5bc4 <_ZN5spark9JSONValue9parseCopyEPKcj+0x4c>
    memcpy(d->json, json, size); // TODO: Copy only token data
   d5be0:	462a      	mov	r2, r5
   d5be2:	4631      	mov	r1, r6
   d5be4:	f001 f978 	bl	d6ed8 <memcpy>
   d5be8:	9b02      	ldr	r3, [sp, #8]
    if (!stringize(d->tokens, tokenCount, d->json)) {
   d5bea:	9901      	ldr	r1, [sp, #4]
   d5bec:	6818      	ldr	r0, [r3, #0]
    d->freeJson = true;
   d5bee:	2201      	movs	r2, #1
   d5bf0:	721a      	strb	r2, [r3, #8]
    if (!stringize(d->tokens, tokenCount, d->json)) {
   d5bf2:	685a      	ldr	r2, [r3, #4]
   d5bf4:	f7ff ff40 	bl	d5a78 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>
   d5bf8:	2800      	cmp	r0, #0
   d5bfa:	d0e3      	beq.n	d5bc4 <_ZN5spark9JSONValue9parseCopyEPKcj+0x4c>
   d5bfc:	9b02      	ldr	r3, [sp, #8]
    return JSONValue(d->tokens, d);
   d5bfe:	6819      	ldr	r1, [r3, #0]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5c00:	9304      	str	r3, [sp, #16]
      : _M_pi(__r._M_pi)
   d5c02:	9b03      	ldr	r3, [sp, #12]
   d5c04:	9305      	str	r3, [sp, #20]
	if (_M_pi != 0)
   d5c06:	b113      	cbz	r3, d5c0e <_ZN5spark9JSONValue9parseCopyEPKcj+0x96>
    { ++_M_use_count; }
   d5c08:	685a      	ldr	r2, [r3, #4]
   d5c0a:	3201      	adds	r2, #1
   d5c0c:	605a      	str	r2, [r3, #4]
   d5c0e:	aa04      	add	r2, sp, #16
   d5c10:	4620      	mov	r0, r4
   d5c12:	f7ff fdc8 	bl	d57a6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d5c16:	a805      	add	r0, sp, #20
   d5c18:	f7fe fa88 	bl	d412c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5c1c:	e7c4      	b.n	d5ba8 <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
   d5c1e:	bf00      	nop
   d5c20:	000d7460 	.word	0x000d7460

000d5c24 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5c24:	4b01      	ldr	r3, [pc, #4]	; (d5c2c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5c26:	4a02      	ldr	r2, [pc, #8]	; (d5c30 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5c28:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d5c2a:	4770      	bx	lr
   d5c2c:	2003e5b4 	.word	0x2003e5b4
   d5c30:	000d7368 	.word	0x000d7368

000d5c34 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5c34:	2300      	movs	r3, #0
   d5c36:	6840      	ldr	r0, [r0, #4]
   d5c38:	461a      	mov	r2, r3
   d5c3a:	f7ff bbcf 	b.w	d53dc <network_connect>

000d5c3e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5c3e:	6840      	ldr	r0, [r0, #4]
   d5c40:	2200      	movs	r2, #0
   d5c42:	2102      	movs	r1, #2
   d5c44:	f7ff bbda 	b.w	d53fc <network_disconnect>

000d5c48 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5c48:	2200      	movs	r2, #0
   d5c4a:	6840      	ldr	r0, [r0, #4]
   d5c4c:	4611      	mov	r1, r2
   d5c4e:	f7ff bbcd 	b.w	d53ec <network_connecting>

000d5c52 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5c52:	2200      	movs	r2, #0
   d5c54:	6840      	ldr	r0, [r0, #4]
   d5c56:	4611      	mov	r1, r2
   d5c58:	f7ff bbd8 	b.w	d540c <network_ready>

000d5c5c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5c5c:	2300      	movs	r3, #0
   d5c5e:	6840      	ldr	r0, [r0, #4]
   d5c60:	461a      	mov	r2, r3
   d5c62:	4619      	mov	r1, r3
   d5c64:	f7ff bbda 	b.w	d541c <network_on>

000d5c68 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5c68:	2300      	movs	r3, #0
   d5c6a:	6840      	ldr	r0, [r0, #4]
   d5c6c:	461a      	mov	r2, r3
   d5c6e:	4619      	mov	r1, r3
   d5c70:	f7ff bbdc 	b.w	d542c <network_off>

000d5c74 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d5c74:	6840      	ldr	r0, [r0, #4]
   d5c76:	2100      	movs	r1, #0
   d5c78:	f7ff bc00 	b.w	d547c <network_is_on>

000d5c7c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d5c7c:	6840      	ldr	r0, [r0, #4]
   d5c7e:	2100      	movs	r1, #0
   d5c80:	f7ff bc04 	b.w	d548c <network_is_off>

000d5c84 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5c84:	6840      	ldr	r0, [r0, #4]
   d5c86:	2200      	movs	r2, #0
   d5c88:	f081 0101 	eor.w	r1, r1, #1
   d5c8c:	f7ff bbd6 	b.w	d543c <network_listen>

000d5c90 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5c90:	6840      	ldr	r0, [r0, #4]
   d5c92:	2200      	movs	r2, #0
   d5c94:	f7ff bbe2 	b.w	d545c <network_set_listen_timeout>

000d5c98 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5c98:	2200      	movs	r2, #0
   d5c9a:	6840      	ldr	r0, [r0, #4]
   d5c9c:	4611      	mov	r1, r2
   d5c9e:	f7ff bbe5 	b.w	d546c <network_get_listen_timeout>

000d5ca2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5ca2:	2200      	movs	r2, #0
   d5ca4:	6840      	ldr	r0, [r0, #4]
   d5ca6:	4611      	mov	r1, r2
   d5ca8:	f7ff bbd0 	b.w	d544c <network_listening>

000d5cac <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5cac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5cb0:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d5cb2:	b095      	sub	sp, #84	; 0x54
   d5cb4:	4616      	mov	r6, r2
   d5cb6:	460d      	mov	r5, r1
   d5cb8:	4607      	mov	r7, r0
    IPAddress addr;
   d5cba:	f7ff fcdd 	bl	d5678 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d5cbe:	4621      	mov	r1, r4
   d5cc0:	2218      	movs	r2, #24
   d5cc2:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d5cc4:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5cc6:	f001 f92f 	bl	d6f28 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5cca:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d5ccc:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5cd0:	4621      	mov	r1, r4
   d5cd2:	466b      	mov	r3, sp
   d5cd4:	aa0c      	add	r2, sp, #48	; 0x30
   d5cd6:	4630      	mov	r0, r6
   d5cd8:	f7ff fa44 	bl	d5164 <netdb_getaddrinfo>
    if (!r) {
   d5cdc:	4604      	mov	r4, r0
   d5cde:	2800      	cmp	r0, #0
   d5ce0:	d146      	bne.n	d5d70 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5ce2:	4602      	mov	r2, r0
   d5ce4:	2101      	movs	r1, #1
   d5ce6:	6868      	ldr	r0, [r5, #4]
   d5ce8:	f7ff fb90 	bl	d540c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5cec:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5cee:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5cf0:	4622      	mov	r2, r4
   d5cf2:	6868      	ldr	r0, [r5, #4]
   d5cf4:	f7ff fb8a 	bl	d540c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5cf8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5cfa:	4681      	mov	r9, r0
        bool ok = false;
   d5cfc:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5cfe:	2e00      	cmp	r6, #0
   d5d00:	d036      	beq.n	d5d70 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d5d02:	2900      	cmp	r1, #0
   d5d04:	d134      	bne.n	d5d70 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5d06:	6873      	ldr	r3, [r6, #4]
   d5d08:	2b02      	cmp	r3, #2
   d5d0a:	d003      	beq.n	d5d14 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d5d0c:	2b0a      	cmp	r3, #10
   d5d0e:	d00b      	beq.n	d5d28 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5d10:	69f6      	ldr	r6, [r6, #28]
   d5d12:	e7f4      	b.n	d5cfe <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d5d14:	f1b8 0f00 	cmp.w	r8, #0
   d5d18:	d004      	beq.n	d5d24 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5d1a:	6971      	ldr	r1, [r6, #20]
   d5d1c:	4638      	mov	r0, r7
   d5d1e:	3104      	adds	r1, #4
   d5d20:	f7ff fcd7 	bl	d56d2 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d5d24:	4641      	mov	r1, r8
   d5d26:	e7f3      	b.n	d5d10 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5d28:	f1b9 0f00 	cmp.w	r9, #0
   d5d2c:	d101      	bne.n	d5d32 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d5d2e:	4649      	mov	r1, r9
   d5d30:	e7ee      	b.n	d5d10 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5d32:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5d34:	2210      	movs	r2, #16
   d5d36:	a801      	add	r0, sp, #4
   d5d38:	f001 f8f6 	bl	d6f28 <memset>
                    a.v = 6;
   d5d3c:	2306      	movs	r3, #6
   d5d3e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5d42:	ad01      	add	r5, sp, #4
   d5d44:	f104 0308 	add.w	r3, r4, #8
   d5d48:	3418      	adds	r4, #24
   d5d4a:	6818      	ldr	r0, [r3, #0]
   d5d4c:	6859      	ldr	r1, [r3, #4]
   d5d4e:	462a      	mov	r2, r5
   d5d50:	c203      	stmia	r2!, {r0, r1}
   d5d52:	3308      	adds	r3, #8
   d5d54:	42a3      	cmp	r3, r4
   d5d56:	4615      	mov	r5, r2
   d5d58:	d1f7      	bne.n	d5d4a <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d5d5a:	a901      	add	r1, sp, #4
   d5d5c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d5d5e:	ad07      	add	r5, sp, #28
   d5d60:	f7ff fc98 	bl	d5694 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5d64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5d66:	1d3c      	adds	r4, r7, #4
   d5d68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5d6a:	682b      	ldr	r3, [r5, #0]
   d5d6c:	7023      	strb	r3, [r4, #0]
   d5d6e:	e7de      	b.n	d5d2e <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5d70:	9800      	ldr	r0, [sp, #0]
   d5d72:	f7ff f9ef 	bl	d5154 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5d76:	4638      	mov	r0, r7
   d5d78:	b015      	add	sp, #84	; 0x54
   d5d7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d5d80 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5d80:	4b02      	ldr	r3, [pc, #8]	; (d5d8c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5d82:	4a03      	ldr	r2, [pc, #12]	; (d5d90 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5d84:	601a      	str	r2, [r3, #0]
   d5d86:	2200      	movs	r2, #0
   d5d88:	605a      	str	r2, [r3, #4]

} // spark
   d5d8a:	4770      	bx	lr
   d5d8c:	2003e5b8 	.word	0x2003e5b8
   d5d90:	000d7374 	.word	0x000d7374

000d5d94 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5d96:	4606      	mov	r6, r0
   d5d98:	460d      	mov	r5, r1
  size_t n = 0;
   d5d9a:	188f      	adds	r7, r1, r2
   d5d9c:	2400      	movs	r4, #0
  while (size--) {
   d5d9e:	42bd      	cmp	r5, r7
   d5da0:	d00c      	beq.n	d5dbc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5da2:	6833      	ldr	r3, [r6, #0]
   d5da4:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5da8:	689b      	ldr	r3, [r3, #8]
   d5daa:	4630      	mov	r0, r6
   d5dac:	4798      	blx	r3
     if (chunk>=0)
   d5dae:	1e03      	subs	r3, r0, #0
   d5db0:	db01      	blt.n	d5db6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5db2:	441c      	add	r4, r3
  while (size--) {
   d5db4:	e7f3      	b.n	d5d9e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5db6:	2c00      	cmp	r4, #0
   d5db8:	bf08      	it	eq
   d5dba:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d5dbc:	4620      	mov	r0, r4
   d5dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5dc0 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d5dc0:	b513      	push	{r0, r1, r4, lr}
   d5dc2:	4604      	mov	r4, r0
    }
   d5dc4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d5dc6:	b159      	cbz	r1, d5de0 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d5dc8:	9101      	str	r1, [sp, #4]
   d5dca:	f001 f8eb 	bl	d6fa4 <strlen>
   d5dce:	6823      	ldr	r3, [r4, #0]
   d5dd0:	9901      	ldr	r1, [sp, #4]
   d5dd2:	68db      	ldr	r3, [r3, #12]
   d5dd4:	4602      	mov	r2, r0
   d5dd6:	4620      	mov	r0, r4
    }
   d5dd8:	b002      	add	sp, #8
   d5dda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d5dde:	4718      	bx	r3
    }
   d5de0:	b002      	add	sp, #8
   d5de2:	bd10      	pop	{r4, pc}

000d5de4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5de4:	6803      	ldr	r3, [r0, #0]
   d5de6:	689b      	ldr	r3, [r3, #8]
   d5de8:	4718      	bx	r3

000d5dea <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5dea:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5dec:	210d      	movs	r1, #13
{
   d5dee:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5df0:	f7ff fff8 	bl	d5de4 <_ZN5Print5printEc>
  n += print('\n');
   d5df4:	210a      	movs	r1, #10
  size_t n = print('\r');
   d5df6:	4604      	mov	r4, r0
  n += print('\n');
   d5df8:	4628      	mov	r0, r5
   d5dfa:	f7ff fff3 	bl	d5de4 <_ZN5Print5printEc>
  return n;
}
   d5dfe:	4420      	add	r0, r4
   d5e00:	bd38      	pop	{r3, r4, r5, pc}

000d5e02 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5e02:	b530      	push	{r4, r5, lr}
   d5e04:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5e06:	2300      	movs	r3, #0
   d5e08:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5e0c:	2a01      	cmp	r2, #1
   d5e0e:	bf98      	it	ls
   d5e10:	220a      	movls	r2, #10
   d5e12:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d5e14:	460d      	mov	r5, r1
   d5e16:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d5e1a:	fb01 5312 	mls	r3, r1, r2, r5
   d5e1e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5e22:	2b09      	cmp	r3, #9
   d5e24:	bf94      	ite	ls
   d5e26:	3330      	addls	r3, #48	; 0x30
   d5e28:	3337      	addhi	r3, #55	; 0x37
   d5e2a:	b2db      	uxtb	r3, r3
  } while(n);
   d5e2c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5e2e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d5e32:	d9ef      	bls.n	d5e14 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d5e34:	4621      	mov	r1, r4
   d5e36:	f7ff ffc3 	bl	d5dc0 <_ZN5Print5writeEPKc>
}
   d5e3a:	b00b      	add	sp, #44	; 0x2c
   d5e3c:	bd30      	pop	{r4, r5, pc}

000d5e3e <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d5e3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5e42:	b086      	sub	sp, #24
   d5e44:	af00      	add	r7, sp, #0
   d5e46:	4605      	mov	r5, r0
   d5e48:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d5e4a:	1d38      	adds	r0, r7, #4
   d5e4c:	2114      	movs	r1, #20
{
   d5e4e:	4614      	mov	r4, r2
    va_copy(args2, args);
   d5e50:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d5e52:	f7ff fb3b 	bl	d54cc <vsnprintf>

    if (n<bufsize)
   d5e56:	2813      	cmp	r0, #19
   d5e58:	d80e      	bhi.n	d5e78 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d5e5a:	1d39      	adds	r1, r7, #4
   d5e5c:	4628      	mov	r0, r5
   d5e5e:	f7ff ffaf 	bl	d5dc0 <_ZN5Print5writeEPKc>
   d5e62:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d5e64:	b11e      	cbz	r6, d5e6e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d5e66:	4628      	mov	r0, r5
   d5e68:	f7ff ffbf 	bl	d5dea <_ZN5Print7printlnEv>
   d5e6c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d5e6e:	4620      	mov	r0, r4
   d5e70:	3718      	adds	r7, #24
   d5e72:	46bd      	mov	sp, r7
   d5e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d5e78:	f100 0308 	add.w	r3, r0, #8
   d5e7c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d5e80:	46e8      	mov	r8, sp
        char bigger[n+1];
   d5e82:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d5e86:	4622      	mov	r2, r4
   d5e88:	1c41      	adds	r1, r0, #1
   d5e8a:	683b      	ldr	r3, [r7, #0]
   d5e8c:	4668      	mov	r0, sp
   d5e8e:	f7ff fb1d 	bl	d54cc <vsnprintf>
  return write(str);
   d5e92:	4669      	mov	r1, sp
   d5e94:	4628      	mov	r0, r5
   d5e96:	f7ff ff93 	bl	d5dc0 <_ZN5Print5writeEPKc>
   d5e9a:	4604      	mov	r4, r0
   d5e9c:	46c5      	mov	sp, r8
   d5e9e:	e7e1      	b.n	d5e64 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d5ea0 <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
   d5ea0:	b510      	push	{r4, lr}
   d5ea2:	4604      	mov	r4, r0
    return LED_RGB_IsOverRidden();
   d5ea4:	f7ff fa0e 	bl	d52c4 <LED_RGB_IsOverRidden>
    if (override == controlled()) {
   d5ea8:	4284      	cmp	r4, r0
   d5eaa:	d008      	beq.n	d5ebe <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
   d5eac:	b11c      	cbz	r4, d5eb6 <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
   d5eae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Start();
   d5eb2:	f7ff b9ef 	b.w	d5294 <LED_Signaling_Start>
}
   d5eb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Stop();
   d5eba:	f7ff b9f3 	b.w	d52a4 <LED_Signaling_Stop>
}
   d5ebe:	bd10      	pop	{r4, pc}

000d5ec0 <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
   d5ec0:	b570      	push	{r4, r5, r6, lr}
   d5ec2:	4605      	mov	r5, r0
   d5ec4:	460e      	mov	r6, r1
   d5ec6:	4614      	mov	r4, r2
    return LED_RGB_IsOverRidden();
   d5ec8:	f7ff f9fc 	bl	d52c4 <LED_RGB_IsOverRidden>
    if (!controlled()) {
   d5ecc:	b150      	cbz	r0, d5ee4 <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
   d5ece:	ea44 2006 	orr.w	r0, r4, r6, lsl #8
   d5ed2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   d5ed6:	f7ff f9d5 	bl	d5284 <LED_SetSignalingColor>
    LED_On(LED_RGB);
}
   d5eda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LED_On(LED_RGB);
   d5ede:	20e7      	movs	r0, #231	; 0xe7
   d5ee0:	f7ff b9f8 	b.w	d52d4 <LED_On>
}
   d5ee4:	bd70      	pop	{r4, r5, r6, pc}

000d5ee6 <_ZN8RGBClass10brightnessEhb>:

void RGBClass::brightness(uint8_t brightness, bool update)
{
   d5ee6:	b510      	push	{r4, lr}
   d5ee8:	460c      	mov	r4, r1
    LED_SetBrightness(brightness);
   d5eea:	f7ff f9e3 	bl	d52b4 <LED_SetBrightness>
    return LED_RGB_IsOverRidden();
   d5eee:	f7ff f9e9 	bl	d52c4 <LED_RGB_IsOverRidden>
    if (controlled() && update) {
   d5ef2:	b128      	cbz	r0, d5f00 <_ZN8RGBClass10brightnessEhb+0x1a>
   d5ef4:	b124      	cbz	r4, d5f00 <_ZN8RGBClass10brightnessEhb+0x1a>
        LED_On(LED_RGB);
    }
}
   d5ef6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_On(LED_RGB);
   d5efa:	20e7      	movs	r0, #231	; 0xe7
   d5efc:	f7ff b9ea 	b.w	d52d4 <LED_On>
}
   d5f00:	bd10      	pop	{r4, pc}

000d5f02 <_ZN8RGBClass10brightnessEv>:

uint8_t RGBClass::brightness()
{
    return Get_LED_Brightness();
   d5f02:	f7ff b9ef 	b.w	d52e4 <Get_LED_Brightness>
	...

000d5f08 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   d5f08:	4b01      	ldr	r3, [pc, #4]	; (d5f10 <_GLOBAL__sub_I_RGB+0x8>)
   d5f0a:	2200      	movs	r2, #0
   d5f0c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d5f0e:	4770      	bx	lr
   d5f10:	2003e5c0 	.word	0x2003e5c0

000d5f14 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d5f14:	b510      	push	{r4, lr}
   d5f16:	4604      	mov	r4, r0
   d5f18:	4608      	mov	r0, r1
{
    _spi = spi;
   d5f1a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d5f1c:	f7ff f92a 	bl	d5174 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5f20:	2300      	movs	r3, #0
   d5f22:	6063      	str	r3, [r4, #4]
}
   d5f24:	4620      	mov	r0, r4
   d5f26:	bd10      	pop	{r4, pc}

000d5f28 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5f28:	b510      	push	{r4, lr}
   d5f2a:	4604      	mov	r4, r0
{
	free(buffer);
   d5f2c:	6800      	ldr	r0, [r0, #0]
   d5f2e:	f7ff fabd 	bl	d54ac <free>
}
   d5f32:	4620      	mov	r0, r4
   d5f34:	bd10      	pop	{r4, pc}

000d5f36 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5f36:	b510      	push	{r4, lr}
   d5f38:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5f3a:	6800      	ldr	r0, [r0, #0]
   d5f3c:	b108      	cbz	r0, d5f42 <_ZN6String10invalidateEv+0xc>
   d5f3e:	f7ff fab5 	bl	d54ac <free>
	buffer = NULL;
   d5f42:	2300      	movs	r3, #0
	capacity = len = 0;
   d5f44:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d5f48:	6023      	str	r3, [r4, #0]
}
   d5f4a:	bd10      	pop	{r4, pc}

000d5f4c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5f4c:	b538      	push	{r3, r4, r5, lr}
   d5f4e:	4604      	mov	r4, r0
   d5f50:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5f52:	6800      	ldr	r0, [r0, #0]
   d5f54:	3101      	adds	r1, #1
   d5f56:	f7ff fab1 	bl	d54bc <realloc>
	if (newbuffer) {
   d5f5a:	b110      	cbz	r0, d5f62 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5f5c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d5f60:	2001      	movs	r0, #1
	}
	return 0;
}
   d5f62:	bd38      	pop	{r3, r4, r5, pc}

000d5f64 <_ZN6String7reserveEj>:
{
   d5f64:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5f66:	6803      	ldr	r3, [r0, #0]
{
   d5f68:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5f6a:	b123      	cbz	r3, d5f76 <_ZN6String7reserveEj+0x12>
   d5f6c:	6843      	ldr	r3, [r0, #4]
   d5f6e:	428b      	cmp	r3, r1
   d5f70:	d301      	bcc.n	d5f76 <_ZN6String7reserveEj+0x12>
   d5f72:	2001      	movs	r0, #1
}
   d5f74:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d5f76:	4620      	mov	r0, r4
   d5f78:	f7ff ffe8 	bl	d5f4c <_ZN6String12changeBufferEj>
   d5f7c:	2800      	cmp	r0, #0
   d5f7e:	d0f9      	beq.n	d5f74 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d5f80:	68a3      	ldr	r3, [r4, #8]
   d5f82:	2b00      	cmp	r3, #0
   d5f84:	d1f5      	bne.n	d5f72 <_ZN6String7reserveEj+0xe>
   d5f86:	6822      	ldr	r2, [r4, #0]
   d5f88:	7013      	strb	r3, [r2, #0]
   d5f8a:	e7f2      	b.n	d5f72 <_ZN6String7reserveEj+0xe>

000d5f8c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5f8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5f8e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d5f90:	4611      	mov	r1, r2
   d5f92:	9201      	str	r2, [sp, #4]
{
   d5f94:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d5f96:	f7ff ffe5 	bl	d5f64 <_ZN6String7reserveEj>
   d5f9a:	9a01      	ldr	r2, [sp, #4]
   d5f9c:	b928      	cbnz	r0, d5faa <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d5f9e:	4620      	mov	r0, r4
   d5fa0:	f7ff ffc9 	bl	d5f36 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d5fa4:	4620      	mov	r0, r4
   d5fa6:	b003      	add	sp, #12
   d5fa8:	bd30      	pop	{r4, r5, pc}
	len = length;
   d5faa:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d5fac:	4629      	mov	r1, r5
   d5fae:	6820      	ldr	r0, [r4, #0]
   d5fb0:	f000 ff92 	bl	d6ed8 <memcpy>
	buffer[len] = 0;
   d5fb4:	6822      	ldr	r2, [r4, #0]
   d5fb6:	68a3      	ldr	r3, [r4, #8]
   d5fb8:	2100      	movs	r1, #0
   d5fba:	54d1      	strb	r1, [r2, r3]
	return *this;
   d5fbc:	e7f2      	b.n	d5fa4 <_ZN6String4copyEPKcj+0x18>

000d5fbe <_ZN6StringC1EPKc>:
	buffer = NULL;
   d5fbe:	2300      	movs	r3, #0
String::String(const char *cstr)
   d5fc0:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d5fc2:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d5fc6:	4604      	mov	r4, r0
	len = 0;
   d5fc8:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5fca:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d5fcc:	b141      	cbz	r1, d5fe0 <_ZN6StringC1EPKc+0x22>
   d5fce:	4608      	mov	r0, r1
   d5fd0:	9101      	str	r1, [sp, #4]
   d5fd2:	f000 ffe7 	bl	d6fa4 <strlen>
   d5fd6:	9901      	ldr	r1, [sp, #4]
   d5fd8:	4602      	mov	r2, r0
   d5fda:	4620      	mov	r0, r4
   d5fdc:	f7ff ffd6 	bl	d5f8c <_ZN6String4copyEPKcj>
}
   d5fe0:	4620      	mov	r0, r4
   d5fe2:	b002      	add	sp, #8
   d5fe4:	bd10      	pop	{r4, pc}

000d5fe6 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d5fe6:	b538      	push	{r3, r4, r5, lr}
   d5fe8:	4605      	mov	r5, r0
	if (buffer) {
   d5fea:	6800      	ldr	r0, [r0, #0]
{
   d5fec:	460c      	mov	r4, r1
	if (buffer) {
   d5fee:	b168      	cbz	r0, d600c <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d5ff0:	686a      	ldr	r2, [r5, #4]
   d5ff2:	688b      	ldr	r3, [r1, #8]
   d5ff4:	429a      	cmp	r2, r3
   d5ff6:	d307      	bcc.n	d6008 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d5ff8:	6809      	ldr	r1, [r1, #0]
   d5ffa:	f000 ffcb 	bl	d6f94 <strcpy>
			len = rhs.len;
   d5ffe:	68a3      	ldr	r3, [r4, #8]
   d6000:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d6002:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d6004:	60a3      	str	r3, [r4, #8]
}
   d6006:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d6008:	f7ff fa50 	bl	d54ac <free>
	buffer = rhs.buffer;
   d600c:	6823      	ldr	r3, [r4, #0]
   d600e:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d6010:	6863      	ldr	r3, [r4, #4]
   d6012:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d6014:	68a3      	ldr	r3, [r4, #8]
   d6016:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d6018:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d601a:	e9c4 3300 	strd	r3, r3, [r4]
   d601e:	e7f1      	b.n	d6004 <_ZN6String4moveERS_+0x1e>

000d6020 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d6020:	4288      	cmp	r0, r1
{
   d6022:	b510      	push	{r4, lr}
   d6024:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d6026:	d005      	beq.n	d6034 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d6028:	680b      	ldr	r3, [r1, #0]
   d602a:	b12b      	cbz	r3, d6038 <_ZN6StringaSERKS_+0x18>
   d602c:	688a      	ldr	r2, [r1, #8]
   d602e:	4619      	mov	r1, r3
   d6030:	f7ff ffac 	bl	d5f8c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d6034:	4620      	mov	r0, r4
   d6036:	bd10      	pop	{r4, pc}
	else invalidate();
   d6038:	f7ff ff7d 	bl	d5f36 <_ZN6String10invalidateEv>
   d603c:	e7fa      	b.n	d6034 <_ZN6StringaSERKS_+0x14>

000d603e <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d603e:	b510      	push	{r4, lr}
	buffer = NULL;
   d6040:	2300      	movs	r3, #0
String::String(const String &value)
   d6042:	4604      	mov	r4, r0
	capacity = 0;
   d6044:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d6048:	6083      	str	r3, [r0, #8]
	flags = 0;
   d604a:	7303      	strb	r3, [r0, #12]
	*this = value;
   d604c:	f7ff ffe8 	bl	d6020 <_ZN6StringaSERKS_>
}
   d6050:	4620      	mov	r0, r4
   d6052:	bd10      	pop	{r4, pc}

000d6054 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d6054:	4288      	cmp	r0, r1
{
   d6056:	b510      	push	{r4, lr}
   d6058:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d605a:	d001      	beq.n	d6060 <_ZN6StringaSEOS_+0xc>
   d605c:	f7ff ffc3 	bl	d5fe6 <_ZN6String4moveERS_>
	return *this;
}
   d6060:	4620      	mov	r0, r4
   d6062:	bd10      	pop	{r4, pc}

000d6064 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d6064:	b513      	push	{r0, r1, r4, lr}
   d6066:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d6068:	b159      	cbz	r1, d6082 <_ZN6StringaSEPKc+0x1e>
   d606a:	4608      	mov	r0, r1
   d606c:	9101      	str	r1, [sp, #4]
   d606e:	f000 ff99 	bl	d6fa4 <strlen>
   d6072:	9901      	ldr	r1, [sp, #4]
   d6074:	4602      	mov	r2, r0
   d6076:	4620      	mov	r0, r4
   d6078:	f7ff ff88 	bl	d5f8c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d607c:	4620      	mov	r0, r4
   d607e:	b002      	add	sp, #8
   d6080:	bd10      	pop	{r4, pc}
	else invalidate();
   d6082:	f7ff ff58 	bl	d5f36 <_ZN6String10invalidateEv>
   d6086:	e7f9      	b.n	d607c <_ZN6StringaSEPKc+0x18>

000d6088 <_ZN6StringC1Ec>:
String::String(char c)
   d6088:	b513      	push	{r0, r1, r4, lr}
	buffer = NULL;
   d608a:	2300      	movs	r3, #0
	buf[0] = c;
   d608c:	f88d 1004 	strb.w	r1, [sp, #4]
	capacity = 0;
   d6090:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d6094:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6096:	7303      	strb	r3, [r0, #12]
	*this = buf;
   d6098:	a901      	add	r1, sp, #4
String::String(char c)
   d609a:	4604      	mov	r4, r0
	buf[1] = 0;
   d609c:	f88d 3005 	strb.w	r3, [sp, #5]
	*this = buf;
   d60a0:	f7ff ffe0 	bl	d6064 <_ZN6StringaSEPKc>
}
   d60a4:	4620      	mov	r0, r4
   d60a6:	b002      	add	sp, #8
   d60a8:	bd10      	pop	{r4, pc}

000d60aa <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d60aa:	b570      	push	{r4, r5, r6, lr}
   d60ac:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d60ae:	460e      	mov	r6, r1
   d60b0:	b909      	cbnz	r1, d60b6 <_ZN6String6concatEPKcj+0xc>
   d60b2:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d60b4:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d60b6:	b16a      	cbz	r2, d60d4 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d60b8:	6884      	ldr	r4, [r0, #8]
   d60ba:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d60bc:	4621      	mov	r1, r4
   d60be:	f7ff ff51 	bl	d5f64 <_ZN6String7reserveEj>
   d60c2:	2800      	cmp	r0, #0
   d60c4:	d0f5      	beq.n	d60b2 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d60c6:	6828      	ldr	r0, [r5, #0]
   d60c8:	68ab      	ldr	r3, [r5, #8]
   d60ca:	4631      	mov	r1, r6
   d60cc:	4418      	add	r0, r3
   d60ce:	f000 ff61 	bl	d6f94 <strcpy>
	len = newlen;
   d60d2:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d60d4:	2001      	movs	r0, #1
   d60d6:	e7ed      	b.n	d60b4 <_ZN6String6concatEPKcj+0xa>

000d60d8 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   d60d8:	688a      	ldr	r2, [r1, #8]
   d60da:	6809      	ldr	r1, [r1, #0]
   d60dc:	f7ff bfe5 	b.w	d60aa <_ZN6String6concatEPKcj>

000d60e0 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   d60e0:	b40e      	push	{r1, r2, r3}
   d60e2:	b570      	push	{r4, r5, r6, lr}
   d60e4:	b087      	sub	sp, #28
   d60e6:	ad0b      	add	r5, sp, #44	; 0x2c
   d60e8:	4604      	mov	r4, r0
   d60ea:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d60ee:	9201      	str	r2, [sp, #4]
   d60f0:	462b      	mov	r3, r5
   d60f2:	2105      	movs	r1, #5
   d60f4:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   d60f6:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d60f8:	f7ff f9e8 	bl	d54cc <vsnprintf>
    va_end(marker);

    String result;
   d60fc:	490b      	ldr	r1, [pc, #44]	; (d612c <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d60fe:	4606      	mov	r6, r0
    String result;
   d6100:	4620      	mov	r0, r4
   d6102:	f7ff ff5c 	bl	d5fbe <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
   d6106:	4631      	mov	r1, r6
   d6108:	4620      	mov	r0, r4
   d610a:	f7ff ff2b 	bl	d5f64 <_ZN6String7reserveEj>
    if (result.buffer) {
   d610e:	6820      	ldr	r0, [r4, #0]
   d6110:	b130      	cbz	r0, d6120 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d6112:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   d6114:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d6116:	462b      	mov	r3, r5
   d6118:	1c71      	adds	r1, r6, #1
   d611a:	f7ff f9d7 	bl	d54cc <vsnprintf>
        va_end(marker);
        result.len = n;
   d611e:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   d6120:	4620      	mov	r0, r4
   d6122:	b007      	add	sp, #28
   d6124:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d6128:	b003      	add	sp, #12
   d612a:	4770      	bx	lr
   d612c:	000d7343 	.word	0x000d7343

000d6130 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d6130:	4b05      	ldr	r3, [pc, #20]	; (d6148 <_GLOBAL__sub_I_System+0x18>)
   d6132:	2202      	movs	r2, #2
   d6134:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d6136:	4b05      	ldr	r3, [pc, #20]	; (d614c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   d6138:	4a05      	ldr	r2, [pc, #20]	; (d6150 <_GLOBAL__sub_I_System+0x20>)
   d613a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d613c:	2000      	movs	r0, #0
   d613e:	6018      	str	r0, [r3, #0]
   d6140:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   d6142:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d6144:	f7ff b8f6 	b.w	d5334 <set_system_mode>
   d6148:	2003e5dc 	.word	0x2003e5dc
   d614c:	2003e5d0 	.word	0x2003e5d0
   d6150:	ffff0000 	.word	0xffff0000

000d6154 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d6154:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d6156:	2000      	movs	r0, #0
   d6158:	f7ff f930 	bl	d53bc <spark_sync_time_pending>
   d615c:	b128      	cbz	r0, d616a <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d615e:	f7ff f925 	bl	d53ac <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d6162:	f080 0001 	eor.w	r0, r0, #1
   d6166:	b2c0      	uxtb	r0, r0
    }
   d6168:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d616a:	2001      	movs	r0, #1
   d616c:	e7fc      	b.n	d6168 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d616e <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d616e:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d6170:	2000      	movs	r0, #0
   d6172:	f7fe ff6f 	bl	d5054 <hal_rtc_time_is_valid>
    if (rtcstate)
   d6176:	4604      	mov	r4, r0
   d6178:	b9a0      	cbnz	r0, d61a4 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d617a:	f7ff f8d3 	bl	d5324 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d617e:	2801      	cmp	r0, #1
   d6180:	d110      	bne.n	d61a4 <_ZN9TimeClass7isValidEv+0x36>
   d6182:	4620      	mov	r0, r4
   d6184:	f7ff f8ee 	bl	d5364 <system_thread_get_state>
   d6188:	b960      	cbnz	r0, d61a4 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d618a:	f7ff ffe3 	bl	d6154 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d618e:	b910      	cbnz	r0, d6196 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d6190:	f7ff f904 	bl	d539c <spark_process>
        while (_while() && !_condition()) {
   d6194:	e7f9      	b.n	d618a <_ZN9TimeClass7isValidEv+0x1c>
   d6196:	f7ff ffdd 	bl	d6154 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d619a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d619e:	2000      	movs	r0, #0
   d61a0:	f7fe bf58 	b.w	d5054 <hal_rtc_time_is_valid>
}
   d61a4:	4620      	mov	r0, r4
   d61a6:	bd10      	pop	{r4, pc}

000d61a8 <_ZN9TimeClass3nowEv>:
{
   d61a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d61aa:	f7ff ffe0 	bl	d616e <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d61ae:	2210      	movs	r2, #16
   d61b0:	2100      	movs	r1, #0
   d61b2:	4668      	mov	r0, sp
   d61b4:	f000 feb8 	bl	d6f28 <memset>
    hal_rtc_get_time(&tv, nullptr);
   d61b8:	2100      	movs	r1, #0
   d61ba:	4668      	mov	r0, sp
   d61bc:	f7fe ff52 	bl	d5064 <hal_rtc_get_time>
}
   d61c0:	9800      	ldr	r0, [sp, #0]
   d61c2:	b005      	add	sp, #20
   d61c4:	f85d fb04 	ldr.w	pc, [sp], #4

000d61c8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d61c8:	4b02      	ldr	r3, [pc, #8]	; (d61d4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d61ca:	681a      	ldr	r2, [r3, #0]
   d61cc:	4b02      	ldr	r3, [pc, #8]	; (d61d8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d61ce:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d61d0:	4770      	bx	lr
   d61d2:	bf00      	nop
   d61d4:	2003e460 	.word	0x2003e460
   d61d8:	2003e5e0 	.word	0x2003e5e0

000d61dc <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d61dc:	4770      	bx	lr

000d61de <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d61de:	7441      	strb	r1, [r0, #17]
}
   d61e0:	4770      	bx	lr

000d61e2 <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d61e2:	4770      	bx	lr

000d61e4 <_ZN11USARTSerial17availableForWriteEv>:
{
   d61e4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d61e6:	7c00      	ldrb	r0, [r0, #16]
   d61e8:	f7ff f80c 	bl	d5204 <hal_usart_available_data_for_write>
}
   d61ec:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d61f0:	bd08      	pop	{r3, pc}

000d61f2 <_ZN11USARTSerial9availableEv>:
{
   d61f2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d61f4:	7c00      	ldrb	r0, [r0, #16]
   d61f6:	f7fe ffdd 	bl	d51b4 <hal_usart_available>
}
   d61fa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d61fe:	bd08      	pop	{r3, pc}

000d6200 <_ZN11USARTSerial4peekEv>:
{
   d6200:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d6202:	7c00      	ldrb	r0, [r0, #16]
   d6204:	f7fe ffe6 	bl	d51d4 <hal_usart_peek>
}
   d6208:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d620c:	bd08      	pop	{r3, pc}

000d620e <_ZN11USARTSerial4readEv>:
{
   d620e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d6210:	7c00      	ldrb	r0, [r0, #16]
   d6212:	f7fe ffd7 	bl	d51c4 <hal_usart_read>
}
   d6216:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d621a:	bd08      	pop	{r3, pc}

000d621c <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   d621c:	7c00      	ldrb	r0, [r0, #16]
   d621e:	f7fe bfe1 	b.w	d51e4 <hal_usart_flush>

000d6222 <_ZN11USARTSerial5writeEh>:
{
   d6222:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6224:	7c45      	ldrb	r5, [r0, #17]
{
   d6226:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6228:	b12d      	cbz	r5, d6236 <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   d622a:	7c20      	ldrb	r0, [r4, #16]
}
   d622c:	b003      	add	sp, #12
   d622e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d6232:	f7fe bfb7 	b.w	d51a4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6236:	7c00      	ldrb	r0, [r0, #16]
   d6238:	9101      	str	r1, [sp, #4]
   d623a:	f7fe ffe3 	bl	d5204 <hal_usart_available_data_for_write>
   d623e:	2800      	cmp	r0, #0
   d6240:	9901      	ldr	r1, [sp, #4]
   d6242:	dcf2      	bgt.n	d622a <_ZN11USARTSerial5writeEh+0x8>
}
   d6244:	4628      	mov	r0, r5
   d6246:	b003      	add	sp, #12
   d6248:	bd30      	pop	{r4, r5, pc}

000d624a <_ZN11USARTSerialD0Ev>:
   d624a:	b510      	push	{r4, lr}
   d624c:	2114      	movs	r1, #20
   d624e:	4604      	mov	r4, r0
   d6250:	f000 fa40 	bl	d66d4 <_ZdlPvj>
   d6254:	4620      	mov	r0, r4
   d6256:	bd10      	pop	{r4, pc}

000d6258 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d6258:	b510      	push	{r4, lr}
   d625a:	f04f 0c00 	mov.w	ip, #0
   d625e:	4604      	mov	r4, r0
   d6260:	4608      	mov	r0, r1
   d6262:	4611      	mov	r1, r2
   d6264:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6268:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d626c:	4a04      	ldr	r2, [pc, #16]	; (d6280 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d626e:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d6270:	2201      	movs	r2, #1
  _serial = serial;
   d6272:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6274:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d6276:	461a      	mov	r2, r3
   d6278:	f7fe ff8c 	bl	d5194 <hal_usart_init>
}
   d627c:	4620      	mov	r0, r4
   d627e:	bd10      	pop	{r4, pc}
   d6280:	000d73cc 	.word	0x000d73cc

000d6284 <_Z22__fetch_global_Serial1v>:
{
   d6284:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6286:	4c0d      	ldr	r4, [pc, #52]	; (d62bc <_Z22__fetch_global_Serial1v+0x38>)
   d6288:	7821      	ldrb	r1, [r4, #0]
   d628a:	f3bf 8f5b 	dmb	ish
   d628e:	f011 0101 	ands.w	r1, r1, #1
   d6292:	d110      	bne.n	d62b6 <_Z22__fetch_global_Serial1v+0x32>
   d6294:	4620      	mov	r0, r4
   d6296:	9101      	str	r1, [sp, #4]
   d6298:	f7fd ff05 	bl	d40a6 <__cxa_guard_acquire>
   d629c:	9901      	ldr	r1, [sp, #4]
   d629e:	b150      	cbz	r0, d62b6 <_Z22__fetch_global_Serial1v+0x32>
   d62a0:	4b07      	ldr	r3, [pc, #28]	; (d62c0 <_Z22__fetch_global_Serial1v+0x3c>)
   d62a2:	4a08      	ldr	r2, [pc, #32]	; (d62c4 <_Z22__fetch_global_Serial1v+0x40>)
   d62a4:	4808      	ldr	r0, [pc, #32]	; (d62c8 <_Z22__fetch_global_Serial1v+0x44>)
   d62a6:	f7ff ffd7 	bl	d6258 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d62aa:	4620      	mov	r0, r4
   d62ac:	f7fd ff00 	bl	d40b0 <__cxa_guard_release>
   d62b0:	4806      	ldr	r0, [pc, #24]	; (d62cc <_Z22__fetch_global_Serial1v+0x48>)
   d62b2:	f000 fe0b 	bl	d6ecc <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d62b6:	4804      	ldr	r0, [pc, #16]	; (d62c8 <_Z22__fetch_global_Serial1v+0x44>)
   d62b8:	b002      	add	sp, #8
   d62ba:	bd10      	pop	{r4, pc}
   d62bc:	2003e5e4 	.word	0x2003e5e4
   d62c0:	2003e66c 	.word	0x2003e66c
   d62c4:	2003e5e8 	.word	0x2003e5e8
   d62c8:	2003e6f0 	.word	0x2003e6f0
   d62cc:	000d61e3 	.word	0x000d61e3

000d62d0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d62d0:	7441      	strb	r1, [r0, #17]
}
   d62d2:	4770      	bx	lr

000d62d4 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d62d4:	4770      	bx	lr

000d62d6 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d62d6:	4770      	bx	lr

000d62d8 <_ZN9USBSerial4readEv>:
{
   d62d8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d62da:	2100      	movs	r1, #0
   d62dc:	7c00      	ldrb	r0, [r0, #16]
   d62de:	f7fe ffb9 	bl	d5254 <HAL_USB_USART_Receive_Data>
}
   d62e2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d62e6:	bd08      	pop	{r3, pc}

000d62e8 <_ZN9USBSerial4peekEv>:
{
   d62e8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d62ea:	2101      	movs	r1, #1
   d62ec:	7c00      	ldrb	r0, [r0, #16]
   d62ee:	f7fe ffb1 	bl	d5254 <HAL_USB_USART_Receive_Data>
}
   d62f2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d62f6:	bd08      	pop	{r3, pc}

000d62f8 <_ZN9USBSerial17availableForWriteEv>:
{
   d62f8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d62fa:	7c00      	ldrb	r0, [r0, #16]
   d62fc:	f7fe ffa2 	bl	d5244 <HAL_USB_USART_Available_Data_For_Write>
}
   d6300:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6304:	bd08      	pop	{r3, pc}

000d6306 <_ZN9USBSerial9availableEv>:
{
   d6306:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6308:	7c00      	ldrb	r0, [r0, #16]
   d630a:	f7fe ff93 	bl	d5234 <HAL_USB_USART_Available_Data>
}
   d630e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6312:	bd08      	pop	{r3, pc}

000d6314 <_ZN9USBSerial5writeEh>:
{
   d6314:	b513      	push	{r0, r1, r4, lr}
   d6316:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6318:	7c00      	ldrb	r0, [r0, #16]
{
   d631a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d631c:	f7fe ff92 	bl	d5244 <HAL_USB_USART_Available_Data_For_Write>
   d6320:	2800      	cmp	r0, #0
   d6322:	9901      	ldr	r1, [sp, #4]
   d6324:	dc01      	bgt.n	d632a <_ZN9USBSerial5writeEh+0x16>
   d6326:	7c60      	ldrb	r0, [r4, #17]
   d6328:	b120      	cbz	r0, d6334 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d632a:	7c20      	ldrb	r0, [r4, #16]
   d632c:	f7fe ff9a 	bl	d5264 <HAL_USB_USART_Send_Data>
   d6330:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d6334:	b002      	add	sp, #8
   d6336:	bd10      	pop	{r4, pc}

000d6338 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d6338:	7c00      	ldrb	r0, [r0, #16]
   d633a:	f7fe bf9b 	b.w	d5274 <HAL_USB_USART_Flush_Data>

000d633e <_ZN9USBSerialD0Ev>:
   d633e:	b510      	push	{r4, lr}
   d6340:	2114      	movs	r1, #20
   d6342:	4604      	mov	r4, r0
   d6344:	f000 f9c6 	bl	d66d4 <_ZdlPvj>
   d6348:	4620      	mov	r0, r4
   d634a:	bd10      	pop	{r4, pc}

000d634c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d634c:	b510      	push	{r4, lr}
   d634e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6352:	4604      	mov	r4, r0
   d6354:	4608      	mov	r0, r1
   d6356:	2100      	movs	r1, #0
   d6358:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d635c:	4b04      	ldr	r3, [pc, #16]	; (d6370 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d635e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d6360:	2301      	movs	r3, #1
  _serial = serial;
   d6362:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6364:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d6366:	4611      	mov	r1, r2
   d6368:	f7fe ff54 	bl	d5214 <HAL_USB_USART_Init>
}
   d636c:	4620      	mov	r0, r4
   d636e:	bd10      	pop	{r4, pc}
   d6370:	000d73fc 	.word	0x000d73fc

000d6374 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6374:	7c00      	ldrb	r0, [r0, #16]
   d6376:	2200      	movs	r2, #0
   d6378:	f7fe bf54 	b.w	d5224 <HAL_USB_USART_Begin>

000d637c <_Z19acquireSerialBufferv>:
{
   d637c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d637e:	2214      	movs	r2, #20
{
   d6380:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6382:	2100      	movs	r1, #0
   d6384:	f000 fdd0 	bl	d6f28 <memset>
}
   d6388:	4620      	mov	r0, r4
   d638a:	bd10      	pop	{r4, pc}

000d638c <_Z16_fetch_usbserialv>:
{
   d638c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d638e:	4c0f      	ldr	r4, [pc, #60]	; (d63cc <_Z16_fetch_usbserialv+0x40>)
{
   d6390:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6392:	a803      	add	r0, sp, #12
   d6394:	f7ff fff2 	bl	d637c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6398:	7821      	ldrb	r1, [r4, #0]
   d639a:	f3bf 8f5b 	dmb	ish
   d639e:	f011 0101 	ands.w	r1, r1, #1
   d63a2:	d10f      	bne.n	d63c4 <_Z16_fetch_usbserialv+0x38>
   d63a4:	4620      	mov	r0, r4
   d63a6:	9101      	str	r1, [sp, #4]
   d63a8:	f7fd fe7d 	bl	d40a6 <__cxa_guard_acquire>
   d63ac:	9901      	ldr	r1, [sp, #4]
   d63ae:	b148      	cbz	r0, d63c4 <_Z16_fetch_usbserialv+0x38>
   d63b0:	aa03      	add	r2, sp, #12
   d63b2:	4807      	ldr	r0, [pc, #28]	; (d63d0 <_Z16_fetch_usbserialv+0x44>)
   d63b4:	f7ff ffca 	bl	d634c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d63b8:	4620      	mov	r0, r4
   d63ba:	f7fd fe79 	bl	d40b0 <__cxa_guard_release>
   d63be:	4805      	ldr	r0, [pc, #20]	; (d63d4 <_Z16_fetch_usbserialv+0x48>)
   d63c0:	f000 fd84 	bl	d6ecc <atexit>
	return _usbserial;
}
   d63c4:	4802      	ldr	r0, [pc, #8]	; (d63d0 <_Z16_fetch_usbserialv+0x44>)
   d63c6:	b008      	add	sp, #32
   d63c8:	bd10      	pop	{r4, pc}
   d63ca:	bf00      	nop
   d63cc:	2003e704 	.word	0x2003e704
   d63d0:	2003e708 	.word	0x2003e708
   d63d4:	000d62d5 	.word	0x000d62d5

000d63d8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d63d8:	2200      	movs	r2, #0
   d63da:	6840      	ldr	r0, [r0, #4]
   d63dc:	4611      	mov	r1, r2
   d63de:	f7ff b815 	b.w	d540c <network_ready>

000d63e2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d63e2:	2200      	movs	r2, #0
   d63e4:	6840      	ldr	r0, [r0, #4]
   d63e6:	4611      	mov	r1, r2
   d63e8:	f7ff b830 	b.w	d544c <network_listening>

000d63ec <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d63ec:	2200      	movs	r2, #0
   d63ee:	6840      	ldr	r0, [r0, #4]
   d63f0:	4611      	mov	r1, r2
   d63f2:	f7ff b83b 	b.w	d546c <network_get_listen_timeout>

000d63f6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d63f6:	6840      	ldr	r0, [r0, #4]
   d63f8:	2200      	movs	r2, #0
   d63fa:	f7ff b82f 	b.w	d545c <network_set_listen_timeout>

000d63fe <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d63fe:	6840      	ldr	r0, [r0, #4]
   d6400:	2200      	movs	r2, #0
   d6402:	f081 0101 	eor.w	r1, r1, #1
   d6406:	f7ff b819 	b.w	d543c <network_listen>

000d640a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d640a:	2300      	movs	r3, #0
   d640c:	6840      	ldr	r0, [r0, #4]
   d640e:	461a      	mov	r2, r3
   d6410:	4619      	mov	r1, r3
   d6412:	f7ff b80b 	b.w	d542c <network_off>

000d6416 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d6416:	2300      	movs	r3, #0
   d6418:	6840      	ldr	r0, [r0, #4]
   d641a:	461a      	mov	r2, r3
   d641c:	4619      	mov	r1, r3
   d641e:	f7fe bffd 	b.w	d541c <network_on>

000d6422 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d6422:	2200      	movs	r2, #0
   d6424:	6840      	ldr	r0, [r0, #4]
   d6426:	4611      	mov	r1, r2
   d6428:	f7fe bfe0 	b.w	d53ec <network_connecting>

000d642c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d642c:	6840      	ldr	r0, [r0, #4]
   d642e:	2200      	movs	r2, #0
   d6430:	2102      	movs	r1, #2
   d6432:	f7fe bfe3 	b.w	d53fc <network_disconnect>

000d6436 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d6436:	2300      	movs	r3, #0
   d6438:	6840      	ldr	r0, [r0, #4]
   d643a:	461a      	mov	r2, r3
   d643c:	f7fe bfce 	b.w	d53dc <network_connect>

000d6440 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d6440:	4b02      	ldr	r3, [pc, #8]	; (d644c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d6442:	2204      	movs	r2, #4
   d6444:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d6446:	4a02      	ldr	r2, [pc, #8]	; (d6450 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d6448:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d644a:	4770      	bx	lr
   d644c:	2003e71c 	.word	0x2003e71c
   d6450:	000d742c 	.word	0x000d742c

000d6454 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d6454:	4b01      	ldr	r3, [pc, #4]	; (d645c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d6456:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d6458:	4770      	bx	lr
   d645a:	bf00      	nop
   d645c:	2003e464 	.word	0x2003e464

000d6460 <serialEventRun>:
{
   d6460:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6462:	4b0b      	ldr	r3, [pc, #44]	; (d6490 <serialEventRun+0x30>)
   d6464:	b143      	cbz	r3, d6478 <serialEventRun+0x18>
   d6466:	f7ff ff91 	bl	d638c <_Z16_fetch_usbserialv>
   d646a:	6803      	ldr	r3, [r0, #0]
   d646c:	691b      	ldr	r3, [r3, #16]
   d646e:	4798      	blx	r3
   d6470:	2800      	cmp	r0, #0
   d6472:	dd01      	ble.n	d6478 <serialEventRun+0x18>
        serialEvent();
   d6474:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d6478:	4b06      	ldr	r3, [pc, #24]	; (d6494 <serialEventRun+0x34>)
   d647a:	b143      	cbz	r3, d648e <serialEventRun+0x2e>
   d647c:	f7ff ff02 	bl	d6284 <_Z22__fetch_global_Serial1v>
   d6480:	6803      	ldr	r3, [r0, #0]
   d6482:	691b      	ldr	r3, [r3, #16]
   d6484:	4798      	blx	r3
   d6486:	2800      	cmp	r0, #0
   d6488:	dd01      	ble.n	d648e <serialEventRun+0x2e>
        serialEvent1();
   d648a:	f3af 8000 	nop.w
}
   d648e:	bd08      	pop	{r3, pc}
	...

000d6498 <_post_loop>:
{
   d6498:	b508      	push	{r3, lr}
	serialEventRun();
   d649a:	f7ff ffe1 	bl	d6460 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d649e:	f7fe fdd1 	bl	d5044 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d64a2:	4b01      	ldr	r3, [pc, #4]	; (d64a8 <_post_loop+0x10>)
   d64a4:	6018      	str	r0, [r3, #0]
}
   d64a6:	bd08      	pop	{r3, pc}
   d64a8:	2003e738 	.word	0x2003e738

000d64ac <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d64ac:	4805      	ldr	r0, [pc, #20]	; (d64c4 <_Z33system_initialize_user_backup_ramv+0x18>)
   d64ae:	4a06      	ldr	r2, [pc, #24]	; (d64c8 <_Z33system_initialize_user_backup_ramv+0x1c>)
   d64b0:	4906      	ldr	r1, [pc, #24]	; (d64cc <_Z33system_initialize_user_backup_ramv+0x20>)
{
   d64b2:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d64b4:	1a12      	subs	r2, r2, r0
   d64b6:	f000 fd0f 	bl	d6ed8 <memcpy>
    __backup_sram_signature = signature;
   d64ba:	4b05      	ldr	r3, [pc, #20]	; (d64d0 <_Z33system_initialize_user_backup_ramv+0x24>)
   d64bc:	4a05      	ldr	r2, [pc, #20]	; (d64d4 <_Z33system_initialize_user_backup_ramv+0x28>)
   d64be:	601a      	str	r2, [r3, #0]
}
   d64c0:	bd08      	pop	{r3, pc}
   d64c2:	bf00      	nop
   d64c4:	2003f400 	.word	0x2003f400
   d64c8:	2003f404 	.word	0x2003f404
   d64cc:	000d7590 	.word	0x000d7590
   d64d0:	2003f400 	.word	0x2003f400
   d64d4:	9a271c1e 	.word	0x9a271c1e

000d64d8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d64d8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d64da:	2300      	movs	r3, #0
   d64dc:	9300      	str	r3, [sp, #0]
   d64de:	461a      	mov	r2, r3
   d64e0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d64e4:	f7fe ff50 	bl	d5388 <system_ctrl_set_result>
}
   d64e8:	b003      	add	sp, #12
   d64ea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d64f0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d64f0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d64f2:	8843      	ldrh	r3, [r0, #2]
   d64f4:	2b0a      	cmp	r3, #10
   d64f6:	d008      	beq.n	d650a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d64f8:	2b50      	cmp	r3, #80	; 0x50
   d64fa:	d10b      	bne.n	d6514 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d64fc:	4b09      	ldr	r3, [pc, #36]	; (d6524 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d64fe:	681b      	ldr	r3, [r3, #0]
   d6500:	b14b      	cbz	r3, d6516 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d6502:	b003      	add	sp, #12
   d6504:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d6508:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d650a:	f7ff ffe5 	bl	d64d8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d650e:	b003      	add	sp, #12
   d6510:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6514:	2300      	movs	r3, #0
   d6516:	9300      	str	r3, [sp, #0]
   d6518:	461a      	mov	r2, r3
   d651a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d651e:	f7fe ff33 	bl	d5388 <system_ctrl_set_result>
}
   d6522:	e7f4      	b.n	d650e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d6524:	2003e728 	.word	0x2003e728

000d6528 <module_user_init_hook>:
{
   d6528:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d652a:	4812      	ldr	r0, [pc, #72]	; (d6574 <module_user_init_hook+0x4c>)
   d652c:	2100      	movs	r1, #0
   d652e:	f7fe ffd5 	bl	d54dc <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   d6532:	4b11      	ldr	r3, [pc, #68]	; (d6578 <module_user_init_hook+0x50>)
   d6534:	681a      	ldr	r2, [r3, #0]
   d6536:	4b11      	ldr	r3, [pc, #68]	; (d657c <module_user_init_hook+0x54>)
   d6538:	429a      	cmp	r2, r3
   d653a:	4b11      	ldr	r3, [pc, #68]	; (d6580 <module_user_init_hook+0x58>)
   d653c:	bf0c      	ite	eq
   d653e:	2201      	moveq	r2, #1
   d6540:	2200      	movne	r2, #0
   d6542:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d6544:	d001      	beq.n	d654a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   d6546:	f7ff ffb1 	bl	d64ac <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d654a:	f7fe fd6b 	bl	d5024 <HAL_RNG_GetRandomNumber>
   d654e:	4604      	mov	r4, r0
    srand(seed);
   d6550:	f000 fcf2 	bl	d6f38 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6554:	4b0b      	ldr	r3, [pc, #44]	; (d6584 <module_user_init_hook+0x5c>)
   d6556:	b113      	cbz	r3, d655e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   d6558:	4620      	mov	r0, r4
   d655a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d655e:	2100      	movs	r1, #0
   d6560:	4808      	ldr	r0, [pc, #32]	; (d6584 <module_user_init_hook+0x5c>)
   d6562:	f7fe ff33 	bl	d53cc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d6566:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d656a:	4807      	ldr	r0, [pc, #28]	; (d6588 <module_user_init_hook+0x60>)
   d656c:	2100      	movs	r1, #0
   d656e:	f7fe bf01 	b.w	d5374 <system_ctrl_set_app_request_handler>
   d6572:	bf00      	nop
   d6574:	000d6455 	.word	0x000d6455
   d6578:	2003f400 	.word	0x2003f400
   d657c:	9a271c1e 	.word	0x9a271c1e
   d6580:	2003e724 	.word	0x2003e724
   d6584:	00000000 	.word	0x00000000
   d6588:	000d64f1 	.word	0x000d64f1

000d658c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d658c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d658e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d6590:	d902      	bls.n	d6598 <pinAvailable+0xc>
    return false;
   d6592:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d6594:	b002      	add	sp, #8
   d6596:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d6598:	f1a0 030b 	sub.w	r3, r0, #11
   d659c:	2b02      	cmp	r3, #2
   d659e:	d81a      	bhi.n	d65d6 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d65a0:	4c17      	ldr	r4, [pc, #92]	; (d6600 <pinAvailable+0x74>)
   d65a2:	7821      	ldrb	r1, [r4, #0]
   d65a4:	f3bf 8f5b 	dmb	ish
   d65a8:	f011 0101 	ands.w	r1, r1, #1
   d65ac:	d10b      	bne.n	d65c6 <pinAvailable+0x3a>
   d65ae:	4620      	mov	r0, r4
   d65b0:	9101      	str	r1, [sp, #4]
   d65b2:	f7fd fd78 	bl	d40a6 <__cxa_guard_acquire>
   d65b6:	9901      	ldr	r1, [sp, #4]
   d65b8:	b128      	cbz	r0, d65c6 <pinAvailable+0x3a>
   d65ba:	4812      	ldr	r0, [pc, #72]	; (d6604 <pinAvailable+0x78>)
   d65bc:	f7ff fcaa 	bl	d5f14 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d65c0:	4620      	mov	r0, r4
   d65c2:	f7fd fd75 	bl	d40b0 <__cxa_guard_release>
   d65c6:	4b0f      	ldr	r3, [pc, #60]	; (d6604 <pinAvailable+0x78>)
   d65c8:	7818      	ldrb	r0, [r3, #0]
   d65ca:	f7fe fddb 	bl	d5184 <hal_spi_is_enabled>
   d65ce:	2800      	cmp	r0, #0
   d65d0:	d1df      	bne.n	d6592 <pinAvailable+0x6>
  return true; // 'pin' is available
   d65d2:	2001      	movs	r0, #1
   d65d4:	e7de      	b.n	d6594 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d65d6:	2801      	cmp	r0, #1
   d65d8:	d809      	bhi.n	d65ee <pinAvailable+0x62>
   d65da:	f000 f857 	bl	d668c <_Z19__fetch_global_Wirev>
   d65de:	2100      	movs	r1, #0
   d65e0:	7c00      	ldrb	r0, [r0, #16]
   d65e2:	f7fe fd9f 	bl	d5124 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d65e6:	f080 0001 	eor.w	r0, r0, #1
   d65ea:	b2c0      	uxtb	r0, r0
   d65ec:	e7d2      	b.n	d6594 <pinAvailable+0x8>
   d65ee:	3809      	subs	r0, #9
   d65f0:	2801      	cmp	r0, #1
   d65f2:	d8ee      	bhi.n	d65d2 <pinAvailable+0x46>
   d65f4:	f7ff fe46 	bl	d6284 <_Z22__fetch_global_Serial1v>
   d65f8:	7c00      	ldrb	r0, [r0, #16]
   d65fa:	f7fe fdfb 	bl	d51f4 <hal_usart_is_enabled>
   d65fe:	e7f2      	b.n	d65e6 <pinAvailable+0x5a>
   d6600:	2003e72c 	.word	0x2003e72c
   d6604:	2003e730 	.word	0x2003e730

000d6608 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6608:	2823      	cmp	r0, #35	; 0x23
{
   d660a:	b538      	push	{r3, r4, r5, lr}
   d660c:	4604      	mov	r4, r0
   d660e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6610:	d80a      	bhi.n	d6628 <pinMode+0x20>
   d6612:	29ff      	cmp	r1, #255	; 0xff
   d6614:	d008      	beq.n	d6628 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d6616:	f7ff ffb9 	bl	d658c <pinAvailable>
   d661a:	b128      	cbz	r0, d6628 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d661c:	4629      	mov	r1, r5
   d661e:	4620      	mov	r0, r4
}
   d6620:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d6624:	f7fe bd36 	b.w	d5094 <HAL_Pin_Mode>
}
   d6628:	bd38      	pop	{r3, r4, r5, pc}

000d662a <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d662a:	280d      	cmp	r0, #13
{
   d662c:	b510      	push	{r4, lr}
   d662e:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d6630:	bf9c      	itt	ls
   d6632:	340e      	addls	r4, #14
   d6634:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6636:	4620      	mov	r0, r4
   d6638:	f7ff ffa8 	bl	d658c <pinAvailable>
   d663c:	b150      	cbz	r0, d6654 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d663e:	2103      	movs	r1, #3
   d6640:	4620      	mov	r0, r4
   d6642:	f7fe fd1f 	bl	d5084 <HAL_Validate_Pin_Function>
   d6646:	2803      	cmp	r0, #3
   d6648:	d104      	bne.n	d6654 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d664a:	4620      	mov	r0, r4
}
   d664c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d6650:	f7fe bd38 	b.w	d50c4 <hal_adc_read>
}
   d6654:	2000      	movs	r0, #0
   d6656:	bd10      	pop	{r4, pc}

000d6658 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6658:	4770      	bx	lr
	...

000d665c <_Z17acquireWireBufferv>:
{
   d665c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d665e:	2300      	movs	r3, #0
   d6660:	2520      	movs	r5, #32
   d6662:	8043      	strh	r3, [r0, #2]
   d6664:	2314      	movs	r3, #20
{
   d6666:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d6668:	8003      	strh	r3, [r0, #0]
   d666a:	6085      	str	r5, [r0, #8]
   d666c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d666e:	4906      	ldr	r1, [pc, #24]	; (d6688 <_Z17acquireWireBufferv+0x2c>)
   d6670:	4628      	mov	r0, r5
   d6672:	f000 f833 	bl	d66dc <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6676:	4904      	ldr	r1, [pc, #16]	; (d6688 <_Z17acquireWireBufferv+0x2c>)
	};
   d6678:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d667a:	4628      	mov	r0, r5
   d667c:	f000 f82e 	bl	d66dc <_ZnajRKSt9nothrow_t>
	};
   d6680:	60e0      	str	r0, [r4, #12]
}
   d6682:	4620      	mov	r0, r4
   d6684:	bd38      	pop	{r3, r4, r5, pc}
   d6686:	bf00      	nop
   d6688:	000d7460 	.word	0x000d7460

000d668c <_Z19__fetch_global_Wirev>:
{
   d668c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d668e:	4d0e      	ldr	r5, [pc, #56]	; (d66c8 <_Z19__fetch_global_Wirev+0x3c>)
   d6690:	7829      	ldrb	r1, [r5, #0]
   d6692:	f3bf 8f5b 	dmb	ish
   d6696:	f011 0401 	ands.w	r4, r1, #1
{
   d669a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d669c:	d111      	bne.n	d66c2 <_Z19__fetch_global_Wirev+0x36>
   d669e:	4628      	mov	r0, r5
   d66a0:	f7fd fd01 	bl	d40a6 <__cxa_guard_acquire>
   d66a4:	b168      	cbz	r0, d66c2 <_Z19__fetch_global_Wirev+0x36>
   d66a6:	a801      	add	r0, sp, #4
   d66a8:	f7ff ffd8 	bl	d665c <_Z17acquireWireBufferv>
   d66ac:	aa01      	add	r2, sp, #4
   d66ae:	4621      	mov	r1, r4
   d66b0:	4806      	ldr	r0, [pc, #24]	; (d66cc <_Z19__fetch_global_Wirev+0x40>)
   d66b2:	f7fe ff91 	bl	d55d8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d66b6:	4628      	mov	r0, r5
   d66b8:	f7fd fcfa 	bl	d40b0 <__cxa_guard_release>
   d66bc:	4804      	ldr	r0, [pc, #16]	; (d66d0 <_Z19__fetch_global_Wirev+0x44>)
   d66be:	f000 fc05 	bl	d6ecc <atexit>
	return wire;
}
   d66c2:	4802      	ldr	r0, [pc, #8]	; (d66cc <_Z19__fetch_global_Wirev+0x40>)
   d66c4:	b007      	add	sp, #28
   d66c6:	bd30      	pop	{r4, r5, pc}
   d66c8:	2003e73c 	.word	0x2003e73c
   d66cc:	2003e740 	.word	0x2003e740
   d66d0:	000d6659 	.word	0x000d6659

000d66d4 <_ZdlPvj>:
   d66d4:	f7fd bce3 	b.w	d409e <_ZdlPv>

000d66d8 <_ZnwjRKSt9nothrow_t>:
   d66d8:	f7fd bcdd 	b.w	d4096 <_Znwj>

000d66dc <_ZnajRKSt9nothrow_t>:
   d66dc:	f7fd bcdd 	b.w	d409a <_Znaj>

000d66e0 <__aeabi_drsub>:
   d66e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d66e4:	e002      	b.n	d66ec <__adddf3>
   d66e6:	bf00      	nop

000d66e8 <__aeabi_dsub>:
   d66e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d66ec <__adddf3>:
   d66ec:	b530      	push	{r4, r5, lr}
   d66ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d66f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d66f6:	ea94 0f05 	teq	r4, r5
   d66fa:	bf08      	it	eq
   d66fc:	ea90 0f02 	teqeq	r0, r2
   d6700:	bf1f      	itttt	ne
   d6702:	ea54 0c00 	orrsne.w	ip, r4, r0
   d6706:	ea55 0c02 	orrsne.w	ip, r5, r2
   d670a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d670e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6712:	f000 80e2 	beq.w	d68da <__adddf3+0x1ee>
   d6716:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d671a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d671e:	bfb8      	it	lt
   d6720:	426d      	neglt	r5, r5
   d6722:	dd0c      	ble.n	d673e <__adddf3+0x52>
   d6724:	442c      	add	r4, r5
   d6726:	ea80 0202 	eor.w	r2, r0, r2
   d672a:	ea81 0303 	eor.w	r3, r1, r3
   d672e:	ea82 0000 	eor.w	r0, r2, r0
   d6732:	ea83 0101 	eor.w	r1, r3, r1
   d6736:	ea80 0202 	eor.w	r2, r0, r2
   d673a:	ea81 0303 	eor.w	r3, r1, r3
   d673e:	2d36      	cmp	r5, #54	; 0x36
   d6740:	bf88      	it	hi
   d6742:	bd30      	pophi	{r4, r5, pc}
   d6744:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6748:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d674c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d6750:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d6754:	d002      	beq.n	d675c <__adddf3+0x70>
   d6756:	4240      	negs	r0, r0
   d6758:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d675c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d6760:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6764:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6768:	d002      	beq.n	d6770 <__adddf3+0x84>
   d676a:	4252      	negs	r2, r2
   d676c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d6770:	ea94 0f05 	teq	r4, r5
   d6774:	f000 80a7 	beq.w	d68c6 <__adddf3+0x1da>
   d6778:	f1a4 0401 	sub.w	r4, r4, #1
   d677c:	f1d5 0e20 	rsbs	lr, r5, #32
   d6780:	db0d      	blt.n	d679e <__adddf3+0xb2>
   d6782:	fa02 fc0e 	lsl.w	ip, r2, lr
   d6786:	fa22 f205 	lsr.w	r2, r2, r5
   d678a:	1880      	adds	r0, r0, r2
   d678c:	f141 0100 	adc.w	r1, r1, #0
   d6790:	fa03 f20e 	lsl.w	r2, r3, lr
   d6794:	1880      	adds	r0, r0, r2
   d6796:	fa43 f305 	asr.w	r3, r3, r5
   d679a:	4159      	adcs	r1, r3
   d679c:	e00e      	b.n	d67bc <__adddf3+0xd0>
   d679e:	f1a5 0520 	sub.w	r5, r5, #32
   d67a2:	f10e 0e20 	add.w	lr, lr, #32
   d67a6:	2a01      	cmp	r2, #1
   d67a8:	fa03 fc0e 	lsl.w	ip, r3, lr
   d67ac:	bf28      	it	cs
   d67ae:	f04c 0c02 	orrcs.w	ip, ip, #2
   d67b2:	fa43 f305 	asr.w	r3, r3, r5
   d67b6:	18c0      	adds	r0, r0, r3
   d67b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d67bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d67c0:	d507      	bpl.n	d67d2 <__adddf3+0xe6>
   d67c2:	f04f 0e00 	mov.w	lr, #0
   d67c6:	f1dc 0c00 	rsbs	ip, ip, #0
   d67ca:	eb7e 0000 	sbcs.w	r0, lr, r0
   d67ce:	eb6e 0101 	sbc.w	r1, lr, r1
   d67d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d67d6:	d31b      	bcc.n	d6810 <__adddf3+0x124>
   d67d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d67dc:	d30c      	bcc.n	d67f8 <__adddf3+0x10c>
   d67de:	0849      	lsrs	r1, r1, #1
   d67e0:	ea5f 0030 	movs.w	r0, r0, rrx
   d67e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d67e8:	f104 0401 	add.w	r4, r4, #1
   d67ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d67f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d67f4:	f080 809a 	bcs.w	d692c <__adddf3+0x240>
   d67f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d67fc:	bf08      	it	eq
   d67fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6802:	f150 0000 	adcs.w	r0, r0, #0
   d6806:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d680a:	ea41 0105 	orr.w	r1, r1, r5
   d680e:	bd30      	pop	{r4, r5, pc}
   d6810:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d6814:	4140      	adcs	r0, r0
   d6816:	eb41 0101 	adc.w	r1, r1, r1
   d681a:	3c01      	subs	r4, #1
   d681c:	bf28      	it	cs
   d681e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d6822:	d2e9      	bcs.n	d67f8 <__adddf3+0x10c>
   d6824:	f091 0f00 	teq	r1, #0
   d6828:	bf04      	itt	eq
   d682a:	4601      	moveq	r1, r0
   d682c:	2000      	moveq	r0, #0
   d682e:	fab1 f381 	clz	r3, r1
   d6832:	bf08      	it	eq
   d6834:	3320      	addeq	r3, #32
   d6836:	f1a3 030b 	sub.w	r3, r3, #11
   d683a:	f1b3 0220 	subs.w	r2, r3, #32
   d683e:	da0c      	bge.n	d685a <__adddf3+0x16e>
   d6840:	320c      	adds	r2, #12
   d6842:	dd08      	ble.n	d6856 <__adddf3+0x16a>
   d6844:	f102 0c14 	add.w	ip, r2, #20
   d6848:	f1c2 020c 	rsb	r2, r2, #12
   d684c:	fa01 f00c 	lsl.w	r0, r1, ip
   d6850:	fa21 f102 	lsr.w	r1, r1, r2
   d6854:	e00c      	b.n	d6870 <__adddf3+0x184>
   d6856:	f102 0214 	add.w	r2, r2, #20
   d685a:	bfd8      	it	le
   d685c:	f1c2 0c20 	rsble	ip, r2, #32
   d6860:	fa01 f102 	lsl.w	r1, r1, r2
   d6864:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6868:	bfdc      	itt	le
   d686a:	ea41 010c 	orrle.w	r1, r1, ip
   d686e:	4090      	lslle	r0, r2
   d6870:	1ae4      	subs	r4, r4, r3
   d6872:	bfa2      	ittt	ge
   d6874:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6878:	4329      	orrge	r1, r5
   d687a:	bd30      	popge	{r4, r5, pc}
   d687c:	ea6f 0404 	mvn.w	r4, r4
   d6880:	3c1f      	subs	r4, #31
   d6882:	da1c      	bge.n	d68be <__adddf3+0x1d2>
   d6884:	340c      	adds	r4, #12
   d6886:	dc0e      	bgt.n	d68a6 <__adddf3+0x1ba>
   d6888:	f104 0414 	add.w	r4, r4, #20
   d688c:	f1c4 0220 	rsb	r2, r4, #32
   d6890:	fa20 f004 	lsr.w	r0, r0, r4
   d6894:	fa01 f302 	lsl.w	r3, r1, r2
   d6898:	ea40 0003 	orr.w	r0, r0, r3
   d689c:	fa21 f304 	lsr.w	r3, r1, r4
   d68a0:	ea45 0103 	orr.w	r1, r5, r3
   d68a4:	bd30      	pop	{r4, r5, pc}
   d68a6:	f1c4 040c 	rsb	r4, r4, #12
   d68aa:	f1c4 0220 	rsb	r2, r4, #32
   d68ae:	fa20 f002 	lsr.w	r0, r0, r2
   d68b2:	fa01 f304 	lsl.w	r3, r1, r4
   d68b6:	ea40 0003 	orr.w	r0, r0, r3
   d68ba:	4629      	mov	r1, r5
   d68bc:	bd30      	pop	{r4, r5, pc}
   d68be:	fa21 f004 	lsr.w	r0, r1, r4
   d68c2:	4629      	mov	r1, r5
   d68c4:	bd30      	pop	{r4, r5, pc}
   d68c6:	f094 0f00 	teq	r4, #0
   d68ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d68ce:	bf06      	itte	eq
   d68d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d68d4:	3401      	addeq	r4, #1
   d68d6:	3d01      	subne	r5, #1
   d68d8:	e74e      	b.n	d6778 <__adddf3+0x8c>
   d68da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d68de:	bf18      	it	ne
   d68e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d68e4:	d029      	beq.n	d693a <__adddf3+0x24e>
   d68e6:	ea94 0f05 	teq	r4, r5
   d68ea:	bf08      	it	eq
   d68ec:	ea90 0f02 	teqeq	r0, r2
   d68f0:	d005      	beq.n	d68fe <__adddf3+0x212>
   d68f2:	ea54 0c00 	orrs.w	ip, r4, r0
   d68f6:	bf04      	itt	eq
   d68f8:	4619      	moveq	r1, r3
   d68fa:	4610      	moveq	r0, r2
   d68fc:	bd30      	pop	{r4, r5, pc}
   d68fe:	ea91 0f03 	teq	r1, r3
   d6902:	bf1e      	ittt	ne
   d6904:	2100      	movne	r1, #0
   d6906:	2000      	movne	r0, #0
   d6908:	bd30      	popne	{r4, r5, pc}
   d690a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d690e:	d105      	bne.n	d691c <__adddf3+0x230>
   d6910:	0040      	lsls	r0, r0, #1
   d6912:	4149      	adcs	r1, r1
   d6914:	bf28      	it	cs
   d6916:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d691a:	bd30      	pop	{r4, r5, pc}
   d691c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6920:	bf3c      	itt	cc
   d6922:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d6926:	bd30      	popcc	{r4, r5, pc}
   d6928:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d692c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6930:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6934:	f04f 0000 	mov.w	r0, #0
   d6938:	bd30      	pop	{r4, r5, pc}
   d693a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d693e:	bf1a      	itte	ne
   d6940:	4619      	movne	r1, r3
   d6942:	4610      	movne	r0, r2
   d6944:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d6948:	bf1c      	itt	ne
   d694a:	460b      	movne	r3, r1
   d694c:	4602      	movne	r2, r0
   d694e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6952:	bf06      	itte	eq
   d6954:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6958:	ea91 0f03 	teqeq	r1, r3
   d695c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6960:	bd30      	pop	{r4, r5, pc}
   d6962:	bf00      	nop

000d6964 <__aeabi_ui2d>:
   d6964:	f090 0f00 	teq	r0, #0
   d6968:	bf04      	itt	eq
   d696a:	2100      	moveq	r1, #0
   d696c:	4770      	bxeq	lr
   d696e:	b530      	push	{r4, r5, lr}
   d6970:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6974:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6978:	f04f 0500 	mov.w	r5, #0
   d697c:	f04f 0100 	mov.w	r1, #0
   d6980:	e750      	b.n	d6824 <__adddf3+0x138>
   d6982:	bf00      	nop

000d6984 <__aeabi_i2d>:
   d6984:	f090 0f00 	teq	r0, #0
   d6988:	bf04      	itt	eq
   d698a:	2100      	moveq	r1, #0
   d698c:	4770      	bxeq	lr
   d698e:	b530      	push	{r4, r5, lr}
   d6990:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6994:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6998:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d699c:	bf48      	it	mi
   d699e:	4240      	negmi	r0, r0
   d69a0:	f04f 0100 	mov.w	r1, #0
   d69a4:	e73e      	b.n	d6824 <__adddf3+0x138>
   d69a6:	bf00      	nop

000d69a8 <__aeabi_f2d>:
   d69a8:	0042      	lsls	r2, r0, #1
   d69aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d69ae:	ea4f 0131 	mov.w	r1, r1, rrx
   d69b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d69b6:	bf1f      	itttt	ne
   d69b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d69bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d69c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d69c4:	4770      	bxne	lr
   d69c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d69ca:	bf08      	it	eq
   d69cc:	4770      	bxeq	lr
   d69ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d69d2:	bf04      	itt	eq
   d69d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d69d8:	4770      	bxeq	lr
   d69da:	b530      	push	{r4, r5, lr}
   d69dc:	f44f 7460 	mov.w	r4, #896	; 0x380
   d69e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d69e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d69e8:	e71c      	b.n	d6824 <__adddf3+0x138>
   d69ea:	bf00      	nop

000d69ec <__aeabi_ul2d>:
   d69ec:	ea50 0201 	orrs.w	r2, r0, r1
   d69f0:	bf08      	it	eq
   d69f2:	4770      	bxeq	lr
   d69f4:	b530      	push	{r4, r5, lr}
   d69f6:	f04f 0500 	mov.w	r5, #0
   d69fa:	e00a      	b.n	d6a12 <__aeabi_l2d+0x16>

000d69fc <__aeabi_l2d>:
   d69fc:	ea50 0201 	orrs.w	r2, r0, r1
   d6a00:	bf08      	it	eq
   d6a02:	4770      	bxeq	lr
   d6a04:	b530      	push	{r4, r5, lr}
   d6a06:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d6a0a:	d502      	bpl.n	d6a12 <__aeabi_l2d+0x16>
   d6a0c:	4240      	negs	r0, r0
   d6a0e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6a12:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6a16:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6a1a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d6a1e:	f43f aed8 	beq.w	d67d2 <__adddf3+0xe6>
   d6a22:	f04f 0203 	mov.w	r2, #3
   d6a26:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6a2a:	bf18      	it	ne
   d6a2c:	3203      	addne	r2, #3
   d6a2e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6a32:	bf18      	it	ne
   d6a34:	3203      	addne	r2, #3
   d6a36:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d6a3a:	f1c2 0320 	rsb	r3, r2, #32
   d6a3e:	fa00 fc03 	lsl.w	ip, r0, r3
   d6a42:	fa20 f002 	lsr.w	r0, r0, r2
   d6a46:	fa01 fe03 	lsl.w	lr, r1, r3
   d6a4a:	ea40 000e 	orr.w	r0, r0, lr
   d6a4e:	fa21 f102 	lsr.w	r1, r1, r2
   d6a52:	4414      	add	r4, r2
   d6a54:	e6bd      	b.n	d67d2 <__adddf3+0xe6>
   d6a56:	bf00      	nop

000d6a58 <__aeabi_dmul>:
   d6a58:	b570      	push	{r4, r5, r6, lr}
   d6a5a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6a5e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6a62:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6a66:	bf1d      	ittte	ne
   d6a68:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6a6c:	ea94 0f0c 	teqne	r4, ip
   d6a70:	ea95 0f0c 	teqne	r5, ip
   d6a74:	f000 f8de 	bleq	d6c34 <__aeabi_dmul+0x1dc>
   d6a78:	442c      	add	r4, r5
   d6a7a:	ea81 0603 	eor.w	r6, r1, r3
   d6a7e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d6a82:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d6a86:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d6a8a:	bf18      	it	ne
   d6a8c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6a90:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6a94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6a98:	d038      	beq.n	d6b0c <__aeabi_dmul+0xb4>
   d6a9a:	fba0 ce02 	umull	ip, lr, r0, r2
   d6a9e:	f04f 0500 	mov.w	r5, #0
   d6aa2:	fbe1 e502 	umlal	lr, r5, r1, r2
   d6aa6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d6aaa:	fbe0 e503 	umlal	lr, r5, r0, r3
   d6aae:	f04f 0600 	mov.w	r6, #0
   d6ab2:	fbe1 5603 	umlal	r5, r6, r1, r3
   d6ab6:	f09c 0f00 	teq	ip, #0
   d6aba:	bf18      	it	ne
   d6abc:	f04e 0e01 	orrne.w	lr, lr, #1
   d6ac0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d6ac4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6ac8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6acc:	d204      	bcs.n	d6ad8 <__aeabi_dmul+0x80>
   d6ace:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d6ad2:	416d      	adcs	r5, r5
   d6ad4:	eb46 0606 	adc.w	r6, r6, r6
   d6ad8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d6adc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d6ae0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6ae4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6ae8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6aec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6af0:	bf88      	it	hi
   d6af2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6af6:	d81e      	bhi.n	d6b36 <__aeabi_dmul+0xde>
   d6af8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d6afc:	bf08      	it	eq
   d6afe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d6b02:	f150 0000 	adcs.w	r0, r0, #0
   d6b06:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6b0a:	bd70      	pop	{r4, r5, r6, pc}
   d6b0c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d6b10:	ea46 0101 	orr.w	r1, r6, r1
   d6b14:	ea40 0002 	orr.w	r0, r0, r2
   d6b18:	ea81 0103 	eor.w	r1, r1, r3
   d6b1c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d6b20:	bfc2      	ittt	gt
   d6b22:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6b26:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6b2a:	bd70      	popgt	{r4, r5, r6, pc}
   d6b2c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6b30:	f04f 0e00 	mov.w	lr, #0
   d6b34:	3c01      	subs	r4, #1
   d6b36:	f300 80ab 	bgt.w	d6c90 <__aeabi_dmul+0x238>
   d6b3a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d6b3e:	bfde      	ittt	le
   d6b40:	2000      	movle	r0, #0
   d6b42:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d6b46:	bd70      	pople	{r4, r5, r6, pc}
   d6b48:	f1c4 0400 	rsb	r4, r4, #0
   d6b4c:	3c20      	subs	r4, #32
   d6b4e:	da35      	bge.n	d6bbc <__aeabi_dmul+0x164>
   d6b50:	340c      	adds	r4, #12
   d6b52:	dc1b      	bgt.n	d6b8c <__aeabi_dmul+0x134>
   d6b54:	f104 0414 	add.w	r4, r4, #20
   d6b58:	f1c4 0520 	rsb	r5, r4, #32
   d6b5c:	fa00 f305 	lsl.w	r3, r0, r5
   d6b60:	fa20 f004 	lsr.w	r0, r0, r4
   d6b64:	fa01 f205 	lsl.w	r2, r1, r5
   d6b68:	ea40 0002 	orr.w	r0, r0, r2
   d6b6c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d6b70:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6b74:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6b78:	fa21 f604 	lsr.w	r6, r1, r4
   d6b7c:	eb42 0106 	adc.w	r1, r2, r6
   d6b80:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6b84:	bf08      	it	eq
   d6b86:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6b8a:	bd70      	pop	{r4, r5, r6, pc}
   d6b8c:	f1c4 040c 	rsb	r4, r4, #12
   d6b90:	f1c4 0520 	rsb	r5, r4, #32
   d6b94:	fa00 f304 	lsl.w	r3, r0, r4
   d6b98:	fa20 f005 	lsr.w	r0, r0, r5
   d6b9c:	fa01 f204 	lsl.w	r2, r1, r4
   d6ba0:	ea40 0002 	orr.w	r0, r0, r2
   d6ba4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6ba8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6bac:	f141 0100 	adc.w	r1, r1, #0
   d6bb0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6bb4:	bf08      	it	eq
   d6bb6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6bba:	bd70      	pop	{r4, r5, r6, pc}
   d6bbc:	f1c4 0520 	rsb	r5, r4, #32
   d6bc0:	fa00 f205 	lsl.w	r2, r0, r5
   d6bc4:	ea4e 0e02 	orr.w	lr, lr, r2
   d6bc8:	fa20 f304 	lsr.w	r3, r0, r4
   d6bcc:	fa01 f205 	lsl.w	r2, r1, r5
   d6bd0:	ea43 0302 	orr.w	r3, r3, r2
   d6bd4:	fa21 f004 	lsr.w	r0, r1, r4
   d6bd8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6bdc:	fa21 f204 	lsr.w	r2, r1, r4
   d6be0:	ea20 0002 	bic.w	r0, r0, r2
   d6be4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d6be8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6bec:	bf08      	it	eq
   d6bee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6bf2:	bd70      	pop	{r4, r5, r6, pc}
   d6bf4:	f094 0f00 	teq	r4, #0
   d6bf8:	d10f      	bne.n	d6c1a <__aeabi_dmul+0x1c2>
   d6bfa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d6bfe:	0040      	lsls	r0, r0, #1
   d6c00:	eb41 0101 	adc.w	r1, r1, r1
   d6c04:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6c08:	bf08      	it	eq
   d6c0a:	3c01      	subeq	r4, #1
   d6c0c:	d0f7      	beq.n	d6bfe <__aeabi_dmul+0x1a6>
   d6c0e:	ea41 0106 	orr.w	r1, r1, r6
   d6c12:	f095 0f00 	teq	r5, #0
   d6c16:	bf18      	it	ne
   d6c18:	4770      	bxne	lr
   d6c1a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d6c1e:	0052      	lsls	r2, r2, #1
   d6c20:	eb43 0303 	adc.w	r3, r3, r3
   d6c24:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d6c28:	bf08      	it	eq
   d6c2a:	3d01      	subeq	r5, #1
   d6c2c:	d0f7      	beq.n	d6c1e <__aeabi_dmul+0x1c6>
   d6c2e:	ea43 0306 	orr.w	r3, r3, r6
   d6c32:	4770      	bx	lr
   d6c34:	ea94 0f0c 	teq	r4, ip
   d6c38:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6c3c:	bf18      	it	ne
   d6c3e:	ea95 0f0c 	teqne	r5, ip
   d6c42:	d00c      	beq.n	d6c5e <__aeabi_dmul+0x206>
   d6c44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6c48:	bf18      	it	ne
   d6c4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6c4e:	d1d1      	bne.n	d6bf4 <__aeabi_dmul+0x19c>
   d6c50:	ea81 0103 	eor.w	r1, r1, r3
   d6c54:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6c58:	f04f 0000 	mov.w	r0, #0
   d6c5c:	bd70      	pop	{r4, r5, r6, pc}
   d6c5e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6c62:	bf06      	itte	eq
   d6c64:	4610      	moveq	r0, r2
   d6c66:	4619      	moveq	r1, r3
   d6c68:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6c6c:	d019      	beq.n	d6ca2 <__aeabi_dmul+0x24a>
   d6c6e:	ea94 0f0c 	teq	r4, ip
   d6c72:	d102      	bne.n	d6c7a <__aeabi_dmul+0x222>
   d6c74:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6c78:	d113      	bne.n	d6ca2 <__aeabi_dmul+0x24a>
   d6c7a:	ea95 0f0c 	teq	r5, ip
   d6c7e:	d105      	bne.n	d6c8c <__aeabi_dmul+0x234>
   d6c80:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6c84:	bf1c      	itt	ne
   d6c86:	4610      	movne	r0, r2
   d6c88:	4619      	movne	r1, r3
   d6c8a:	d10a      	bne.n	d6ca2 <__aeabi_dmul+0x24a>
   d6c8c:	ea81 0103 	eor.w	r1, r1, r3
   d6c90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6c94:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6c98:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6c9c:	f04f 0000 	mov.w	r0, #0
   d6ca0:	bd70      	pop	{r4, r5, r6, pc}
   d6ca2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6ca6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d6caa:	bd70      	pop	{r4, r5, r6, pc}

000d6cac <__aeabi_ddiv>:
   d6cac:	b570      	push	{r4, r5, r6, lr}
   d6cae:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6cb2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6cb6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6cba:	bf1d      	ittte	ne
   d6cbc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6cc0:	ea94 0f0c 	teqne	r4, ip
   d6cc4:	ea95 0f0c 	teqne	r5, ip
   d6cc8:	f000 f8a7 	bleq	d6e1a <__aeabi_ddiv+0x16e>
   d6ccc:	eba4 0405 	sub.w	r4, r4, r5
   d6cd0:	ea81 0e03 	eor.w	lr, r1, r3
   d6cd4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6cd8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6cdc:	f000 8088 	beq.w	d6df0 <__aeabi_ddiv+0x144>
   d6ce0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6ce4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d6ce8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d6cec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d6cf0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d6cf4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d6cf8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d6cfc:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d6d00:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d6d04:	429d      	cmp	r5, r3
   d6d06:	bf08      	it	eq
   d6d08:	4296      	cmpeq	r6, r2
   d6d0a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d6d0e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d6d12:	d202      	bcs.n	d6d1a <__aeabi_ddiv+0x6e>
   d6d14:	085b      	lsrs	r3, r3, #1
   d6d16:	ea4f 0232 	mov.w	r2, r2, rrx
   d6d1a:	1ab6      	subs	r6, r6, r2
   d6d1c:	eb65 0503 	sbc.w	r5, r5, r3
   d6d20:	085b      	lsrs	r3, r3, #1
   d6d22:	ea4f 0232 	mov.w	r2, r2, rrx
   d6d26:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d6d2a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d6d2e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6d32:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6d36:	bf22      	ittt	cs
   d6d38:	1ab6      	subcs	r6, r6, r2
   d6d3a:	4675      	movcs	r5, lr
   d6d3c:	ea40 000c 	orrcs.w	r0, r0, ip
   d6d40:	085b      	lsrs	r3, r3, #1
   d6d42:	ea4f 0232 	mov.w	r2, r2, rrx
   d6d46:	ebb6 0e02 	subs.w	lr, r6, r2
   d6d4a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6d4e:	bf22      	ittt	cs
   d6d50:	1ab6      	subcs	r6, r6, r2
   d6d52:	4675      	movcs	r5, lr
   d6d54:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6d58:	085b      	lsrs	r3, r3, #1
   d6d5a:	ea4f 0232 	mov.w	r2, r2, rrx
   d6d5e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6d62:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6d66:	bf22      	ittt	cs
   d6d68:	1ab6      	subcs	r6, r6, r2
   d6d6a:	4675      	movcs	r5, lr
   d6d6c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d6d70:	085b      	lsrs	r3, r3, #1
   d6d72:	ea4f 0232 	mov.w	r2, r2, rrx
   d6d76:	ebb6 0e02 	subs.w	lr, r6, r2
   d6d7a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6d7e:	bf22      	ittt	cs
   d6d80:	1ab6      	subcs	r6, r6, r2
   d6d82:	4675      	movcs	r5, lr
   d6d84:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6d88:	ea55 0e06 	orrs.w	lr, r5, r6
   d6d8c:	d018      	beq.n	d6dc0 <__aeabi_ddiv+0x114>
   d6d8e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d6d92:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d6d96:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d6d9a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d6d9e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d6da2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d6da6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d6daa:	d1c0      	bne.n	d6d2e <__aeabi_ddiv+0x82>
   d6dac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6db0:	d10b      	bne.n	d6dca <__aeabi_ddiv+0x11e>
   d6db2:	ea41 0100 	orr.w	r1, r1, r0
   d6db6:	f04f 0000 	mov.w	r0, #0
   d6dba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d6dbe:	e7b6      	b.n	d6d2e <__aeabi_ddiv+0x82>
   d6dc0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6dc4:	bf04      	itt	eq
   d6dc6:	4301      	orreq	r1, r0
   d6dc8:	2000      	moveq	r0, #0
   d6dca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6dce:	bf88      	it	hi
   d6dd0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6dd4:	f63f aeaf 	bhi.w	d6b36 <__aeabi_dmul+0xde>
   d6dd8:	ebb5 0c03 	subs.w	ip, r5, r3
   d6ddc:	bf04      	itt	eq
   d6dde:	ebb6 0c02 	subseq.w	ip, r6, r2
   d6de2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6de6:	f150 0000 	adcs.w	r0, r0, #0
   d6dea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6dee:	bd70      	pop	{r4, r5, r6, pc}
   d6df0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d6df4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d6df8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d6dfc:	bfc2      	ittt	gt
   d6dfe:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6e02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6e06:	bd70      	popgt	{r4, r5, r6, pc}
   d6e08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6e0c:	f04f 0e00 	mov.w	lr, #0
   d6e10:	3c01      	subs	r4, #1
   d6e12:	e690      	b.n	d6b36 <__aeabi_dmul+0xde>
   d6e14:	ea45 0e06 	orr.w	lr, r5, r6
   d6e18:	e68d      	b.n	d6b36 <__aeabi_dmul+0xde>
   d6e1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6e1e:	ea94 0f0c 	teq	r4, ip
   d6e22:	bf08      	it	eq
   d6e24:	ea95 0f0c 	teqeq	r5, ip
   d6e28:	f43f af3b 	beq.w	d6ca2 <__aeabi_dmul+0x24a>
   d6e2c:	ea94 0f0c 	teq	r4, ip
   d6e30:	d10a      	bne.n	d6e48 <__aeabi_ddiv+0x19c>
   d6e32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6e36:	f47f af34 	bne.w	d6ca2 <__aeabi_dmul+0x24a>
   d6e3a:	ea95 0f0c 	teq	r5, ip
   d6e3e:	f47f af25 	bne.w	d6c8c <__aeabi_dmul+0x234>
   d6e42:	4610      	mov	r0, r2
   d6e44:	4619      	mov	r1, r3
   d6e46:	e72c      	b.n	d6ca2 <__aeabi_dmul+0x24a>
   d6e48:	ea95 0f0c 	teq	r5, ip
   d6e4c:	d106      	bne.n	d6e5c <__aeabi_ddiv+0x1b0>
   d6e4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6e52:	f43f aefd 	beq.w	d6c50 <__aeabi_dmul+0x1f8>
   d6e56:	4610      	mov	r0, r2
   d6e58:	4619      	mov	r1, r3
   d6e5a:	e722      	b.n	d6ca2 <__aeabi_dmul+0x24a>
   d6e5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6e60:	bf18      	it	ne
   d6e62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6e66:	f47f aec5 	bne.w	d6bf4 <__aeabi_dmul+0x19c>
   d6e6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d6e6e:	f47f af0d 	bne.w	d6c8c <__aeabi_dmul+0x234>
   d6e72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d6e76:	f47f aeeb 	bne.w	d6c50 <__aeabi_dmul+0x1f8>
   d6e7a:	e712      	b.n	d6ca2 <__aeabi_dmul+0x24a>

000d6e7c <__aeabi_d2iz>:
   d6e7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6e80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6e84:	d215      	bcs.n	d6eb2 <__aeabi_d2iz+0x36>
   d6e86:	d511      	bpl.n	d6eac <__aeabi_d2iz+0x30>
   d6e88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6e8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6e90:	d912      	bls.n	d6eb8 <__aeabi_d2iz+0x3c>
   d6e92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6e96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6e9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6e9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6ea2:	fa23 f002 	lsr.w	r0, r3, r2
   d6ea6:	bf18      	it	ne
   d6ea8:	4240      	negne	r0, r0
   d6eaa:	4770      	bx	lr
   d6eac:	f04f 0000 	mov.w	r0, #0
   d6eb0:	4770      	bx	lr
   d6eb2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6eb6:	d105      	bne.n	d6ec4 <__aeabi_d2iz+0x48>
   d6eb8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d6ebc:	bf08      	it	eq
   d6ebe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d6ec2:	4770      	bx	lr
   d6ec4:	f04f 0000 	mov.w	r0, #0
   d6ec8:	4770      	bx	lr
   d6eca:	bf00      	nop

000d6ecc <atexit>:
   d6ecc:	2300      	movs	r3, #0
   d6ece:	4601      	mov	r1, r0
   d6ed0:	461a      	mov	r2, r3
   d6ed2:	4618      	mov	r0, r3
   d6ed4:	f000 b8f2 	b.w	d70bc <__register_exitproc>

000d6ed8 <memcpy>:
   d6ed8:	440a      	add	r2, r1
   d6eda:	4291      	cmp	r1, r2
   d6edc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d6ee0:	d100      	bne.n	d6ee4 <memcpy+0xc>
   d6ee2:	4770      	bx	lr
   d6ee4:	b510      	push	{r4, lr}
   d6ee6:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6eea:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6eee:	4291      	cmp	r1, r2
   d6ef0:	d1f9      	bne.n	d6ee6 <memcpy+0xe>
   d6ef2:	bd10      	pop	{r4, pc}

000d6ef4 <memmove>:
   d6ef4:	4288      	cmp	r0, r1
   d6ef6:	b510      	push	{r4, lr}
   d6ef8:	eb01 0402 	add.w	r4, r1, r2
   d6efc:	d902      	bls.n	d6f04 <memmove+0x10>
   d6efe:	4284      	cmp	r4, r0
   d6f00:	4623      	mov	r3, r4
   d6f02:	d807      	bhi.n	d6f14 <memmove+0x20>
   d6f04:	1e43      	subs	r3, r0, #1
   d6f06:	42a1      	cmp	r1, r4
   d6f08:	d008      	beq.n	d6f1c <memmove+0x28>
   d6f0a:	f811 2b01 	ldrb.w	r2, [r1], #1
   d6f0e:	f803 2f01 	strb.w	r2, [r3, #1]!
   d6f12:	e7f8      	b.n	d6f06 <memmove+0x12>
   d6f14:	4402      	add	r2, r0
   d6f16:	4601      	mov	r1, r0
   d6f18:	428a      	cmp	r2, r1
   d6f1a:	d100      	bne.n	d6f1e <memmove+0x2a>
   d6f1c:	bd10      	pop	{r4, pc}
   d6f1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d6f22:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d6f26:	e7f7      	b.n	d6f18 <memmove+0x24>

000d6f28 <memset>:
   d6f28:	4402      	add	r2, r0
   d6f2a:	4603      	mov	r3, r0
   d6f2c:	4293      	cmp	r3, r2
   d6f2e:	d100      	bne.n	d6f32 <memset+0xa>
   d6f30:	4770      	bx	lr
   d6f32:	f803 1b01 	strb.w	r1, [r3], #1
   d6f36:	e7f9      	b.n	d6f2c <memset+0x4>

000d6f38 <srand>:
   d6f38:	b538      	push	{r3, r4, r5, lr}
   d6f3a:	4b0d      	ldr	r3, [pc, #52]	; (d6f70 <srand+0x38>)
   d6f3c:	681d      	ldr	r5, [r3, #0]
   d6f3e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6f40:	4604      	mov	r4, r0
   d6f42:	b97b      	cbnz	r3, d6f64 <srand+0x2c>
   d6f44:	2018      	movs	r0, #24
   d6f46:	f7fe faa9 	bl	d549c <malloc>
   d6f4a:	4a0a      	ldr	r2, [pc, #40]	; (d6f74 <srand+0x3c>)
   d6f4c:	4b0a      	ldr	r3, [pc, #40]	; (d6f78 <srand+0x40>)
   d6f4e:	63a8      	str	r0, [r5, #56]	; 0x38
   d6f50:	e9c0 2300 	strd	r2, r3, [r0]
   d6f54:	4b09      	ldr	r3, [pc, #36]	; (d6f7c <srand+0x44>)
   d6f56:	6083      	str	r3, [r0, #8]
   d6f58:	230b      	movs	r3, #11
   d6f5a:	8183      	strh	r3, [r0, #12]
   d6f5c:	2201      	movs	r2, #1
   d6f5e:	2300      	movs	r3, #0
   d6f60:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6f64:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6f66:	2200      	movs	r2, #0
   d6f68:	611c      	str	r4, [r3, #16]
   d6f6a:	615a      	str	r2, [r3, #20]
   d6f6c:	bd38      	pop	{r3, r4, r5, pc}
   d6f6e:	bf00      	nop
   d6f70:	2003e464 	.word	0x2003e464
   d6f74:	abcd330e 	.word	0xabcd330e
   d6f78:	e66d1234 	.word	0xe66d1234
   d6f7c:	0005deec 	.word	0x0005deec

000d6f80 <strcmp>:
   d6f80:	f810 2b01 	ldrb.w	r2, [r0], #1
   d6f84:	f811 3b01 	ldrb.w	r3, [r1], #1
   d6f88:	2a01      	cmp	r2, #1
   d6f8a:	bf28      	it	cs
   d6f8c:	429a      	cmpcs	r2, r3
   d6f8e:	d0f7      	beq.n	d6f80 <strcmp>
   d6f90:	1ad0      	subs	r0, r2, r3
   d6f92:	4770      	bx	lr

000d6f94 <strcpy>:
   d6f94:	4603      	mov	r3, r0
   d6f96:	f811 2b01 	ldrb.w	r2, [r1], #1
   d6f9a:	f803 2b01 	strb.w	r2, [r3], #1
   d6f9e:	2a00      	cmp	r2, #0
   d6fa0:	d1f9      	bne.n	d6f96 <strcpy+0x2>
   d6fa2:	4770      	bx	lr

000d6fa4 <strlen>:
   d6fa4:	4603      	mov	r3, r0
   d6fa6:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6faa:	2a00      	cmp	r2, #0
   d6fac:	d1fb      	bne.n	d6fa6 <strlen+0x2>
   d6fae:	1a18      	subs	r0, r3, r0
   d6fb0:	3801      	subs	r0, #1
   d6fb2:	4770      	bx	lr

000d6fb4 <_strtol_l.isra.0>:
   d6fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6fb8:	4e3a      	ldr	r6, [pc, #232]	; (d70a4 <_strtol_l.isra.0+0xf0>)
   d6fba:	4686      	mov	lr, r0
   d6fbc:	468c      	mov	ip, r1
   d6fbe:	4660      	mov	r0, ip
   d6fc0:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d6fc4:	5da5      	ldrb	r5, [r4, r6]
   d6fc6:	f015 0508 	ands.w	r5, r5, #8
   d6fca:	d1f8      	bne.n	d6fbe <_strtol_l.isra.0+0xa>
   d6fcc:	2c2d      	cmp	r4, #45	; 0x2d
   d6fce:	d133      	bne.n	d7038 <_strtol_l.isra.0+0x84>
   d6fd0:	f89c 4000 	ldrb.w	r4, [ip]
   d6fd4:	f04f 0801 	mov.w	r8, #1
   d6fd8:	f100 0c02 	add.w	ip, r0, #2
   d6fdc:	2b00      	cmp	r3, #0
   d6fde:	d05c      	beq.n	d709a <_strtol_l.isra.0+0xe6>
   d6fe0:	2b10      	cmp	r3, #16
   d6fe2:	d10c      	bne.n	d6ffe <_strtol_l.isra.0+0x4a>
   d6fe4:	2c30      	cmp	r4, #48	; 0x30
   d6fe6:	d10a      	bne.n	d6ffe <_strtol_l.isra.0+0x4a>
   d6fe8:	f89c 0000 	ldrb.w	r0, [ip]
   d6fec:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d6ff0:	2858      	cmp	r0, #88	; 0x58
   d6ff2:	d14d      	bne.n	d7090 <_strtol_l.isra.0+0xdc>
   d6ff4:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d6ff8:	2310      	movs	r3, #16
   d6ffa:	f10c 0c02 	add.w	ip, ip, #2
   d6ffe:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d7002:	3f01      	subs	r7, #1
   d7004:	2600      	movs	r6, #0
   d7006:	fbb7 f9f3 	udiv	r9, r7, r3
   d700a:	4630      	mov	r0, r6
   d700c:	fb03 7a19 	mls	sl, r3, r9, r7
   d7010:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d7014:	2d09      	cmp	r5, #9
   d7016:	d818      	bhi.n	d704a <_strtol_l.isra.0+0x96>
   d7018:	462c      	mov	r4, r5
   d701a:	42a3      	cmp	r3, r4
   d701c:	dd24      	ble.n	d7068 <_strtol_l.isra.0+0xb4>
   d701e:	1c75      	adds	r5, r6, #1
   d7020:	d007      	beq.n	d7032 <_strtol_l.isra.0+0x7e>
   d7022:	4581      	cmp	r9, r0
   d7024:	d31d      	bcc.n	d7062 <_strtol_l.isra.0+0xae>
   d7026:	d101      	bne.n	d702c <_strtol_l.isra.0+0x78>
   d7028:	45a2      	cmp	sl, r4
   d702a:	db1a      	blt.n	d7062 <_strtol_l.isra.0+0xae>
   d702c:	fb00 4003 	mla	r0, r0, r3, r4
   d7030:	2601      	movs	r6, #1
   d7032:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d7036:	e7eb      	b.n	d7010 <_strtol_l.isra.0+0x5c>
   d7038:	2c2b      	cmp	r4, #43	; 0x2b
   d703a:	bf08      	it	eq
   d703c:	f89c 4000 	ldrbeq.w	r4, [ip]
   d7040:	46a8      	mov	r8, r5
   d7042:	bf08      	it	eq
   d7044:	f100 0c02 	addeq.w	ip, r0, #2
   d7048:	e7c8      	b.n	d6fdc <_strtol_l.isra.0+0x28>
   d704a:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d704e:	2d19      	cmp	r5, #25
   d7050:	d801      	bhi.n	d7056 <_strtol_l.isra.0+0xa2>
   d7052:	3c37      	subs	r4, #55	; 0x37
   d7054:	e7e1      	b.n	d701a <_strtol_l.isra.0+0x66>
   d7056:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d705a:	2d19      	cmp	r5, #25
   d705c:	d804      	bhi.n	d7068 <_strtol_l.isra.0+0xb4>
   d705e:	3c57      	subs	r4, #87	; 0x57
   d7060:	e7db      	b.n	d701a <_strtol_l.isra.0+0x66>
   d7062:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d7066:	e7e4      	b.n	d7032 <_strtol_l.isra.0+0x7e>
   d7068:	1c73      	adds	r3, r6, #1
   d706a:	d106      	bne.n	d707a <_strtol_l.isra.0+0xc6>
   d706c:	2322      	movs	r3, #34	; 0x22
   d706e:	f8ce 3000 	str.w	r3, [lr]
   d7072:	4638      	mov	r0, r7
   d7074:	b942      	cbnz	r2, d7088 <_strtol_l.isra.0+0xd4>
   d7076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d707a:	f1b8 0f00 	cmp.w	r8, #0
   d707e:	d000      	beq.n	d7082 <_strtol_l.isra.0+0xce>
   d7080:	4240      	negs	r0, r0
   d7082:	2a00      	cmp	r2, #0
   d7084:	d0f7      	beq.n	d7076 <_strtol_l.isra.0+0xc2>
   d7086:	b10e      	cbz	r6, d708c <_strtol_l.isra.0+0xd8>
   d7088:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   d708c:	6011      	str	r1, [r2, #0]
   d708e:	e7f2      	b.n	d7076 <_strtol_l.isra.0+0xc2>
   d7090:	2430      	movs	r4, #48	; 0x30
   d7092:	2b00      	cmp	r3, #0
   d7094:	d1b3      	bne.n	d6ffe <_strtol_l.isra.0+0x4a>
   d7096:	2308      	movs	r3, #8
   d7098:	e7b1      	b.n	d6ffe <_strtol_l.isra.0+0x4a>
   d709a:	2c30      	cmp	r4, #48	; 0x30
   d709c:	d0a4      	beq.n	d6fe8 <_strtol_l.isra.0+0x34>
   d709e:	230a      	movs	r3, #10
   d70a0:	e7ad      	b.n	d6ffe <_strtol_l.isra.0+0x4a>
   d70a2:	bf00      	nop
   d70a4:	000d7462 	.word	0x000d7462

000d70a8 <strtol>:
   d70a8:	4613      	mov	r3, r2
   d70aa:	460a      	mov	r2, r1
   d70ac:	4601      	mov	r1, r0
   d70ae:	4802      	ldr	r0, [pc, #8]	; (d70b8 <strtol+0x10>)
   d70b0:	6800      	ldr	r0, [r0, #0]
   d70b2:	f7ff bf7f 	b.w	d6fb4 <_strtol_l.isra.0>
   d70b6:	bf00      	nop
   d70b8:	2003e464 	.word	0x2003e464

000d70bc <__register_exitproc>:
   d70bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d70c0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; d717c <__register_exitproc+0xc0>
   d70c4:	4606      	mov	r6, r0
   d70c6:	f8d8 0000 	ldr.w	r0, [r8]
   d70ca:	461f      	mov	r7, r3
   d70cc:	460d      	mov	r5, r1
   d70ce:	4691      	mov	r9, r2
   d70d0:	f000 f856 	bl	d7180 <__retarget_lock_acquire_recursive>
   d70d4:	4b25      	ldr	r3, [pc, #148]	; (d716c <__register_exitproc+0xb0>)
   d70d6:	681c      	ldr	r4, [r3, #0]
   d70d8:	b934      	cbnz	r4, d70e8 <__register_exitproc+0x2c>
   d70da:	4c25      	ldr	r4, [pc, #148]	; (d7170 <__register_exitproc+0xb4>)
   d70dc:	601c      	str	r4, [r3, #0]
   d70de:	4b25      	ldr	r3, [pc, #148]	; (d7174 <__register_exitproc+0xb8>)
   d70e0:	b113      	cbz	r3, d70e8 <__register_exitproc+0x2c>
   d70e2:	681b      	ldr	r3, [r3, #0]
   d70e4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   d70e8:	6863      	ldr	r3, [r4, #4]
   d70ea:	2b1f      	cmp	r3, #31
   d70ec:	dd07      	ble.n	d70fe <__register_exitproc+0x42>
   d70ee:	f8d8 0000 	ldr.w	r0, [r8]
   d70f2:	f000 f847 	bl	d7184 <__retarget_lock_release_recursive>
   d70f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d70fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d70fe:	b34e      	cbz	r6, d7154 <__register_exitproc+0x98>
   d7100:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   d7104:	b988      	cbnz	r0, d712a <__register_exitproc+0x6e>
   d7106:	4b1c      	ldr	r3, [pc, #112]	; (d7178 <__register_exitproc+0xbc>)
   d7108:	b923      	cbnz	r3, d7114 <__register_exitproc+0x58>
   d710a:	f8d8 0000 	ldr.w	r0, [r8]
   d710e:	f000 f838 	bl	d7182 <__retarget_lock_release>
   d7112:	e7f0      	b.n	d70f6 <__register_exitproc+0x3a>
   d7114:	f44f 7084 	mov.w	r0, #264	; 0x108
   d7118:	f7fe f9c0 	bl	d549c <malloc>
   d711c:	2800      	cmp	r0, #0
   d711e:	d0f4      	beq.n	d710a <__register_exitproc+0x4e>
   d7120:	2300      	movs	r3, #0
   d7122:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   d7126:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   d712a:	6863      	ldr	r3, [r4, #4]
   d712c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   d7130:	2201      	movs	r2, #1
   d7132:	409a      	lsls	r2, r3
   d7134:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   d7138:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   d713c:	4313      	orrs	r3, r2
   d713e:	2e02      	cmp	r6, #2
   d7140:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   d7144:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   d7148:	bf02      	ittt	eq
   d714a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   d714e:	431a      	orreq	r2, r3
   d7150:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   d7154:	6863      	ldr	r3, [r4, #4]
   d7156:	f8d8 0000 	ldr.w	r0, [r8]
   d715a:	1c5a      	adds	r2, r3, #1
   d715c:	3302      	adds	r3, #2
   d715e:	6062      	str	r2, [r4, #4]
   d7160:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   d7164:	f000 f80e 	bl	d7184 <__retarget_lock_release_recursive>
   d7168:	2000      	movs	r0, #0
   d716a:	e7c6      	b.n	d70fa <__register_exitproc+0x3e>
   d716c:	2003e7e0 	.word	0x2003e7e0
   d7170:	2003e754 	.word	0x2003e754
   d7174:	00000000 	.word	0x00000000
   d7178:	000d549d 	.word	0x000d549d
   d717c:	2003e4c8 	.word	0x2003e4c8

000d7180 <__retarget_lock_acquire_recursive>:
   d7180:	4770      	bx	lr

000d7182 <__retarget_lock_release>:
   d7182:	4770      	bx	lr

000d7184 <__retarget_lock_release_recursive>:
   d7184:	4770      	bx	lr

000d7186 <link_code_end>:
	...

000d7188 <dynalib_user>:
   d7188:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   d7198:	0000 0000 6d73 7261 6c74 6769 7468 6400     ....smartlight.d
   d71a8:	6f6f 0072 7973 7473 6d65 6f43 746e 6f72     oor.systemContro
   d71b8:	006c 227b 6146 6c69 3a22 2520 7d64 7b00     l.{"Fail": %d}.{
   d71c8:	7422 3a22 6425 222c 696c 6867 2274 253a     "t":%d,"light":%
   d71d8:	2c73 2220 6f64 726f 3a22 7325 202c 7422     s, "door":%s, "t
   d71e8:	6568 6d72 736f 6174 2274 253a 2c73 2220     hermostat":%s, "
   d71f8:	7548 696d 2264 253a 322e 2c66 2220 6554     Humid":%.2f, "Te
   d7208:	706d 3a22 2e25 6632 202c 6322 2274 253a     mp":%.2f, "ct":%
   d7218:	646c 007d 7d7b 7b00 4c22 2230 253a 2c64     ld}.{}.{"L0":%d,
   d7228:	4c22 2231 253a 2c64 6222 3a22 6425 222c     "L1":%d,"b":%d,"
   d7238:	2273 253a 2c64 6d22 3a22 6425 222c 224d     s":%d,"m":%d,"M"
   d7248:	253a 7d64 6f00 006e 7561 6f74 6200 6972     :%d}.on.auto.bri
   d7258:	6867 6e74 7365 0073 696d 006e 616d 0078     ghtness.min.max.
   d7268:	6f64 726f 7250 786f 6d69 7469 0079 7473     doorProximity.st
   d7278:	7461 7375 7b00 6822 6165 5374 6174 7574     atus.{"heatStatu
   d7288:	2273 253a 2c64 6322 6f6f 536c 6174 7574     s":%d,"coolStatu
   d7298:	2273 253a 2c64 6622 6e61 7453 7461 7375     s":%d,"fanStatus
   d72a8:	3a22 6425 007d 6568 7461 6300 6f6f 006c     ":%d}.heat.cool.
   d72b8:	666f 0066 6166 006e 6574 706d 0000 0000     off.fan.temp....

000d72c8 <_ZTVN5spark13EthernetClassE>:
	...
   d72d0:	5563 000d 5559 000d 554f 000d 5545 000d     cU..YU..OU..EU..
   d72e0:	5539 000d 552d 000d 5c75 000d 5c7d 000d     9U..-U..u\..}\..
   d72f0:	5521 000d 5519 000d 550f 000d 5505 000d     !U...U...U...U..
   d7300:	5cad 000d                                   .\..

000d7304 <_ZTV7TwoWire>:
	...
   d730c:	5581 000d 55cb 000d 55a3 000d 5583 000d     .U...U...U...U..
   d731c:	55ab 000d 55b3 000d 55bb 000d 55c3 000d     .U...U...U...U..

000d732c <_ZTV9IPAddress>:
	...
   d7334:	5615 000d 5605 000d 5607 000d 2e30 0030     .V...V...V..0.0.
   d7344:	6166 736c 0065 0000                         false...

000d734c <_ZTVSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d7354:	5715 000d 571b 000d 5731 000d 5729 000d     .W...W..1W..)W..
   d7364:	5717 000d 7061 0070                         .W..app.

000d736c <_ZTVN5spark12NetworkClassE>:
	...
   d7374:	5c35 000d 5c3f 000d 5c49 000d 5c53 000d     5\..?\..I\..S\..
   d7384:	5c5d 000d 5c69 000d 5c75 000d 5c7d 000d     ]\..i\..u\..}\..
   d7394:	5c85 000d 5c91 000d 5c99 000d 5ca3 000d     .\...\...\...\..
   d73a4:	5cad 000d 5925 252d 2d6d 6425 2554 3a48     .\..%Y-%m-%dT%H:
   d73b4:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000d73c4 <_ZTV11USARTSerial>:
	...
   d73cc:	61dd 000d 624b 000d 6223 000d 5d95 000d     .a..Kb..#b...]..
   d73dc:	61f3 000d 620f 000d 6201 000d 621d 000d     .a...b...b...b..
   d73ec:	61df 000d 61e5 000d                         .a...a..

000d73f4 <_ZTV9USBSerial>:
	...
   d73fc:	62d7 000d 633f 000d 6315 000d 5d95 000d     .b..?c...c...]..
   d740c:	6307 000d 62d9 000d 62e9 000d 6339 000d     .c...b...b..9c..
   d741c:	62f9 000d 62d1 000d                         .b...b..

000d7424 <_ZTVN5spark9WiFiClassE>:
	...
   d742c:	6437 000d 642d 000d 6423 000d 63d9 000d     7d..-d..#d...c..
   d743c:	6417 000d 640b 000d 5c75 000d 5c7d 000d     .d...d..u\..}\..
   d744c:	63ff 000d 63f7 000d 63ed 000d 63e3 000d     .c...c...c...c..
   d745c:	5cad 000d                                   .\..

000d7460 <_ZSt7nothrow>:
	...

000d7461 <_ctype_>:
   d7461:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d7471:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d7481:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d7491:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d74a1:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d74b1:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d74c1:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d74d1:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d74e1:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000d7562 <link_const_variable_data_end>:
	...

000d7564 <link_constructors_location>:
   d7564:	000d4455 	.word	0x000d4455
   d7568:	000d54f5 	.word	0x000d54f5
   d756c:	000d556d 	.word	0x000d556d
   d7570:	000d5c25 	.word	0x000d5c25
   d7574:	000d5d81 	.word	0x000d5d81
   d7578:	000d5f09 	.word	0x000d5f09
   d757c:	000d6131 	.word	0x000d6131
   d7580:	000d61c9 	.word	0x000d61c9
   d7584:	000d6441 	.word	0x000d6441

000d7588 <link_constructors_end>:
	...
