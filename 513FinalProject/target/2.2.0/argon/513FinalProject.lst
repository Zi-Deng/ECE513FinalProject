
/Users/zi/Documents/UofA/ECE513_Final_Project/513FinalProject/target/2.2.0/argon/513FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000035c0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d75e0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  2003e4b8  000d75e4  0001e4b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000002cc  2003e524  2003e524  0002e524  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d7650  000d7650  00027650  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d7678  000d7678  00027678  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00162f25  00000000  00000000  0002767c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00017dc2  00000000  00000000  0018a5a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002b38e  00000000  00000000  001a2363  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002960  00000000  00000000  001cd6f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00007430  00000000  00000000  001d0051  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00039789  00000000  00000000  001d7481  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003b055  00000000  00000000  00210c0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010590d  00000000  00000000  0024bc5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00007334  00000000  00000000  0035156c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f002 ff91 	bl	d6f58 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f002 ffb3 	bl	d6fa8 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e4b8 	.word	0x2003e4b8
   d404c:	000d75e4 	.word	0x000d75e4
   d4050:	2003e524 	.word	0x2003e524
   d4054:	2003e524 	.word	0x2003e524
   d4058:	2003e7ed 	.word	0x2003e7ed

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f002 fa01 	bl	d6468 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d75b8 	.word	0x000d75b8
   d4080:	000d75dc 	.word	0x000d75dc

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b826 	b.w	d40d4 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f91b 	bl	d42c4 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f002 b9a1 	b.w	d63d8 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f001 b9a1 	b.w	d53dc <malloc>

000d409a <_Znaj>:
   d409a:	f001 b99f 	b.w	d53dc <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f001 b9a5 	b.w	d53ec <free>

000d40a2 <_ZdaPv>:
   d40a2:	f001 b9a3 	b.w	d53ec <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr

000d40b6 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d40b6:	b40e      	push	{r1, r2, r3}
   d40b8:	b503      	push	{r0, r1, lr}
   d40ba:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d40bc:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d40be:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d40c2:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d40c4:	f001 fe5b 	bl	d5d7e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d40c8:	b002      	add	sp, #8
   d40ca:	f85d eb04 	ldr.w	lr, [sp], #4
   d40ce:	b003      	add	sp, #12
   d40d0:	4770      	bx	lr
	...

000d40d4 <setup>:
  }
}



void setup() {
   d40d4:	b508      	push	{r3, lr}
  pinMode(LED, OUTPUT);
   d40d6:	2101      	movs	r1, #1
   d40d8:	2000      	movs	r0, #0
   d40da:	f002 fa35 	bl	d6548 <pinMode>
  pinMode(LED2, OUTPUT);
   d40de:	2101      	movs	r1, #1
   d40e0:	2007      	movs	r0, #7
   d40e2:	f002 fa31 	bl	d6548 <pinMode>
  RGB.control(true);
   d40e6:	2001      	movs	r0, #1
   d40e8:	f001 fe7a 	bl	d5de0 <_ZN8RGBClass7controlEb>
  RGB.color(255, 255, 255);
   d40ec:	22ff      	movs	r2, #255	; 0xff
   d40ee:	4611      	mov	r1, r2
   d40f0:	4610      	mov	r0, r2
   d40f2:	f001 fe85 	bl	d5e00 <_ZN8RGBClass5colorEiii>

	Serial.begin();
   d40f6:	f002 f8e9 	bl	d62cc <_Z16_fetch_usbserialv>
   d40fa:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40fe:	f002 f8d9 	bl	d62b4 <_ZN9USBSerial5beginEl>

  dht.begin();
   d4102:	4803      	ldr	r0, [pc, #12]	; (d4110 <setup+0x3c>)
   d4104:	f000 f9d4 	bl	d44b0 <_ZN3DHT5beginEv>

  counter = 0;
   d4108:	4b02      	ldr	r3, [pc, #8]	; (d4114 <setup+0x40>)
   d410a:	2200      	movs	r2, #0
   d410c:	601a      	str	r2, [r3, #0]
}
   d410e:	bd08      	pop	{r3, pc}
   d4110:	2003e528 	.word	0x2003e528
   d4114:	2003e524 	.word	0x2003e524

000d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4118:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d411a:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d411c:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d411e:	b17c      	cbz	r4, d4140 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d4120:	6863      	ldr	r3, [r4, #4]
   d4122:	3b01      	subs	r3, #1
   d4124:	6063      	str	r3, [r4, #4]
   d4126:	b95b      	cbnz	r3, d4140 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d4128:	6823      	ldr	r3, [r4, #0]
   d412a:	4620      	mov	r0, r4
   d412c:	689b      	ldr	r3, [r3, #8]
   d412e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4130:	68a3      	ldr	r3, [r4, #8]
   d4132:	3b01      	subs	r3, #1
   d4134:	60a3      	str	r3, [r4, #8]
   d4136:	b91b      	cbnz	r3, d4140 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4138:	6823      	ldr	r3, [r4, #0]
   d413a:	4620      	mov	r0, r4
   d413c:	68db      	ldr	r3, [r3, #12]
   d413e:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d4140:	4628      	mov	r0, r5
   d4142:	bd38      	pop	{r3, r4, r5, pc}

000d4144 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4144:	680b      	ldr	r3, [r1, #0]
   d4146:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4148:	b113      	cbz	r3, d4150 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d414a:	685a      	ldr	r2, [r3, #4]
   d414c:	3201      	adds	r2, #1
   d414e:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d4150:	4770      	bx	lr
	...

000d4154 <_Z19serialCmdProcessingv>:
void serialCmdProcessing() {
   d4154:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4156:	b097      	sub	sp, #92	; 0x5c
  if (Serial.available() <= 0) return;
   d4158:	f002 f8b8 	bl	d62cc <_Z16_fetch_usbserialv>
   d415c:	6803      	ldr	r3, [r0, #0]
   d415e:	691b      	ldr	r3, [r3, #16]
   d4160:	4798      	blx	r3
   d4162:	2800      	cmp	r0, #0
   d4164:	f340 80a1 	ble.w	d42aa <_Z19serialCmdProcessingv+0x156>
  String cmdStr = "";
   d4168:	4951      	ldr	r1, [pc, #324]	; (d42b0 <_Z19serialCmdProcessingv+0x15c>)
   d416a:	a808      	add	r0, sp, #32
   d416c:	f001 fec7 	bl	d5efe <_ZN6StringC1EPKc>
  while (Serial.available()) {
   d4170:	f002 f8ac 	bl	d62cc <_Z16_fetch_usbserialv>
   d4174:	6803      	ldr	r3, [r0, #0]
   d4176:	691b      	ldr	r3, [r3, #16]
   d4178:	4798      	blx	r3
   d417a:	b180      	cbz	r0, d419e <_Z19serialCmdProcessingv+0x4a>
      char c = Serial.read();
   d417c:	f002 f8a6 	bl	d62cc <_Z16_fetch_usbserialv>
   d4180:	6803      	ldr	r3, [r0, #0]
   d4182:	695b      	ldr	r3, [r3, #20]
   d4184:	4798      	blx	r3
      cmdStr += String(c);
   d4186:	b2c1      	uxtb	r1, r0
   d4188:	a810      	add	r0, sp, #64	; 0x40
   d418a:	f001 ff1d 	bl	d5fc8 <_ZN6StringC1Ec>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d418e:	a910      	add	r1, sp, #64	; 0x40
   d4190:	a808      	add	r0, sp, #32
   d4192:	f001 ff41 	bl	d6018 <_ZN6String6concatERKS_>
   d4196:	a810      	add	r0, sp, #64	; 0x40
   d4198:	f001 fe66 	bl	d5e68 <_ZN6StringD1Ev>
  while (Serial.available()) {
   d419c:	e7e8      	b.n	d4170 <_Z19serialCmdProcessingv+0x1c>
  JSONValue cmdJson = JSONValue::parseCopy(cmdStr.c_str());
   d419e:	9908      	ldr	r1, [sp, #32]
inline bool spark::JSONValue::isValid() const {
    return type() != JSON_TYPE_INVALID;
}

inline spark::JSONValue spark::JSONValue::parseCopy(const char *json) {
    return parseCopy(json, strlen(json));
   d41a0:	9101      	str	r1, [sp, #4]
   d41a2:	4608      	mov	r0, r1
   d41a4:	f002 ff3e 	bl	d7024 <strlen>
   d41a8:	9901      	ldr	r1, [sp, #4]
inline bool spark::JSONString::isEmpty() const {
    return !n_;
}

inline bool spark::JSONString::operator==(const char *str) const {
    return strcmp(s_, str) == 0;
   d41aa:	4e42      	ldr	r6, [pc, #264]	; (d42b4 <_Z19serialCmdProcessingv+0x160>)
   d41ac:	4f42      	ldr	r7, [pc, #264]	; (d42b8 <_Z19serialCmdProcessingv+0x164>)
      door.cmdProcessing(iter.value());
   d41ae:	4d43      	ldr	r5, [pc, #268]	; (d42bc <_Z19serialCmdProcessingv+0x168>)
    return parseCopy(json, strlen(json));
   d41b0:	4602      	mov	r2, r0
   d41b2:	a805      	add	r0, sp, #20
   d41b4:	f001 fc80 	bl	d5ab8 <_ZN5spark9JSONValue9parseCopyEPKcj>
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
   d41b8:	9c07      	ldr	r4, [sp, #28]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d41ba:	9b05      	ldr	r3, [sp, #20]
   d41bc:	930c      	str	r3, [sp, #48]	; 0x30
   d41be:	a906      	add	r1, sp, #24
   d41c0:	a80d      	add	r0, sp, #52	; 0x34
   d41c2:	f7ff ffbf 	bl	d4144 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d41c6:	aa0c      	add	r2, sp, #48	; 0x30
   d41c8:	4621      	mov	r1, r4
   d41ca:	a810      	add	r0, sp, #64	; 0x40
   d41cc:	f001 fc34 	bl	d5a38 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d41d0:	a80d      	add	r0, sp, #52	; 0x34
   d41d2:	f7ff ffa1 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  while (iter.next()) {
   d41d6:	a810      	add	r0, sp, #64	; 0x40
   d41d8:	f001 fc46 	bl	d5a68 <_ZN5spark18JSONObjectIterator4nextEv>
   d41dc:	2800      	cmp	r0, #0
   d41de:	d05b      	beq.n	d4298 <_Z19serialCmdProcessingv+0x144>
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
   d41e0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d41e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d41e4:	9303      	str	r3, [sp, #12]
   d41e6:	a911      	add	r1, sp, #68	; 0x44
   d41e8:	a804      	add	r0, sp, #16
   d41ea:	f7ff ffab 	bl	d4144 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d41ee:	4621      	mov	r1, r4
   d41f0:	aa03      	add	r2, sp, #12
   d41f2:	a80c      	add	r0, sp, #48	; 0x30
   d41f4:	f001 fbfc 	bl	d59f0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d41f8:	a804      	add	r0, sp, #16
   d41fa:	f7ff ff8d 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return strcmp(s_, str) == 0;
   d41fe:	980e      	ldr	r0, [sp, #56]	; 0x38
   d4200:	4631      	mov	r1, r6
   d4202:	f002 fefd 	bl	d7000 <strcmp>
   d4206:	4604      	mov	r4, r0
   d4208:	a80d      	add	r0, sp, #52	; 0x34
   d420a:	f7ff ff85 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (iter.name() == "smartlight") {
   d420e:	b9b4      	cbnz	r4, d423e <_Z19serialCmdProcessingv+0xea>
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
    return JSONValue(v_, d_);
   d4210:	9c14      	ldr	r4, [sp, #80]	; 0x50
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4212:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d4214:	9303      	str	r3, [sp, #12]
   d4216:	a911      	add	r1, sp, #68	; 0x44
   d4218:	a804      	add	r0, sp, #16
   d421a:	f7ff ff93 	bl	d4144 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d421e:	4621      	mov	r1, r4
   d4220:	aa03      	add	r2, sp, #12
   d4222:	a80c      	add	r0, sp, #48	; 0x30
   d4224:	f001 fa5f 	bl	d56e6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4228:	a804      	add	r0, sp, #16
   d422a:	f7ff ff75 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      smartLight.cmdProcessing(iter.value());
   d422e:	4824      	ldr	r0, [pc, #144]	; (d42c0 <_Z19serialCmdProcessingv+0x16c>)
   d4230:	a90c      	add	r1, sp, #48	; 0x30
   d4232:	f000 fc9f 	bl	d4b74 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE>
   d4236:	a80d      	add	r0, sp, #52	; 0x34
   d4238:	f7ff ff6e 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d423c:	e7cb      	b.n	d41d6 <_Z19serialCmdProcessingv+0x82>
    return JSONString(k_, d_);
   d423e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4240:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d4242:	9303      	str	r3, [sp, #12]
   d4244:	a911      	add	r1, sp, #68	; 0x44
   d4246:	a804      	add	r0, sp, #16
   d4248:	f7ff ff7c 	bl	d4144 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d424c:	4621      	mov	r1, r4
   d424e:	aa03      	add	r2, sp, #12
   d4250:	a80c      	add	r0, sp, #48	; 0x30
   d4252:	f001 fbcd 	bl	d59f0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4256:	a804      	add	r0, sp, #16
   d4258:	f7ff ff5e 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return strcmp(s_, str) == 0;
   d425c:	980e      	ldr	r0, [sp, #56]	; 0x38
   d425e:	4639      	mov	r1, r7
   d4260:	f002 fece 	bl	d7000 <strcmp>
   d4264:	4604      	mov	r4, r0
   d4266:	a80d      	add	r0, sp, #52	; 0x34
   d4268:	f7ff ff56 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else if (iter.name() == "door") {
   d426c:	2c00      	cmp	r4, #0
   d426e:	d1b2      	bne.n	d41d6 <_Z19serialCmdProcessingv+0x82>
    return JSONValue(v_, d_);
   d4270:	9c14      	ldr	r4, [sp, #80]	; 0x50
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4272:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d4274:	9303      	str	r3, [sp, #12]
   d4276:	a911      	add	r1, sp, #68	; 0x44
   d4278:	a804      	add	r0, sp, #16
   d427a:	f7ff ff63 	bl	d4144 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d427e:	4621      	mov	r1, r4
   d4280:	aa03      	add	r2, sp, #12
   d4282:	a80c      	add	r0, sp, #48	; 0x30
   d4284:	f001 fa2f 	bl	d56e6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4288:	a804      	add	r0, sp, #16
   d428a:	f7ff ff45 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      door.cmdProcessing(iter.value());
   d428e:	a90c      	add	r1, sp, #48	; 0x30
   d4290:	4628      	mov	r0, r5
   d4292:	f000 fdcf 	bl	d4e34 <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE>
   d4296:	e7ce      	b.n	d4236 <_Z19serialCmdProcessingv+0xe2>
   d4298:	a811      	add	r0, sp, #68	; 0x44
   d429a:	f7ff ff3d 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d429e:	a806      	add	r0, sp, #24
   d42a0:	f7ff ff3a 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  String cmdStr = "";
   d42a4:	a808      	add	r0, sp, #32
   d42a6:	f001 fddf 	bl	d5e68 <_ZN6StringD1Ev>
}
   d42aa:	b017      	add	sp, #92	; 0x5c
   d42ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d42ae:	bf00      	nop
   d42b0:	000d7397 	.word	0x000d7397
   d42b4:	000d721c 	.word	0x000d721c
   d42b8:	000d7227 	.word	0x000d7227
   d42bc:	2003e53c 	.word	0x2003e53c
   d42c0:	2003e570 	.word	0x2003e570

000d42c4 <loop>:

void loop() {
   d42c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d42c6:	ed2d 8b02 	vpush	{d8}
	//delay(100);

// Reading temperature or humidity takes about 250 milliseconds!
// Sensor readings may also be up to 2 seconds 'old' (its a
// very slow sensor)
	float h = dht.getHumidity();
   d42ca:	4846      	ldr	r0, [pc, #280]	; (d43e4 <loop+0x120>)
void loop() {
   d42cc:	b08f      	sub	sp, #60	; 0x3c
	float h = dht.getHumidity();
   d42ce:	f000 fb21 	bl	d4914 <_ZN3DHT11getHumidityEv>
// Read temperature as Celsius
	float temp = dht.getTempCelcius();
   d42d2:	4844      	ldr	r0, [pc, #272]	; (d43e4 <loop+0x120>)
	float h = dht.getHumidity();
   d42d4:	eef0 8a40 	vmov.f32	s17, s0
	float temp = dht.getTempCelcius();
   d42d8:	f000 fadc 	bl	d4894 <_ZN3DHT14getTempCelciusEv>
// Read temperature as Farenheit
	float f = dht.getTempFarenheit();
   d42dc:	4841      	ldr	r0, [pc, #260]	; (d43e4 <loop+0x120>)
	float temp = dht.getTempCelcius();
   d42de:	eeb0 8a40 	vmov.f32	s16, s0
	float f = dht.getTempFarenheit();
   d42e2:	f000 fad9 	bl	d4898 <_ZN3DHT16getTempFarenheitEv>

// Check if any reads failed and exit early (to try again).
	if (isnan(h) || isnan(temp) || isnan(f)) {
   d42e6:	eef4 8a68 	vcmp.f32	s17, s17
   d42ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d42ee:	d609      	bvs.n	d4304 <loop+0x40>
   d42f0:	eeb4 8a48 	vcmp.f32	s16, s16
   d42f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d42f8:	d604      	bvs.n	d4304 <loop+0x40>
   d42fa:	eeb4 0a40 	vcmp.f32	s0, s0
   d42fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4302:	d70d      	bvc.n	d4320 <loop+0x5c>
		//Serial.println("Failed to read from DHT sensor!");
		Serial.printf("{\"Fail\": %d}", true);
   d4304:	f001 ffe2 	bl	d62cc <_Z16_fetch_usbserialv>
   d4308:	4937      	ldr	r1, [pc, #220]	; (d43e8 <loop+0x124>)
   d430a:	2201      	movs	r2, #1
   d430c:	f7ff fed3 	bl	d40b6 <_ZN5Print6printfEPKcz>
		Serial.println();
   d4310:	f001 ffdc 	bl	d62cc <_Z16_fetch_usbserialv>
   d4314:	f001 fd09 	bl	d5d2a <_ZN5Print7printlnEv>
  }
  counter++;

  period = PERIOD - (millis() - t);
  if (period > 0) delay(period);
}
   d4318:	b00f      	add	sp, #60	; 0x3c
   d431a:	ecbd 8b02 	vpop	{d8}
   d431e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Serial.printf("{\"Humid(Percent)\":%.2f, \"Temp(*C)\":%.2f}", h, temp);
   d4320:	f001 ffd4 	bl	d62cc <_Z16_fetch_usbserialv>
   d4324:	4604      	mov	r4, r0
   d4326:	ee18 0a90 	vmov	r0, s17
   d432a:	f002 faf5 	bl	d6918 <__aeabi_f2d>
   d432e:	4602      	mov	r2, r0
   d4330:	460b      	mov	r3, r1
   d4332:	ee18 0a10 	vmov	r0, s16
   d4336:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d433a:	f002 faed 	bl	d6918 <__aeabi_f2d>
   d433e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d4342:	e9cd 0100 	strd	r0, r1, [sp]
   d4346:	4929      	ldr	r1, [pc, #164]	; (d43ec <loop+0x128>)
  if (counter % (SERAIL_COMM_FREQUENCY * LOOP_FREQUENCY) == 0) {
   d4348:	4d29      	ldr	r5, [pc, #164]	; (d43f0 <loop+0x12c>)
	Serial.printf("{\"Humid(Percent)\":%.2f, \"Temp(*C)\":%.2f}", h, temp);
   d434a:	4620      	mov	r0, r4
   d434c:	f7ff feb3 	bl	d40b6 <_ZN5Print6printfEPKcz>
	Serial.println();
   d4350:	f001 ffbc 	bl	d62cc <_Z16_fetch_usbserialv>
   d4354:	f001 fce9 	bl	d5d2a <_ZN5Print7printlnEv>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4358:	f000 fe04 	bl	d4f64 <HAL_Timer_Get_Milli_Seconds>
   d435c:	4604      	mov	r4, r0
  serialCmdProcessing();
   d435e:	f7ff fef9 	bl	d4154 <_Z19serialCmdProcessingv>
  smartLight.execute();
   d4362:	4824      	ldr	r0, [pc, #144]	; (d43f4 <loop+0x130>)
   d4364:	f000 fbac 	bl	d4ac0 <_ZN11CSmartLight7executeEv>
   d4368:	f000 fdfc 	bl	d4f64 <HAL_Timer_Get_Milli_Seconds>
   d436c:	4606      	mov	r6, r0
  door.execute();
   d436e:	4822      	ldr	r0, [pc, #136]	; (d43f8 <loop+0x134>)
   d4370:	f000 fcd4 	bl	d4d1c <_ZN5CDoor7executeEv>
   d4374:	6829      	ldr	r1, [r5, #0]
   d4376:	220a      	movs	r2, #10
   d4378:	fb91 f3f2 	sdiv	r3, r1, r2
   d437c:	fb02 1313 	mls	r3, r2, r3, r1
  if (counter % (SERAIL_COMM_FREQUENCY * LOOP_FREQUENCY) == 0) {
   d4380:	bb23      	cbnz	r3, d43cc <loop+0x108>
    counter = 0;
   d4382:	602b      	str	r3, [r5, #0]
    Serial.printf("{\"t\":%d,\"light\":%s, \"door\":%s, \"ct\":%ld}",
   d4384:	f001 ffa2 	bl	d62cc <_Z16_fetch_usbserialv>
   d4388:	4607      	mov	r7, r0
      (int)Time.now(), smartLight.getStatusStr().c_str(), door.getStatusStr().c_str(),
   d438a:	f001 fead 	bl	d60e8 <_ZN9TimeClass3nowEv>

    void execute();

    int getSensorVal();
    void readSensorVal();
    String getStatusStr() {return statusStr;};
   d438e:	491b      	ldr	r1, [pc, #108]	; (d43fc <loop+0x138>)
   d4390:	9005      	str	r0, [sp, #20]
   d4392:	a806      	add	r0, sp, #24
   d4394:	f001 fdf3 	bl	d5f7e <_ZN6StringC1ERKS_>
    Serial.printf("{\"t\":%d,\"light\":%s, \"door\":%s, \"ct\":%ld}",
   d4398:	9b06      	ldr	r3, [sp, #24]

    void execute();

    int getSensorVal();
    void readSensorVal();
    String getStatusStr() {return statusStr;};
   d439a:	4919      	ldr	r1, [pc, #100]	; (d4400 <loop+0x13c>)
   d439c:	9302      	str	r3, [sp, #8]
   d439e:	a80a      	add	r0, sp, #40	; 0x28
   d43a0:	f001 fded 	bl	d5f7e <_ZN6StringC1ERKS_>
  unsigned long period = millis() - t;
   d43a4:	1b36      	subs	r6, r6, r4
    Serial.printf("{\"t\":%d,\"light\":%s, \"door\":%s, \"ct\":%ld}",
   d43a6:	990a      	ldr	r1, [sp, #40]	; 0x28
   d43a8:	9b02      	ldr	r3, [sp, #8]
   d43aa:	9a05      	ldr	r2, [sp, #20]
   d43ac:	9100      	str	r1, [sp, #0]
   d43ae:	9601      	str	r6, [sp, #4]
   d43b0:	4914      	ldr	r1, [pc, #80]	; (d4404 <loop+0x140>)
   d43b2:	4638      	mov	r0, r7
   d43b4:	f7ff fe7f 	bl	d40b6 <_ZN5Print6printfEPKcz>
      (int)Time.now(), smartLight.getStatusStr().c_str(), door.getStatusStr().c_str(),
   d43b8:	a80a      	add	r0, sp, #40	; 0x28
   d43ba:	f001 fd55 	bl	d5e68 <_ZN6StringD1Ev>
   d43be:	a806      	add	r0, sp, #24
   d43c0:	f001 fd52 	bl	d5e68 <_ZN6StringD1Ev>
    Serial.println();
   d43c4:	f001 ff82 	bl	d62cc <_Z16_fetch_usbserialv>
   d43c8:	f001 fcaf 	bl	d5d2a <_ZN5Print7printlnEv>
  counter++;
   d43cc:	682b      	ldr	r3, [r5, #0]
   d43ce:	3301      	adds	r3, #1
   d43d0:	602b      	str	r3, [r5, #0]
   d43d2:	f000 fdc7 	bl	d4f64 <HAL_Timer_Get_Milli_Seconds>
  period = PERIOD - (millis() - t);
   d43d6:	3464      	adds	r4, #100	; 0x64
  if (period > 0) delay(period);
   d43d8:	1a20      	subs	r0, r4, r0
   d43da:	d09d      	beq.n	d4318 <loop+0x54>
   d43dc:	f001 f826 	bl	d542c <delay>
   d43e0:	e79a      	b.n	d4318 <loop+0x54>
   d43e2:	bf00      	nop
   d43e4:	2003e528 	.word	0x2003e528
   d43e8:	000d722c 	.word	0x000d722c
   d43ec:	000d7239 	.word	0x000d7239
   d43f0:	2003e524 	.word	0x2003e524
   d43f4:	2003e570 	.word	0x2003e570
   d43f8:	2003e53c 	.word	0x2003e53c
   d43fc:	2003e590 	.word	0x2003e590
   d4400:	2003e560 	.word	0x2003e560
   d4404:	000d7262 	.word	0x000d7262

000d4408 <_GLOBAL__sub_I_dht>:
}
   d4408:	b508      	push	{r3, lr}
SYSTEM_THREAD(ENABLED);
   d440a:	2100      	movs	r1, #0
   d440c:	2001      	movs	r0, #1
   d440e:	f000 ff41 	bl	d5294 <system_thread_set_state>
DHT dht(DHTPIN, DHTTYPE);
   d4412:	2306      	movs	r3, #6
   d4414:	220b      	movs	r2, #11
   d4416:	2102      	movs	r1, #2
   d4418:	4805      	ldr	r0, [pc, #20]	; (d4430 <_GLOBAL__sub_I_dht+0x28>)
   d441a:	f000 f842 	bl	d44a2 <_ZN3DHTC1Ehhh>
CSmartLight smartLight;
   d441e:	4805      	ldr	r0, [pc, #20]	; (d4434 <_GLOBAL__sub_I_dht+0x2c>)
   d4420:	f000 fa7a 	bl	d4918 <_ZN11CSmartLightC1Ev>
}
   d4424:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
CDoor door;
   d4428:	4803      	ldr	r0, [pc, #12]	; (d4438 <_GLOBAL__sub_I_dht+0x30>)
   d442a:	f000 bc39 	b.w	d4ca0 <_ZN5CDoorC1Ev>
   d442e:	bf00      	nop
   d4430:	2003e528 	.word	0x2003e528
   d4434:	2003e570 	.word	0x2003e570
   d4438:	2003e53c 	.word	0x2003e53c

000d443c <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d443c:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d443e:	6803      	ldr	r3, [r0, #0]
   d4440:	2b2f      	cmp	r3, #47	; 0x2f
{
   d4442:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d4444:	d904      	bls.n	d4450 <nrf_gpio_pin_port_decode+0x14>
   d4446:	4a07      	ldr	r2, [pc, #28]	; (d4464 <nrf_gpio_pin_port_decode+0x28>)
   d4448:	2100      	movs	r1, #0
   d444a:	200a      	movs	r0, #10
   d444c:	f000 fef2 	bl	d5234 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d4450:	6823      	ldr	r3, [r4, #0]
   d4452:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d4454:	bf83      	ittte	hi
   d4456:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   d445a:	4803      	ldrhi	r0, [pc, #12]	; (d4468 <nrf_gpio_pin_port_decode+0x2c>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d445c:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   d445e:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    }
#endif
}
   d4462:	bd10      	pop	{r4, pc}
   d4464:	000d4f55 	.word	0x000d4f55
   d4468:	50000300 	.word	0x50000300

000d446c <nrf_gpio_pin_set>:
    }
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
   d446c:	b507      	push	{r0, r1, r2, lr}
   d446e:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4470:	a801      	add	r0, sp, #4
   d4472:	f7ff ffe3 	bl	d443c <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d4476:	9a01      	ldr	r2, [sp, #4]
   d4478:	2301      	movs	r3, #1
   d447a:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d447c:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   d4480:	b003      	add	sp, #12
   d4482:	f85d fb04 	ldr.w	pc, [sp], #4

000d4486 <nrf_gpio_pin_read>:
{
   d4486:	b507      	push	{r0, r1, r2, lr}
   d4488:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d448a:	a801      	add	r0, sp, #4
   d448c:	f7ff ffd6 	bl	d443c <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d4490:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   d4492:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d4496:	40d8      	lsrs	r0, r3
}
   d4498:	f000 0001 	and.w	r0, r0, #1
   d449c:	b003      	add	sp, #12
   d449e:	f85d fb04 	ldr.w	pc, [sp], #4

000d44a2 <_ZN3DHTC1Ehhh>:
 * modified for Spark Core by RussGrue
 * */

#include "Adafruit_DHT.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
   d44a2:	b510      	push	{r4, lr}
	_pin = pin;
	_type = type;
	_count = count;
   d44a4:	7203      	strb	r3, [r0, #8]
	firstreading = true;
   d44a6:	2301      	movs	r3, #1
	_pin = pin;
   d44a8:	7181      	strb	r1, [r0, #6]
	_type = type;
   d44aa:	71c2      	strb	r2, [r0, #7]
	firstreading = true;
   d44ac:	7403      	strb	r3, [r0, #16]
}
   d44ae:	bd10      	pop	{r4, pc}

000d44b0 <_ZN3DHT5beginEv>:

void DHT::begin(void) {
   d44b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d44b4:	4605      	mov	r5, r0
/* Disabling USE_BIT_BAND since bitbanding is much slower! as per comment
 * by @pkourany on PR: https://github.com/spark/firmware/pull/556 */
#define USE_BIT_BAND 0

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d44b6:	4c1e      	ldr	r4, [pc, #120]	; (d4530 <_ZN3DHT5beginEv+0x80>)
// set up the pins!
	pinMode(_pin, INPUT);
   d44b8:	7980      	ldrb	r0, [r0, #6]
   d44ba:	f8df 8078 	ldr.w	r8, [pc, #120]	; d4534 <_ZN3DHT5beginEv+0x84>
   d44be:	2100      	movs	r1, #0
   d44c0:	f002 f842 	bl	d6548 <pinMode>
	pinSetFast(_pin);
   d44c4:	79ae      	ldrb	r6, [r5, #6]
   d44c6:	7823      	ldrb	r3, [r4, #0]
   d44c8:	f3bf 8f5b 	dmb	ish
   d44cc:	f013 0f01 	tst.w	r3, #1
   d44d0:	d10a      	bne.n	d44e8 <_ZN3DHT5beginEv+0x38>
   d44d2:	4620      	mov	r0, r4
   d44d4:	f7ff fde7 	bl	d40a6 <__cxa_guard_acquire>
   d44d8:	b130      	cbz	r0, d44e8 <_ZN3DHT5beginEv+0x38>
   d44da:	f000 fd5b 	bl	d4f94 <HAL_Pin_Map>
   d44de:	f8c8 0000 	str.w	r0, [r8]
   d44e2:	4620      	mov	r0, r4
   d44e4:	f7ff fde4 	bl	d40b0 <__cxa_guard_release>
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));


inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d44e8:	f8d8 3000 	ldr.w	r3, [r8]
   d44ec:	0136      	lsls	r6, r6, #4
   d44ee:	5d9f      	ldrb	r7, [r3, r6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d44f0:	7823      	ldrb	r3, [r4, #0]
   d44f2:	f3bf 8f5b 	dmb	ish
   d44f6:	07db      	lsls	r3, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d44f8:	ea4f 1747 	mov.w	r7, r7, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d44fc:	d40a      	bmi.n	d4514 <_ZN3DHT5beginEv+0x64>
   d44fe:	480c      	ldr	r0, [pc, #48]	; (d4530 <_ZN3DHT5beginEv+0x80>)
   d4500:	f7ff fdd1 	bl	d40a6 <__cxa_guard_acquire>
   d4504:	b130      	cbz	r0, d4514 <_ZN3DHT5beginEv+0x64>
   d4506:	f000 fd45 	bl	d4f94 <HAL_Pin_Map>
   d450a:	f8c8 0000 	str.w	r0, [r8]
   d450e:	4808      	ldr	r0, [pc, #32]	; (d4530 <_ZN3DHT5beginEv+0x80>)
   d4510:	f7ff fdce 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4514:	f8d8 3000 	ldr.w	r3, [r8]
   d4518:	4433      	add	r3, r6
   d451a:	785b      	ldrb	r3, [r3, #1]
   d451c:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_pin_set(nrf_pin);
   d4520:	ea43 0007 	orr.w	r0, r3, r7
   d4524:	f7ff ffa2 	bl	d446c <nrf_gpio_pin_set>
	_lastreadtime = 0;
   d4528:	2300      	movs	r3, #0
   d452a:	60eb      	str	r3, [r5, #12]
}
   d452c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4530:	2003e5a0 	.word	0x2003e5a0
   d4534:	2003e5a4 	.word	0x2003e5a4

000d4538 <_ZN3DHT4readEv>:
	double tC = (a * (float) tempCelcius) / (b + (float) tempCelcius) + log( (float) percentHumidity / 100);
	double Td = (b * tC) / (a - tC);
	return Td;
}

boolean DHT::read(void) {
   d4538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d453c:	4604      	mov	r4, r0
   d453e:	b085      	sub	sp, #20
   d4540:	f000 fd10 	bl	d4f64 <HAL_Timer_Get_Milli_Seconds>
	unsigned long currenttime;

// Check if sensor was read less than two seconds ago and return early
// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime) {
   d4544:	68e3      	ldr	r3, [r4, #12]
   d4546:	4283      	cmp	r3, r0
// ie there was a rollover
		_lastreadtime = 0;
   d4548:	bf84      	itt	hi
   d454a:	2300      	movhi	r3, #0
   d454c:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
   d454e:	7c23      	ldrb	r3, [r4, #16]
   d4550:	b92b      	cbnz	r3, d455e <_ZN3DHT4readEv+0x26>
   d4552:	68e3      	ldr	r3, [r4, #12]
   d4554:	1ac0      	subs	r0, r0, r3
   d4556:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d455a:	f0c0 8160 	bcc.w	d481e <_ZN3DHT4readEv+0x2e6>
		return true; // return last correct measurement
//		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
   d455e:	2500      	movs	r5, #0
   d4560:	7425      	strb	r5, [r4, #16]
   d4562:	f000 fcff 	bl	d4f64 <HAL_Timer_Get_Milli_Seconds>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4566:	4eb0      	ldr	r6, [pc, #704]	; (d4828 <_ZN3DHT4readEv+0x2f0>)
	Serial.print("Currtime: "); Serial.print(currenttime);
	Serial.print(" Lasttime: "); Serial.print(_lastreadtime);
*/
	_lastreadtime = millis();

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   d4568:	6025      	str	r5, [r4, #0]
   d456a:	7125      	strb	r5, [r4, #4]
	_lastreadtime = millis();
   d456c:	60e0      	str	r0, [r4, #12]

// pull the pin high and wait 250 milliseconds
	pinSetFast(_pin);
   d456e:	79a7      	ldrb	r7, [r4, #6]
   d4570:	7833      	ldrb	r3, [r6, #0]
   d4572:	4dae      	ldr	r5, [pc, #696]	; (d482c <_ZN3DHT4readEv+0x2f4>)
   d4574:	f3bf 8f5b 	dmb	ish
   d4578:	f013 0f01 	tst.w	r3, #1
   d457c:	d109      	bne.n	d4592 <_ZN3DHT4readEv+0x5a>
   d457e:	4630      	mov	r0, r6
   d4580:	f7ff fd91 	bl	d40a6 <__cxa_guard_acquire>
   d4584:	b128      	cbz	r0, d4592 <_ZN3DHT4readEv+0x5a>
   d4586:	f000 fd05 	bl	d4f94 <HAL_Pin_Map>
   d458a:	6028      	str	r0, [r5, #0]
   d458c:	4630      	mov	r0, r6
   d458e:	f7ff fd8f 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4592:	682b      	ldr	r3, [r5, #0]
   d4594:	013f      	lsls	r7, r7, #4
   d4596:	f813 8007 	ldrb.w	r8, [r3, r7]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d459a:	7833      	ldrb	r3, [r6, #0]
   d459c:	f3bf 8f5b 	dmb	ish
   d45a0:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d45a2:	ea4f 1848 	mov.w	r8, r8, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d45a6:	d409      	bmi.n	d45bc <_ZN3DHT4readEv+0x84>
   d45a8:	489f      	ldr	r0, [pc, #636]	; (d4828 <_ZN3DHT4readEv+0x2f0>)
   d45aa:	f7ff fd7c 	bl	d40a6 <__cxa_guard_acquire>
   d45ae:	b128      	cbz	r0, d45bc <_ZN3DHT4readEv+0x84>
   d45b0:	f000 fcf0 	bl	d4f94 <HAL_Pin_Map>
   d45b4:	6028      	str	r0, [r5, #0]
   d45b6:	489c      	ldr	r0, [pc, #624]	; (d4828 <_ZN3DHT4readEv+0x2f0>)
   d45b8:	f7ff fd7a 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d45bc:	682b      	ldr	r3, [r5, #0]
   d45be:	441f      	add	r7, r3
   d45c0:	7878      	ldrb	r0, [r7, #1]
   d45c2:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_pin_set(nrf_pin);
   d45c6:	ea40 0008 	orr.w	r0, r0, r8
   d45ca:	f7ff ff4f 	bl	d446c <nrf_gpio_pin_set>
	delay(250);
   d45ce:	20fa      	movs	r0, #250	; 0xfa
   d45d0:	f000 ff2c 	bl	d542c <delay>

// now pull it low for ~20 milliseconds
	pinMode(_pin, OUTPUT);
   d45d4:	79a0      	ldrb	r0, [r4, #6]
   d45d6:	2101      	movs	r1, #1
   d45d8:	f001 ffb6 	bl	d6548 <pinMode>
	pinResetFast(_pin);
   d45dc:	79a7      	ldrb	r7, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d45de:	7833      	ldrb	r3, [r6, #0]
   d45e0:	f3bf 8f5b 	dmb	ish
   d45e4:	07da      	lsls	r2, r3, #31
   d45e6:	d409      	bmi.n	d45fc <_ZN3DHT4readEv+0xc4>
   d45e8:	488f      	ldr	r0, [pc, #572]	; (d4828 <_ZN3DHT4readEv+0x2f0>)
   d45ea:	f7ff fd5c 	bl	d40a6 <__cxa_guard_acquire>
   d45ee:	b128      	cbz	r0, d45fc <_ZN3DHT4readEv+0xc4>
   d45f0:	f000 fcd0 	bl	d4f94 <HAL_Pin_Map>
   d45f4:	6028      	str	r0, [r5, #0]
   d45f6:	488c      	ldr	r0, [pc, #560]	; (d4828 <_ZN3DHT4readEv+0x2f0>)
   d45f8:	f7ff fd5a 	bl	d40b0 <__cxa_guard_release>
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d45fc:	682b      	ldr	r3, [r5, #0]
   d45fe:	013f      	lsls	r7, r7, #4
   d4600:	5ddb      	ldrb	r3, [r3, r7]
   d4602:	ea4f 1843 	mov.w	r8, r3, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4606:	7833      	ldrb	r3, [r6, #0]
   d4608:	f3bf 8f5b 	dmb	ish
   d460c:	07db      	lsls	r3, r3, #31
   d460e:	d409      	bmi.n	d4624 <_ZN3DHT4readEv+0xec>
   d4610:	4885      	ldr	r0, [pc, #532]	; (d4828 <_ZN3DHT4readEv+0x2f0>)
   d4612:	f7ff fd48 	bl	d40a6 <__cxa_guard_acquire>
   d4616:	b128      	cbz	r0, d4624 <_ZN3DHT4readEv+0xec>
   d4618:	f000 fcbc 	bl	d4f94 <HAL_Pin_Map>
   d461c:	6028      	str	r0, [r5, #0]
   d461e:	4882      	ldr	r0, [pc, #520]	; (d4828 <_ZN3DHT4readEv+0x2f0>)
   d4620:	f7ff fd46 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4624:	682b      	ldr	r3, [r5, #0]
   d4626:	441f      	add	r7, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4628:	a803      	add	r0, sp, #12
   d462a:	787b      	ldrb	r3, [r7, #1]
   d462c:	f003 031f 	and.w	r3, r3, #31
   d4630:	ea43 0308 	orr.w	r3, r3, r8
   d4634:	9303      	str	r3, [sp, #12]
   d4636:	f7ff ff01 	bl	d443c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d463a:	9a03      	ldr	r2, [sp, #12]
   d463c:	2301      	movs	r3, #1
   d463e:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d4640:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
	delay(20);
   d4644:	2014      	movs	r0, #20
   d4646:	f000 fef1 	bl	d542c <delay>
	noInterrupts();
   d464a:	f000 ff77 	bl	d553c <_Z12noInterruptsv>
	pinSetFast(_pin);
   d464e:	79a7      	ldrb	r7, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4650:	7833      	ldrb	r3, [r6, #0]
   d4652:	f3bf 8f5b 	dmb	ish
   d4656:	07d8      	lsls	r0, r3, #31
   d4658:	d409      	bmi.n	d466e <_ZN3DHT4readEv+0x136>
   d465a:	4873      	ldr	r0, [pc, #460]	; (d4828 <_ZN3DHT4readEv+0x2f0>)
   d465c:	f7ff fd23 	bl	d40a6 <__cxa_guard_acquire>
   d4660:	b128      	cbz	r0, d466e <_ZN3DHT4readEv+0x136>
   d4662:	f000 fc97 	bl	d4f94 <HAL_Pin_Map>
   d4666:	6028      	str	r0, [r5, #0]
   d4668:	486f      	ldr	r0, [pc, #444]	; (d4828 <_ZN3DHT4readEv+0x2f0>)
   d466a:	f7ff fd21 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d466e:	682b      	ldr	r3, [r5, #0]
   d4670:	013f      	lsls	r7, r7, #4
   d4672:	f813 8007 	ldrb.w	r8, [r3, r7]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4676:	7833      	ldrb	r3, [r6, #0]
   d4678:	f3bf 8f5b 	dmb	ish
   d467c:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d467e:	ea4f 1848 	mov.w	r8, r8, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4682:	d409      	bmi.n	d4698 <_ZN3DHT4readEv+0x160>
   d4684:	4868      	ldr	r0, [pc, #416]	; (d4828 <_ZN3DHT4readEv+0x2f0>)
   d4686:	f7ff fd0e 	bl	d40a6 <__cxa_guard_acquire>
   d468a:	b128      	cbz	r0, d4698 <_ZN3DHT4readEv+0x160>
   d468c:	f000 fc82 	bl	d4f94 <HAL_Pin_Map>
   d4690:	6028      	str	r0, [r5, #0]
   d4692:	4865      	ldr	r0, [pc, #404]	; (d4828 <_ZN3DHT4readEv+0x2f0>)
   d4694:	f7ff fd0c 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4698:	682b      	ldr	r3, [r5, #0]
   d469a:	441f      	add	r7, r3
   d469c:	7878      	ldrb	r0, [r7, #1]
   d469e:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_pin_set(nrf_pin);
   d46a2:	ea40 0008 	orr.w	r0, r0, r8
   d46a6:	f7ff fee1 	bl	d446c <nrf_gpio_pin_set>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d46aa:	2028      	movs	r0, #40	; 0x28
   d46ac:	f000 fc52 	bl	d4f54 <HAL_Delay_Microseconds>
	delayMicroseconds(40);
	pinMode(_pin, INPUT);
   d46b0:	79a0      	ldrb	r0, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d46b2:	f8df 8174 	ldr.w	r8, [pc, #372]	; d4828 <_ZN3DHT4readEv+0x2f0>
   d46b6:	2100      	movs	r1, #0
   d46b8:	f001 ff46 	bl	d6548 <pinMode>

// read in timings
	for ( i=0; i< MAXTIMINGS; i++) {
   d46bc:	2700      	movs	r7, #0
	uint8_t laststate = HIGH;
   d46be:	2301      	movs	r3, #1
	uint8_t j = 0, i;
   d46c0:	46ba      	mov	sl, r7
	uint8_t laststate = HIGH;
   d46c2:	9300      	str	r3, [sp, #0]
		counter = 0;
   d46c4:	f04f 0900 	mov.w	r9, #0
		while (pinReadFast(_pin) == laststate) {
   d46c8:	f894 b006 	ldrb.w	fp, [r4, #6]
   d46cc:	7833      	ldrb	r3, [r6, #0]
   d46ce:	f3bf 8f5b 	dmb	ish
   d46d2:	07da      	lsls	r2, r3, #31
   d46d4:	d409      	bmi.n	d46ea <_ZN3DHT4readEv+0x1b2>
   d46d6:	4640      	mov	r0, r8
   d46d8:	f7ff fce5 	bl	d40a6 <__cxa_guard_acquire>
   d46dc:	b128      	cbz	r0, d46ea <_ZN3DHT4readEv+0x1b2>
   d46de:	f000 fc59 	bl	d4f94 <HAL_Pin_Map>
   d46e2:	6028      	str	r0, [r5, #0]
   d46e4:	4640      	mov	r0, r8
   d46e6:	f7ff fce3 	bl	d40b0 <__cxa_guard_release>
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d46ea:	682b      	ldr	r3, [r5, #0]
   d46ec:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
   d46f0:	f813 300b 	ldrb.w	r3, [r3, fp]
   d46f4:	015b      	lsls	r3, r3, #5
   d46f6:	9301      	str	r3, [sp, #4]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d46f8:	7833      	ldrb	r3, [r6, #0]
   d46fa:	f3bf 8f5b 	dmb	ish
   d46fe:	07db      	lsls	r3, r3, #31
   d4700:	d409      	bmi.n	d4716 <_ZN3DHT4readEv+0x1de>
   d4702:	4640      	mov	r0, r8
   d4704:	f7ff fccf 	bl	d40a6 <__cxa_guard_acquire>
   d4708:	b128      	cbz	r0, d4716 <_ZN3DHT4readEv+0x1de>
   d470a:	f000 fc43 	bl	d4f94 <HAL_Pin_Map>
   d470e:	6028      	str	r0, [r5, #0]
   d4710:	4640      	mov	r0, r8
   d4712:	f7ff fccd 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4716:	682b      	ldr	r3, [r5, #0]
   d4718:	445b      	add	r3, fp
   d471a:	f893 b001 	ldrb.w	fp, [r3, #1]
   d471e:	9b01      	ldr	r3, [sp, #4]
   d4720:	f00b 0b1f 	and.w	fp, fp, #31
   d4724:	ea4b 0b03 	orr.w	fp, fp, r3
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
   d4728:	4658      	mov	r0, fp
   d472a:	f7ff feac 	bl	d4486 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d472e:	4658      	mov	r0, fp
   d4730:	f7ff fea9 	bl	d4486 <nrf_gpio_pin_read>
   d4734:	9b00      	ldr	r3, [sp, #0]
   d4736:	4283      	cmp	r3, r0
   d4738:	d109      	bne.n	d474e <_ZN3DHT4readEv+0x216>
			counter++;
   d473a:	f109 0901 	add.w	r9, r9, #1
   d473e:	fa5f f989 	uxtb.w	r9, r9
   d4742:	2001      	movs	r0, #1
   d4744:	f000 fc06 	bl	d4f54 <HAL_Delay_Microseconds>
			delayMicroseconds(1);
			if (counter == 255) {
   d4748:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   d474c:	d1bc      	bne.n	d46c8 <_ZN3DHT4readEv+0x190>
				break;
			}
		}
		laststate = pinReadFast(_pin);
   d474e:	f894 b006 	ldrb.w	fp, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4752:	7833      	ldrb	r3, [r6, #0]
   d4754:	f3bf 8f5b 	dmb	ish
   d4758:	07d8      	lsls	r0, r3, #31
   d475a:	d409      	bmi.n	d4770 <_ZN3DHT4readEv+0x238>
   d475c:	4640      	mov	r0, r8
   d475e:	f7ff fca2 	bl	d40a6 <__cxa_guard_acquire>
   d4762:	b128      	cbz	r0, d4770 <_ZN3DHT4readEv+0x238>
   d4764:	f000 fc16 	bl	d4f94 <HAL_Pin_Map>
   d4768:	6028      	str	r0, [r5, #0]
   d476a:	4640      	mov	r0, r8
   d476c:	f7ff fca0 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4770:	682b      	ldr	r3, [r5, #0]
   d4772:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
   d4776:	f813 300b 	ldrb.w	r3, [r3, fp]
   d477a:	015b      	lsls	r3, r3, #5
   d477c:	9300      	str	r3, [sp, #0]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d477e:	7833      	ldrb	r3, [r6, #0]
   d4780:	f3bf 8f5b 	dmb	ish
   d4784:	07d9      	lsls	r1, r3, #31
   d4786:	d409      	bmi.n	d479c <_ZN3DHT4readEv+0x264>
   d4788:	4640      	mov	r0, r8
   d478a:	f7ff fc8c 	bl	d40a6 <__cxa_guard_acquire>
   d478e:	b128      	cbz	r0, d479c <_ZN3DHT4readEv+0x264>
   d4790:	f000 fc00 	bl	d4f94 <HAL_Pin_Map>
   d4794:	6028      	str	r0, [r5, #0]
   d4796:	4640      	mov	r0, r8
   d4798:	f7ff fc8a 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d479c:	682b      	ldr	r3, [r5, #0]
   d479e:	445b      	add	r3, fp
   d47a0:	f893 b001 	ldrb.w	fp, [r3, #1]
   d47a4:	9b00      	ldr	r3, [sp, #0]
   d47a6:	f00b 0b1f 	and.w	fp, fp, #31
   d47aa:	ea4b 0b03 	orr.w	fp, fp, r3
    (void)nrf_gpio_pin_read(nrf_pin);
   d47ae:	4658      	mov	r0, fp
   d47b0:	f7ff fe69 	bl	d4486 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d47b4:	4658      	mov	r0, fp
   d47b6:	f7ff fe66 	bl	d4486 <nrf_gpio_pin_read>

		if (counter == 255) break;
   d47ba:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
		laststate = pinReadFast(_pin);
   d47be:	b2c3      	uxtb	r3, r0
   d47c0:	9300      	str	r3, [sp, #0]
		if (counter == 255) break;
   d47c2:	d018      	beq.n	d47f6 <_ZN3DHT4readEv+0x2be>

// ignore first 3 transitions
		if ((i >= 4) && (i%2 == 0)) {
   d47c4:	2f03      	cmp	r7, #3
   d47c6:	d911      	bls.n	d47ec <_ZN3DHT4readEv+0x2b4>
   d47c8:	07fa      	lsls	r2, r7, #31
   d47ca:	d40f      	bmi.n	d47ec <_ZN3DHT4readEv+0x2b4>
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   d47cc:	ea4f 02da 	mov.w	r2, sl, lsr #3
			if (counter > _count)
				data[j/8] |= 1;
			j++;
   d47d0:	f10a 0a01 	add.w	sl, sl, #1
			data[j/8] <<= 1;
   d47d4:	5ca3      	ldrb	r3, [r4, r2]
   d47d6:	005b      	lsls	r3, r3, #1
   d47d8:	b2db      	uxtb	r3, r3
   d47da:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
   d47dc:	7a21      	ldrb	r1, [r4, #8]
   d47de:	4549      	cmp	r1, r9
				data[j/8] |= 1;
   d47e0:	bf3c      	itt	cc
   d47e2:	f043 0301 	orrcc.w	r3, r3, #1
   d47e6:	54a3      	strbcc	r3, [r4, r2]
			j++;
   d47e8:	fa5f fa8a 	uxtb.w	sl, sl
	for ( i=0; i< MAXTIMINGS; i++) {
   d47ec:	3701      	adds	r7, #1
   d47ee:	b2ff      	uxtb	r7, r7
   d47f0:	2f55      	cmp	r7, #85	; 0x55
   d47f2:	f47f af67 	bne.w	d46c4 <_ZN3DHT4readEv+0x18c>
		}
	}

	interrupts();
   d47f6:	f000 fea3 	bl	d5540 <_Z10interruptsv>
	Serial.print(data[4], HEX); Serial.print(" =? ");
	Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
*/

// check we read 40 bits and that the checksum matches
	if ((j >= 40) &&
   d47fa:	f1ba 0f27 	cmp.w	sl, #39	; 0x27
   d47fe:	d910      	bls.n	d4822 <_ZN3DHT4readEv+0x2ea>
	   (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
   d4800:	7863      	ldrb	r3, [r4, #1]
   d4802:	7820      	ldrb	r0, [r4, #0]
   d4804:	4418      	add	r0, r3
   d4806:	78a3      	ldrb	r3, [r4, #2]
   d4808:	4418      	add	r0, r3
   d480a:	78e3      	ldrb	r3, [r4, #3]
   d480c:	4418      	add	r0, r3
   d480e:	7923      	ldrb	r3, [r4, #4]
   d4810:	b2c0      	uxtb	r0, r0
	if ((j >= 40) &&
   d4812:	1ac3      	subs	r3, r0, r3
   d4814:	4258      	negs	r0, r3
   d4816:	4158      	adcs	r0, r3
		return true;
	}

	return false;

}
   d4818:	b005      	add	sp, #20
   d481a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return true; // return last correct measurement
   d481e:	2001      	movs	r0, #1
   d4820:	e7fa      	b.n	d4818 <_ZN3DHT4readEv+0x2e0>
	return false;
   d4822:	2000      	movs	r0, #0
   d4824:	e7f8      	b.n	d4818 <_ZN3DHT4readEv+0x2e0>
   d4826:	bf00      	nop
   d4828:	2003e5a0 	.word	0x2003e5a0
   d482c:	2003e5a4 	.word	0x2003e5a4

000d4830 <_ZN3DHT15readTemperatureEv>:
float DHT::readTemperature() {
   d4830:	b510      	push	{r4, lr}
   d4832:	4604      	mov	r4, r0
	if (read()) {
   d4834:	f7ff fe80 	bl	d4538 <_ZN3DHT4readEv>
   d4838:	b320      	cbz	r0, d4884 <_ZN3DHT15readTemperatureEv+0x54>
		switch (_type) {
   d483a:	79e3      	ldrb	r3, [r4, #7]
   d483c:	2b0b      	cmp	r3, #11
   d483e:	d01b      	beq.n	d4878 <_ZN3DHT15readTemperatureEv+0x48>
   d4840:	3b15      	subs	r3, #21
   d4842:	2b01      	cmp	r3, #1
   d4844:	d81e      	bhi.n	d4884 <_ZN3DHT15readTemperatureEv+0x54>
				f = data[2] & 0x7F;
   d4846:	78a3      	ldrb	r3, [r4, #2]
				f += data[3];
   d4848:	eddf 6a10 	vldr	s13, [pc, #64]	; d488c <_ZN3DHT15readTemperatureEv+0x5c>
				f = data[2] & 0x7F;
   d484c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   d4850:	ee07 2a10 	vmov	s14, r2
				f += data[3];
   d4854:	78e2      	ldrb	r2, [r4, #3]
   d4856:	ee07 2a90 	vmov	s15, r2
				f = data[2] & 0x7F;
   d485a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
				f += data[3];
   d485e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				if (data[2] & 0x80)
   d4862:	061b      	lsls	r3, r3, #24
				f += data[3];
   d4864:	eee7 7a26 	vfma.f32	s15, s14, s13
				f /= 10;
   d4868:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   d486c:	ee87 0a87 	vdiv.f32	s0, s15, s14
				if (data[2] & 0x80)
   d4870:	d507      	bpl.n	d4882 <_ZN3DHT15readTemperatureEv+0x52>
					f *= -1;
   d4872:	eeb1 0a40 	vneg.f32	s0, s0
   d4876:	e004      	b.n	d4882 <_ZN3DHT15readTemperatureEv+0x52>
				f = data[2];
   d4878:	78a3      	ldrb	r3, [r4, #2]
   d487a:	ee00 3a10 	vmov	s0, r3
   d487e:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
   d4882:	bd10      	pop	{r4, pc}
		switch (_type) {
   d4884:	ed9f 0a02 	vldr	s0, [pc, #8]	; d4890 <_ZN3DHT15readTemperatureEv+0x60>
   d4888:	e7fb      	b.n	d4882 <_ZN3DHT15readTemperatureEv+0x52>
   d488a:	bf00      	nop
   d488c:	43800000 	.word	0x43800000
   d4890:	7fc00000 	.word	0x7fc00000

000d4894 <_ZN3DHT14getTempCelciusEv>:
	return readTemperature();
   d4894:	f7ff bfcc 	b.w	d4830 <_ZN3DHT15readTemperatureEv>

000d4898 <_ZN3DHT16getTempFarenheitEv>:
float DHT::getTempFarenheit() {
   d4898:	b508      	push	{r3, lr}
	return convertCtoF(readTemperature());
   d489a:	f7ff ffc9 	bl	d4830 <_ZN3DHT15readTemperatureEv>
	return c * 9 / 5 + 32;
   d489e:	eef2 7a02 	vmov.f32	s15, #34	; 0x41100000  9.0
   d48a2:	ee20 0a27 	vmul.f32	s0, s0, s15
   d48a6:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
   d48aa:	ee80 7a27 	vdiv.f32	s14, s0, s15
}
   d48ae:	ed9f 0a02 	vldr	s0, [pc, #8]	; d48b8 <_ZN3DHT16getTempFarenheitEv+0x20>
   d48b2:	ee37 0a00 	vadd.f32	s0, s14, s0
   d48b6:	bd08      	pop	{r3, pc}
   d48b8:	42000000 	.word	0x42000000

000d48bc <_ZN3DHT12readHumidityEv>:
float DHT::readHumidity(void) {
   d48bc:	b510      	push	{r4, lr}
   d48be:	4604      	mov	r4, r0
	if (read()) {
   d48c0:	f7ff fe3a 	bl	d4538 <_ZN3DHT4readEv>
   d48c4:	b1f0      	cbz	r0, d4904 <_ZN3DHT12readHumidityEv+0x48>
		switch (_type) {
   d48c6:	79e3      	ldrb	r3, [r4, #7]
   d48c8:	2b0b      	cmp	r3, #11
   d48ca:	d015      	beq.n	d48f8 <_ZN3DHT12readHumidityEv+0x3c>
   d48cc:	3b15      	subs	r3, #21
   d48ce:	2b01      	cmp	r3, #1
   d48d0:	d818      	bhi.n	d4904 <_ZN3DHT12readHumidityEv+0x48>
				f = data[0];
   d48d2:	7823      	ldrb	r3, [r4, #0]
				f += data[1];
   d48d4:	eddf 6a0d 	vldr	s13, [pc, #52]	; d490c <_ZN3DHT12readHumidityEv+0x50>
				f = data[0];
   d48d8:	ee07 3a10 	vmov	s14, r3
				f += data[1];
   d48dc:	7863      	ldrb	r3, [r4, #1]
   d48de:	ee07 3a90 	vmov	s15, r3
				f = data[0];
   d48e2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
				f += data[1];
   d48e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d48ea:	eee7 7a26 	vfma.f32	s15, s14, s13
				f /= 10;
   d48ee:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   d48f2:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   d48f6:	bd10      	pop	{r4, pc}
				f = data[0];
   d48f8:	7823      	ldrb	r3, [r4, #0]
   d48fa:	ee00 3a10 	vmov	s0, r3
   d48fe:	eeb8 0a40 	vcvt.f32.u32	s0, s0
				return f;
   d4902:	e7f8      	b.n	d48f6 <_ZN3DHT12readHumidityEv+0x3a>
		switch (_type) {
   d4904:	ed9f 0a02 	vldr	s0, [pc, #8]	; d4910 <_ZN3DHT12readHumidityEv+0x54>
   d4908:	e7f5      	b.n	d48f6 <_ZN3DHT12readHumidityEv+0x3a>
   d490a:	bf00      	nop
   d490c:	43800000 	.word	0x43800000
   d4910:	7fc00000 	.word	0x7fc00000

000d4914 <_ZN3DHT11getHumidityEv>:
	return readHumidity();
   d4914:	f7ff bfd2 	b.w	d48bc <_ZN3DHT12readHumidityEv>

000d4918 <_ZN11CSmartLightC1Ev>:
#include "smartlight.h"

CSmartLight::CSmartLight() {
   d4918:	b538      	push	{r3, r4, r5, lr}
   d491a:	f100 0520 	add.w	r5, r0, #32
   d491e:	4604      	mov	r4, r0
   d4920:	490c      	ldr	r1, [pc, #48]	; (d4954 <_ZN11CSmartLightC1Ev+0x3c>)
   d4922:	4628      	mov	r0, r5
   d4924:	f001 faeb 	bl	d5efe <_ZN6StringC1EPKc>
    state_L0 = CSmartLight::S_ON;
   d4928:	f240 1301 	movw	r3, #257	; 0x101
   d492c:	8023      	strh	r3, [r4, #0]
    state_L1 = CSmartLight::S_AUTO;
    brightness = RGB_BRIGHTNESS_DEAULT;
   d492e:	2380      	movs	r3, #128	; 0x80
   d4930:	6063      	str	r3, [r4, #4]
    sensorMax = LIGHT_SENSOR_MAX;
    sensorMin = LIGHT_SENSOR_MIN;
   d4932:	f640 11c4 	movw	r1, #2500	; 0x9c4
   d4936:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d493a:	e9c4 1303 	strd	r1, r3, [r4, #12]

    statusStr = "{}";
   d493e:	4628      	mov	r0, r5
   d4940:	4905      	ldr	r1, [pc, #20]	; (d4958 <_ZN11CSmartLightC1Ev+0x40>)
   d4942:	f001 fb2f 	bl	d5fa4 <_ZN6StringaSEPKc>
    resetCmd();
    createStatusStr();
}

void CSmartLight::resetCmd() {
    cmd.On = INVALID_CMD;
   d4946:	4b05      	ldr	r3, [pc, #20]	; (d495c <_ZN11CSmartLightC1Ev+0x44>)
    cmd.Auto = INVALID_CMD;
    cmd.Brightness = INVALID_CMD;
   d4948:	61e3      	str	r3, [r4, #28]
    cmd.Auto = INVALID_CMD;
   d494a:	e9c4 3305 	strd	r3, r3, [r4, #20]
}
   d494e:	4620      	mov	r0, r4
   d4950:	bd38      	pop	{r3, r4, r5, pc}
   d4952:	bf00      	nop
   d4954:	000d7397 	.word	0x000d7397
   d4958:	000d728b 	.word	0x000d728b
   d495c:	fffe7961 	.word	0xfffe7961

000d4960 <_ZN11CSmartLight12turnOffLightEv>:
}

void CSmartLight::turnOffLight() {
   d4960:	b508      	push	{r3, lr}
    if (RGB.brightness() != 0) RGB.brightness(0);
   d4962:	f001 fa6e 	bl	d5e42 <_ZN8RGBClass10brightnessEv>
   d4966:	b128      	cbz	r0, d4974 <_ZN11CSmartLight12turnOffLightEv+0x14>
}
   d4968:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (RGB.brightness() != 0) RGB.brightness(0);
   d496c:	2101      	movs	r1, #1
   d496e:	2000      	movs	r0, #0
   d4970:	f001 ba59 	b.w	d5e26 <_ZN8RGBClass10brightnessEhb>
}
   d4974:	bd08      	pop	{r3, pc}
	...

000d4978 <_ZN11CSmartLight24updateBrightnessManuallyEi>:

// 0 <= val <= 100 (i.e., %)
void CSmartLight::updateBrightnessManually(int val) {
   d4978:	b538      	push	{r3, r4, r5, lr}
    if (val == INVALID_CMD) {
   d497a:	4b13      	ldr	r3, [pc, #76]	; (d49c8 <_ZN11CSmartLight24updateBrightnessManuallyEi+0x50>)
   d497c:	4299      	cmp	r1, r3
void CSmartLight::updateBrightnessManually(int val) {
   d497e:	4604      	mov	r4, r0
   d4980:	4608      	mov	r0, r1
    if (val == INVALID_CMD) {
   d4982:	d10a      	bne.n	d499a <_ZN11CSmartLight24updateBrightnessManuallyEi+0x22>
        if (brightness != RGB.brightness()) RGB.brightness(brightness);
   d4984:	6865      	ldr	r5, [r4, #4]
   d4986:	f001 fa5c 	bl	d5e42 <_ZN8RGBClass10brightnessEv>
   d498a:	4285      	cmp	r5, r0
   d498c:	d016      	beq.n	d49bc <_ZN11CSmartLight24updateBrightnessManuallyEi+0x44>
   d498e:	7920      	ldrb	r0, [r4, #4]
   d4990:	2101      	movs	r1, #1
        return;
    }
    brightness = (int)((val/100.0)*RGB_BRIGHTNESS_MAX);
    RGB.brightness(brightness);
}
   d4992:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    RGB.brightness(brightness);
   d4996:	f001 ba46 	b.w	d5e26 <_ZN8RGBClass10brightnessEhb>
    brightness = (int)((val/100.0)*RGB_BRIGHTNESS_MAX);
   d499a:	f001 ffab 	bl	d68f4 <__aeabi_i2d>
   d499e:	4b0b      	ldr	r3, [pc, #44]	; (d49cc <_ZN11CSmartLight24updateBrightnessManuallyEi+0x54>)
   d49a0:	2200      	movs	r2, #0
   d49a2:	f002 f93b 	bl	d6c1c <__aeabi_ddiv>
   d49a6:	a306      	add	r3, pc, #24	; (adr r3, d49c0 <_ZN11CSmartLight24updateBrightnessManuallyEi+0x48>)
   d49a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d49ac:	f002 f80c 	bl	d69c8 <__aeabi_dmul>
   d49b0:	f002 faa4 	bl	d6efc <__aeabi_d2iz>
    RGB.brightness(brightness);
   d49b4:	2101      	movs	r1, #1
    brightness = (int)((val/100.0)*RGB_BRIGHTNESS_MAX);
   d49b6:	6060      	str	r0, [r4, #4]
    RGB.brightness(brightness);
   d49b8:	b2c0      	uxtb	r0, r0
   d49ba:	e7ea      	b.n	d4992 <_ZN11CSmartLight24updateBrightnessManuallyEi+0x1a>
}
   d49bc:	bd38      	pop	{r3, r4, r5, pc}
   d49be:	bf00      	nop
   d49c0:	00000000 	.word	0x00000000
   d49c4:	406fe000 	.word	0x406fe000
   d49c8:	fffe7961 	.word	0xfffe7961
   d49cc:	40590000 	.word	0x40590000

000d49d0 <_ZN11CSmartLight13readSensorValEv>:

    RGB.brightness(brightness);
}


void CSmartLight::readSensorVal() {
   d49d0:	b510      	push	{r4, lr}
   d49d2:	4604      	mov	r4, r0
    sensorVal = analogRead(LIGHT_SENSOR);
   d49d4:	2013      	movs	r0, #19
   d49d6:	f001 fde1 	bl	d659c <analogRead>
   d49da:	60a0      	str	r0, [r4, #8]
}
   d49dc:	bd10      	pop	{r4, pc}
	...

000d49e0 <_ZN11CSmartLight29updataBrightnessAutomaticallyEv>:
void CSmartLight::updataBrightnessAutomatically() {
   d49e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d49e4:	4604      	mov	r4, r0
    readSensorVal();
   d49e6:	f7ff fff3 	bl	d49d0 <_ZN11CSmartLight13readSensorValEv>
    if (curSensorVal < sensorMin) curSensorVal = sensorMin;
   d49ea:	6925      	ldr	r5, [r4, #16]
   d49ec:	68a0      	ldr	r0, [r4, #8]
    if (curSensorVal > sensorMax) curSensorVal = sensorMax;
   d49ee:	f8d4 800c 	ldr.w	r8, [r4, #12]
   d49f2:	42a8      	cmp	r0, r5
   d49f4:	bfb8      	it	lt
   d49f6:	4628      	movlt	r0, r5
    double amountOfLight = (double)(curSensorVal-sensorMin) / (double)(sensorMax-sensorMin);
   d49f8:	4580      	cmp	r8, r0
   d49fa:	bfd4      	ite	le
   d49fc:	ebc5 0008 	rsble	r0, r5, r8
   d4a00:	ebc5 0000 	rsbgt	r0, r5, r0
   d4a04:	f001 ff76 	bl	d68f4 <__aeabi_i2d>
   d4a08:	4606      	mov	r6, r0
   d4a0a:	eba8 0005 	sub.w	r0, r8, r5
   d4a0e:	460f      	mov	r7, r1
   d4a10:	f001 ff70 	bl	d68f4 <__aeabi_i2d>
   d4a14:	4602      	mov	r2, r0
   d4a16:	460b      	mov	r3, r1
   d4a18:	4630      	mov	r0, r6
   d4a1a:	4639      	mov	r1, r7
   d4a1c:	f002 f8fe 	bl	d6c1c <__aeabi_ddiv>
   d4a20:	4602      	mov	r2, r0
   d4a22:	460b      	mov	r3, r1
    brightness = (int)((double)RGB_BRIGHTNESS_MAX*(1.0-amountOfLight));
   d4a24:	2000      	movs	r0, #0
   d4a26:	490a      	ldr	r1, [pc, #40]	; (d4a50 <_ZN11CSmartLight29updataBrightnessAutomaticallyEv+0x70>)
   d4a28:	f001 fe16 	bl	d6658 <__aeabi_dsub>
   d4a2c:	a306      	add	r3, pc, #24	; (adr r3, d4a48 <_ZN11CSmartLight29updataBrightnessAutomaticallyEv+0x68>)
   d4a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4a32:	f001 ffc9 	bl	d69c8 <__aeabi_dmul>
   d4a36:	f002 fa61 	bl	d6efc <__aeabi_d2iz>
    RGB.brightness(brightness);
   d4a3a:	2101      	movs	r1, #1
    brightness = (int)((double)RGB_BRIGHTNESS_MAX*(1.0-amountOfLight));
   d4a3c:	6060      	str	r0, [r4, #4]
}
   d4a3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    RGB.brightness(brightness);
   d4a42:	b2c0      	uxtb	r0, r0
   d4a44:	f001 b9ef 	b.w	d5e26 <_ZN8RGBClass10brightnessEhb>
   d4a48:	00000000 	.word	0x00000000
   d4a4c:	406fe000 	.word	0x406fe000
   d4a50:	3ff00000 	.word	0x3ff00000
   d4a54:	00000000 	.word	0x00000000

000d4a58 <_ZN11CSmartLight15createStatusStrEv>:
int CSmartLight::getSensorVal() {
    return sensorVal;
}


void CSmartLight::createStatusStr() {
   d4a58:	b570      	push	{r4, r5, r6, lr}
   d4a5a:	b088      	sub	sp, #32
    statusStr = String::format("{\"L0\":%d,\"L1\":%d,\"b\":%d,\"s\":%d,\"m\":%d,\"M\":%d}",
   d4a5c:	68c3      	ldr	r3, [r0, #12]
   d4a5e:	7846      	ldrb	r6, [r0, #1]
   d4a60:	7805      	ldrb	r5, [r0, #0]
   d4a62:	9303      	str	r3, [sp, #12]
   d4a64:	6903      	ldr	r3, [r0, #16]
   d4a66:	9302      	str	r3, [sp, #8]
   d4a68:	6883      	ldr	r3, [r0, #8]
   d4a6a:	9301      	str	r3, [sp, #4]
void CSmartLight::createStatusStr() {
   d4a6c:	4604      	mov	r4, r0
        state_L0, state_L1, (int)((double)brightness/RGB_BRIGHTNESS_MAX*100.0), sensorVal, sensorMin, sensorMax);
   d4a6e:	6840      	ldr	r0, [r0, #4]
   d4a70:	f001 ff40 	bl	d68f4 <__aeabi_i2d>
   d4a74:	a310      	add	r3, pc, #64	; (adr r3, d4ab8 <_ZN11CSmartLight15createStatusStrEv+0x60>)
   d4a76:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4a7a:	f002 f8cf 	bl	d6c1c <__aeabi_ddiv>
   d4a7e:	4b0c      	ldr	r3, [pc, #48]	; (d4ab0 <_ZN11CSmartLight15createStatusStrEv+0x58>)
   d4a80:	2200      	movs	r2, #0
   d4a82:	f001 ffa1 	bl	d69c8 <__aeabi_dmul>
    statusStr = String::format("{\"L0\":%d,\"L1\":%d,\"b\":%d,\"s\":%d,\"m\":%d,\"M\":%d}",
   d4a86:	f002 fa39 	bl	d6efc <__aeabi_d2iz>
   d4a8a:	4633      	mov	r3, r6
   d4a8c:	462a      	mov	r2, r5
   d4a8e:	9000      	str	r0, [sp, #0]
   d4a90:	4908      	ldr	r1, [pc, #32]	; (d4ab4 <_ZN11CSmartLight15createStatusStrEv+0x5c>)
   d4a92:	a804      	add	r0, sp, #16
   d4a94:	f001 fac4 	bl	d6020 <_ZN6String6formatEPKcz>
        state_L0, state_L1, (int)((double)brightness/RGB_BRIGHTNESS_MAX*100.0), sensorVal, sensorMin, sensorMax);
   d4a98:	a904      	add	r1, sp, #16
   d4a9a:	f104 0020 	add.w	r0, r4, #32
   d4a9e:	f001 fa79 	bl	d5f94 <_ZN6StringaSEOS_>
   d4aa2:	a804      	add	r0, sp, #16
   d4aa4:	f001 f9e0 	bl	d5e68 <_ZN6StringD1Ev>
}
   d4aa8:	b008      	add	sp, #32
   d4aaa:	bd70      	pop	{r4, r5, r6, pc}
   d4aac:	f3af 8000 	nop.w
   d4ab0:	40590000 	.word	0x40590000
   d4ab4:	000d728e 	.word	0x000d728e
   d4ab8:	00000000 	.word	0x00000000
   d4abc:	406fe000 	.word	0x406fe000

000d4ac0 <_ZN11CSmartLight7executeEv>:
void CSmartLight::execute() {
   d4ac0:	b538      	push	{r3, r4, r5, lr}
    switch (state_L0) {
   d4ac2:	7805      	ldrb	r5, [r0, #0]
void CSmartLight::execute() {
   d4ac4:	4604      	mov	r4, r0
    switch (state_L0) {
   d4ac6:	b155      	cbz	r5, d4ade <_ZN11CSmartLight7executeEv+0x1e>
   d4ac8:	2d01      	cmp	r5, #1
   d4aca:	d013      	beq.n	d4af4 <_ZN11CSmartLight7executeEv+0x34>
    cmd.On = INVALID_CMD;
   d4acc:	4b14      	ldr	r3, [pc, #80]	; (d4b20 <_ZN11CSmartLight7executeEv+0x60>)
    cmd.Brightness = INVALID_CMD;
   d4ace:	61e3      	str	r3, [r4, #28]
    cmd.Auto = INVALID_CMD;
   d4ad0:	e9c4 3305 	strd	r3, r3, [r4, #20]
    createStatusStr();
   d4ad4:	4620      	mov	r0, r4
}
   d4ad6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    createStatusStr();
   d4ada:	f7ff bfbd 	b.w	d4a58 <_ZN11CSmartLight15createStatusStrEv>
            turnOffLight();
   d4ade:	f7ff ff3f 	bl	d4960 <_ZN11CSmartLight12turnOffLightEv>
            if (cmd.On != INVALID_CMD) {
   d4ae2:	6963      	ldr	r3, [r4, #20]
   d4ae4:	4a0e      	ldr	r2, [pc, #56]	; (d4b20 <_ZN11CSmartLight7executeEv+0x60>)
   d4ae6:	4293      	cmp	r3, r2
   d4ae8:	d0f0      	beq.n	d4acc <_ZN11CSmartLight7executeEv+0xc>
                if (cmd.On) {
   d4aea:	2b00      	cmp	r3, #0
   d4aec:	d0ee      	beq.n	d4acc <_ZN11CSmartLight7executeEv+0xc>
                    state_L0 = CSmartLight::S_ON;
   d4aee:	2301      	movs	r3, #1
   d4af0:	8023      	strh	r3, [r4, #0]
   d4af2:	e7eb      	b.n	d4acc <_ZN11CSmartLight7executeEv+0xc>
            switch (state_L1) {
   d4af4:	7843      	ldrb	r3, [r0, #1]
   d4af6:	b143      	cbz	r3, d4b0a <_ZN11CSmartLight7executeEv+0x4a>
   d4af8:	2b01      	cmp	r3, #1
   d4afa:	d1e7      	bne.n	d4acc <_ZN11CSmartLight7executeEv+0xc>
                    updataBrightnessAutomatically();
   d4afc:	f7ff ff70 	bl	d49e0 <_ZN11CSmartLight29updataBrightnessAutomaticallyEv>
                        if (!cmd.Auto) state_L1 = CSmartLight::S_MANUAL;
   d4b00:	69a3      	ldr	r3, [r4, #24]
   d4b02:	2b00      	cmp	r3, #0
   d4b04:	d1e2      	bne.n	d4acc <_ZN11CSmartLight7executeEv+0xc>
   d4b06:	7063      	strb	r3, [r4, #1]
   d4b08:	e7e0      	b.n	d4acc <_ZN11CSmartLight7executeEv+0xc>
                    updateBrightnessManually(cmd.Brightness);
   d4b0a:	69c1      	ldr	r1, [r0, #28]
   d4b0c:	f7ff ff34 	bl	d4978 <_ZN11CSmartLight24updateBrightnessManuallyEi>
                    if (cmd.Auto != INVALID_CMD) {
   d4b10:	69a3      	ldr	r3, [r4, #24]
   d4b12:	4a03      	ldr	r2, [pc, #12]	; (d4b20 <_ZN11CSmartLight7executeEv+0x60>)
   d4b14:	4293      	cmp	r3, r2
   d4b16:	d0d9      	beq.n	d4acc <_ZN11CSmartLight7executeEv+0xc>
                        if (cmd.Auto) state_L1 = CSmartLight::S_AUTO;
   d4b18:	2b00      	cmp	r3, #0
   d4b1a:	d0d7      	beq.n	d4acc <_ZN11CSmartLight7executeEv+0xc>
   d4b1c:	7065      	strb	r5, [r4, #1]
   d4b1e:	e7d5      	b.n	d4acc <_ZN11CSmartLight7executeEv+0xc>
   d4b20:	fffe7961 	.word	0xfffe7961

000d4b24 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d4b24:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   d4b26:	68cd      	ldr	r5, [r1, #12]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4b28:	f851 3b04 	ldr.w	r3, [r1], #4
   d4b2c:	9300      	str	r3, [sp, #0]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d4b2e:	4604      	mov	r4, r0
   d4b30:	a801      	add	r0, sp, #4
   d4b32:	f7ff fb07 	bl	d4144 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d4b36:	466a      	mov	r2, sp
   d4b38:	4629      	mov	r1, r5
   d4b3a:	4620      	mov	r0, r4
   d4b3c:	f000 ff58 	bl	d59f0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4b40:	a801      	add	r0, sp, #4
   d4b42:	f7ff fae9 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4b46:	4620      	mov	r0, r4
   d4b48:	b003      	add	sp, #12
   d4b4a:	bd30      	pop	{r4, r5, pc}

000d4b4c <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d4b4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   d4b4e:	690d      	ldr	r5, [r1, #16]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4b50:	f851 3b04 	ldr.w	r3, [r1], #4
   d4b54:	9300      	str	r3, [sp, #0]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d4b56:	4604      	mov	r4, r0
   d4b58:	a801      	add	r0, sp, #4
   d4b5a:	f7ff faf3 	bl	d4144 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d4b5e:	466a      	mov	r2, sp
   d4b60:	4629      	mov	r1, r5
   d4b62:	4620      	mov	r0, r4
   d4b64:	f000 fdbf 	bl	d56e6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4b68:	a801      	add	r0, sp, #4
   d4b6a:	f7ff fad5 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4b6e:	4620      	mov	r0, r4
   d4b70:	b003      	add	sp, #12
   d4b72:	bd30      	pop	{r4, r5, pc}

000d4b74 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE>:
void CSmartLight::cmdProcessing(JSONValue cmdJson) {
   d4b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4b78:	b08a      	sub	sp, #40	; 0x28
        JSONObjectIterator(value.t_, value.d_) {
   d4b7a:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4b7c:	f851 3b04 	ldr.w	r3, [r1], #4
   d4b80:	9300      	str	r3, [sp, #0]
   d4b82:	4604      	mov	r4, r0
   d4b84:	a801      	add	r0, sp, #4
   d4b86:	f7ff fadd 	bl	d4144 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d4b8a:	466a      	mov	r2, sp
   d4b8c:	4629      	mov	r1, r5
   d4b8e:	a804      	add	r0, sp, #16
   d4b90:	f000 ff52 	bl	d5a38 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4b94:	a801      	add	r0, sp, #4
   d4b96:	f7ff fabf 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return strcmp(s_, str) == 0;
   d4b9a:	4e3c      	ldr	r6, [pc, #240]	; (d4c8c <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x118>)
   d4b9c:	4f3c      	ldr	r7, [pc, #240]	; (d4c90 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x11c>)
   d4b9e:	f8df 80fc 	ldr.w	r8, [pc, #252]	; d4c9c <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x128>
    while (iter.next()) {
   d4ba2:	a804      	add	r0, sp, #16
   d4ba4:	f000 ff60 	bl	d5a68 <_ZN5spark18JSONObjectIterator4nextEv>
   d4ba8:	2800      	cmp	r0, #0
   d4baa:	d069      	beq.n	d4c80 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x10c>
        if (iter.name() == "on") {
   d4bac:	a904      	add	r1, sp, #16
   d4bae:	4668      	mov	r0, sp
   d4bb0:	f7ff ffb8 	bl	d4b24 <_ZNK5spark18JSONObjectIterator4nameEv>
   d4bb4:	4631      	mov	r1, r6
   d4bb6:	9802      	ldr	r0, [sp, #8]
   d4bb8:	f002 fa22 	bl	d7000 <strcmp>
   d4bbc:	4605      	mov	r5, r0
   d4bbe:	a801      	add	r0, sp, #4
   d4bc0:	f7ff faaa 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            cmd.On = (int)iter.value().toBool();
   d4bc4:	a904      	add	r1, sp, #16
   d4bc6:	4668      	mov	r0, sp
        if (iter.name() == "on") {
   d4bc8:	b94d      	cbnz	r5, d4bde <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x6a>
            cmd.On = (int)iter.value().toBool();
   d4bca:	f7ff ffbf 	bl	d4b4c <_ZNK5spark18JSONObjectIterator5valueEv>
   d4bce:	4668      	mov	r0, sp
   d4bd0:	f000 fdc0 	bl	d5754 <_ZNK5spark9JSONValue6toBoolEv>
   d4bd4:	6160      	str	r0, [r4, #20]
   d4bd6:	a801      	add	r0, sp, #4
   d4bd8:	f7ff fa9e 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4bdc:	e7e1      	b.n	d4ba2 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x2e>
        else if (iter.name() == "auto") {
   d4bde:	f7ff ffa1 	bl	d4b24 <_ZNK5spark18JSONObjectIterator4nameEv>
   d4be2:	4639      	mov	r1, r7
   d4be4:	9802      	ldr	r0, [sp, #8]
   d4be6:	f002 fa0b 	bl	d7000 <strcmp>
   d4bea:	4605      	mov	r5, r0
   d4bec:	a801      	add	r0, sp, #4
   d4bee:	f7ff fa93 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            cmd.Auto = (int)iter.value().toBool();
   d4bf2:	a904      	add	r1, sp, #16
   d4bf4:	4668      	mov	r0, sp
        else if (iter.name() == "auto") {
   d4bf6:	b935      	cbnz	r5, d4c06 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x92>
            cmd.Auto = (int)iter.value().toBool();
   d4bf8:	f7ff ffa8 	bl	d4b4c <_ZNK5spark18JSONObjectIterator5valueEv>
   d4bfc:	4668      	mov	r0, sp
   d4bfe:	f000 fda9 	bl	d5754 <_ZNK5spark9JSONValue6toBoolEv>
   d4c02:	61a0      	str	r0, [r4, #24]
   d4c04:	e7e7      	b.n	d4bd6 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x62>
        else if (iter.name() == "brightness") {
   d4c06:	f7ff ff8d 	bl	d4b24 <_ZNK5spark18JSONObjectIterator4nameEv>
   d4c0a:	4641      	mov	r1, r8
   d4c0c:	9802      	ldr	r0, [sp, #8]
   d4c0e:	f002 f9f7 	bl	d7000 <strcmp>
   d4c12:	4605      	mov	r5, r0
   d4c14:	a801      	add	r0, sp, #4
   d4c16:	f7ff fa7f 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            cmd.Brightness = iter.value().toInt();
   d4c1a:	a904      	add	r1, sp, #16
   d4c1c:	4668      	mov	r0, sp
        else if (iter.name() == "brightness") {
   d4c1e:	b935      	cbnz	r5, d4c2e <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0xba>
            cmd.Brightness = iter.value().toInt();
   d4c20:	f7ff ff94 	bl	d4b4c <_ZNK5spark18JSONObjectIterator5valueEv>
   d4c24:	4668      	mov	r0, sp
   d4c26:	f000 fdd3 	bl	d57d0 <_ZNK5spark9JSONValue5toIntEv>
   d4c2a:	61e0      	str	r0, [r4, #28]
   d4c2c:	e7d3      	b.n	d4bd6 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x62>
        else if (iter.name() == "min") {
   d4c2e:	f7ff ff79 	bl	d4b24 <_ZNK5spark18JSONObjectIterator4nameEv>
   d4c32:	4918      	ldr	r1, [pc, #96]	; (d4c94 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x120>)
   d4c34:	9802      	ldr	r0, [sp, #8]
   d4c36:	f002 f9e3 	bl	d7000 <strcmp>
   d4c3a:	4605      	mov	r5, r0
   d4c3c:	a801      	add	r0, sp, #4
   d4c3e:	f7ff fa6b 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            sensorMin = iter.value().toInt();
   d4c42:	a904      	add	r1, sp, #16
   d4c44:	4668      	mov	r0, sp
        else if (iter.name() == "min") {
   d4c46:	b935      	cbnz	r5, d4c56 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0xe2>
            sensorMin = iter.value().toInt();
   d4c48:	f7ff ff80 	bl	d4b4c <_ZNK5spark18JSONObjectIterator5valueEv>
   d4c4c:	4668      	mov	r0, sp
   d4c4e:	f000 fdbf 	bl	d57d0 <_ZNK5spark9JSONValue5toIntEv>
   d4c52:	6120      	str	r0, [r4, #16]
   d4c54:	e7bf      	b.n	d4bd6 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x62>
        else if ( iter.name() == "max") {
   d4c56:	f7ff ff65 	bl	d4b24 <_ZNK5spark18JSONObjectIterator4nameEv>
   d4c5a:	490f      	ldr	r1, [pc, #60]	; (d4c98 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x124>)
   d4c5c:	9802      	ldr	r0, [sp, #8]
   d4c5e:	f002 f9cf 	bl	d7000 <strcmp>
   d4c62:	4605      	mov	r5, r0
   d4c64:	a801      	add	r0, sp, #4
   d4c66:	f7ff fa57 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4c6a:	2d00      	cmp	r5, #0
   d4c6c:	d199      	bne.n	d4ba2 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x2e>
            sensorMax = iter.value().toInt();
   d4c6e:	a904      	add	r1, sp, #16
   d4c70:	4668      	mov	r0, sp
   d4c72:	f7ff ff6b 	bl	d4b4c <_ZNK5spark18JSONObjectIterator5valueEv>
   d4c76:	4668      	mov	r0, sp
   d4c78:	f000 fdaa 	bl	d57d0 <_ZNK5spark9JSONValue5toIntEv>
   d4c7c:	60e0      	str	r0, [r4, #12]
   d4c7e:	e7aa      	b.n	d4bd6 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x62>
   d4c80:	a805      	add	r0, sp, #20
   d4c82:	f7ff fa49 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4c86:	b00a      	add	sp, #40	; 0x28
   d4c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4c8c:	000d72bc 	.word	0x000d72bc
   d4c90:	000d72bf 	.word	0x000d72bf
   d4c94:	000d72cf 	.word	0x000d72cf
   d4c98:	000d72d3 	.word	0x000d72d3
   d4c9c:	000d72c4 	.word	0x000d72c4

000d4ca0 <_ZN5CDoorC1Ev>:
#include "door.h"

CDoor::CDoor() {
   d4ca0:	b538      	push	{r3, r4, r5, lr}
   d4ca2:	f100 0524 	add.w	r5, r0, #36	; 0x24
   d4ca6:	4604      	mov	r4, r0
   d4ca8:	490b      	ldr	r1, [pc, #44]	; (d4cd8 <_ZN5CDoorC1Ev+0x38>)
   d4caa:	4628      	mov	r0, r5
   d4cac:	f001 f927 	bl	d5efe <_ZN6StringC1EPKc>
  state_D0 = CDoor::S_CLOSED;
   d4cb0:	2301      	movs	r3, #1
   d4cb2:	7023      	strb	r3, [r4, #0]
  doorProximity = RGB_BRIGHTNESS_DEAULT;
   d4cb4:	2380      	movs	r3, #128	; 0x80
   d4cb6:	6063      	str	r3, [r4, #4]
  sensorMax = LIGHT_SENSOR_MAX;
  sensorMin = LIGHT_SENSOR_MIN;
   d4cb8:	f640 11c4 	movw	r1, #2500	; 0x9c4
   d4cbc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d4cc0:	e9c4 1303 	strd	r1, r3, [r4, #12]

  statusStr = "{}";
   d4cc4:	4628      	mov	r0, r5
   d4cc6:	4905      	ldr	r1, [pc, #20]	; (d4cdc <_ZN5CDoorC1Ev+0x3c>)
   d4cc8:	f001 f96c 	bl	d5fa4 <_ZN6StringaSEPKc>
    state_D0, doorProximity
  );
}

void CDoor::resetCmd() {
  cmd.DoorProximity = INVALID_CMD;
   d4ccc:	4b04      	ldr	r3, [pc, #16]	; (d4ce0 <_ZN5CDoorC1Ev+0x40>)
}
   d4cce:	4620      	mov	r0, r4
  cmd.Status = INVALID_CMD;
   d4cd0:	e9c4 3307 	strd	r3, r3, [r4, #28]
}
   d4cd4:	bd38      	pop	{r3, r4, r5, pc}
   d4cd6:	bf00      	nop
   d4cd8:	000d7397 	.word	0x000d7397
   d4cdc:	000d728b 	.word	0x000d728b
   d4ce0:	fffe7961 	.word	0xfffe7961

000d4ce4 <_ZN5CDoor13readSensorValEv>:
void CDoor::readSensorVal() {
   d4ce4:	b510      	push	{r4, lr}
   d4ce6:	4604      	mov	r4, r0
  sensorVal = analogRead(DOOR_SENSOR);
   d4ce8:	2012      	movs	r0, #18
   d4cea:	f001 fc57 	bl	d659c <analogRead>
   d4cee:	60a0      	str	r0, [r4, #8]
}
   d4cf0:	bd10      	pop	{r4, pc}
	...

000d4cf4 <_ZN5CDoor15createStatusStrEv>:
void CDoor::createStatusStr() {
   d4cf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4cf6:	4604      	mov	r4, r0
  statusStr = String::format("{\"Close\":%d, \"doorProximity\":%f}",
   d4cf8:	6843      	ldr	r3, [r0, #4]
   d4cfa:	7802      	ldrb	r2, [r0, #0]
   d4cfc:	4906      	ldr	r1, [pc, #24]	; (d4d18 <_ZN5CDoor15createStatusStrEv+0x24>)
   d4cfe:	4668      	mov	r0, sp
   d4d00:	f001 f98e 	bl	d6020 <_ZN6String6formatEPKcz>
  );
   d4d04:	4669      	mov	r1, sp
   d4d06:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d4d0a:	f001 f943 	bl	d5f94 <_ZN6StringaSEOS_>
   d4d0e:	4668      	mov	r0, sp
   d4d10:	f001 f8aa 	bl	d5e68 <_ZN6StringD1Ev>
}
   d4d14:	b004      	add	sp, #16
   d4d16:	bd10      	pop	{r4, pc}
   d4d18:	000d72d7 	.word	0x000d72d7

000d4d1c <_ZN5CDoor7executeEv>:
void CDoor::execute() {
   d4d1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  switch (state_D0) {
   d4d20:	7806      	ldrb	r6, [r0, #0]
void CDoor::execute() {
   d4d22:	4604      	mov	r4, r0
  switch (state_D0) {
   d4d24:	2e00      	cmp	r6, #0
   d4d26:	d03a      	beq.n	d4d9e <_ZN5CDoor7executeEv+0x82>
   d4d28:	2e01      	cmp	r6, #1
   d4d2a:	d130      	bne.n	d4d8e <_ZN5CDoor7executeEv+0x72>
      readSensorVal();
   d4d2c:	f7ff ffda 	bl	d4ce4 <_ZN5CDoor13readSensorValEv>
      if (curSensorVal < sensorMin) curSensorVal = sensorMin;
   d4d30:	6925      	ldr	r5, [r4, #16]
   d4d32:	68a0      	ldr	r0, [r4, #8]
      if (curSensorVal > sensorMax) curSensorVal = sensorMax;
   d4d34:	68e7      	ldr	r7, [r4, #12]
   d4d36:	42a8      	cmp	r0, r5
   d4d38:	bfb8      	it	lt
   d4d3a:	4628      	movlt	r0, r5
      double amountOfProximity = (double)(curSensorVal-sensorMin) / (double)(sensorMax-sensorMin);
   d4d3c:	4287      	cmp	r7, r0
   d4d3e:	bfd4      	ite	le
   d4d40:	ebc5 0007 	rsble	r0, r5, r7
   d4d44:	ebc5 0000 	rsbgt	r0, r5, r0
   d4d48:	f001 fdd4 	bl	d68f4 <__aeabi_i2d>
   d4d4c:	4680      	mov	r8, r0
   d4d4e:	1b78      	subs	r0, r7, r5
   d4d50:	4689      	mov	r9, r1
   d4d52:	f001 fdcf 	bl	d68f4 <__aeabi_i2d>
   d4d56:	4602      	mov	r2, r0
   d4d58:	460b      	mov	r3, r1
   d4d5a:	4640      	mov	r0, r8
   d4d5c:	4649      	mov	r1, r9
   d4d5e:	f001 ff5d 	bl	d6c1c <__aeabi_ddiv>
      if (amountOfProximity < 0.5) {
   d4d62:	4b31      	ldr	r3, [pc, #196]	; (d4e28 <_ZN5CDoor7executeEv+0x10c>)
   d4d64:	2200      	movs	r2, #0
   d4d66:	f002 f8a1 	bl	d6eac <__aeabi_dcmplt>
        digitalWrite(LED2, HIGH);
   d4d6a:	4631      	mov	r1, r6
      if (amountOfProximity < 0.5) {
   d4d6c:	4605      	mov	r5, r0
   d4d6e:	b140      	cbz	r0, d4d82 <_ZN5CDoor7executeEv+0x66>
        digitalWrite(LED2, HIGH);
   d4d70:	2007      	movs	r0, #7
   d4d72:	f001 fbfa 	bl	d656a <digitalWrite>
        oldTime = Time.now();
   d4d76:	f001 f9b7 	bl	d60e8 <_ZN9TimeClass3nowEv>
        state_D0 = CDoor::S_OPEN;
   d4d7a:	2300      	movs	r3, #0
        oldTime = Time.now();
   d4d7c:	6160      	str	r0, [r4, #20]
        state_D0 = CDoor::S_CLOSED;
   d4d7e:	7023      	strb	r3, [r4, #0]
   d4d80:	e005      	b.n	d4d8e <_ZN5CDoor7executeEv+0x72>
        RGB.brightness(0);
   d4d82:	f001 f850 	bl	d5e26 <_ZN8RGBClass10brightnessEhb>
        digitalWrite(LED2, LOW);
   d4d86:	4629      	mov	r1, r5
        digitalWrite(LED2, HIGH);
   d4d88:	2007      	movs	r0, #7
   d4d8a:	f001 fbee 	bl	d656a <digitalWrite>
  cmd.DoorProximity = INVALID_CMD;
   d4d8e:	4b27      	ldr	r3, [pc, #156]	; (d4e2c <_ZN5CDoor7executeEv+0x110>)
  createStatusStr();
   d4d90:	4620      	mov	r0, r4
  cmd.Status = INVALID_CMD;
   d4d92:	e9c4 3307 	strd	r3, r3, [r4, #28]
}
   d4d96:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  createStatusStr();
   d4d9a:	f7ff bfab 	b.w	d4cf4 <_ZN5CDoor15createStatusStrEv>
      readSensorVal();
   d4d9e:	f7ff ffa1 	bl	d4ce4 <_ZN5CDoor13readSensorValEv>
      if (curSensorVal < sensorMin) curSensorVal = sensorMin;
   d4da2:	6925      	ldr	r5, [r4, #16]
   d4da4:	68a0      	ldr	r0, [r4, #8]
      if (curSensorVal > sensorMax) curSensorVal = sensorMax;
   d4da6:	f8d4 800c 	ldr.w	r8, [r4, #12]
   d4daa:	42a8      	cmp	r0, r5
   d4dac:	bfb8      	it	lt
   d4dae:	4628      	movlt	r0, r5
      double amountOfProximity = (double)(curSensorVal-sensorMin) / (double)(sensorMax-sensorMin);
   d4db0:	4580      	cmp	r8, r0
   d4db2:	bfd4      	ite	le
   d4db4:	ebc5 0008 	rsble	r0, r5, r8
   d4db8:	ebc5 0000 	rsbgt	r0, r5, r0
   d4dbc:	f001 fd9a 	bl	d68f4 <__aeabi_i2d>
   d4dc0:	4606      	mov	r6, r0
   d4dc2:	eba8 0005 	sub.w	r0, r8, r5
   d4dc6:	460f      	mov	r7, r1
   d4dc8:	f001 fd94 	bl	d68f4 <__aeabi_i2d>
   d4dcc:	460b      	mov	r3, r1
   d4dce:	4602      	mov	r2, r0
   d4dd0:	4639      	mov	r1, r7
   d4dd2:	4630      	mov	r0, r6
   d4dd4:	f001 ff22 	bl	d6c1c <__aeabi_ddiv>
   d4dd8:	460f      	mov	r7, r1
   d4dda:	4606      	mov	r6, r0
      doorProximity = amountOfProximity;
   d4ddc:	f002 f88e 	bl	d6efc <__aeabi_d2iz>
   d4de0:	6060      	str	r0, [r4, #4]
      newTime = Time.now();
   d4de2:	f001 f981 	bl	d60e8 <_ZN9TimeClass3nowEv>
      if (newTime - oldTime > 10) {
   d4de6:	6963      	ldr	r3, [r4, #20]
      newTime = Time.now();
   d4de8:	61a0      	str	r0, [r4, #24]
      if (newTime - oldTime > 10) {
   d4dea:	1ac3      	subs	r3, r0, r3
   d4dec:	2b0a      	cmp	r3, #10
   d4dee:	dd09      	ble.n	d4e04 <_ZN5CDoor7executeEv+0xe8>
        Serial.printf("{\"alert\": %d}", true);
   d4df0:	f001 fa6c 	bl	d62cc <_Z16_fetch_usbserialv>
   d4df4:	490e      	ldr	r1, [pc, #56]	; (d4e30 <_ZN5CDoor7executeEv+0x114>)
   d4df6:	2201      	movs	r2, #1
   d4df8:	f7ff f95d 	bl	d40b6 <_ZN5Print6printfEPKcz>
        Serial.println();
   d4dfc:	f001 fa66 	bl	d62cc <_Z16_fetch_usbserialv>
   d4e00:	f000 ff93 	bl	d5d2a <_ZN5Print7printlnEv>
      if (amountOfProximity < 0.5) {
   d4e04:	4639      	mov	r1, r7
   d4e06:	4b08      	ldr	r3, [pc, #32]	; (d4e28 <_ZN5CDoor7executeEv+0x10c>)
   d4e08:	2200      	movs	r2, #0
   d4e0a:	4630      	mov	r0, r6
   d4e0c:	f002 f84e 	bl	d6eac <__aeabi_dcmplt>
   d4e10:	4601      	mov	r1, r0
   d4e12:	b108      	cbz	r0, d4e18 <_ZN5CDoor7executeEv+0xfc>
        digitalWrite(LED2, HIGH);
   d4e14:	2101      	movs	r1, #1
   d4e16:	e7b7      	b.n	d4d88 <_ZN5CDoor7executeEv+0x6c>
        digitalWrite(LED2, LOW);
   d4e18:	2007      	movs	r0, #7
   d4e1a:	f001 fba6 	bl	d656a <digitalWrite>
        oldTime = Time.now();
   d4e1e:	f001 f963 	bl	d60e8 <_ZN9TimeClass3nowEv>
        state_D0 = CDoor::S_CLOSED;
   d4e22:	2301      	movs	r3, #1
        oldTime = Time.now();
   d4e24:	6160      	str	r0, [r4, #20]
        state_D0 = CDoor::S_CLOSED;
   d4e26:	e7aa      	b.n	d4d7e <_ZN5CDoor7executeEv+0x62>
   d4e28:	3fe00000 	.word	0x3fe00000
   d4e2c:	fffe7961 	.word	0xfffe7961
   d4e30:	000d72f8 	.word	0x000d72f8

000d4e34 <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE>:
void CDoor::cmdProcessing(JSONValue cmdJson) {
   d4e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4e38:	b08a      	sub	sp, #40	; 0x28
        JSONObjectIterator(value.t_, value.d_) {
   d4e3a:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4e3c:	f851 3b04 	ldr.w	r3, [r1], #4
   d4e40:	9300      	str	r3, [sp, #0]
   d4e42:	4604      	mov	r4, r0
   d4e44:	a801      	add	r0, sp, #4
   d4e46:	f7ff f97d 	bl	d4144 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d4e4a:	466a      	mov	r2, sp
   d4e4c:	4629      	mov	r1, r5
   d4e4e:	a804      	add	r0, sp, #16
   d4e50:	f000 fdf2 	bl	d5a38 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4e54:	a801      	add	r0, sp, #4
   d4e56:	f7ff f95f 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return strcmp(s_, str) == 0;
   d4e5a:	4e32      	ldr	r6, [pc, #200]	; (d4f24 <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0xf0>)
   d4e5c:	4f32      	ldr	r7, [pc, #200]	; (d4f28 <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0xf4>)
   d4e5e:	f8df 80d0 	ldr.w	r8, [pc, #208]	; d4f30 <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0xfc>
  while (iter.next()) {
   d4e62:	a804      	add	r0, sp, #16
   d4e64:	f000 fe00 	bl	d5a68 <_ZN5spark18JSONObjectIterator4nextEv>
   d4e68:	2800      	cmp	r0, #0
   d4e6a:	d055      	beq.n	d4f18 <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0xe4>
    if (iter.name() == "min") {
   d4e6c:	a904      	add	r1, sp, #16
   d4e6e:	4668      	mov	r0, sp
   d4e70:	f7ff fe58 	bl	d4b24 <_ZNK5spark18JSONObjectIterator4nameEv>
   d4e74:	4631      	mov	r1, r6
   d4e76:	9802      	ldr	r0, [sp, #8]
   d4e78:	f002 f8c2 	bl	d7000 <strcmp>
   d4e7c:	4605      	mov	r5, r0
   d4e7e:	a801      	add	r0, sp, #4
   d4e80:	f7ff f94a 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      sensorMin = iter.value().toInt();
   d4e84:	a904      	add	r1, sp, #16
   d4e86:	4668      	mov	r0, sp
    if (iter.name() == "min") {
   d4e88:	b94d      	cbnz	r5, d4e9e <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0x6a>
      sensorMin = iter.value().toInt();
   d4e8a:	f7ff fe5f 	bl	d4b4c <_ZNK5spark18JSONObjectIterator5valueEv>
   d4e8e:	4668      	mov	r0, sp
   d4e90:	f000 fc9e 	bl	d57d0 <_ZNK5spark9JSONValue5toIntEv>
   d4e94:	6120      	str	r0, [r4, #16]
   d4e96:	a801      	add	r0, sp, #4
   d4e98:	f7ff f93e 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4e9c:	e7e1      	b.n	d4e62 <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0x2e>
    } else if (iter.name() == "max") {
   d4e9e:	f7ff fe41 	bl	d4b24 <_ZNK5spark18JSONObjectIterator4nameEv>
   d4ea2:	4639      	mov	r1, r7
   d4ea4:	9802      	ldr	r0, [sp, #8]
   d4ea6:	f002 f8ab 	bl	d7000 <strcmp>
   d4eaa:	4605      	mov	r5, r0
   d4eac:	a801      	add	r0, sp, #4
   d4eae:	f7ff f933 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      sensorMax = iter.value().toInt();
   d4eb2:	a904      	add	r1, sp, #16
   d4eb4:	4668      	mov	r0, sp
    } else if (iter.name() == "max") {
   d4eb6:	b935      	cbnz	r5, d4ec6 <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0x92>
      sensorMax = iter.value().toInt();
   d4eb8:	f7ff fe48 	bl	d4b4c <_ZNK5spark18JSONObjectIterator5valueEv>
   d4ebc:	4668      	mov	r0, sp
   d4ebe:	f000 fc87 	bl	d57d0 <_ZNK5spark9JSONValue5toIntEv>
   d4ec2:	60e0      	str	r0, [r4, #12]
   d4ec4:	e7e7      	b.n	d4e96 <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0x62>
    } else if (iter.name() == "doorProximity") {
   d4ec6:	f7ff fe2d 	bl	d4b24 <_ZNK5spark18JSONObjectIterator4nameEv>
   d4eca:	4641      	mov	r1, r8
   d4ecc:	9802      	ldr	r0, [sp, #8]
   d4ece:	f002 f897 	bl	d7000 <strcmp>
   d4ed2:	4605      	mov	r5, r0
   d4ed4:	a801      	add	r0, sp, #4
   d4ed6:	f7ff f91f 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      cmd.DoorProximity = iter.value().toInt();
   d4eda:	a904      	add	r1, sp, #16
   d4edc:	4668      	mov	r0, sp
    } else if (iter.name() == "doorProximity") {
   d4ede:	b935      	cbnz	r5, d4eee <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0xba>
      cmd.DoorProximity = iter.value().toInt();
   d4ee0:	f7ff fe34 	bl	d4b4c <_ZNK5spark18JSONObjectIterator5valueEv>
   d4ee4:	4668      	mov	r0, sp
   d4ee6:	f000 fc73 	bl	d57d0 <_ZNK5spark9JSONValue5toIntEv>
   d4eea:	6220      	str	r0, [r4, #32]
   d4eec:	e7d3      	b.n	d4e96 <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0x62>
    } else if (iter.name() == "status") {
   d4eee:	f7ff fe19 	bl	d4b24 <_ZNK5spark18JSONObjectIterator4nameEv>
   d4ef2:	490e      	ldr	r1, [pc, #56]	; (d4f2c <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0xf8>)
   d4ef4:	9802      	ldr	r0, [sp, #8]
   d4ef6:	f002 f883 	bl	d7000 <strcmp>
   d4efa:	4605      	mov	r5, r0
   d4efc:	a801      	add	r0, sp, #4
   d4efe:	f7ff f90b 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4f02:	2d00      	cmp	r5, #0
   d4f04:	d1ad      	bne.n	d4e62 <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0x2e>
      cmd.Status = (int)iter.value().toBool();
   d4f06:	a904      	add	r1, sp, #16
   d4f08:	4668      	mov	r0, sp
   d4f0a:	f7ff fe1f 	bl	d4b4c <_ZNK5spark18JSONObjectIterator5valueEv>
   d4f0e:	4668      	mov	r0, sp
   d4f10:	f000 fc20 	bl	d5754 <_ZNK5spark9JSONValue6toBoolEv>
   d4f14:	61e0      	str	r0, [r4, #28]
   d4f16:	e7be      	b.n	d4e96 <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0x62>
   d4f18:	a805      	add	r0, sp, #20
   d4f1a:	f7ff f8fd 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4f1e:	b00a      	add	sp, #40	; 0x28
   d4f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4f24:	000d72cf 	.word	0x000d72cf
   d4f28:	000d72d3 	.word	0x000d72d3
   d4f2c:	000d7314 	.word	0x000d7314
   d4f30:	000d7306 	.word	0x000d7306

000d4f34 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4f34:	b508      	push	{r3, lr}
   d4f36:	4b02      	ldr	r3, [pc, #8]	; (d4f40 <os_mutex_recursive_create+0xc>)
   d4f38:	681b      	ldr	r3, [r3, #0]
   d4f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4f3c:	9301      	str	r3, [sp, #4]
   d4f3e:	bd08      	pop	{r3, pc}
   d4f40:	00030248 	.word	0x00030248

000d4f44 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4f44:	b508      	push	{r3, lr}
   d4f46:	4b02      	ldr	r3, [pc, #8]	; (d4f50 <HAL_RNG_GetRandomNumber+0xc>)
   d4f48:	681b      	ldr	r3, [r3, #0]
   d4f4a:	685b      	ldr	r3, [r3, #4]
   d4f4c:	9301      	str	r3, [sp, #4]
   d4f4e:	bd08      	pop	{r3, pc}
   d4f50:	00030218 	.word	0x00030218

000d4f54 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4f54:	b508      	push	{r3, lr}
   d4f56:	4b02      	ldr	r3, [pc, #8]	; (d4f60 <HAL_Delay_Microseconds+0xc>)
   d4f58:	681b      	ldr	r3, [r3, #0]
   d4f5a:	68db      	ldr	r3, [r3, #12]
   d4f5c:	9301      	str	r3, [sp, #4]
   d4f5e:	bd08      	pop	{r3, pc}
   d4f60:	00030218 	.word	0x00030218

000d4f64 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4f64:	b508      	push	{r3, lr}
   d4f66:	4b02      	ldr	r3, [pc, #8]	; (d4f70 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4f68:	681b      	ldr	r3, [r3, #0]
   d4f6a:	695b      	ldr	r3, [r3, #20]
   d4f6c:	9301      	str	r3, [sp, #4]
   d4f6e:	bd08      	pop	{r3, pc}
   d4f70:	00030218 	.word	0x00030218

000d4f74 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d4f74:	b508      	push	{r3, lr}
   d4f76:	4b02      	ldr	r3, [pc, #8]	; (d4f80 <hal_rtc_time_is_valid+0xc>)
   d4f78:	681b      	ldr	r3, [r3, #0]
   d4f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4f7c:	9301      	str	r3, [sp, #4]
   d4f7e:	bd08      	pop	{r3, pc}
   d4f80:	00030218 	.word	0x00030218

000d4f84 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d4f84:	b508      	push	{r3, lr}
   d4f86:	4b02      	ldr	r3, [pc, #8]	; (d4f90 <hal_rtc_get_time+0xc>)
   d4f88:	681b      	ldr	r3, [r3, #0]
   d4f8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d4f8c:	9301      	str	r3, [sp, #4]
   d4f8e:	bd08      	pop	{r3, pc}
   d4f90:	00030218 	.word	0x00030218

000d4f94 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4f94:	b508      	push	{r3, lr}
   d4f96:	4b02      	ldr	r3, [pc, #8]	; (d4fa0 <HAL_Pin_Map+0xc>)
   d4f98:	681b      	ldr	r3, [r3, #0]
   d4f9a:	681b      	ldr	r3, [r3, #0]
   d4f9c:	9301      	str	r3, [sp, #4]
   d4f9e:	bd08      	pop	{r3, pc}
   d4fa0:	0003022c 	.word	0x0003022c

000d4fa4 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d4fa4:	b508      	push	{r3, lr}
   d4fa6:	4b02      	ldr	r3, [pc, #8]	; (d4fb0 <HAL_Validate_Pin_Function+0xc>)
   d4fa8:	681b      	ldr	r3, [r3, #0]
   d4faa:	685b      	ldr	r3, [r3, #4]
   d4fac:	9301      	str	r3, [sp, #4]
   d4fae:	bd08      	pop	{r3, pc}
   d4fb0:	0003022c 	.word	0x0003022c

000d4fb4 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4fb4:	b508      	push	{r3, lr}
   d4fb6:	4b02      	ldr	r3, [pc, #8]	; (d4fc0 <HAL_Pin_Mode+0xc>)
   d4fb8:	681b      	ldr	r3, [r3, #0]
   d4fba:	689b      	ldr	r3, [r3, #8]
   d4fbc:	9301      	str	r3, [sp, #4]
   d4fbe:	bd08      	pop	{r3, pc}
   d4fc0:	0003022c 	.word	0x0003022c

000d4fc4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4fc4:	b508      	push	{r3, lr}
   d4fc6:	4b02      	ldr	r3, [pc, #8]	; (d4fd0 <HAL_Get_Pin_Mode+0xc>)
   d4fc8:	681b      	ldr	r3, [r3, #0]
   d4fca:	68db      	ldr	r3, [r3, #12]
   d4fcc:	9301      	str	r3, [sp, #4]
   d4fce:	bd08      	pop	{r3, pc}
   d4fd0:	0003022c 	.word	0x0003022c

000d4fd4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4fd4:	b508      	push	{r3, lr}
   d4fd6:	4b02      	ldr	r3, [pc, #8]	; (d4fe0 <HAL_GPIO_Write+0xc>)
   d4fd8:	681b      	ldr	r3, [r3, #0]
   d4fda:	691b      	ldr	r3, [r3, #16]
   d4fdc:	9301      	str	r3, [sp, #4]
   d4fde:	bd08      	pop	{r3, pc}
   d4fe0:	0003022c 	.word	0x0003022c

000d4fe4 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d4fe4:	b508      	push	{r3, lr}
   d4fe6:	4b02      	ldr	r3, [pc, #8]	; (d4ff0 <HAL_Interrupts_Enable_All+0xc>)
   d4fe8:	681b      	ldr	r3, [r3, #0]
   d4fea:	6a1b      	ldr	r3, [r3, #32]
   d4fec:	9301      	str	r3, [sp, #4]
   d4fee:	bd08      	pop	{r3, pc}
   d4ff0:	0003022c 	.word	0x0003022c

000d4ff4 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d4ff4:	b508      	push	{r3, lr}
   d4ff6:	4b02      	ldr	r3, [pc, #8]	; (d5000 <HAL_Interrupts_Disable_All+0xc>)
   d4ff8:	681b      	ldr	r3, [r3, #0]
   d4ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4ffc:	9301      	str	r3, [sp, #4]
   d4ffe:	bd08      	pop	{r3, pc}
   d5000:	0003022c 	.word	0x0003022c

000d5004 <hal_adc_read>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d5004:	b508      	push	{r3, lr}
   d5006:	4b02      	ldr	r3, [pc, #8]	; (d5010 <hal_adc_read+0xc>)
   d5008:	681b      	ldr	r3, [r3, #0]
   d500a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d500c:	9301      	str	r3, [sp, #4]
   d500e:	bd08      	pop	{r3, pc}
   d5010:	0003022c 	.word	0x0003022c

000d5014 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d5014:	b508      	push	{r3, lr}
   d5016:	4b02      	ldr	r3, [pc, #8]	; (d5020 <hal_i2c_write+0xc>)
   d5018:	681b      	ldr	r3, [r3, #0]
   d501a:	6a1b      	ldr	r3, [r3, #32]
   d501c:	9301      	str	r3, [sp, #4]
   d501e:	bd08      	pop	{r3, pc}
   d5020:	00030228 	.word	0x00030228

000d5024 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d5024:	b508      	push	{r3, lr}
   d5026:	4b02      	ldr	r3, [pc, #8]	; (d5030 <hal_i2c_available+0xc>)
   d5028:	681b      	ldr	r3, [r3, #0]
   d502a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d502c:	9301      	str	r3, [sp, #4]
   d502e:	bd08      	pop	{r3, pc}
   d5030:	00030228 	.word	0x00030228

000d5034 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d5034:	b508      	push	{r3, lr}
   d5036:	4b02      	ldr	r3, [pc, #8]	; (d5040 <hal_i2c_read+0xc>)
   d5038:	681b      	ldr	r3, [r3, #0]
   d503a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d503c:	9301      	str	r3, [sp, #4]
   d503e:	bd08      	pop	{r3, pc}
   d5040:	00030228 	.word	0x00030228

000d5044 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d5044:	b508      	push	{r3, lr}
   d5046:	4b02      	ldr	r3, [pc, #8]	; (d5050 <hal_i2c_peek+0xc>)
   d5048:	681b      	ldr	r3, [r3, #0]
   d504a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d504c:	9301      	str	r3, [sp, #4]
   d504e:	bd08      	pop	{r3, pc}
   d5050:	00030228 	.word	0x00030228

000d5054 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d5054:	b508      	push	{r3, lr}
   d5056:	4b02      	ldr	r3, [pc, #8]	; (d5060 <hal_i2c_flush+0xc>)
   d5058:	681b      	ldr	r3, [r3, #0]
   d505a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d505c:	9301      	str	r3, [sp, #4]
   d505e:	bd08      	pop	{r3, pc}
   d5060:	00030228 	.word	0x00030228

000d5064 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d5064:	b508      	push	{r3, lr}
   d5066:	4b02      	ldr	r3, [pc, #8]	; (d5070 <hal_i2c_is_enabled+0xc>)
   d5068:	681b      	ldr	r3, [r3, #0]
   d506a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d506c:	9301      	str	r3, [sp, #4]
   d506e:	bd08      	pop	{r3, pc}
   d5070:	00030228 	.word	0x00030228

000d5074 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d5074:	b508      	push	{r3, lr}
   d5076:	4b02      	ldr	r3, [pc, #8]	; (d5080 <hal_i2c_init+0xc>)
   d5078:	681b      	ldr	r3, [r3, #0]
   d507a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d507c:	9301      	str	r3, [sp, #4]
   d507e:	bd08      	pop	{r3, pc}
   d5080:	00030228 	.word	0x00030228

000d5084 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5084:	b508      	push	{r3, lr}
   d5086:	4b02      	ldr	r3, [pc, #8]	; (d5090 <inet_inet_ntop+0xc>)
   d5088:	681b      	ldr	r3, [r3, #0]
   d508a:	695b      	ldr	r3, [r3, #20]
   d508c:	9301      	str	r3, [sp, #4]
   d508e:	bd08      	pop	{r3, pc}
   d5090:	00030264 	.word	0x00030264

000d5094 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5094:	b508      	push	{r3, lr}
   d5096:	4b02      	ldr	r3, [pc, #8]	; (d50a0 <netdb_freeaddrinfo+0xc>)
   d5098:	681b      	ldr	r3, [r3, #0]
   d509a:	689b      	ldr	r3, [r3, #8]
   d509c:	9301      	str	r3, [sp, #4]
   d509e:	bd08      	pop	{r3, pc}
   d50a0:	00030268 	.word	0x00030268

000d50a4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d50a4:	b508      	push	{r3, lr}
   d50a6:	4b02      	ldr	r3, [pc, #8]	; (d50b0 <netdb_getaddrinfo+0xc>)
   d50a8:	681b      	ldr	r3, [r3, #0]
   d50aa:	68db      	ldr	r3, [r3, #12]
   d50ac:	9301      	str	r3, [sp, #4]
   d50ae:	bd08      	pop	{r3, pc}
   d50b0:	00030268 	.word	0x00030268

000d50b4 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d50b4:	b508      	push	{r3, lr}
   d50b6:	4b02      	ldr	r3, [pc, #8]	; (d50c0 <hal_spi_init+0xc>)
   d50b8:	681b      	ldr	r3, [r3, #0]
   d50ba:	69db      	ldr	r3, [r3, #28]
   d50bc:	9301      	str	r3, [sp, #4]
   d50be:	bd08      	pop	{r3, pc}
   d50c0:	00030230 	.word	0x00030230

000d50c4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d50c4:	b508      	push	{r3, lr}
   d50c6:	4b02      	ldr	r3, [pc, #8]	; (d50d0 <hal_spi_is_enabled+0xc>)
   d50c8:	681b      	ldr	r3, [r3, #0]
   d50ca:	6a1b      	ldr	r3, [r3, #32]
   d50cc:	9301      	str	r3, [sp, #4]
   d50ce:	bd08      	pop	{r3, pc}
   d50d0:	00030230 	.word	0x00030230

000d50d4 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d50d4:	b508      	push	{r3, lr}
   d50d6:	4b02      	ldr	r3, [pc, #8]	; (d50e0 <hal_usart_init+0xc>)
   d50d8:	681b      	ldr	r3, [r3, #0]
   d50da:	681b      	ldr	r3, [r3, #0]
   d50dc:	9301      	str	r3, [sp, #4]
   d50de:	bd08      	pop	{r3, pc}
   d50e0:	0003023c 	.word	0x0003023c

000d50e4 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d50e4:	b508      	push	{r3, lr}
   d50e6:	4b02      	ldr	r3, [pc, #8]	; (d50f0 <hal_usart_write+0xc>)
   d50e8:	681b      	ldr	r3, [r3, #0]
   d50ea:	68db      	ldr	r3, [r3, #12]
   d50ec:	9301      	str	r3, [sp, #4]
   d50ee:	bd08      	pop	{r3, pc}
   d50f0:	0003023c 	.word	0x0003023c

000d50f4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d50f4:	b508      	push	{r3, lr}
   d50f6:	4b02      	ldr	r3, [pc, #8]	; (d5100 <hal_usart_available+0xc>)
   d50f8:	681b      	ldr	r3, [r3, #0]
   d50fa:	691b      	ldr	r3, [r3, #16]
   d50fc:	9301      	str	r3, [sp, #4]
   d50fe:	bd08      	pop	{r3, pc}
   d5100:	0003023c 	.word	0x0003023c

000d5104 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d5104:	b508      	push	{r3, lr}
   d5106:	4b02      	ldr	r3, [pc, #8]	; (d5110 <hal_usart_read+0xc>)
   d5108:	681b      	ldr	r3, [r3, #0]
   d510a:	695b      	ldr	r3, [r3, #20]
   d510c:	9301      	str	r3, [sp, #4]
   d510e:	bd08      	pop	{r3, pc}
   d5110:	0003023c 	.word	0x0003023c

000d5114 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d5114:	b508      	push	{r3, lr}
   d5116:	4b02      	ldr	r3, [pc, #8]	; (d5120 <hal_usart_peek+0xc>)
   d5118:	681b      	ldr	r3, [r3, #0]
   d511a:	699b      	ldr	r3, [r3, #24]
   d511c:	9301      	str	r3, [sp, #4]
   d511e:	bd08      	pop	{r3, pc}
   d5120:	0003023c 	.word	0x0003023c

000d5124 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d5124:	b508      	push	{r3, lr}
   d5126:	4b02      	ldr	r3, [pc, #8]	; (d5130 <hal_usart_flush+0xc>)
   d5128:	681b      	ldr	r3, [r3, #0]
   d512a:	69db      	ldr	r3, [r3, #28]
   d512c:	9301      	str	r3, [sp, #4]
   d512e:	bd08      	pop	{r3, pc}
   d5130:	0003023c 	.word	0x0003023c

000d5134 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d5134:	b508      	push	{r3, lr}
   d5136:	4b02      	ldr	r3, [pc, #8]	; (d5140 <hal_usart_is_enabled+0xc>)
   d5138:	681b      	ldr	r3, [r3, #0]
   d513a:	6a1b      	ldr	r3, [r3, #32]
   d513c:	9301      	str	r3, [sp, #4]
   d513e:	bd08      	pop	{r3, pc}
   d5140:	0003023c 	.word	0x0003023c

000d5144 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d5144:	b508      	push	{r3, lr}
   d5146:	4b02      	ldr	r3, [pc, #8]	; (d5150 <hal_usart_available_data_for_write+0xc>)
   d5148:	681b      	ldr	r3, [r3, #0]
   d514a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d514c:	9301      	str	r3, [sp, #4]
   d514e:	bd08      	pop	{r3, pc}
   d5150:	0003023c 	.word	0x0003023c

000d5154 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5154:	b508      	push	{r3, lr}
   d5156:	4b02      	ldr	r3, [pc, #8]	; (d5160 <HAL_USB_USART_Init+0xc>)
   d5158:	681b      	ldr	r3, [r3, #0]
   d515a:	681b      	ldr	r3, [r3, #0]
   d515c:	9301      	str	r3, [sp, #4]
   d515e:	bd08      	pop	{r3, pc}
   d5160:	0003024c 	.word	0x0003024c

000d5164 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5164:	b508      	push	{r3, lr}
   d5166:	4b02      	ldr	r3, [pc, #8]	; (d5170 <HAL_USB_USART_Begin+0xc>)
   d5168:	681b      	ldr	r3, [r3, #0]
   d516a:	685b      	ldr	r3, [r3, #4]
   d516c:	9301      	str	r3, [sp, #4]
   d516e:	bd08      	pop	{r3, pc}
   d5170:	0003024c 	.word	0x0003024c

000d5174 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5174:	b508      	push	{r3, lr}
   d5176:	4b02      	ldr	r3, [pc, #8]	; (d5180 <HAL_USB_USART_Available_Data+0xc>)
   d5178:	681b      	ldr	r3, [r3, #0]
   d517a:	691b      	ldr	r3, [r3, #16]
   d517c:	9301      	str	r3, [sp, #4]
   d517e:	bd08      	pop	{r3, pc}
   d5180:	0003024c 	.word	0x0003024c

000d5184 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5184:	b508      	push	{r3, lr}
   d5186:	4b02      	ldr	r3, [pc, #8]	; (d5190 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5188:	681b      	ldr	r3, [r3, #0]
   d518a:	695b      	ldr	r3, [r3, #20]
   d518c:	9301      	str	r3, [sp, #4]
   d518e:	bd08      	pop	{r3, pc}
   d5190:	0003024c 	.word	0x0003024c

000d5194 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5194:	b508      	push	{r3, lr}
   d5196:	4b02      	ldr	r3, [pc, #8]	; (d51a0 <HAL_USB_USART_Receive_Data+0xc>)
   d5198:	681b      	ldr	r3, [r3, #0]
   d519a:	699b      	ldr	r3, [r3, #24]
   d519c:	9301      	str	r3, [sp, #4]
   d519e:	bd08      	pop	{r3, pc}
   d51a0:	0003024c 	.word	0x0003024c

000d51a4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d51a4:	b508      	push	{r3, lr}
   d51a6:	4b02      	ldr	r3, [pc, #8]	; (d51b0 <HAL_USB_USART_Send_Data+0xc>)
   d51a8:	681b      	ldr	r3, [r3, #0]
   d51aa:	69db      	ldr	r3, [r3, #28]
   d51ac:	9301      	str	r3, [sp, #4]
   d51ae:	bd08      	pop	{r3, pc}
   d51b0:	0003024c 	.word	0x0003024c

000d51b4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d51b4:	b508      	push	{r3, lr}
   d51b6:	4b02      	ldr	r3, [pc, #8]	; (d51c0 <HAL_USB_USART_Flush_Data+0xc>)
   d51b8:	681b      	ldr	r3, [r3, #0]
   d51ba:	6a1b      	ldr	r3, [r3, #32]
   d51bc:	9301      	str	r3, [sp, #4]
   d51be:	bd08      	pop	{r3, pc}
   d51c0:	0003024c 	.word	0x0003024c

000d51c4 <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
   d51c4:	b508      	push	{r3, lr}
   d51c6:	4b02      	ldr	r3, [pc, #8]	; (d51d0 <LED_SetSignalingColor+0xc>)
   d51c8:	681b      	ldr	r3, [r3, #0]
   d51ca:	685b      	ldr	r3, [r3, #4]
   d51cc:	9301      	str	r3, [sp, #4]
   d51ce:	bd08      	pop	{r3, pc}
   d51d0:	00030260 	.word	0x00030260

000d51d4 <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
   d51d4:	b508      	push	{r3, lr}
   d51d6:	4b02      	ldr	r3, [pc, #8]	; (d51e0 <LED_Signaling_Start+0xc>)
   d51d8:	681b      	ldr	r3, [r3, #0]
   d51da:	689b      	ldr	r3, [r3, #8]
   d51dc:	9301      	str	r3, [sp, #4]
   d51de:	bd08      	pop	{r3, pc}
   d51e0:	00030260 	.word	0x00030260

000d51e4 <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
   d51e4:	b508      	push	{r3, lr}
   d51e6:	4b02      	ldr	r3, [pc, #8]	; (d51f0 <LED_Signaling_Stop+0xc>)
   d51e8:	681b      	ldr	r3, [r3, #0]
   d51ea:	68db      	ldr	r3, [r3, #12]
   d51ec:	9301      	str	r3, [sp, #4]
   d51ee:	bd08      	pop	{r3, pc}
   d51f0:	00030260 	.word	0x00030260

000d51f4 <LED_SetBrightness>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
   d51f4:	b508      	push	{r3, lr}
   d51f6:	4b02      	ldr	r3, [pc, #8]	; (d5200 <LED_SetBrightness+0xc>)
   d51f8:	681b      	ldr	r3, [r3, #0]
   d51fa:	691b      	ldr	r3, [r3, #16]
   d51fc:	9301      	str	r3, [sp, #4]
   d51fe:	bd08      	pop	{r3, pc}
   d5200:	00030260 	.word	0x00030260

000d5204 <LED_RGB_IsOverRidden>:
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   d5204:	b508      	push	{r3, lr}
   d5206:	4b02      	ldr	r3, [pc, #8]	; (d5210 <LED_RGB_IsOverRidden+0xc>)
   d5208:	681b      	ldr	r3, [r3, #0]
   d520a:	699b      	ldr	r3, [r3, #24]
   d520c:	9301      	str	r3, [sp, #4]
   d520e:	bd08      	pop	{r3, pc}
   d5210:	00030260 	.word	0x00030260

000d5214 <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   d5214:	b508      	push	{r3, lr}
   d5216:	4b02      	ldr	r3, [pc, #8]	; (d5220 <LED_On+0xc>)
   d5218:	681b      	ldr	r3, [r3, #0]
   d521a:	69db      	ldr	r3, [r3, #28]
   d521c:	9301      	str	r3, [sp, #4]
   d521e:	bd08      	pop	{r3, pc}
   d5220:	00030260 	.word	0x00030260

000d5224 <Get_LED_Brightness>:
DYNALIB_FN(8, services, LED_Off, void(Led_TypeDef))
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))
   d5224:	b508      	push	{r3, lr}
   d5226:	4b02      	ldr	r3, [pc, #8]	; (d5230 <Get_LED_Brightness+0xc>)
   d5228:	681b      	ldr	r3, [r3, #0]
   d522a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d522c:	9301      	str	r3, [sp, #4]
   d522e:	bd08      	pop	{r3, pc}
   d5230:	00030260 	.word	0x00030260

000d5234 <panic_>:

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5234:	b508      	push	{r3, lr}
   d5236:	4b02      	ldr	r3, [pc, #8]	; (d5240 <panic_+0xc>)
   d5238:	681b      	ldr	r3, [r3, #0]
   d523a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d523c:	9301      	str	r3, [sp, #4]
   d523e:	bd08      	pop	{r3, pc}
   d5240:	00030260 	.word	0x00030260

000d5244 <jsmn_init>:

DYNALIB_FN(14, services, jsmn_init, void(jsmn_parser*, void*))
   d5244:	b508      	push	{r3, lr}
   d5246:	4b02      	ldr	r3, [pc, #8]	; (d5250 <jsmn_init+0xc>)
   d5248:	681b      	ldr	r3, [r3, #0]
   d524a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d524c:	9301      	str	r3, [sp, #4]
   d524e:	bd08      	pop	{r3, pc}
   d5250:	00030260 	.word	0x00030260

000d5254 <jsmn_parse_deprecated>:
DYNALIB_FN(15, services, jsmn_parse_deprecated, jsmnerr_t(jsmn_parser*, const char*, size_t, jsmntok_t*, unsigned int, void*))
   d5254:	b508      	push	{r3, lr}
   d5256:	4b02      	ldr	r3, [pc, #8]	; (d5260 <jsmn_parse_deprecated+0xc>)
   d5258:	681b      	ldr	r3, [r3, #0]
   d525a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d525c:	9301      	str	r3, [sp, #4]
   d525e:	bd08      	pop	{r3, pc}
   d5260:	00030260 	.word	0x00030260

000d5264 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d5264:	b508      	push	{r3, lr}
   d5266:	4b02      	ldr	r3, [pc, #8]	; (d5270 <system_mode+0xc>)
   d5268:	681b      	ldr	r3, [r3, #0]
   d526a:	681b      	ldr	r3, [r3, #0]
   d526c:	9301      	str	r3, [sp, #4]
   d526e:	bd08      	pop	{r3, pc}
   d5270:	00030220 	.word	0x00030220

000d5274 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5274:	b508      	push	{r3, lr}
   d5276:	4b02      	ldr	r3, [pc, #8]	; (d5280 <set_system_mode+0xc>)
   d5278:	681b      	ldr	r3, [r3, #0]
   d527a:	685b      	ldr	r3, [r3, #4]
   d527c:	9301      	str	r3, [sp, #4]
   d527e:	bd08      	pop	{r3, pc}
   d5280:	00030220 	.word	0x00030220

000d5284 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5284:	b508      	push	{r3, lr}
   d5286:	4b02      	ldr	r3, [pc, #8]	; (d5290 <system_delay_ms+0xc>)
   d5288:	681b      	ldr	r3, [r3, #0]
   d528a:	695b      	ldr	r3, [r3, #20]
   d528c:	9301      	str	r3, [sp, #4]
   d528e:	bd08      	pop	{r3, pc}
   d5290:	00030220 	.word	0x00030220

000d5294 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d5294:	b508      	push	{r3, lr}
   d5296:	4b02      	ldr	r3, [pc, #8]	; (d52a0 <system_thread_set_state+0xc>)
   d5298:	681b      	ldr	r3, [r3, #0]
   d529a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d529c:	9301      	str	r3, [sp, #4]
   d529e:	bd08      	pop	{r3, pc}
   d52a0:	00030220 	.word	0x00030220

000d52a4 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d52a4:	b508      	push	{r3, lr}
   d52a6:	4b02      	ldr	r3, [pc, #8]	; (d52b0 <system_thread_get_state+0xc>)
   d52a8:	681b      	ldr	r3, [r3, #0]
   d52aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d52ac:	9301      	str	r3, [sp, #4]
   d52ae:	bd08      	pop	{r3, pc}
   d52b0:	00030220 	.word	0x00030220

000d52b4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d52b4:	b508      	push	{r3, lr}
   d52b6:	4b03      	ldr	r3, [pc, #12]	; (d52c4 <system_ctrl_set_app_request_handler+0x10>)
   d52b8:	681b      	ldr	r3, [r3, #0]
   d52ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d52be:	9301      	str	r3, [sp, #4]
   d52c0:	bd08      	pop	{r3, pc}
   d52c2:	0000      	.short	0x0000
   d52c4:	00030220 	.word	0x00030220

000d52c8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d52c8:	b508      	push	{r3, lr}
   d52ca:	4b03      	ldr	r3, [pc, #12]	; (d52d8 <system_ctrl_set_result+0x10>)
   d52cc:	681b      	ldr	r3, [r3, #0]
   d52ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d52d2:	9301      	str	r3, [sp, #4]
   d52d4:	bd08      	pop	{r3, pc}
   d52d6:	0000      	.short	0x0000
   d52d8:	00030220 	.word	0x00030220

000d52dc <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d52dc:	b508      	push	{r3, lr}
   d52de:	4b02      	ldr	r3, [pc, #8]	; (d52e8 <spark_process+0xc>)
   d52e0:	681b      	ldr	r3, [r3, #0]
   d52e2:	689b      	ldr	r3, [r3, #8]
   d52e4:	9301      	str	r3, [sp, #4]
   d52e6:	bd08      	pop	{r3, pc}
   d52e8:	00030244 	.word	0x00030244

000d52ec <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d52ec:	b508      	push	{r3, lr}
   d52ee:	4b02      	ldr	r3, [pc, #8]	; (d52f8 <spark_cloud_flag_connected+0xc>)
   d52f0:	681b      	ldr	r3, [r3, #0]
   d52f2:	695b      	ldr	r3, [r3, #20]
   d52f4:	9301      	str	r3, [sp, #4]
   d52f6:	bd08      	pop	{r3, pc}
   d52f8:	00030244 	.word	0x00030244

000d52fc <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d52fc:	b508      	push	{r3, lr}
   d52fe:	4b02      	ldr	r3, [pc, #8]	; (d5308 <spark_sync_time_pending+0xc>)
   d5300:	681b      	ldr	r3, [r3, #0]
   d5302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5304:	9301      	str	r3, [sp, #4]
   d5306:	bd08      	pop	{r3, pc}
   d5308:	00030244 	.word	0x00030244

000d530c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d530c:	b508      	push	{r3, lr}
   d530e:	4b02      	ldr	r3, [pc, #8]	; (d5318 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5310:	681b      	ldr	r3, [r3, #0]
   d5312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5314:	9301      	str	r3, [sp, #4]
   d5316:	bd08      	pop	{r3, pc}
   d5318:	00030244 	.word	0x00030244

000d531c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d531c:	b508      	push	{r3, lr}
   d531e:	4b02      	ldr	r3, [pc, #8]	; (d5328 <network_connect+0xc>)
   d5320:	681b      	ldr	r3, [r3, #0]
   d5322:	685b      	ldr	r3, [r3, #4]
   d5324:	9301      	str	r3, [sp, #4]
   d5326:	bd08      	pop	{r3, pc}
   d5328:	00030240 	.word	0x00030240

000d532c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d532c:	b508      	push	{r3, lr}
   d532e:	4b02      	ldr	r3, [pc, #8]	; (d5338 <network_connecting+0xc>)
   d5330:	681b      	ldr	r3, [r3, #0]
   d5332:	689b      	ldr	r3, [r3, #8]
   d5334:	9301      	str	r3, [sp, #4]
   d5336:	bd08      	pop	{r3, pc}
   d5338:	00030240 	.word	0x00030240

000d533c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d533c:	b508      	push	{r3, lr}
   d533e:	4b02      	ldr	r3, [pc, #8]	; (d5348 <network_disconnect+0xc>)
   d5340:	681b      	ldr	r3, [r3, #0]
   d5342:	68db      	ldr	r3, [r3, #12]
   d5344:	9301      	str	r3, [sp, #4]
   d5346:	bd08      	pop	{r3, pc}
   d5348:	00030240 	.word	0x00030240

000d534c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d534c:	b508      	push	{r3, lr}
   d534e:	4b02      	ldr	r3, [pc, #8]	; (d5358 <network_ready+0xc>)
   d5350:	681b      	ldr	r3, [r3, #0]
   d5352:	691b      	ldr	r3, [r3, #16]
   d5354:	9301      	str	r3, [sp, #4]
   d5356:	bd08      	pop	{r3, pc}
   d5358:	00030240 	.word	0x00030240

000d535c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d535c:	b508      	push	{r3, lr}
   d535e:	4b02      	ldr	r3, [pc, #8]	; (d5368 <network_on+0xc>)
   d5360:	681b      	ldr	r3, [r3, #0]
   d5362:	695b      	ldr	r3, [r3, #20]
   d5364:	9301      	str	r3, [sp, #4]
   d5366:	bd08      	pop	{r3, pc}
   d5368:	00030240 	.word	0x00030240

000d536c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d536c:	b508      	push	{r3, lr}
   d536e:	4b02      	ldr	r3, [pc, #8]	; (d5378 <network_off+0xc>)
   d5370:	681b      	ldr	r3, [r3, #0]
   d5372:	699b      	ldr	r3, [r3, #24]
   d5374:	9301      	str	r3, [sp, #4]
   d5376:	bd08      	pop	{r3, pc}
   d5378:	00030240 	.word	0x00030240

000d537c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d537c:	b508      	push	{r3, lr}
   d537e:	4b02      	ldr	r3, [pc, #8]	; (d5388 <network_listen+0xc>)
   d5380:	681b      	ldr	r3, [r3, #0]
   d5382:	69db      	ldr	r3, [r3, #28]
   d5384:	9301      	str	r3, [sp, #4]
   d5386:	bd08      	pop	{r3, pc}
   d5388:	00030240 	.word	0x00030240

000d538c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d538c:	b508      	push	{r3, lr}
   d538e:	4b02      	ldr	r3, [pc, #8]	; (d5398 <network_listening+0xc>)
   d5390:	681b      	ldr	r3, [r3, #0]
   d5392:	6a1b      	ldr	r3, [r3, #32]
   d5394:	9301      	str	r3, [sp, #4]
   d5396:	bd08      	pop	{r3, pc}
   d5398:	00030240 	.word	0x00030240

000d539c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d539c:	b508      	push	{r3, lr}
   d539e:	4b02      	ldr	r3, [pc, #8]	; (d53a8 <network_set_listen_timeout+0xc>)
   d53a0:	681b      	ldr	r3, [r3, #0]
   d53a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d53a4:	9301      	str	r3, [sp, #4]
   d53a6:	bd08      	pop	{r3, pc}
   d53a8:	00030240 	.word	0x00030240

000d53ac <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d53ac:	b508      	push	{r3, lr}
   d53ae:	4b02      	ldr	r3, [pc, #8]	; (d53b8 <network_get_listen_timeout+0xc>)
   d53b0:	681b      	ldr	r3, [r3, #0]
   d53b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d53b4:	9301      	str	r3, [sp, #4]
   d53b6:	bd08      	pop	{r3, pc}
   d53b8:	00030240 	.word	0x00030240

000d53bc <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d53bc:	b508      	push	{r3, lr}
   d53be:	4b02      	ldr	r3, [pc, #8]	; (d53c8 <network_is_on+0xc>)
   d53c0:	681b      	ldr	r3, [r3, #0]
   d53c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d53c4:	9301      	str	r3, [sp, #4]
   d53c6:	bd08      	pop	{r3, pc}
   d53c8:	00030240 	.word	0x00030240

000d53cc <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d53cc:	b508      	push	{r3, lr}
   d53ce:	4b02      	ldr	r3, [pc, #8]	; (d53d8 <network_is_off+0xc>)
   d53d0:	681b      	ldr	r3, [r3, #0]
   d53d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d53d4:	9301      	str	r3, [sp, #4]
   d53d6:	bd08      	pop	{r3, pc}
   d53d8:	00030240 	.word	0x00030240

000d53dc <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d53dc:	b508      	push	{r3, lr}
   d53de:	4b02      	ldr	r3, [pc, #8]	; (d53e8 <malloc+0xc>)
   d53e0:	681b      	ldr	r3, [r3, #0]
   d53e2:	681b      	ldr	r3, [r3, #0]
   d53e4:	9301      	str	r3, [sp, #4]
   d53e6:	bd08      	pop	{r3, pc}
   d53e8:	0003021c 	.word	0x0003021c

000d53ec <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d53ec:	b508      	push	{r3, lr}
   d53ee:	4b02      	ldr	r3, [pc, #8]	; (d53f8 <free+0xc>)
   d53f0:	681b      	ldr	r3, [r3, #0]
   d53f2:	685b      	ldr	r3, [r3, #4]
   d53f4:	9301      	str	r3, [sp, #4]
   d53f6:	bd08      	pop	{r3, pc}
   d53f8:	0003021c 	.word	0x0003021c

000d53fc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d53fc:	b508      	push	{r3, lr}
   d53fe:	4b02      	ldr	r3, [pc, #8]	; (d5408 <realloc+0xc>)
   d5400:	681b      	ldr	r3, [r3, #0]
   d5402:	689b      	ldr	r3, [r3, #8]
   d5404:	9301      	str	r3, [sp, #4]
   d5406:	bd08      	pop	{r3, pc}
   d5408:	0003021c 	.word	0x0003021c

000d540c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d540c:	b508      	push	{r3, lr}
   d540e:	4b02      	ldr	r3, [pc, #8]	; (d5418 <vsnprintf+0xc>)
   d5410:	681b      	ldr	r3, [r3, #0]
   d5412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5414:	9301      	str	r3, [sp, #4]
   d5416:	bd08      	pop	{r3, pc}
   d5418:	0003021c 	.word	0x0003021c

000d541c <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d541c:	b508      	push	{r3, lr}
   d541e:	4b02      	ldr	r3, [pc, #8]	; (d5428 <newlib_impure_ptr_callback+0xc>)
   d5420:	681b      	ldr	r3, [r3, #0]
   d5422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5424:	9301      	str	r3, [sp, #4]
   d5426:	bd08      	pop	{r3, pc}
   d5428:	0003021c 	.word	0x0003021c

000d542c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d542c:	2100      	movs	r1, #0
   d542e:	f7ff bf29 	b.w	d5284 <system_delay_ms>
	...

000d5434 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5434:	4802      	ldr	r0, [pc, #8]	; (d5440 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d5436:	2300      	movs	r3, #0
   d5438:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d543a:	f7ff bd7b 	b.w	d4f34 <os_mutex_recursive_create>
   d543e:	bf00      	nop
   d5440:	2003e5a8 	.word	0x2003e5a8

000d5444 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5444:	2200      	movs	r2, #0
   d5446:	6840      	ldr	r0, [r0, #4]
   d5448:	4611      	mov	r1, r2
   d544a:	f7ff bf9f 	b.w	d538c <network_listening>

000d544e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d544e:	2200      	movs	r2, #0
   d5450:	6840      	ldr	r0, [r0, #4]
   d5452:	4611      	mov	r1, r2
   d5454:	f7ff bfaa 	b.w	d53ac <network_get_listen_timeout>

000d5458 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5458:	6840      	ldr	r0, [r0, #4]
   d545a:	2200      	movs	r2, #0
   d545c:	f7ff bf9e 	b.w	d539c <network_set_listen_timeout>

000d5460 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5460:	6840      	ldr	r0, [r0, #4]
   d5462:	2200      	movs	r2, #0
   d5464:	f081 0101 	eor.w	r1, r1, #1
   d5468:	f7ff bf88 	b.w	d537c <network_listen>

000d546c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d546c:	2300      	movs	r3, #0
   d546e:	6840      	ldr	r0, [r0, #4]
   d5470:	461a      	mov	r2, r3
   d5472:	4619      	mov	r1, r3
   d5474:	f7ff bf7a 	b.w	d536c <network_off>

000d5478 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5478:	2300      	movs	r3, #0
   d547a:	6840      	ldr	r0, [r0, #4]
   d547c:	461a      	mov	r2, r3
   d547e:	4619      	mov	r1, r3
   d5480:	f7ff bf6c 	b.w	d535c <network_on>

000d5484 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5484:	2200      	movs	r2, #0
   d5486:	6840      	ldr	r0, [r0, #4]
   d5488:	4611      	mov	r1, r2
   d548a:	f7ff bf5f 	b.w	d534c <network_ready>

000d548e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d548e:	2200      	movs	r2, #0
   d5490:	6840      	ldr	r0, [r0, #4]
   d5492:	4611      	mov	r1, r2
   d5494:	f7ff bf4a 	b.w	d532c <network_connecting>

000d5498 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5498:	6840      	ldr	r0, [r0, #4]
   d549a:	2200      	movs	r2, #0
   d549c:	2102      	movs	r1, #2
   d549e:	f7ff bf4d 	b.w	d533c <network_disconnect>

000d54a2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d54a2:	2300      	movs	r3, #0
   d54a4:	6840      	ldr	r0, [r0, #4]
   d54a6:	461a      	mov	r2, r3
   d54a8:	f7ff bf38 	b.w	d531c <network_connect>

000d54ac <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d54ac:	4b02      	ldr	r3, [pc, #8]	; (d54b8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d54ae:	2203      	movs	r2, #3
   d54b0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d54b2:	4a02      	ldr	r2, [pc, #8]	; (d54bc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d54b4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d54b6:	4770      	bx	lr
   d54b8:	2003e5ac 	.word	0x2003e5ac
   d54bc:	000d7324 	.word	0x000d7324

000d54c0 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d54c0:	4770      	bx	lr

000d54c2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d54c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d54c4:	4606      	mov	r6, r0
   d54c6:	4615      	mov	r5, r2
   d54c8:	460c      	mov	r4, r1
   d54ca:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d54cc:	42bc      	cmp	r4, r7
   d54ce:	d006      	beq.n	d54de <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d54d0:	6833      	ldr	r3, [r6, #0]
   d54d2:	f814 1b01 	ldrb.w	r1, [r4], #1
   d54d6:	689b      	ldr	r3, [r3, #8]
   d54d8:	4630      	mov	r0, r6
   d54da:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d54dc:	e7f6      	b.n	d54cc <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d54de:	4628      	mov	r0, r5
   d54e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d54e2 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d54e2:	7c00      	ldrb	r0, [r0, #16]
   d54e4:	2200      	movs	r2, #0
   d54e6:	f7ff bd95 	b.w	d5014 <hal_i2c_write>

000d54ea <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d54ea:	7c00      	ldrb	r0, [r0, #16]
   d54ec:	2100      	movs	r1, #0
   d54ee:	f7ff bd99 	b.w	d5024 <hal_i2c_available>

000d54f2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d54f2:	7c00      	ldrb	r0, [r0, #16]
   d54f4:	2100      	movs	r1, #0
   d54f6:	f7ff bd9d 	b.w	d5034 <hal_i2c_read>

000d54fa <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d54fa:	7c00      	ldrb	r0, [r0, #16]
   d54fc:	2100      	movs	r1, #0
   d54fe:	f7ff bda1 	b.w	d5044 <hal_i2c_peek>

000d5502 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d5502:	7c00      	ldrb	r0, [r0, #16]
   d5504:	2100      	movs	r1, #0
   d5506:	f7ff bda5 	b.w	d5054 <hal_i2c_flush>

000d550a <_ZN7TwoWireD0Ev>:
   d550a:	b510      	push	{r4, lr}
   d550c:	2114      	movs	r1, #20
   d550e:	4604      	mov	r4, r0
   d5510:	f001 f898 	bl	d6644 <_ZdlPvj>
   d5514:	4620      	mov	r0, r4
   d5516:	bd10      	pop	{r4, pc}

000d5518 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d5518:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d551a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d551e:	4604      	mov	r4, r0
   d5520:	4608      	mov	r0, r1
   d5522:	2100      	movs	r1, #0
   d5524:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5528:	4b03      	ldr	r3, [pc, #12]	; (d5538 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d552a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d552c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d552e:	4611      	mov	r1, r2
   d5530:	f7ff fda0 	bl	d5074 <hal_i2c_init>
}
   d5534:	4620      	mov	r0, r4
   d5536:	bd10      	pop	{r4, pc}
   d5538:	000d7360 	.word	0x000d7360

000d553c <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d553c:	f7ff bd5a 	b.w	d4ff4 <HAL_Interrupts_Disable_All>

000d5540 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d5540:	f7ff bd50 	b.w	d4fe4 <HAL_Interrupts_Enable_All>

000d5544 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5544:	4770      	bx	lr

000d5546 <_ZN9IPAddressD0Ev>:
   d5546:	b510      	push	{r4, lr}
   d5548:	2118      	movs	r1, #24
   d554a:	4604      	mov	r4, r0
   d554c:	f001 f87a 	bl	d6644 <_ZdlPvj>
   d5550:	4620      	mov	r0, r4
   d5552:	bd10      	pop	{r4, pc}

000d5554 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5554:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5556:	7d03      	ldrb	r3, [r0, #20]
   d5558:	2b06      	cmp	r3, #6
{
   d555a:	b08d      	sub	sp, #52	; 0x34
   d555c:	460e      	mov	r6, r1
   d555e:	f100 0704 	add.w	r7, r0, #4
   d5562:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d5566:	d012      	beq.n	d558e <_ZNK9IPAddress7printToER5Print+0x3a>
   d5568:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d556c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5570:	220a      	movs	r2, #10
   d5572:	4630      	mov	r0, r6
   d5574:	f000 fbe5 	bl	d5d42 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5578:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d557a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d557c:	d019      	beq.n	d55b2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d557e:	2c00      	cmp	r4, #0
   d5580:	d0f4      	beq.n	d556c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d5582:	212e      	movs	r1, #46	; 0x2e
   d5584:	4630      	mov	r0, r6
   d5586:	f000 fbcd 	bl	d5d24 <_ZN5Print5printEc>
   d558a:	4404      	add	r4, r0
   d558c:	e7ee      	b.n	d556c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d558e:	232f      	movs	r3, #47	; 0x2f
   d5590:	466a      	mov	r2, sp
   d5592:	4639      	mov	r1, r7
   d5594:	200a      	movs	r0, #10
		buf[0] = 0;
   d5596:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d559a:	f7ff fd73 	bl	d5084 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d559e:	4668      	mov	r0, sp
   d55a0:	f001 fd40 	bl	d7024 <strlen>
   d55a4:	6833      	ldr	r3, [r6, #0]
   d55a6:	4602      	mov	r2, r0
   d55a8:	68db      	ldr	r3, [r3, #12]
   d55aa:	4669      	mov	r1, sp
   d55ac:	4630      	mov	r0, r6
   d55ae:	4798      	blx	r3
   d55b0:	4604      	mov	r4, r0
    }
    return n;
}
   d55b2:	4620      	mov	r0, r4
   d55b4:	b00d      	add	sp, #52	; 0x34
   d55b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d55b8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d55b8:	b510      	push	{r4, lr}
   d55ba:	4b05      	ldr	r3, [pc, #20]	; (d55d0 <_ZN9IPAddressC1Ev+0x18>)
   d55bc:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d55be:	2211      	movs	r2, #17
   d55c0:	f840 3b04 	str.w	r3, [r0], #4
   d55c4:	2100      	movs	r1, #0
   d55c6:	f001 fcef 	bl	d6fa8 <memset>
}
   d55ca:	4620      	mov	r0, r4
   d55cc:	bd10      	pop	{r4, pc}
   d55ce:	bf00      	nop
   d55d0:	000d7388 	.word	0x000d7388

000d55d4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d55d4:	4603      	mov	r3, r0
   d55d6:	4a07      	ldr	r2, [pc, #28]	; (d55f4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d55d8:	b510      	push	{r4, lr}
   d55da:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d55de:	f101 0210 	add.w	r2, r1, #16
   d55e2:	f851 4b04 	ldr.w	r4, [r1], #4
   d55e6:	f843 4b04 	str.w	r4, [r3], #4
   d55ea:	4291      	cmp	r1, r2
   d55ec:	d1f9      	bne.n	d55e2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d55ee:	780a      	ldrb	r2, [r1, #0]
   d55f0:	701a      	strb	r2, [r3, #0]
}
   d55f2:	bd10      	pop	{r4, pc}
   d55f4:	000d7388 	.word	0x000d7388

000d55f8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d55f8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d55fa:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d55fe:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5602:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5606:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d560a:	2304      	movs	r3, #4
   d560c:	6041      	str	r1, [r0, #4]
   d560e:	7503      	strb	r3, [r0, #20]
}
   d5610:	bd10      	pop	{r4, pc}

000d5612 <_ZN9IPAddressaSEPKh>:
{
   d5612:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5614:	78cb      	ldrb	r3, [r1, #3]
   d5616:	9300      	str	r3, [sp, #0]
   d5618:	788b      	ldrb	r3, [r1, #2]
   d561a:	784a      	ldrb	r2, [r1, #1]
   d561c:	7809      	ldrb	r1, [r1, #0]
   d561e:	f7ff ffeb 	bl	d55f8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d5622:	b002      	add	sp, #8
   d5624:	bd10      	pop	{r4, pc}

000d5626 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   d5626:	f100 0310 	add.w	r3, r0, #16
   d562a:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d562c:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d5630:	2901      	cmp	r1, #1
   d5632:	4618      	mov	r0, r3
   d5634:	d108      	bne.n	d5648 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   d5636:	f853 1c04 	ldr.w	r1, [r3, #-4]
   d563a:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   d563e:	3a01      	subs	r2, #1
   d5640:	f103 0310 	add.w	r3, r3, #16
   d5644:	d1f2      	bne.n	d562c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   d5646:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   d5648:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d564a:	bf04      	itt	eq
   d564c:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   d5650:	1852      	addeq	r2, r2, r1
   d5652:	e7f4      	b.n	d563e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000d5654 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5654:	4770      	bx	lr

000d5656 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d5656:	2000      	movs	r0, #0
   d5658:	4770      	bx	lr

000d565a <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d565a:	b510      	push	{r4, lr}
   d565c:	2110      	movs	r1, #16
   d565e:	4604      	mov	r4, r0
   d5660:	f000 fff0 	bl	d6644 <_ZdlPvj>
   d5664:	4620      	mov	r0, r4
   d5666:	bd10      	pop	{r4, pc}

000d5668 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d5668:	b508      	push	{r3, lr}
      { delete this; }
   d566a:	f7ff fff6 	bl	d565a <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d566e:	bd08      	pop	{r3, pc}

000d5670 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d5670:	b510      	push	{r4, lr}
      { delete _M_ptr; }
   d5672:	68c4      	ldr	r4, [r0, #12]
   d5674:	b17c      	cbz	r4, d5696 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
            json(nullptr),
            freeJson(false) {
    }

    ~JSONData() {
        delete[] tokens;
   d5676:	6820      	ldr	r0, [r4, #0]
   d5678:	b108      	cbz	r0, d567e <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0xe>
   d567a:	f7fe fd12 	bl	d40a2 <_ZdaPv>
        if (freeJson) {
   d567e:	7a23      	ldrb	r3, [r4, #8]
   d5680:	b11b      	cbz	r3, d568a <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
            delete[] json;
   d5682:	6860      	ldr	r0, [r4, #4]
   d5684:	b108      	cbz	r0, d568a <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
   d5686:	f7fe fd0c 	bl	d40a2 <_ZdaPv>
   d568a:	4620      	mov	r0, r4
   d568c:	210c      	movs	r1, #12
   d568e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5692:	f000 bfd7 	b.w	d6644 <_ZdlPvj>
   d5696:	bd10      	pop	{r4, pc}

000d5698 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5698:	b510      	push	{r4, lr}
          _M_dispose();
   d569a:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d569c:	4604      	mov	r4, r0
          _M_dispose();
   d569e:	689b      	ldr	r3, [r3, #8]
   d56a0:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d56a2:	68a3      	ldr	r3, [r4, #8]
   d56a4:	3b01      	subs	r3, #1
   d56a6:	60a3      	str	r3, [r4, #8]
   d56a8:	b92b      	cbnz	r3, d56b6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d56aa:	6823      	ldr	r3, [r4, #0]
   d56ac:	4620      	mov	r0, r4
   d56ae:	68db      	ldr	r3, [r3, #12]
    }
   d56b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d56b4:	4718      	bx	r3
    }
   d56b6:	bd10      	pop	{r4, pc}

000d56b8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   d56b8:	b538      	push	{r3, r4, r5, lr}
   d56ba:	680b      	ldr	r3, [r1, #0]
   d56bc:	6003      	str	r3, [r0, #0]
   d56be:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   d56c0:	6843      	ldr	r3, [r0, #4]
   d56c2:	429d      	cmp	r5, r3
    class __shared_ptr
   d56c4:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   d56c6:	d00c      	beq.n	d56e2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   d56c8:	b115      	cbz	r5, d56d0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   d56ca:	686b      	ldr	r3, [r5, #4]
   d56cc:	3301      	adds	r3, #1
   d56ce:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   d56d0:	6860      	ldr	r0, [r4, #4]
   d56d2:	b128      	cbz	r0, d56e0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   d56d4:	6843      	ldr	r3, [r0, #4]
   d56d6:	3b01      	subs	r3, #1
   d56d8:	6043      	str	r3, [r0, #4]
   d56da:	b90b      	cbnz	r3, d56e0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   d56dc:	f7ff ffdc 	bl	d5698 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d56e0:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   d56e2:	4620      	mov	r0, r4
   d56e4:	bd38      	pop	{r3, r4, r5, pc}

000d56e6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
        }
    }
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d56e6:	460b      	mov	r3, r1
   d56e8:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   d56ea:	2200      	movs	r2, #0
   d56ec:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   d56ee:	e9c0 2200 	strd	r2, r2, [r0]
   d56f2:	4604      	mov	r4, r0
        JSONValue() {
    if (t) {
        t_ = t;
   d56f4:	6083      	str	r3, [r0, #8]
    if (t) {
   d56f6:	b90b      	cbnz	r3, d56fc <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
        d_ = d;
    }
}
   d56f8:	4620      	mov	r0, r4
   d56fa:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   d56fc:	f7ff ffdc 	bl	d56b8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   d5700:	e7fa      	b.n	d56f8 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000d5702 <_ZNK5spark9JSONValue4typeEv>:
        return 0.0;
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
   d5702:	6883      	ldr	r3, [r0, #8]
   d5704:	b1eb      	cbz	r3, d5742 <_ZNK5spark9JSONValue4typeEv+0x40>
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
   d5706:	781a      	ldrb	r2, [r3, #0]
   d5708:	2a03      	cmp	r2, #3
   d570a:	d81a      	bhi.n	d5742 <_ZNK5spark9JSONValue4typeEv+0x40>
   d570c:	e8df f002 	tbb	[pc, r2]
   d5710:	1b021704 	.word	0x1b021704
   d5714:	2005      	movs	r0, #5
   d5716:	4770      	bx	lr
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
   d5718:	6802      	ldr	r2, [r0, #0]
   d571a:	685b      	ldr	r3, [r3, #4]
   d571c:	6852      	ldr	r2, [r2, #4]
   d571e:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d5720:	282d      	cmp	r0, #45	; 0x2d
   d5722:	d012      	beq.n	d574a <_ZNK5spark9JSONValue4typeEv+0x48>
   d5724:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d5728:	2b09      	cmp	r3, #9
   d572a:	d90e      	bls.n	d574a <_ZNK5spark9JSONValue4typeEv+0x48>
            return JSON_TYPE_NUMBER;
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d572c:	2874      	cmp	r0, #116	; 0x74
   d572e:	d00e      	beq.n	d574e <_ZNK5spark9JSONValue4typeEv+0x4c>
   d5730:	2866      	cmp	r0, #102	; 0x66
   d5732:	d00c      	beq.n	d574e <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   d5734:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d5738:	4258      	negs	r0, r3
   d573a:	4158      	adcs	r0, r3
   d573c:	4770      	bx	lr
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
   d573e:	2006      	movs	r0, #6
   d5740:	4770      	bx	lr
    default:
        return JSON_TYPE_INVALID;
   d5742:	2000      	movs	r0, #0
   d5744:	4770      	bx	lr
        return JSON_TYPE_STRING;
   d5746:	2004      	movs	r0, #4
   d5748:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   d574a:	2003      	movs	r0, #3
   d574c:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   d574e:	2002      	movs	r0, #2
    }
}
   d5750:	4770      	bx	lr
	...

000d5754 <_ZNK5spark9JSONValue6toBoolEv>:
bool spark::JSONValue::toBool() const {
   d5754:	b510      	push	{r4, lr}
   d5756:	4604      	mov	r4, r0
    switch (type()) {
   d5758:	f7ff ffd3 	bl	d5702 <_ZNK5spark9JSONValue4typeEv>
   d575c:	2803      	cmp	r0, #3
   d575e:	d00d      	beq.n	d577c <_ZNK5spark9JSONValue6toBoolEv+0x28>
   d5760:	2804      	cmp	r0, #4
   d5762:	d01e      	beq.n	d57a2 <_ZNK5spark9JSONValue6toBoolEv+0x4e>
   d5764:	2802      	cmp	r0, #2
   d5766:	d12b      	bne.n	d57c0 <_ZNK5spark9JSONValue6toBoolEv+0x6c>
        const char* const s = d_->json + t_->start;
   d5768:	6822      	ldr	r2, [r4, #0]
   d576a:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d576c:	6852      	ldr	r2, [r2, #4]
   d576e:	685b      	ldr	r3, [r3, #4]
   d5770:	5cd0      	ldrb	r0, [r2, r3]
   d5772:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d5776:	4258      	negs	r0, r3
   d5778:	4158      	adcs	r0, r3
}
   d577a:	bd10      	pop	{r4, pc}
        const char* const s = d_->json + t_->start;
   d577c:	68a3      	ldr	r3, [r4, #8]
   d577e:	6822      	ldr	r2, [r4, #0]
   d5780:	685b      	ldr	r3, [r3, #4]
   d5782:	6854      	ldr	r4, [r2, #4]
   d5784:	441c      	add	r4, r3
        if (*s == '\0' || strcmp(s, "false") == 0 || strcmp(s, "0") == 0 || strcmp(s, "0.0") == 0) {
   d5786:	490f      	ldr	r1, [pc, #60]	; (d57c4 <_ZNK5spark9JSONValue6toBoolEv+0x70>)
   d5788:	4620      	mov	r0, r4
   d578a:	f001 fc39 	bl	d7000 <strcmp>
   d578e:	2800      	cmp	r0, #0
   d5790:	d0f3      	beq.n	d577a <_ZNK5spark9JSONValue6toBoolEv+0x26>
   d5792:	490d      	ldr	r1, [pc, #52]	; (d57c8 <_ZNK5spark9JSONValue6toBoolEv+0x74>)
   d5794:	4620      	mov	r0, r4
   d5796:	f001 fc33 	bl	d7000 <strcmp>
   d579a:	3800      	subs	r0, #0
   d579c:	bf18      	it	ne
   d579e:	2001      	movne	r0, #1
   d57a0:	e7eb      	b.n	d577a <_ZNK5spark9JSONValue6toBoolEv+0x26>
        const char* const s = d_->json + t_->start;
   d57a2:	6822      	ldr	r2, [r4, #0]
   d57a4:	68a3      	ldr	r3, [r4, #8]
   d57a6:	6852      	ldr	r2, [r2, #4]
   d57a8:	685b      	ldr	r3, [r3, #4]
        if (*s == '\0' || strcmp(s, "false") == 0 || strcmp(s, "0") == 0 || strcmp(s, "0.0") == 0) {
   d57aa:	5cd0      	ldrb	r0, [r2, r3]
        const char* const s = d_->json + t_->start;
   d57ac:	18d4      	adds	r4, r2, r3
        if (*s == '\0' || strcmp(s, "false") == 0 || strcmp(s, "0") == 0 || strcmp(s, "0.0") == 0) {
   d57ae:	2800      	cmp	r0, #0
   d57b0:	d0e3      	beq.n	d577a <_ZNK5spark9JSONValue6toBoolEv+0x26>
   d57b2:	4906      	ldr	r1, [pc, #24]	; (d57cc <_ZNK5spark9JSONValue6toBoolEv+0x78>)
   d57b4:	4620      	mov	r0, r4
   d57b6:	f001 fc23 	bl	d7000 <strcmp>
   d57ba:	2800      	cmp	r0, #0
   d57bc:	d1e3      	bne.n	d5786 <_ZNK5spark9JSONValue6toBoolEv+0x32>
   d57be:	e7dc      	b.n	d577a <_ZNK5spark9JSONValue6toBoolEv+0x26>
    switch (type()) {
   d57c0:	2000      	movs	r0, #0
   d57c2:	e7da      	b.n	d577a <_ZNK5spark9JSONValue6toBoolEv+0x26>
   d57c4:	000d7396 	.word	0x000d7396
   d57c8:	000d7394 	.word	0x000d7394
   d57cc:	000d7398 	.word	0x000d7398

000d57d0 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   d57d0:	b510      	push	{r4, lr}
   d57d2:	4604      	mov	r4, r0
    switch (type()) {
   d57d4:	f7ff ff95 	bl	d5702 <_ZNK5spark9JSONValue4typeEv>
   d57d8:	2802      	cmp	r0, #2
   d57da:	d00e      	beq.n	d57fa <_ZNK5spark9JSONValue5toIntEv+0x2a>
   d57dc:	1ec3      	subs	r3, r0, #3
   d57de:	b2db      	uxtb	r3, r3
   d57e0:	2b01      	cmp	r3, #1
   d57e2:	d814      	bhi.n	d580e <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   d57e4:	6822      	ldr	r2, [r4, #0]
   d57e6:	68a3      	ldr	r3, [r4, #8]
   d57e8:	6850      	ldr	r0, [r2, #4]
   d57ea:	685b      	ldr	r3, [r3, #4]
}
   d57ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   d57f0:	220a      	movs	r2, #10
   d57f2:	2100      	movs	r1, #0
   d57f4:	4418      	add	r0, r3
   d57f6:	f001 bc97 	b.w	d7128 <strtol>
        const char* const s = d_->json + t_->start;
   d57fa:	6822      	ldr	r2, [r4, #0]
   d57fc:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d57fe:	6852      	ldr	r2, [r2, #4]
   d5800:	685b      	ldr	r3, [r3, #4]
   d5802:	5cd0      	ldrb	r0, [r2, r3]
   d5804:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d5808:	4258      	negs	r0, r3
   d580a:	4158      	adcs	r0, r3
}
   d580c:	bd10      	pop	{r4, pc}
    switch (type()) {
   d580e:	2000      	movs	r0, #0
   d5810:	e7fc      	b.n	d580c <_ZNK5spark9JSONValue5toIntEv+0x3c>
	...

000d5814 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>:
        return JSONValue();
    }
    return JSONValue(d->tokens, d);
}

bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   d5814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5818:	4699      	mov	r9, r3
   d581a:	b088      	sub	sp, #32
    jsmn_parser parser;
    parser.size = sizeof(jsmn_parser);
   d581c:	2310      	movs	r3, #16
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   d581e:	4607      	mov	r7, r0
   d5820:	4688      	mov	r8, r1
    jsmn_init(&parser, nullptr);
   d5822:	eb0d 0003 	add.w	r0, sp, r3
   d5826:	2100      	movs	r1, #0
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   d5828:	4692      	mov	sl, r2
    parser.size = sizeof(jsmn_parser);
   d582a:	9304      	str	r3, [sp, #16]
    int nExt = -1;
    int n = jsmn_parse_deprecated(&parser, json, size, nullptr, 0, &nExt); // Get number of tokens
   d582c:	2400      	movs	r4, #0
    jsmn_init(&parser, nullptr);
   d582e:	f7ff fd09 	bl	d5244 <jsmn_init>
    int n = jsmn_parse_deprecated(&parser, json, size, nullptr, 0, &nExt); // Get number of tokens
   d5832:	ab03      	add	r3, sp, #12
   d5834:	9301      	str	r3, [sp, #4]
    int nExt = -1;
   d5836:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    int n = jsmn_parse_deprecated(&parser, json, size, nullptr, 0, &nExt); // Get number of tokens
   d583a:	9400      	str	r4, [sp, #0]
   d583c:	4623      	mov	r3, r4
   d583e:	4642      	mov	r2, r8
   d5840:	4639      	mov	r1, r7
   d5842:	a804      	add	r0, sp, #16
    int nExt = -1;
   d5844:	9603      	str	r6, [sp, #12]
    int n = jsmn_parse_deprecated(&parser, json, size, nullptr, 0, &nExt); // Get number of tokens
   d5846:	f7ff fd05 	bl	d5254 <jsmn_parse_deprecated>
    if (n <= 0) {
   d584a:	1e05      	subs	r5, r0, #0
   d584c:	dd27      	ble.n	d589e <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x8a>
        return false; // Parsing error
    }
    if (nExt > n) {
   d584e:	9803      	ldr	r0, [sp, #12]
        n = nExt;
    }
    std::unique_ptr<jsmntok_t[]> t(new(std::nothrow) jsmntok_t[n]);
   d5850:	4914      	ldr	r1, [pc, #80]	; (d58a4 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x90>)
   d5852:	4285      	cmp	r5, r0
   d5854:	bfb8      	it	lt
   d5856:	4605      	movlt	r5, r0
   d5858:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
   d585c:	bfac      	ite	ge
   d585e:	4630      	movge	r0, r6
   d5860:	0128      	lsllt	r0, r5, #4
   d5862:	f000 fef3 	bl	d664c <_ZnajRKSt9nothrow_t>
    if (!t) {
   d5866:	4606      	mov	r6, r0
   d5868:	b198      	cbz	r0, d5892 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x7e>
        return false;
    }
    jsmn_init(&parser, nullptr); // Reset parser
   d586a:	2100      	movs	r1, #0
   d586c:	a804      	add	r0, sp, #16
    if (jsmn_parse_deprecated(&parser, json, size, t.get(), n, nullptr) <= 0) {
   d586e:	2400      	movs	r4, #0
    jsmn_init(&parser, nullptr); // Reset parser
   d5870:	f7ff fce8 	bl	d5244 <jsmn_init>
    if (jsmn_parse_deprecated(&parser, json, size, t.get(), n, nullptr) <= 0) {
   d5874:	e9cd 5400 	strd	r5, r4, [sp]
   d5878:	4633      	mov	r3, r6
   d587a:	4642      	mov	r2, r8
   d587c:	4639      	mov	r1, r7
   d587e:	a804      	add	r0, sp, #16
   d5880:	f7ff fce8 	bl	d5254 <jsmn_parse_deprecated>
   d5884:	42a0      	cmp	r0, r4
   d5886:	dd07      	ble.n	d5898 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x84>
        return false;
    }
    *tokens = t.release();
   d5888:	f8ca 6000 	str.w	r6, [sl]
    *count = n;
    return true;
   d588c:	2001      	movs	r0, #1
    *count = n;
   d588e:	f8c9 5000 	str.w	r5, [r9]
}
   d5892:	b008      	add	sp, #32
   d5894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      typename enable_if<is_convertible<_Up(*)[], _Tp(*)[]>::value>::type
	operator()(_Up* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5898:	4630      	mov	r0, r6
   d589a:	f7fe fc02 	bl	d40a2 <_ZdaPv>
      }
   d589e:	4620      	mov	r0, r4
   d58a0:	e7f7      	b.n	d5892 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x7e>
   d58a2:	bf00      	nop
   d58a4:	000d74b4 	.word	0x000d74b4

000d58a8 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>:
        ++t;
    }
    return true;
}

bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   d58a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    char *str = json + t->start; // Destination string
   d58ac:	6843      	ldr	r3, [r0, #4]
    const char* const end = json + t->end; // End of the source string
   d58ae:	6886      	ldr	r6, [r0, #8]
    char *str = json + t->start; // Destination string
   d58b0:	440b      	add	r3, r1
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   d58b2:	4688      	mov	r8, r1
    const char* const end = json + t->end; // End of the source string
   d58b4:	440e      	add	r6, r1
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   d58b6:	4607      	mov	r7, r0
    const char *s1 = str; // Beginning of an unescaped sequence
    const char *s = s1;
   d58b8:	461c      	mov	r4, r3
    const char *s1 = str; // Beginning of an unescaped sequence
   d58ba:	4619      	mov	r1, r3
                    break;
                case 'f': // Form feed
                    *str = 0x0c;
                    break;
                case 'r': // Carriage return
                    *str = 0x0d;
   d58bc:	f04f 090d 	mov.w	r9, #13
                    *str = 0x09;
   d58c0:	f04f 0a09 	mov.w	sl, #9
    while (s != end) {
   d58c4:	42b4      	cmp	r4, r6
   d58c6:	d063      	beq.n	d5990 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xe8>
        if (*s == '\\') {
   d58c8:	4625      	mov	r5, r4
   d58ca:	f815 2b01 	ldrb.w	r2, [r5], #1
   d58ce:	2a5c      	cmp	r2, #92	; 0x5c
   d58d0:	d12b      	bne.n	d592a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x82>
            if (s != s1) {
   d58d2:	42a1      	cmp	r1, r4
   d58d4:	d007      	beq.n	d58e6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x3e>
                const size_t n = s - s1;
   d58d6:	eba4 0b01 	sub.w	fp, r4, r1
                memmove(str, s1, n); // Shift preceeding characters
   d58da:	4618      	mov	r0, r3
   d58dc:	465a      	mov	r2, fp
   d58de:	f001 fb49 	bl	d6f74 <memmove>
   d58e2:	4603      	mov	r3, r0
                str += n;
   d58e4:	445b      	add	r3, fp
            if (s == end) {
   d58e6:	42b5      	cmp	r5, r6
   d58e8:	d039      	beq.n	d595e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
            if (*s == 'u') { // Arbitrary character, e.g. "\u001f"
   d58ea:	7862      	ldrb	r2, [r4, #1]
   d58ec:	2a75      	cmp	r2, #117	; 0x75
   d58ee:	d12a      	bne.n	d5946 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x9e>
                ++s;
   d58f0:	1ca2      	adds	r2, r4, #2
                if (end - s < 4) {
   d58f2:	1ab2      	subs	r2, r6, r2
   d58f4:	2a03      	cmp	r2, #3
   d58f6:	dd32      	ble.n	d595e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
    const char* const end = s + size;
   d58f8:	1da0      	adds	r0, r4, #6
   d58fa:	f104 0e05 	add.w	lr, r4, #5
    uint32_t v = 0;
   d58fe:	f04f 0c00 	mov.w	ip, #0
    while (s != end) {
   d5902:	45ae      	cmp	lr, r5
   d5904:	d053      	beq.n	d59ae <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x106>
        const char c = *s;
   d5906:	f815 1f01 	ldrb.w	r1, [r5, #1]!
        if (c >= '0' && c <= '9') {
   d590a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   d590e:	fa5f fb82 	uxtb.w	fp, r2
   d5912:	f1bb 0f09 	cmp.w	fp, #9
   d5916:	d905      	bls.n	d5924 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x7c>
        } else if (c >= 'a' && c <= 'f') {
   d5918:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
   d591c:	2a05      	cmp	r2, #5
   d591e:	d807      	bhi.n	d5930 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x88>
            n = c - 'a' + 10;
   d5920:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
        v = (v << 4) | n;
   d5924:	ea42 1c0c 	orr.w	ip, r2, ip, lsl #4
    while (s != end) {
   d5928:	e7eb      	b.n	d5902 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x5a>
   d592a:	4628      	mov	r0, r5
   d592c:	4604      	mov	r4, r0
   d592e:	e7c9      	b.n	d58c4 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x1c>
        } else if (c >= 'A' && c <= 'F') {
   d5930:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
   d5934:	2a05      	cmp	r2, #5
   d5936:	d812      	bhi.n	d595e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
            n = c - 'A' + 10;
   d5938:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
   d593c:	e7f2      	b.n	d5924 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x7c>
                    *str = u;
   d593e:	f803 cb01 	strb.w	ip, [r3], #1
                    s1 += 6; // Skip escaped sequence
   d5942:	4601      	mov	r1, r0
   d5944:	e7f2      	b.n	d592c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>
                switch (*s) {
   d5946:	2a6e      	cmp	r2, #110	; 0x6e
   d5948:	d01c      	beq.n	d5984 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xdc>
   d594a:	d80e      	bhi.n	d596a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xc2>
   d594c:	2a62      	cmp	r2, #98	; 0x62
   d594e:	d013      	beq.n	d5978 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd0>
   d5950:	d807      	bhi.n	d5962 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xba>
   d5952:	2a2f      	cmp	r2, #47	; 0x2f
   d5954:	d011      	beq.n	d597a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
   d5956:	2a5c      	cmp	r2, #92	; 0x5c
   d5958:	d00f      	beq.n	d597a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
   d595a:	2a22      	cmp	r2, #34	; 0x22
   d595c:	d00d      	beq.n	d597a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                return false; // Unexpected end of string
   d595e:	2000      	movs	r0, #0
   d5960:	e023      	b.n	d59aa <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x102>
                switch (*s) {
   d5962:	2a66      	cmp	r2, #102	; 0x66
   d5964:	d1fb      	bne.n	d595e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
                    *str = 0x0c;
   d5966:	220c      	movs	r2, #12
   d5968:	e007      	b.n	d597a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                switch (*s) {
   d596a:	2a72      	cmp	r2, #114	; 0x72
   d596c:	d00d      	beq.n	d598a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xe2>
   d596e:	2a74      	cmp	r2, #116	; 0x74
   d5970:	d1f5      	bne.n	d595e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
                    *str = 0x09;
   d5972:	f883 a000 	strb.w	sl, [r3]
                    break;
   d5976:	e001      	b.n	d597c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd4>
                    *str = 0x08;
   d5978:	2208      	movs	r2, #8
   d597a:	701a      	strb	r2, [r3, #0]
                    break;
                default:
                    return false; // Invalid escaped sequence
                }
                ++str;
                ++s;
   d597c:	1ca1      	adds	r1, r4, #2
                ++str;
   d597e:	3301      	adds	r3, #1
                ++s;
   d5980:	4608      	mov	r0, r1
   d5982:	e7d3      	b.n	d592c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>
                    *str = 0x0a;
   d5984:	f04f 020a 	mov.w	r2, #10
   d5988:	e7f7      	b.n	d597a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                    *str = 0x0d;
   d598a:	f883 9000 	strb.w	r9, [r3]
                    break;
   d598e:	e7f5      	b.n	d597c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd4>
            }
        } else {
            ++s;
        }
    }
    if (s != s1) {
   d5990:	42a1      	cmp	r1, r4
   d5992:	d006      	beq.n	d59a2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xfa>
        const size_t n = s - s1;
   d5994:	1a64      	subs	r4, r4, r1
        memmove(str, s1, n); // Shift remaining characters
   d5996:	4618      	mov	r0, r3
   d5998:	4622      	mov	r2, r4
   d599a:	f001 faeb 	bl	d6f74 <memmove>
   d599e:	4603      	mov	r3, r0
        str += n;
   d59a0:	4423      	add	r3, r4
    }
    t->end = str - json; // Update string length
   d59a2:	eba3 0308 	sub.w	r3, r3, r8
   d59a6:	60bb      	str	r3, [r7, #8]
    return true;
   d59a8:	2001      	movs	r0, #1
}
   d59aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if (u <= 0x7f) { // Processing only code points within the basic latin block
   d59ae:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
   d59b2:	d9c4      	bls.n	d593e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x96>
   d59b4:	4621      	mov	r1, r4
   d59b6:	e7b9      	b.n	d592c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>

000d59b8 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>:
bool spark::JSONValue::stringize(jsmntok_t *t, size_t count, char *json) {
   d59b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d59ba:	4604      	mov	r4, r0
   d59bc:	4615      	mov	r5, r2
    const jsmntok_t* const end = t + count;
   d59be:	eb00 1601 	add.w	r6, r0, r1, lsl #4
            json[t->end] = '\0';
   d59c2:	2700      	movs	r7, #0
    while (t != end) {
   d59c4:	42b4      	cmp	r4, r6
   d59c6:	d010      	beq.n	d59ea <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x32>
        if (t->type == JSMN_STRING) {
   d59c8:	7823      	ldrb	r3, [r4, #0]
   d59ca:	2b03      	cmp	r3, #3
   d59cc:	d108      	bne.n	d59e0 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x28>
            if (!unescape(t, json)) {
   d59ce:	4629      	mov	r1, r5
   d59d0:	4620      	mov	r0, r4
   d59d2:	f7ff ff69 	bl	d58a8 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>
   d59d6:	b148      	cbz	r0, d59ec <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x34>
            json[t->end] = '\0';
   d59d8:	68a3      	ldr	r3, [r4, #8]
   d59da:	54ef      	strb	r7, [r5, r3]
        ++t;
   d59dc:	3410      	adds	r4, #16
    while (t != end) {
   d59de:	e7f1      	b.n	d59c4 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0xc>
        } else if (t->type == JSMN_PRIMITIVE) {
   d59e0:	2b00      	cmp	r3, #0
   d59e2:	d1fb      	bne.n	d59dc <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x24>
            json[t->end] = '\0';
   d59e4:	68a2      	ldr	r2, [r4, #8]
   d59e6:	54ab      	strb	r3, [r5, r2]
   d59e8:	e7f8      	b.n	d59dc <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x24>
    return true;
   d59ea:	2001      	movs	r0, #1
}
   d59ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d59f0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

// spark::JSONString
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d59f0:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d59f2:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d59f4:	e9c0 3300 	strd	r3, r3, [r0]
   d59f8:	4604      	mov	r4, r0
}

// spark::JSONString
inline spark::JSONString::JSONString() :
        s_(""),
        n_(0) {
   d59fa:	480e      	ldr	r0, [pc, #56]	; (d5a34 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   d59fc:	e9c4 0302 	strd	r0, r3, [r4, #8]
        JSONString() {
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d5a00:	b1a9      	cbz	r1, d5a2e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   d5a02:	780b      	ldrb	r3, [r1, #0]
   d5a04:	2b03      	cmp	r3, #3
   d5a06:	d006      	beq.n	d5a16 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d5a08:	b98b      	cbnz	r3, d5a2e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d5a0a:	6813      	ldr	r3, [r2, #0]
   d5a0c:	6858      	ldr	r0, [r3, #4]
   d5a0e:	684b      	ldr	r3, [r1, #4]
   d5a10:	5cc3      	ldrb	r3, [r0, r3]
   d5a12:	2b6e      	cmp	r3, #110	; 0x6e
   d5a14:	d007      	beq.n	d5a26 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   d5a16:	6813      	ldr	r3, [r2, #0]
   d5a18:	684d      	ldr	r5, [r1, #4]
   d5a1a:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   d5a1c:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   d5a1e:	4428      	add	r0, r5
            n_ = t->end - t->start;
   d5a20:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   d5a22:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   d5a24:	60e3      	str	r3, [r4, #12]
   d5a26:	4611      	mov	r1, r2
   d5a28:	4620      	mov	r0, r4
   d5a2a:	f7ff fe45 	bl	d56b8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
        }
        d_ = d;
    }
}
   d5a2e:	4620      	mov	r0, r4
   d5a30:	bd38      	pop	{r3, r4, r5, pc}
   d5a32:	bf00      	nop
   d5a34:	000d7397 	.word	0x000d7397

000d5a38 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
bool spark::JSONString::operator==(const JSONString &str) const {
    return n_ == str.n_ && strncmp(s_, str.s_, n_) == 0;
}

// spark::JSONObjectIterator
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d5a38:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d5a3a:	2500      	movs	r5, #0
   d5a3c:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   d5a3e:	e9c0 5500 	strd	r5, r5, [r0]
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
   d5a42:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d5a46:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d5a4a:	4604      	mov	r4, r0
   d5a4c:	4611      	mov	r1, r2
        JSONObjectIterator() {
    if (t && t->type == JSMN_OBJECT) {
   d5a4e:	b14b      	cbz	r3, d5a64 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   d5a50:	781a      	ldrb	r2, [r3, #0]
   d5a52:	2a01      	cmp	r2, #1
   d5a54:	d106      	bne.n	d5a64 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   d5a56:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   d5a5a:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   d5a5c:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   d5a5e:	6143      	str	r3, [r0, #20]
   d5a60:	f7ff fe2a 	bl	d56b8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
        d_ = d;
    }
}
   d5a64:	4620      	mov	r0, r4
   d5a66:	bd38      	pop	{r3, r4, r5, pc}

000d5a68 <_ZN5spark18JSONObjectIterator4nextEv>:

bool spark::JSONObjectIterator::next() {
   d5a68:	b510      	push	{r4, lr}
    if (!n_) {
   d5a6a:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   d5a6c:	4604      	mov	r4, r0
    if (!n_) {
   d5a6e:	b163      	cbz	r3, d5a8a <_ZN5spark18JSONObjectIterator4nextEv+0x22>
        return false;
    }
    k_ = t_; // Name
   d5a70:	6880      	ldr	r0, [r0, #8]
   d5a72:	60e0      	str	r0, [r4, #12]
    ++t_;
    v_ = t_; // Value
    --n_;
   d5a74:	3b01      	subs	r3, #1
    ++t_;
   d5a76:	3010      	adds	r0, #16
   d5a78:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d5a7a:	6120      	str	r0, [r4, #16]
    --n_;
   d5a7c:	6163      	str	r3, [r4, #20]
    if (n_) {
   d5a7e:	b113      	cbz	r3, d5a86 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   d5a80:	f7ff fdd1 	bl	d5626 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d5a84:	60a0      	str	r0, [r4, #8]
    }
    return true;
   d5a86:	2001      	movs	r0, #1
   d5a88:	e000      	b.n	d5a8c <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   d5a8a:	4618      	mov	r0, r3
}
   d5a8c:	bd10      	pop	{r4, pc}
	...

000d5a90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d5a90:	b538      	push	{r3, r4, r5, lr}
   d5a92:	2300      	movs	r3, #0
   d5a94:	4604      	mov	r4, r0
   d5a96:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5a98:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d5a9a:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5a9c:	f7fe fafb 	bl	d4096 <_Znwj>
   d5aa0:	b128      	cbz	r0, d5aae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d5aa2:	2301      	movs	r3, #1
   d5aa4:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d5aa8:	4b02      	ldr	r3, [pc, #8]	; (d5ab4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x24>)
   d5aaa:	6003      	str	r3, [r0, #0]
   d5aac:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5aae:	6020      	str	r0, [r4, #0]
	}
   d5ab0:	4620      	mov	r0, r4
   d5ab2:	bd38      	pop	{r3, r4, r5, pc}
   d5ab4:	000d73a8 	.word	0x000d73a8

000d5ab8 <_ZN5spark9JSONValue9parseCopyEPKcj>:
spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
   d5ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5aba:	4604      	mov	r4, r0
   d5abc:	b087      	sub	sp, #28
   d5abe:	460e      	mov	r6, r1
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
   d5ac0:	200c      	movs	r0, #12
   d5ac2:	4927      	ldr	r1, [pc, #156]	; (d5b60 <_ZN5spark9JSONValue9parseCopyEPKcj+0xa8>)
spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
   d5ac4:	4615      	mov	r5, r2
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
   d5ac6:	f000 fdbf 	bl	d6648 <_ZnwjRKSt9nothrow_t>
   d5aca:	4601      	mov	r1, r0
   d5acc:	b118      	cbz	r0, d5ad6 <_ZN5spark9JSONValue9parseCopyEPKcj+0x1e>
            freeJson(false) {
   d5ace:	2300      	movs	r3, #0
   d5ad0:	e9c0 3300 	strd	r3, r3, [r0]
   d5ad4:	7203      	strb	r3, [r0, #8]
	: __shared_count(__p)
   d5ad6:	a803      	add	r0, sp, #12
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5ad8:	9102      	str	r1, [sp, #8]
	: __shared_count(__p)
   d5ada:	f7ff ffd9 	bl	d5a90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>
    if (!d) {
   d5ade:	9a02      	ldr	r2, [sp, #8]
   d5ae0:	b942      	cbnz	r2, d5af4 <_ZN5spark9JSONValue9parseCopyEPKcj+0x3c>
      constexpr __shared_count() noexcept : _M_pi(0)
   d5ae2:	e9c4 2200 	strd	r2, r2, [r4]
        t_(nullptr) {
   d5ae6:	60a2      	str	r2, [r4, #8]
      ~__shared_ptr() = default;
   d5ae8:	a803      	add	r0, sp, #12
   d5aea:	f7fe fb15 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5aee:	4620      	mov	r0, r4
   d5af0:	b007      	add	sp, #28
   d5af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    size_t tokenCount = 0;
   d5af4:	2300      	movs	r3, #0
   d5af6:	9301      	str	r3, [sp, #4]
    if (!tokenize(json, size, &d->tokens, &tokenCount)) {
   d5af8:	4629      	mov	r1, r5
   d5afa:	ab01      	add	r3, sp, #4
   d5afc:	4630      	mov	r0, r6
   d5afe:	f7ff fe89 	bl	d5814 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>
   d5b02:	b918      	cbnz	r0, d5b0c <_ZN5spark9JSONValue9parseCopyEPKcj+0x54>
      constexpr __shared_count() noexcept : _M_pi(0)
   d5b04:	e9c4 0000 	strd	r0, r0, [r4]
   d5b08:	60a0      	str	r0, [r4, #8]
}
   d5b0a:	e7ed      	b.n	d5ae8 <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
    d->json = new(std::nothrow) char[size + 1];
   d5b0c:	4914      	ldr	r1, [pc, #80]	; (d5b60 <_ZN5spark9JSONValue9parseCopyEPKcj+0xa8>)
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d5b0e:	9f02      	ldr	r7, [sp, #8]
   d5b10:	1c68      	adds	r0, r5, #1
   d5b12:	f000 fd9b 	bl	d664c <_ZnajRKSt9nothrow_t>
    if (!d->json) {
   d5b16:	9b02      	ldr	r3, [sp, #8]
    d->json = new(std::nothrow) char[size + 1];
   d5b18:	6078      	str	r0, [r7, #4]
    if (!d->json) {
   d5b1a:	6858      	ldr	r0, [r3, #4]
   d5b1c:	2800      	cmp	r0, #0
   d5b1e:	d0f1      	beq.n	d5b04 <_ZN5spark9JSONValue9parseCopyEPKcj+0x4c>
    memcpy(d->json, json, size); // TODO: Copy only token data
   d5b20:	462a      	mov	r2, r5
   d5b22:	4631      	mov	r1, r6
   d5b24:	f001 fa18 	bl	d6f58 <memcpy>
   d5b28:	9b02      	ldr	r3, [sp, #8]
    if (!stringize(d->tokens, tokenCount, d->json)) {
   d5b2a:	9901      	ldr	r1, [sp, #4]
   d5b2c:	6818      	ldr	r0, [r3, #0]
    d->freeJson = true;
   d5b2e:	2201      	movs	r2, #1
   d5b30:	721a      	strb	r2, [r3, #8]
    if (!stringize(d->tokens, tokenCount, d->json)) {
   d5b32:	685a      	ldr	r2, [r3, #4]
   d5b34:	f7ff ff40 	bl	d59b8 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>
   d5b38:	2800      	cmp	r0, #0
   d5b3a:	d0e3      	beq.n	d5b04 <_ZN5spark9JSONValue9parseCopyEPKcj+0x4c>
   d5b3c:	9b02      	ldr	r3, [sp, #8]
    return JSONValue(d->tokens, d);
   d5b3e:	6819      	ldr	r1, [r3, #0]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5b40:	9304      	str	r3, [sp, #16]
      : _M_pi(__r._M_pi)
   d5b42:	9b03      	ldr	r3, [sp, #12]
   d5b44:	9305      	str	r3, [sp, #20]
	if (_M_pi != 0)
   d5b46:	b113      	cbz	r3, d5b4e <_ZN5spark9JSONValue9parseCopyEPKcj+0x96>
    { ++_M_use_count; }
   d5b48:	685a      	ldr	r2, [r3, #4]
   d5b4a:	3201      	adds	r2, #1
   d5b4c:	605a      	str	r2, [r3, #4]
   d5b4e:	aa04      	add	r2, sp, #16
   d5b50:	4620      	mov	r0, r4
   d5b52:	f7ff fdc8 	bl	d56e6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d5b56:	a805      	add	r0, sp, #20
   d5b58:	f7fe fade 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5b5c:	e7c4      	b.n	d5ae8 <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
   d5b5e:	bf00      	nop
   d5b60:	000d74b4 	.word	0x000d74b4

000d5b64 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5b64:	4b01      	ldr	r3, [pc, #4]	; (d5b6c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5b66:	4a02      	ldr	r2, [pc, #8]	; (d5b70 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5b68:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d5b6a:	4770      	bx	lr
   d5b6c:	2003e5b4 	.word	0x2003e5b4
   d5b70:	000d73bc 	.word	0x000d73bc

000d5b74 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5b74:	2300      	movs	r3, #0
   d5b76:	6840      	ldr	r0, [r0, #4]
   d5b78:	461a      	mov	r2, r3
   d5b7a:	f7ff bbcf 	b.w	d531c <network_connect>

000d5b7e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5b7e:	6840      	ldr	r0, [r0, #4]
   d5b80:	2200      	movs	r2, #0
   d5b82:	2102      	movs	r1, #2
   d5b84:	f7ff bbda 	b.w	d533c <network_disconnect>

000d5b88 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5b88:	2200      	movs	r2, #0
   d5b8a:	6840      	ldr	r0, [r0, #4]
   d5b8c:	4611      	mov	r1, r2
   d5b8e:	f7ff bbcd 	b.w	d532c <network_connecting>

000d5b92 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5b92:	2200      	movs	r2, #0
   d5b94:	6840      	ldr	r0, [r0, #4]
   d5b96:	4611      	mov	r1, r2
   d5b98:	f7ff bbd8 	b.w	d534c <network_ready>

000d5b9c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5b9c:	2300      	movs	r3, #0
   d5b9e:	6840      	ldr	r0, [r0, #4]
   d5ba0:	461a      	mov	r2, r3
   d5ba2:	4619      	mov	r1, r3
   d5ba4:	f7ff bbda 	b.w	d535c <network_on>

000d5ba8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5ba8:	2300      	movs	r3, #0
   d5baa:	6840      	ldr	r0, [r0, #4]
   d5bac:	461a      	mov	r2, r3
   d5bae:	4619      	mov	r1, r3
   d5bb0:	f7ff bbdc 	b.w	d536c <network_off>

000d5bb4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d5bb4:	6840      	ldr	r0, [r0, #4]
   d5bb6:	2100      	movs	r1, #0
   d5bb8:	f7ff bc00 	b.w	d53bc <network_is_on>

000d5bbc <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d5bbc:	6840      	ldr	r0, [r0, #4]
   d5bbe:	2100      	movs	r1, #0
   d5bc0:	f7ff bc04 	b.w	d53cc <network_is_off>

000d5bc4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5bc4:	6840      	ldr	r0, [r0, #4]
   d5bc6:	2200      	movs	r2, #0
   d5bc8:	f081 0101 	eor.w	r1, r1, #1
   d5bcc:	f7ff bbd6 	b.w	d537c <network_listen>

000d5bd0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5bd0:	6840      	ldr	r0, [r0, #4]
   d5bd2:	2200      	movs	r2, #0
   d5bd4:	f7ff bbe2 	b.w	d539c <network_set_listen_timeout>

000d5bd8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5bd8:	2200      	movs	r2, #0
   d5bda:	6840      	ldr	r0, [r0, #4]
   d5bdc:	4611      	mov	r1, r2
   d5bde:	f7ff bbe5 	b.w	d53ac <network_get_listen_timeout>

000d5be2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5be2:	2200      	movs	r2, #0
   d5be4:	6840      	ldr	r0, [r0, #4]
   d5be6:	4611      	mov	r1, r2
   d5be8:	f7ff bbd0 	b.w	d538c <network_listening>

000d5bec <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5bec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5bf0:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d5bf2:	b095      	sub	sp, #84	; 0x54
   d5bf4:	4616      	mov	r6, r2
   d5bf6:	460d      	mov	r5, r1
   d5bf8:	4607      	mov	r7, r0
    IPAddress addr;
   d5bfa:	f7ff fcdd 	bl	d55b8 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d5bfe:	4621      	mov	r1, r4
   d5c00:	2218      	movs	r2, #24
   d5c02:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d5c04:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5c06:	f001 f9cf 	bl	d6fa8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5c0a:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d5c0c:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5c10:	4621      	mov	r1, r4
   d5c12:	466b      	mov	r3, sp
   d5c14:	aa0c      	add	r2, sp, #48	; 0x30
   d5c16:	4630      	mov	r0, r6
   d5c18:	f7ff fa44 	bl	d50a4 <netdb_getaddrinfo>
    if (!r) {
   d5c1c:	4604      	mov	r4, r0
   d5c1e:	2800      	cmp	r0, #0
   d5c20:	d146      	bne.n	d5cb0 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5c22:	4602      	mov	r2, r0
   d5c24:	2101      	movs	r1, #1
   d5c26:	6868      	ldr	r0, [r5, #4]
   d5c28:	f7ff fb90 	bl	d534c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5c2c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5c2e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5c30:	4622      	mov	r2, r4
   d5c32:	6868      	ldr	r0, [r5, #4]
   d5c34:	f7ff fb8a 	bl	d534c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5c38:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5c3a:	4681      	mov	r9, r0
        bool ok = false;
   d5c3c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5c3e:	2e00      	cmp	r6, #0
   d5c40:	d036      	beq.n	d5cb0 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d5c42:	2900      	cmp	r1, #0
   d5c44:	d134      	bne.n	d5cb0 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5c46:	6873      	ldr	r3, [r6, #4]
   d5c48:	2b02      	cmp	r3, #2
   d5c4a:	d003      	beq.n	d5c54 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d5c4c:	2b0a      	cmp	r3, #10
   d5c4e:	d00b      	beq.n	d5c68 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5c50:	69f6      	ldr	r6, [r6, #28]
   d5c52:	e7f4      	b.n	d5c3e <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d5c54:	f1b8 0f00 	cmp.w	r8, #0
   d5c58:	d004      	beq.n	d5c64 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5c5a:	6971      	ldr	r1, [r6, #20]
   d5c5c:	4638      	mov	r0, r7
   d5c5e:	3104      	adds	r1, #4
   d5c60:	f7ff fcd7 	bl	d5612 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d5c64:	4641      	mov	r1, r8
   d5c66:	e7f3      	b.n	d5c50 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5c68:	f1b9 0f00 	cmp.w	r9, #0
   d5c6c:	d101      	bne.n	d5c72 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d5c6e:	4649      	mov	r1, r9
   d5c70:	e7ee      	b.n	d5c50 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5c72:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5c74:	2210      	movs	r2, #16
   d5c76:	a801      	add	r0, sp, #4
   d5c78:	f001 f996 	bl	d6fa8 <memset>
                    a.v = 6;
   d5c7c:	2306      	movs	r3, #6
   d5c7e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5c82:	ad01      	add	r5, sp, #4
   d5c84:	f104 0308 	add.w	r3, r4, #8
   d5c88:	3418      	adds	r4, #24
   d5c8a:	6818      	ldr	r0, [r3, #0]
   d5c8c:	6859      	ldr	r1, [r3, #4]
   d5c8e:	462a      	mov	r2, r5
   d5c90:	c203      	stmia	r2!, {r0, r1}
   d5c92:	3308      	adds	r3, #8
   d5c94:	42a3      	cmp	r3, r4
   d5c96:	4615      	mov	r5, r2
   d5c98:	d1f7      	bne.n	d5c8a <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d5c9a:	a901      	add	r1, sp, #4
   d5c9c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d5c9e:	ad07      	add	r5, sp, #28
   d5ca0:	f7ff fc98 	bl	d55d4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5ca4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5ca6:	1d3c      	adds	r4, r7, #4
   d5ca8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5caa:	682b      	ldr	r3, [r5, #0]
   d5cac:	7023      	strb	r3, [r4, #0]
   d5cae:	e7de      	b.n	d5c6e <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5cb0:	9800      	ldr	r0, [sp, #0]
   d5cb2:	f7ff f9ef 	bl	d5094 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5cb6:	4638      	mov	r0, r7
   d5cb8:	b015      	add	sp, #84	; 0x54
   d5cba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d5cc0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5cc0:	4b02      	ldr	r3, [pc, #8]	; (d5ccc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5cc2:	4a03      	ldr	r2, [pc, #12]	; (d5cd0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5cc4:	601a      	str	r2, [r3, #0]
   d5cc6:	2200      	movs	r2, #0
   d5cc8:	605a      	str	r2, [r3, #4]

} // spark
   d5cca:	4770      	bx	lr
   d5ccc:	2003e5b8 	.word	0x2003e5b8
   d5cd0:	000d73c8 	.word	0x000d73c8

000d5cd4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5cd6:	4606      	mov	r6, r0
   d5cd8:	460d      	mov	r5, r1
  size_t n = 0;
   d5cda:	188f      	adds	r7, r1, r2
   d5cdc:	2400      	movs	r4, #0
  while (size--) {
   d5cde:	42bd      	cmp	r5, r7
   d5ce0:	d00c      	beq.n	d5cfc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5ce2:	6833      	ldr	r3, [r6, #0]
   d5ce4:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5ce8:	689b      	ldr	r3, [r3, #8]
   d5cea:	4630      	mov	r0, r6
   d5cec:	4798      	blx	r3
     if (chunk>=0)
   d5cee:	1e03      	subs	r3, r0, #0
   d5cf0:	db01      	blt.n	d5cf6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5cf2:	441c      	add	r4, r3
  while (size--) {
   d5cf4:	e7f3      	b.n	d5cde <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5cf6:	2c00      	cmp	r4, #0
   d5cf8:	bf08      	it	eq
   d5cfa:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d5cfc:	4620      	mov	r0, r4
   d5cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5d00 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d5d00:	b513      	push	{r0, r1, r4, lr}
   d5d02:	4604      	mov	r4, r0
    }
   d5d04:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d5d06:	b159      	cbz	r1, d5d20 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d5d08:	9101      	str	r1, [sp, #4]
   d5d0a:	f001 f98b 	bl	d7024 <strlen>
   d5d0e:	6823      	ldr	r3, [r4, #0]
   d5d10:	9901      	ldr	r1, [sp, #4]
   d5d12:	68db      	ldr	r3, [r3, #12]
   d5d14:	4602      	mov	r2, r0
   d5d16:	4620      	mov	r0, r4
    }
   d5d18:	b002      	add	sp, #8
   d5d1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d5d1e:	4718      	bx	r3
    }
   d5d20:	b002      	add	sp, #8
   d5d22:	bd10      	pop	{r4, pc}

000d5d24 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5d24:	6803      	ldr	r3, [r0, #0]
   d5d26:	689b      	ldr	r3, [r3, #8]
   d5d28:	4718      	bx	r3

000d5d2a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5d2a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5d2c:	210d      	movs	r1, #13
{
   d5d2e:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5d30:	f7ff fff8 	bl	d5d24 <_ZN5Print5printEc>
  n += print('\n');
   d5d34:	210a      	movs	r1, #10
  size_t n = print('\r');
   d5d36:	4604      	mov	r4, r0
  n += print('\n');
   d5d38:	4628      	mov	r0, r5
   d5d3a:	f7ff fff3 	bl	d5d24 <_ZN5Print5printEc>
  return n;
}
   d5d3e:	4420      	add	r0, r4
   d5d40:	bd38      	pop	{r3, r4, r5, pc}

000d5d42 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5d42:	b530      	push	{r4, r5, lr}
   d5d44:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5d46:	2300      	movs	r3, #0
   d5d48:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5d4c:	2a01      	cmp	r2, #1
   d5d4e:	bf98      	it	ls
   d5d50:	220a      	movls	r2, #10
   d5d52:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d5d54:	460d      	mov	r5, r1
   d5d56:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d5d5a:	fb01 5312 	mls	r3, r1, r2, r5
   d5d5e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5d62:	2b09      	cmp	r3, #9
   d5d64:	bf94      	ite	ls
   d5d66:	3330      	addls	r3, #48	; 0x30
   d5d68:	3337      	addhi	r3, #55	; 0x37
   d5d6a:	b2db      	uxtb	r3, r3
  } while(n);
   d5d6c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5d6e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d5d72:	d9ef      	bls.n	d5d54 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d5d74:	4621      	mov	r1, r4
   d5d76:	f7ff ffc3 	bl	d5d00 <_ZN5Print5writeEPKc>
}
   d5d7a:	b00b      	add	sp, #44	; 0x2c
   d5d7c:	bd30      	pop	{r4, r5, pc}

000d5d7e <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d5d7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5d82:	b086      	sub	sp, #24
   d5d84:	af00      	add	r7, sp, #0
   d5d86:	4605      	mov	r5, r0
   d5d88:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d5d8a:	1d38      	adds	r0, r7, #4
   d5d8c:	2114      	movs	r1, #20
{
   d5d8e:	4614      	mov	r4, r2
    va_copy(args2, args);
   d5d90:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d5d92:	f7ff fb3b 	bl	d540c <vsnprintf>

    if (n<bufsize)
   d5d96:	2813      	cmp	r0, #19
   d5d98:	d80e      	bhi.n	d5db8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d5d9a:	1d39      	adds	r1, r7, #4
   d5d9c:	4628      	mov	r0, r5
   d5d9e:	f7ff ffaf 	bl	d5d00 <_ZN5Print5writeEPKc>
   d5da2:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d5da4:	b11e      	cbz	r6, d5dae <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d5da6:	4628      	mov	r0, r5
   d5da8:	f7ff ffbf 	bl	d5d2a <_ZN5Print7printlnEv>
   d5dac:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d5dae:	4620      	mov	r0, r4
   d5db0:	3718      	adds	r7, #24
   d5db2:	46bd      	mov	sp, r7
   d5db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d5db8:	f100 0308 	add.w	r3, r0, #8
   d5dbc:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d5dc0:	46e8      	mov	r8, sp
        char bigger[n+1];
   d5dc2:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d5dc6:	4622      	mov	r2, r4
   d5dc8:	1c41      	adds	r1, r0, #1
   d5dca:	683b      	ldr	r3, [r7, #0]
   d5dcc:	4668      	mov	r0, sp
   d5dce:	f7ff fb1d 	bl	d540c <vsnprintf>
  return write(str);
   d5dd2:	4669      	mov	r1, sp
   d5dd4:	4628      	mov	r0, r5
   d5dd6:	f7ff ff93 	bl	d5d00 <_ZN5Print5writeEPKc>
   d5dda:	4604      	mov	r4, r0
   d5ddc:	46c5      	mov	sp, r8
   d5dde:	e7e1      	b.n	d5da4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d5de0 <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
   d5de0:	b510      	push	{r4, lr}
   d5de2:	4604      	mov	r4, r0
    return LED_RGB_IsOverRidden();
   d5de4:	f7ff fa0e 	bl	d5204 <LED_RGB_IsOverRidden>
    if (override == controlled()) {
   d5de8:	4284      	cmp	r4, r0
   d5dea:	d008      	beq.n	d5dfe <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
   d5dec:	b11c      	cbz	r4, d5df6 <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
   d5dee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Start();
   d5df2:	f7ff b9ef 	b.w	d51d4 <LED_Signaling_Start>
}
   d5df6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Stop();
   d5dfa:	f7ff b9f3 	b.w	d51e4 <LED_Signaling_Stop>
}
   d5dfe:	bd10      	pop	{r4, pc}

000d5e00 <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
   d5e00:	b570      	push	{r4, r5, r6, lr}
   d5e02:	4605      	mov	r5, r0
   d5e04:	460e      	mov	r6, r1
   d5e06:	4614      	mov	r4, r2
    return LED_RGB_IsOverRidden();
   d5e08:	f7ff f9fc 	bl	d5204 <LED_RGB_IsOverRidden>
    if (!controlled()) {
   d5e0c:	b150      	cbz	r0, d5e24 <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
   d5e0e:	ea44 2006 	orr.w	r0, r4, r6, lsl #8
   d5e12:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   d5e16:	f7ff f9d5 	bl	d51c4 <LED_SetSignalingColor>
    LED_On(LED_RGB);
}
   d5e1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LED_On(LED_RGB);
   d5e1e:	20e7      	movs	r0, #231	; 0xe7
   d5e20:	f7ff b9f8 	b.w	d5214 <LED_On>
}
   d5e24:	bd70      	pop	{r4, r5, r6, pc}

000d5e26 <_ZN8RGBClass10brightnessEhb>:

void RGBClass::brightness(uint8_t brightness, bool update)
{
   d5e26:	b510      	push	{r4, lr}
   d5e28:	460c      	mov	r4, r1
    LED_SetBrightness(brightness);
   d5e2a:	f7ff f9e3 	bl	d51f4 <LED_SetBrightness>
    return LED_RGB_IsOverRidden();
   d5e2e:	f7ff f9e9 	bl	d5204 <LED_RGB_IsOverRidden>
    if (controlled() && update) {
   d5e32:	b128      	cbz	r0, d5e40 <_ZN8RGBClass10brightnessEhb+0x1a>
   d5e34:	b124      	cbz	r4, d5e40 <_ZN8RGBClass10brightnessEhb+0x1a>
        LED_On(LED_RGB);
    }
}
   d5e36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_On(LED_RGB);
   d5e3a:	20e7      	movs	r0, #231	; 0xe7
   d5e3c:	f7ff b9ea 	b.w	d5214 <LED_On>
}
   d5e40:	bd10      	pop	{r4, pc}

000d5e42 <_ZN8RGBClass10brightnessEv>:

uint8_t RGBClass::brightness()
{
    return Get_LED_Brightness();
   d5e42:	f7ff b9ef 	b.w	d5224 <Get_LED_Brightness>
	...

000d5e48 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   d5e48:	4b01      	ldr	r3, [pc, #4]	; (d5e50 <_GLOBAL__sub_I_RGB+0x8>)
   d5e4a:	2200      	movs	r2, #0
   d5e4c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d5e4e:	4770      	bx	lr
   d5e50:	2003e5c0 	.word	0x2003e5c0

000d5e54 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d5e54:	b510      	push	{r4, lr}
   d5e56:	4604      	mov	r4, r0
   d5e58:	4608      	mov	r0, r1
{
    _spi = spi;
   d5e5a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d5e5c:	f7ff f92a 	bl	d50b4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5e60:	2300      	movs	r3, #0
   d5e62:	6063      	str	r3, [r4, #4]
}
   d5e64:	4620      	mov	r0, r4
   d5e66:	bd10      	pop	{r4, pc}

000d5e68 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5e68:	b510      	push	{r4, lr}
   d5e6a:	4604      	mov	r4, r0
{
	free(buffer);
   d5e6c:	6800      	ldr	r0, [r0, #0]
   d5e6e:	f7ff fabd 	bl	d53ec <free>
}
   d5e72:	4620      	mov	r0, r4
   d5e74:	bd10      	pop	{r4, pc}

000d5e76 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5e76:	b510      	push	{r4, lr}
   d5e78:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5e7a:	6800      	ldr	r0, [r0, #0]
   d5e7c:	b108      	cbz	r0, d5e82 <_ZN6String10invalidateEv+0xc>
   d5e7e:	f7ff fab5 	bl	d53ec <free>
	buffer = NULL;
   d5e82:	2300      	movs	r3, #0
	capacity = len = 0;
   d5e84:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d5e88:	6023      	str	r3, [r4, #0]
}
   d5e8a:	bd10      	pop	{r4, pc}

000d5e8c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5e8c:	b538      	push	{r3, r4, r5, lr}
   d5e8e:	4604      	mov	r4, r0
   d5e90:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5e92:	6800      	ldr	r0, [r0, #0]
   d5e94:	3101      	adds	r1, #1
   d5e96:	f7ff fab1 	bl	d53fc <realloc>
	if (newbuffer) {
   d5e9a:	b110      	cbz	r0, d5ea2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5e9c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d5ea0:	2001      	movs	r0, #1
	}
	return 0;
}
   d5ea2:	bd38      	pop	{r3, r4, r5, pc}

000d5ea4 <_ZN6String7reserveEj>:
{
   d5ea4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5ea6:	6803      	ldr	r3, [r0, #0]
{
   d5ea8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5eaa:	b123      	cbz	r3, d5eb6 <_ZN6String7reserveEj+0x12>
   d5eac:	6843      	ldr	r3, [r0, #4]
   d5eae:	428b      	cmp	r3, r1
   d5eb0:	d301      	bcc.n	d5eb6 <_ZN6String7reserveEj+0x12>
   d5eb2:	2001      	movs	r0, #1
}
   d5eb4:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d5eb6:	4620      	mov	r0, r4
   d5eb8:	f7ff ffe8 	bl	d5e8c <_ZN6String12changeBufferEj>
   d5ebc:	2800      	cmp	r0, #0
   d5ebe:	d0f9      	beq.n	d5eb4 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d5ec0:	68a3      	ldr	r3, [r4, #8]
   d5ec2:	2b00      	cmp	r3, #0
   d5ec4:	d1f5      	bne.n	d5eb2 <_ZN6String7reserveEj+0xe>
   d5ec6:	6822      	ldr	r2, [r4, #0]
   d5ec8:	7013      	strb	r3, [r2, #0]
   d5eca:	e7f2      	b.n	d5eb2 <_ZN6String7reserveEj+0xe>

000d5ecc <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5ecc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5ece:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d5ed0:	4611      	mov	r1, r2
   d5ed2:	9201      	str	r2, [sp, #4]
{
   d5ed4:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d5ed6:	f7ff ffe5 	bl	d5ea4 <_ZN6String7reserveEj>
   d5eda:	9a01      	ldr	r2, [sp, #4]
   d5edc:	b928      	cbnz	r0, d5eea <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d5ede:	4620      	mov	r0, r4
   d5ee0:	f7ff ffc9 	bl	d5e76 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d5ee4:	4620      	mov	r0, r4
   d5ee6:	b003      	add	sp, #12
   d5ee8:	bd30      	pop	{r4, r5, pc}
	len = length;
   d5eea:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d5eec:	4629      	mov	r1, r5
   d5eee:	6820      	ldr	r0, [r4, #0]
   d5ef0:	f001 f832 	bl	d6f58 <memcpy>
	buffer[len] = 0;
   d5ef4:	6822      	ldr	r2, [r4, #0]
   d5ef6:	68a3      	ldr	r3, [r4, #8]
   d5ef8:	2100      	movs	r1, #0
   d5efa:	54d1      	strb	r1, [r2, r3]
	return *this;
   d5efc:	e7f2      	b.n	d5ee4 <_ZN6String4copyEPKcj+0x18>

000d5efe <_ZN6StringC1EPKc>:
	buffer = NULL;
   d5efe:	2300      	movs	r3, #0
String::String(const char *cstr)
   d5f00:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d5f02:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d5f06:	4604      	mov	r4, r0
	len = 0;
   d5f08:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5f0a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d5f0c:	b141      	cbz	r1, d5f20 <_ZN6StringC1EPKc+0x22>
   d5f0e:	4608      	mov	r0, r1
   d5f10:	9101      	str	r1, [sp, #4]
   d5f12:	f001 f887 	bl	d7024 <strlen>
   d5f16:	9901      	ldr	r1, [sp, #4]
   d5f18:	4602      	mov	r2, r0
   d5f1a:	4620      	mov	r0, r4
   d5f1c:	f7ff ffd6 	bl	d5ecc <_ZN6String4copyEPKcj>
}
   d5f20:	4620      	mov	r0, r4
   d5f22:	b002      	add	sp, #8
   d5f24:	bd10      	pop	{r4, pc}

000d5f26 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d5f26:	b538      	push	{r3, r4, r5, lr}
   d5f28:	4605      	mov	r5, r0
	if (buffer) {
   d5f2a:	6800      	ldr	r0, [r0, #0]
{
   d5f2c:	460c      	mov	r4, r1
	if (buffer) {
   d5f2e:	b168      	cbz	r0, d5f4c <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d5f30:	686a      	ldr	r2, [r5, #4]
   d5f32:	688b      	ldr	r3, [r1, #8]
   d5f34:	429a      	cmp	r2, r3
   d5f36:	d307      	bcc.n	d5f48 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d5f38:	6809      	ldr	r1, [r1, #0]
   d5f3a:	f001 f86b 	bl	d7014 <strcpy>
			len = rhs.len;
   d5f3e:	68a3      	ldr	r3, [r4, #8]
   d5f40:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d5f42:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d5f44:	60a3      	str	r3, [r4, #8]
}
   d5f46:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d5f48:	f7ff fa50 	bl	d53ec <free>
	buffer = rhs.buffer;
   d5f4c:	6823      	ldr	r3, [r4, #0]
   d5f4e:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d5f50:	6863      	ldr	r3, [r4, #4]
   d5f52:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d5f54:	68a3      	ldr	r3, [r4, #8]
   d5f56:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d5f58:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d5f5a:	e9c4 3300 	strd	r3, r3, [r4]
   d5f5e:	e7f1      	b.n	d5f44 <_ZN6String4moveERS_+0x1e>

000d5f60 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d5f60:	4288      	cmp	r0, r1
{
   d5f62:	b510      	push	{r4, lr}
   d5f64:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d5f66:	d005      	beq.n	d5f74 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d5f68:	680b      	ldr	r3, [r1, #0]
   d5f6a:	b12b      	cbz	r3, d5f78 <_ZN6StringaSERKS_+0x18>
   d5f6c:	688a      	ldr	r2, [r1, #8]
   d5f6e:	4619      	mov	r1, r3
   d5f70:	f7ff ffac 	bl	d5ecc <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d5f74:	4620      	mov	r0, r4
   d5f76:	bd10      	pop	{r4, pc}
	else invalidate();
   d5f78:	f7ff ff7d 	bl	d5e76 <_ZN6String10invalidateEv>
   d5f7c:	e7fa      	b.n	d5f74 <_ZN6StringaSERKS_+0x14>

000d5f7e <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d5f7e:	b510      	push	{r4, lr}
	buffer = NULL;
   d5f80:	2300      	movs	r3, #0
String::String(const String &value)
   d5f82:	4604      	mov	r4, r0
	capacity = 0;
   d5f84:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d5f88:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5f8a:	7303      	strb	r3, [r0, #12]
	*this = value;
   d5f8c:	f7ff ffe8 	bl	d5f60 <_ZN6StringaSERKS_>
}
   d5f90:	4620      	mov	r0, r4
   d5f92:	bd10      	pop	{r4, pc}

000d5f94 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d5f94:	4288      	cmp	r0, r1
{
   d5f96:	b510      	push	{r4, lr}
   d5f98:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d5f9a:	d001      	beq.n	d5fa0 <_ZN6StringaSEOS_+0xc>
   d5f9c:	f7ff ffc3 	bl	d5f26 <_ZN6String4moveERS_>
	return *this;
}
   d5fa0:	4620      	mov	r0, r4
   d5fa2:	bd10      	pop	{r4, pc}

000d5fa4 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d5fa4:	b513      	push	{r0, r1, r4, lr}
   d5fa6:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d5fa8:	b159      	cbz	r1, d5fc2 <_ZN6StringaSEPKc+0x1e>
   d5faa:	4608      	mov	r0, r1
   d5fac:	9101      	str	r1, [sp, #4]
   d5fae:	f001 f839 	bl	d7024 <strlen>
   d5fb2:	9901      	ldr	r1, [sp, #4]
   d5fb4:	4602      	mov	r2, r0
   d5fb6:	4620      	mov	r0, r4
   d5fb8:	f7ff ff88 	bl	d5ecc <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d5fbc:	4620      	mov	r0, r4
   d5fbe:	b002      	add	sp, #8
   d5fc0:	bd10      	pop	{r4, pc}
	else invalidate();
   d5fc2:	f7ff ff58 	bl	d5e76 <_ZN6String10invalidateEv>
   d5fc6:	e7f9      	b.n	d5fbc <_ZN6StringaSEPKc+0x18>

000d5fc8 <_ZN6StringC1Ec>:
String::String(char c)
   d5fc8:	b513      	push	{r0, r1, r4, lr}
	buffer = NULL;
   d5fca:	2300      	movs	r3, #0
	buf[0] = c;
   d5fcc:	f88d 1004 	strb.w	r1, [sp, #4]
	capacity = 0;
   d5fd0:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d5fd4:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5fd6:	7303      	strb	r3, [r0, #12]
	*this = buf;
   d5fd8:	a901      	add	r1, sp, #4
String::String(char c)
   d5fda:	4604      	mov	r4, r0
	buf[1] = 0;
   d5fdc:	f88d 3005 	strb.w	r3, [sp, #5]
	*this = buf;
   d5fe0:	f7ff ffe0 	bl	d5fa4 <_ZN6StringaSEPKc>
}
   d5fe4:	4620      	mov	r0, r4
   d5fe6:	b002      	add	sp, #8
   d5fe8:	bd10      	pop	{r4, pc}

000d5fea <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d5fea:	b570      	push	{r4, r5, r6, lr}
   d5fec:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d5fee:	460e      	mov	r6, r1
   d5ff0:	b909      	cbnz	r1, d5ff6 <_ZN6String6concatEPKcj+0xc>
   d5ff2:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d5ff4:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d5ff6:	b16a      	cbz	r2, d6014 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d5ff8:	6884      	ldr	r4, [r0, #8]
   d5ffa:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d5ffc:	4621      	mov	r1, r4
   d5ffe:	f7ff ff51 	bl	d5ea4 <_ZN6String7reserveEj>
   d6002:	2800      	cmp	r0, #0
   d6004:	d0f5      	beq.n	d5ff2 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d6006:	6828      	ldr	r0, [r5, #0]
   d6008:	68ab      	ldr	r3, [r5, #8]
   d600a:	4631      	mov	r1, r6
   d600c:	4418      	add	r0, r3
   d600e:	f001 f801 	bl	d7014 <strcpy>
	len = newlen;
   d6012:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d6014:	2001      	movs	r0, #1
   d6016:	e7ed      	b.n	d5ff4 <_ZN6String6concatEPKcj+0xa>

000d6018 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   d6018:	688a      	ldr	r2, [r1, #8]
   d601a:	6809      	ldr	r1, [r1, #0]
   d601c:	f7ff bfe5 	b.w	d5fea <_ZN6String6concatEPKcj>

000d6020 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   d6020:	b40e      	push	{r1, r2, r3}
   d6022:	b570      	push	{r4, r5, r6, lr}
   d6024:	b087      	sub	sp, #28
   d6026:	ad0b      	add	r5, sp, #44	; 0x2c
   d6028:	4604      	mov	r4, r0
   d602a:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d602e:	9201      	str	r2, [sp, #4]
   d6030:	462b      	mov	r3, r5
   d6032:	2105      	movs	r1, #5
   d6034:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   d6036:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d6038:	f7ff f9e8 	bl	d540c <vsnprintf>
    va_end(marker);

    String result;
   d603c:	490b      	ldr	r1, [pc, #44]	; (d606c <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d603e:	4606      	mov	r6, r0
    String result;
   d6040:	4620      	mov	r0, r4
   d6042:	f7ff ff5c 	bl	d5efe <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
   d6046:	4631      	mov	r1, r6
   d6048:	4620      	mov	r0, r4
   d604a:	f7ff ff2b 	bl	d5ea4 <_ZN6String7reserveEj>
    if (result.buffer) {
   d604e:	6820      	ldr	r0, [r4, #0]
   d6050:	b130      	cbz	r0, d6060 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d6052:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   d6054:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d6056:	462b      	mov	r3, r5
   d6058:	1c71      	adds	r1, r6, #1
   d605a:	f7ff f9d7 	bl	d540c <vsnprintf>
        va_end(marker);
        result.len = n;
   d605e:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   d6060:	4620      	mov	r0, r4
   d6062:	b007      	add	sp, #28
   d6064:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d6068:	b003      	add	sp, #12
   d606a:	4770      	bx	lr
   d606c:	000d7397 	.word	0x000d7397

000d6070 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d6070:	4b05      	ldr	r3, [pc, #20]	; (d6088 <_GLOBAL__sub_I_System+0x18>)
   d6072:	2202      	movs	r2, #2
   d6074:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d6076:	4b05      	ldr	r3, [pc, #20]	; (d608c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   d6078:	4a05      	ldr	r2, [pc, #20]	; (d6090 <_GLOBAL__sub_I_System+0x20>)
   d607a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d607c:	2000      	movs	r0, #0
   d607e:	6018      	str	r0, [r3, #0]
   d6080:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   d6082:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d6084:	f7ff b8f6 	b.w	d5274 <set_system_mode>
   d6088:	2003e5dc 	.word	0x2003e5dc
   d608c:	2003e5d0 	.word	0x2003e5d0
   d6090:	ffff0000 	.word	0xffff0000

000d6094 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d6094:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d6096:	2000      	movs	r0, #0
   d6098:	f7ff f930 	bl	d52fc <spark_sync_time_pending>
   d609c:	b128      	cbz	r0, d60aa <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d609e:	f7ff f925 	bl	d52ec <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d60a2:	f080 0001 	eor.w	r0, r0, #1
   d60a6:	b2c0      	uxtb	r0, r0
    }
   d60a8:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d60aa:	2001      	movs	r0, #1
   d60ac:	e7fc      	b.n	d60a8 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d60ae <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d60ae:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d60b0:	2000      	movs	r0, #0
   d60b2:	f7fe ff5f 	bl	d4f74 <hal_rtc_time_is_valid>
    if (rtcstate)
   d60b6:	4604      	mov	r4, r0
   d60b8:	b9a0      	cbnz	r0, d60e4 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d60ba:	f7ff f8d3 	bl	d5264 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d60be:	2801      	cmp	r0, #1
   d60c0:	d110      	bne.n	d60e4 <_ZN9TimeClass7isValidEv+0x36>
   d60c2:	4620      	mov	r0, r4
   d60c4:	f7ff f8ee 	bl	d52a4 <system_thread_get_state>
   d60c8:	b960      	cbnz	r0, d60e4 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d60ca:	f7ff ffe3 	bl	d6094 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d60ce:	b910      	cbnz	r0, d60d6 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d60d0:	f7ff f904 	bl	d52dc <spark_process>
        while (_while() && !_condition()) {
   d60d4:	e7f9      	b.n	d60ca <_ZN9TimeClass7isValidEv+0x1c>
   d60d6:	f7ff ffdd 	bl	d6094 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d60da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d60de:	2000      	movs	r0, #0
   d60e0:	f7fe bf48 	b.w	d4f74 <hal_rtc_time_is_valid>
}
   d60e4:	4620      	mov	r0, r4
   d60e6:	bd10      	pop	{r4, pc}

000d60e8 <_ZN9TimeClass3nowEv>:
{
   d60e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d60ea:	f7ff ffe0 	bl	d60ae <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d60ee:	2210      	movs	r2, #16
   d60f0:	2100      	movs	r1, #0
   d60f2:	4668      	mov	r0, sp
   d60f4:	f000 ff58 	bl	d6fa8 <memset>
    hal_rtc_get_time(&tv, nullptr);
   d60f8:	2100      	movs	r1, #0
   d60fa:	4668      	mov	r0, sp
   d60fc:	f7fe ff42 	bl	d4f84 <hal_rtc_get_time>
}
   d6100:	9800      	ldr	r0, [sp, #0]
   d6102:	b005      	add	sp, #20
   d6104:	f85d fb04 	ldr.w	pc, [sp], #4

000d6108 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6108:	4b02      	ldr	r3, [pc, #8]	; (d6114 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d610a:	681a      	ldr	r2, [r3, #0]
   d610c:	4b02      	ldr	r3, [pc, #8]	; (d6118 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d610e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d6110:	4770      	bx	lr
   d6112:	bf00      	nop
   d6114:	2003e4b8 	.word	0x2003e4b8
   d6118:	2003e5e0 	.word	0x2003e5e0

000d611c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d611c:	4770      	bx	lr

000d611e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d611e:	7441      	strb	r1, [r0, #17]
}
   d6120:	4770      	bx	lr

000d6122 <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6122:	4770      	bx	lr

000d6124 <_ZN11USARTSerial17availableForWriteEv>:
{
   d6124:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d6126:	7c00      	ldrb	r0, [r0, #16]
   d6128:	f7ff f80c 	bl	d5144 <hal_usart_available_data_for_write>
}
   d612c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6130:	bd08      	pop	{r3, pc}

000d6132 <_ZN11USARTSerial9availableEv>:
{
   d6132:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d6134:	7c00      	ldrb	r0, [r0, #16]
   d6136:	f7fe ffdd 	bl	d50f4 <hal_usart_available>
}
   d613a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d613e:	bd08      	pop	{r3, pc}

000d6140 <_ZN11USARTSerial4peekEv>:
{
   d6140:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d6142:	7c00      	ldrb	r0, [r0, #16]
   d6144:	f7fe ffe6 	bl	d5114 <hal_usart_peek>
}
   d6148:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d614c:	bd08      	pop	{r3, pc}

000d614e <_ZN11USARTSerial4readEv>:
{
   d614e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d6150:	7c00      	ldrb	r0, [r0, #16]
   d6152:	f7fe ffd7 	bl	d5104 <hal_usart_read>
}
   d6156:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d615a:	bd08      	pop	{r3, pc}

000d615c <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   d615c:	7c00      	ldrb	r0, [r0, #16]
   d615e:	f7fe bfe1 	b.w	d5124 <hal_usart_flush>

000d6162 <_ZN11USARTSerial5writeEh>:
{
   d6162:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6164:	7c45      	ldrb	r5, [r0, #17]
{
   d6166:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6168:	b12d      	cbz	r5, d6176 <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   d616a:	7c20      	ldrb	r0, [r4, #16]
}
   d616c:	b003      	add	sp, #12
   d616e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d6172:	f7fe bfb7 	b.w	d50e4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6176:	7c00      	ldrb	r0, [r0, #16]
   d6178:	9101      	str	r1, [sp, #4]
   d617a:	f7fe ffe3 	bl	d5144 <hal_usart_available_data_for_write>
   d617e:	2800      	cmp	r0, #0
   d6180:	9901      	ldr	r1, [sp, #4]
   d6182:	dcf2      	bgt.n	d616a <_ZN11USARTSerial5writeEh+0x8>
}
   d6184:	4628      	mov	r0, r5
   d6186:	b003      	add	sp, #12
   d6188:	bd30      	pop	{r4, r5, pc}

000d618a <_ZN11USARTSerialD0Ev>:
   d618a:	b510      	push	{r4, lr}
   d618c:	2114      	movs	r1, #20
   d618e:	4604      	mov	r4, r0
   d6190:	f000 fa58 	bl	d6644 <_ZdlPvj>
   d6194:	4620      	mov	r0, r4
   d6196:	bd10      	pop	{r4, pc}

000d6198 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d6198:	b510      	push	{r4, lr}
   d619a:	f04f 0c00 	mov.w	ip, #0
   d619e:	4604      	mov	r4, r0
   d61a0:	4608      	mov	r0, r1
   d61a2:	4611      	mov	r1, r2
   d61a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d61a8:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d61ac:	4a04      	ldr	r2, [pc, #16]	; (d61c0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d61ae:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d61b0:	2201      	movs	r2, #1
  _serial = serial;
   d61b2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d61b4:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d61b6:	461a      	mov	r2, r3
   d61b8:	f7fe ff8c 	bl	d50d4 <hal_usart_init>
}
   d61bc:	4620      	mov	r0, r4
   d61be:	bd10      	pop	{r4, pc}
   d61c0:	000d7420 	.word	0x000d7420

000d61c4 <_Z22__fetch_global_Serial1v>:
{
   d61c4:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d61c6:	4c0d      	ldr	r4, [pc, #52]	; (d61fc <_Z22__fetch_global_Serial1v+0x38>)
   d61c8:	7821      	ldrb	r1, [r4, #0]
   d61ca:	f3bf 8f5b 	dmb	ish
   d61ce:	f011 0101 	ands.w	r1, r1, #1
   d61d2:	d110      	bne.n	d61f6 <_Z22__fetch_global_Serial1v+0x32>
   d61d4:	4620      	mov	r0, r4
   d61d6:	9101      	str	r1, [sp, #4]
   d61d8:	f7fd ff65 	bl	d40a6 <__cxa_guard_acquire>
   d61dc:	9901      	ldr	r1, [sp, #4]
   d61de:	b150      	cbz	r0, d61f6 <_Z22__fetch_global_Serial1v+0x32>
   d61e0:	4b07      	ldr	r3, [pc, #28]	; (d6200 <_Z22__fetch_global_Serial1v+0x3c>)
   d61e2:	4a08      	ldr	r2, [pc, #32]	; (d6204 <_Z22__fetch_global_Serial1v+0x40>)
   d61e4:	4808      	ldr	r0, [pc, #32]	; (d6208 <_Z22__fetch_global_Serial1v+0x44>)
   d61e6:	f7ff ffd7 	bl	d6198 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d61ea:	4620      	mov	r0, r4
   d61ec:	f7fd ff60 	bl	d40b0 <__cxa_guard_release>
   d61f0:	4806      	ldr	r0, [pc, #24]	; (d620c <_Z22__fetch_global_Serial1v+0x48>)
   d61f2:	f000 feab 	bl	d6f4c <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d61f6:	4804      	ldr	r0, [pc, #16]	; (d6208 <_Z22__fetch_global_Serial1v+0x44>)
   d61f8:	b002      	add	sp, #8
   d61fa:	bd10      	pop	{r4, pc}
   d61fc:	2003e5e4 	.word	0x2003e5e4
   d6200:	2003e66c 	.word	0x2003e66c
   d6204:	2003e5e8 	.word	0x2003e5e8
   d6208:	2003e6f0 	.word	0x2003e6f0
   d620c:	000d6123 	.word	0x000d6123

000d6210 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6210:	7441      	strb	r1, [r0, #17]
}
   d6212:	4770      	bx	lr

000d6214 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6214:	4770      	bx	lr

000d6216 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6216:	4770      	bx	lr

000d6218 <_ZN9USBSerial4readEv>:
{
   d6218:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d621a:	2100      	movs	r1, #0
   d621c:	7c00      	ldrb	r0, [r0, #16]
   d621e:	f7fe ffb9 	bl	d5194 <HAL_USB_USART_Receive_Data>
}
   d6222:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6226:	bd08      	pop	{r3, pc}

000d6228 <_ZN9USBSerial4peekEv>:
{
   d6228:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d622a:	2101      	movs	r1, #1
   d622c:	7c00      	ldrb	r0, [r0, #16]
   d622e:	f7fe ffb1 	bl	d5194 <HAL_USB_USART_Receive_Data>
}
   d6232:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6236:	bd08      	pop	{r3, pc}

000d6238 <_ZN9USBSerial17availableForWriteEv>:
{
   d6238:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d623a:	7c00      	ldrb	r0, [r0, #16]
   d623c:	f7fe ffa2 	bl	d5184 <HAL_USB_USART_Available_Data_For_Write>
}
   d6240:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6244:	bd08      	pop	{r3, pc}

000d6246 <_ZN9USBSerial9availableEv>:
{
   d6246:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6248:	7c00      	ldrb	r0, [r0, #16]
   d624a:	f7fe ff93 	bl	d5174 <HAL_USB_USART_Available_Data>
}
   d624e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6252:	bd08      	pop	{r3, pc}

000d6254 <_ZN9USBSerial5writeEh>:
{
   d6254:	b513      	push	{r0, r1, r4, lr}
   d6256:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6258:	7c00      	ldrb	r0, [r0, #16]
{
   d625a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d625c:	f7fe ff92 	bl	d5184 <HAL_USB_USART_Available_Data_For_Write>
   d6260:	2800      	cmp	r0, #0
   d6262:	9901      	ldr	r1, [sp, #4]
   d6264:	dc01      	bgt.n	d626a <_ZN9USBSerial5writeEh+0x16>
   d6266:	7c60      	ldrb	r0, [r4, #17]
   d6268:	b120      	cbz	r0, d6274 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d626a:	7c20      	ldrb	r0, [r4, #16]
   d626c:	f7fe ff9a 	bl	d51a4 <HAL_USB_USART_Send_Data>
   d6270:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d6274:	b002      	add	sp, #8
   d6276:	bd10      	pop	{r4, pc}

000d6278 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d6278:	7c00      	ldrb	r0, [r0, #16]
   d627a:	f7fe bf9b 	b.w	d51b4 <HAL_USB_USART_Flush_Data>

000d627e <_ZN9USBSerialD0Ev>:
   d627e:	b510      	push	{r4, lr}
   d6280:	2114      	movs	r1, #20
   d6282:	4604      	mov	r4, r0
   d6284:	f000 f9de 	bl	d6644 <_ZdlPvj>
   d6288:	4620      	mov	r0, r4
   d628a:	bd10      	pop	{r4, pc}

000d628c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d628c:	b510      	push	{r4, lr}
   d628e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6292:	4604      	mov	r4, r0
   d6294:	4608      	mov	r0, r1
   d6296:	2100      	movs	r1, #0
   d6298:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d629c:	4b04      	ldr	r3, [pc, #16]	; (d62b0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d629e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d62a0:	2301      	movs	r3, #1
  _serial = serial;
   d62a2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d62a4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d62a6:	4611      	mov	r1, r2
   d62a8:	f7fe ff54 	bl	d5154 <HAL_USB_USART_Init>
}
   d62ac:	4620      	mov	r0, r4
   d62ae:	bd10      	pop	{r4, pc}
   d62b0:	000d7450 	.word	0x000d7450

000d62b4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d62b4:	7c00      	ldrb	r0, [r0, #16]
   d62b6:	2200      	movs	r2, #0
   d62b8:	f7fe bf54 	b.w	d5164 <HAL_USB_USART_Begin>

000d62bc <_Z19acquireSerialBufferv>:
{
   d62bc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d62be:	2214      	movs	r2, #20
{
   d62c0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d62c2:	2100      	movs	r1, #0
   d62c4:	f000 fe70 	bl	d6fa8 <memset>
}
   d62c8:	4620      	mov	r0, r4
   d62ca:	bd10      	pop	{r4, pc}

000d62cc <_Z16_fetch_usbserialv>:
{
   d62cc:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d62ce:	4c0f      	ldr	r4, [pc, #60]	; (d630c <_Z16_fetch_usbserialv+0x40>)
{
   d62d0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d62d2:	a803      	add	r0, sp, #12
   d62d4:	f7ff fff2 	bl	d62bc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d62d8:	7821      	ldrb	r1, [r4, #0]
   d62da:	f3bf 8f5b 	dmb	ish
   d62de:	f011 0101 	ands.w	r1, r1, #1
   d62e2:	d10f      	bne.n	d6304 <_Z16_fetch_usbserialv+0x38>
   d62e4:	4620      	mov	r0, r4
   d62e6:	9101      	str	r1, [sp, #4]
   d62e8:	f7fd fedd 	bl	d40a6 <__cxa_guard_acquire>
   d62ec:	9901      	ldr	r1, [sp, #4]
   d62ee:	b148      	cbz	r0, d6304 <_Z16_fetch_usbserialv+0x38>
   d62f0:	aa03      	add	r2, sp, #12
   d62f2:	4807      	ldr	r0, [pc, #28]	; (d6310 <_Z16_fetch_usbserialv+0x44>)
   d62f4:	f7ff ffca 	bl	d628c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d62f8:	4620      	mov	r0, r4
   d62fa:	f7fd fed9 	bl	d40b0 <__cxa_guard_release>
   d62fe:	4805      	ldr	r0, [pc, #20]	; (d6314 <_Z16_fetch_usbserialv+0x48>)
   d6300:	f000 fe24 	bl	d6f4c <atexit>
	return _usbserial;
}
   d6304:	4802      	ldr	r0, [pc, #8]	; (d6310 <_Z16_fetch_usbserialv+0x44>)
   d6306:	b008      	add	sp, #32
   d6308:	bd10      	pop	{r4, pc}
   d630a:	bf00      	nop
   d630c:	2003e704 	.word	0x2003e704
   d6310:	2003e708 	.word	0x2003e708
   d6314:	000d6215 	.word	0x000d6215

000d6318 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6318:	2200      	movs	r2, #0
   d631a:	6840      	ldr	r0, [r0, #4]
   d631c:	4611      	mov	r1, r2
   d631e:	f7ff b815 	b.w	d534c <network_ready>

000d6322 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6322:	2200      	movs	r2, #0
   d6324:	6840      	ldr	r0, [r0, #4]
   d6326:	4611      	mov	r1, r2
   d6328:	f7ff b830 	b.w	d538c <network_listening>

000d632c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d632c:	2200      	movs	r2, #0
   d632e:	6840      	ldr	r0, [r0, #4]
   d6330:	4611      	mov	r1, r2
   d6332:	f7ff b83b 	b.w	d53ac <network_get_listen_timeout>

000d6336 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d6336:	6840      	ldr	r0, [r0, #4]
   d6338:	2200      	movs	r2, #0
   d633a:	f7ff b82f 	b.w	d539c <network_set_listen_timeout>

000d633e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d633e:	6840      	ldr	r0, [r0, #4]
   d6340:	2200      	movs	r2, #0
   d6342:	f081 0101 	eor.w	r1, r1, #1
   d6346:	f7ff b819 	b.w	d537c <network_listen>

000d634a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d634a:	2300      	movs	r3, #0
   d634c:	6840      	ldr	r0, [r0, #4]
   d634e:	461a      	mov	r2, r3
   d6350:	4619      	mov	r1, r3
   d6352:	f7ff b80b 	b.w	d536c <network_off>

000d6356 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d6356:	2300      	movs	r3, #0
   d6358:	6840      	ldr	r0, [r0, #4]
   d635a:	461a      	mov	r2, r3
   d635c:	4619      	mov	r1, r3
   d635e:	f7fe bffd 	b.w	d535c <network_on>

000d6362 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d6362:	2200      	movs	r2, #0
   d6364:	6840      	ldr	r0, [r0, #4]
   d6366:	4611      	mov	r1, r2
   d6368:	f7fe bfe0 	b.w	d532c <network_connecting>

000d636c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d636c:	6840      	ldr	r0, [r0, #4]
   d636e:	2200      	movs	r2, #0
   d6370:	2102      	movs	r1, #2
   d6372:	f7fe bfe3 	b.w	d533c <network_disconnect>

000d6376 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d6376:	2300      	movs	r3, #0
   d6378:	6840      	ldr	r0, [r0, #4]
   d637a:	461a      	mov	r2, r3
   d637c:	f7fe bfce 	b.w	d531c <network_connect>

000d6380 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d6380:	4b02      	ldr	r3, [pc, #8]	; (d638c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d6382:	2204      	movs	r2, #4
   d6384:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d6386:	4a02      	ldr	r2, [pc, #8]	; (d6390 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d6388:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d638a:	4770      	bx	lr
   d638c:	2003e71c 	.word	0x2003e71c
   d6390:	000d7480 	.word	0x000d7480

000d6394 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d6394:	4b01      	ldr	r3, [pc, #4]	; (d639c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d6396:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d6398:	4770      	bx	lr
   d639a:	bf00      	nop
   d639c:	2003e4bc 	.word	0x2003e4bc

000d63a0 <serialEventRun>:
{
   d63a0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d63a2:	4b0b      	ldr	r3, [pc, #44]	; (d63d0 <serialEventRun+0x30>)
   d63a4:	b143      	cbz	r3, d63b8 <serialEventRun+0x18>
   d63a6:	f7ff ff91 	bl	d62cc <_Z16_fetch_usbserialv>
   d63aa:	6803      	ldr	r3, [r0, #0]
   d63ac:	691b      	ldr	r3, [r3, #16]
   d63ae:	4798      	blx	r3
   d63b0:	2800      	cmp	r0, #0
   d63b2:	dd01      	ble.n	d63b8 <serialEventRun+0x18>
        serialEvent();
   d63b4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d63b8:	4b06      	ldr	r3, [pc, #24]	; (d63d4 <serialEventRun+0x34>)
   d63ba:	b143      	cbz	r3, d63ce <serialEventRun+0x2e>
   d63bc:	f7ff ff02 	bl	d61c4 <_Z22__fetch_global_Serial1v>
   d63c0:	6803      	ldr	r3, [r0, #0]
   d63c2:	691b      	ldr	r3, [r3, #16]
   d63c4:	4798      	blx	r3
   d63c6:	2800      	cmp	r0, #0
   d63c8:	dd01      	ble.n	d63ce <serialEventRun+0x2e>
        serialEvent1();
   d63ca:	f3af 8000 	nop.w
}
   d63ce:	bd08      	pop	{r3, pc}
	...

000d63d8 <_post_loop>:
{
   d63d8:	b508      	push	{r3, lr}
	serialEventRun();
   d63da:	f7ff ffe1 	bl	d63a0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d63de:	f7fe fdc1 	bl	d4f64 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d63e2:	4b01      	ldr	r3, [pc, #4]	; (d63e8 <_post_loop+0x10>)
   d63e4:	6018      	str	r0, [r3, #0]
}
   d63e6:	bd08      	pop	{r3, pc}
   d63e8:	2003e738 	.word	0x2003e738

000d63ec <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d63ec:	4805      	ldr	r0, [pc, #20]	; (d6404 <_Z33system_initialize_user_backup_ramv+0x18>)
   d63ee:	4a06      	ldr	r2, [pc, #24]	; (d6408 <_Z33system_initialize_user_backup_ramv+0x1c>)
   d63f0:	4906      	ldr	r1, [pc, #24]	; (d640c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   d63f2:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d63f4:	1a12      	subs	r2, r2, r0
   d63f6:	f000 fdaf 	bl	d6f58 <memcpy>
    __backup_sram_signature = signature;
   d63fa:	4b05      	ldr	r3, [pc, #20]	; (d6410 <_Z33system_initialize_user_backup_ramv+0x24>)
   d63fc:	4a05      	ldr	r2, [pc, #20]	; (d6414 <_Z33system_initialize_user_backup_ramv+0x28>)
   d63fe:	601a      	str	r2, [r3, #0]
}
   d6400:	bd08      	pop	{r3, pc}
   d6402:	bf00      	nop
   d6404:	2003f400 	.word	0x2003f400
   d6408:	2003f404 	.word	0x2003f404
   d640c:	000d75e0 	.word	0x000d75e0
   d6410:	2003f400 	.word	0x2003f400
   d6414:	9a271c1e 	.word	0x9a271c1e

000d6418 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6418:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d641a:	2300      	movs	r3, #0
   d641c:	9300      	str	r3, [sp, #0]
   d641e:	461a      	mov	r2, r3
   d6420:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6424:	f7fe ff50 	bl	d52c8 <system_ctrl_set_result>
}
   d6428:	b003      	add	sp, #12
   d642a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6430 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d6430:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6432:	8843      	ldrh	r3, [r0, #2]
   d6434:	2b0a      	cmp	r3, #10
   d6436:	d008      	beq.n	d644a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6438:	2b50      	cmp	r3, #80	; 0x50
   d643a:	d10b      	bne.n	d6454 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d643c:	4b09      	ldr	r3, [pc, #36]	; (d6464 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d643e:	681b      	ldr	r3, [r3, #0]
   d6440:	b14b      	cbz	r3, d6456 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d6442:	b003      	add	sp, #12
   d6444:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d6448:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d644a:	f7ff ffe5 	bl	d6418 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d644e:	b003      	add	sp, #12
   d6450:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6454:	2300      	movs	r3, #0
   d6456:	9300      	str	r3, [sp, #0]
   d6458:	461a      	mov	r2, r3
   d645a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d645e:	f7fe ff33 	bl	d52c8 <system_ctrl_set_result>
}
   d6462:	e7f4      	b.n	d644e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d6464:	2003e728 	.word	0x2003e728

000d6468 <module_user_init_hook>:
{
   d6468:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d646a:	4812      	ldr	r0, [pc, #72]	; (d64b4 <module_user_init_hook+0x4c>)
   d646c:	2100      	movs	r1, #0
   d646e:	f7fe ffd5 	bl	d541c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   d6472:	4b11      	ldr	r3, [pc, #68]	; (d64b8 <module_user_init_hook+0x50>)
   d6474:	681a      	ldr	r2, [r3, #0]
   d6476:	4b11      	ldr	r3, [pc, #68]	; (d64bc <module_user_init_hook+0x54>)
   d6478:	429a      	cmp	r2, r3
   d647a:	4b11      	ldr	r3, [pc, #68]	; (d64c0 <module_user_init_hook+0x58>)
   d647c:	bf0c      	ite	eq
   d647e:	2201      	moveq	r2, #1
   d6480:	2200      	movne	r2, #0
   d6482:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d6484:	d001      	beq.n	d648a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   d6486:	f7ff ffb1 	bl	d63ec <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d648a:	f7fe fd5b 	bl	d4f44 <HAL_RNG_GetRandomNumber>
   d648e:	4604      	mov	r4, r0
    srand(seed);
   d6490:	f000 fd92 	bl	d6fb8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6494:	4b0b      	ldr	r3, [pc, #44]	; (d64c4 <module_user_init_hook+0x5c>)
   d6496:	b113      	cbz	r3, d649e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   d6498:	4620      	mov	r0, r4
   d649a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d649e:	2100      	movs	r1, #0
   d64a0:	4808      	ldr	r0, [pc, #32]	; (d64c4 <module_user_init_hook+0x5c>)
   d64a2:	f7fe ff33 	bl	d530c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d64a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d64aa:	4807      	ldr	r0, [pc, #28]	; (d64c8 <module_user_init_hook+0x60>)
   d64ac:	2100      	movs	r1, #0
   d64ae:	f7fe bf01 	b.w	d52b4 <system_ctrl_set_app_request_handler>
   d64b2:	bf00      	nop
   d64b4:	000d6395 	.word	0x000d6395
   d64b8:	2003f400 	.word	0x2003f400
   d64bc:	9a271c1e 	.word	0x9a271c1e
   d64c0:	2003e724 	.word	0x2003e724
   d64c4:	00000000 	.word	0x00000000
   d64c8:	000d6431 	.word	0x000d6431

000d64cc <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d64cc:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d64ce:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d64d0:	d902      	bls.n	d64d8 <pinAvailable+0xc>
    return false;
   d64d2:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d64d4:	b002      	add	sp, #8
   d64d6:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d64d8:	f1a0 030b 	sub.w	r3, r0, #11
   d64dc:	2b02      	cmp	r3, #2
   d64de:	d81a      	bhi.n	d6516 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d64e0:	4c17      	ldr	r4, [pc, #92]	; (d6540 <pinAvailable+0x74>)
   d64e2:	7821      	ldrb	r1, [r4, #0]
   d64e4:	f3bf 8f5b 	dmb	ish
   d64e8:	f011 0101 	ands.w	r1, r1, #1
   d64ec:	d10b      	bne.n	d6506 <pinAvailable+0x3a>
   d64ee:	4620      	mov	r0, r4
   d64f0:	9101      	str	r1, [sp, #4]
   d64f2:	f7fd fdd8 	bl	d40a6 <__cxa_guard_acquire>
   d64f6:	9901      	ldr	r1, [sp, #4]
   d64f8:	b128      	cbz	r0, d6506 <pinAvailable+0x3a>
   d64fa:	4812      	ldr	r0, [pc, #72]	; (d6544 <pinAvailable+0x78>)
   d64fc:	f7ff fcaa 	bl	d5e54 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d6500:	4620      	mov	r0, r4
   d6502:	f7fd fdd5 	bl	d40b0 <__cxa_guard_release>
   d6506:	4b0f      	ldr	r3, [pc, #60]	; (d6544 <pinAvailable+0x78>)
   d6508:	7818      	ldrb	r0, [r3, #0]
   d650a:	f7fe fddb 	bl	d50c4 <hal_spi_is_enabled>
   d650e:	2800      	cmp	r0, #0
   d6510:	d1df      	bne.n	d64d2 <pinAvailable+0x6>
  return true; // 'pin' is available
   d6512:	2001      	movs	r0, #1
   d6514:	e7de      	b.n	d64d4 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d6516:	2801      	cmp	r0, #1
   d6518:	d809      	bhi.n	d652e <pinAvailable+0x62>
   d651a:	f000 f86f 	bl	d65fc <_Z19__fetch_global_Wirev>
   d651e:	2100      	movs	r1, #0
   d6520:	7c00      	ldrb	r0, [r0, #16]
   d6522:	f7fe fd9f 	bl	d5064 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d6526:	f080 0001 	eor.w	r0, r0, #1
   d652a:	b2c0      	uxtb	r0, r0
   d652c:	e7d2      	b.n	d64d4 <pinAvailable+0x8>
   d652e:	3809      	subs	r0, #9
   d6530:	2801      	cmp	r0, #1
   d6532:	d8ee      	bhi.n	d6512 <pinAvailable+0x46>
   d6534:	f7ff fe46 	bl	d61c4 <_Z22__fetch_global_Serial1v>
   d6538:	7c00      	ldrb	r0, [r0, #16]
   d653a:	f7fe fdfb 	bl	d5134 <hal_usart_is_enabled>
   d653e:	e7f2      	b.n	d6526 <pinAvailable+0x5a>
   d6540:	2003e72c 	.word	0x2003e72c
   d6544:	2003e730 	.word	0x2003e730

000d6548 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6548:	2823      	cmp	r0, #35	; 0x23
{
   d654a:	b538      	push	{r3, r4, r5, lr}
   d654c:	4604      	mov	r4, r0
   d654e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6550:	d80a      	bhi.n	d6568 <pinMode+0x20>
   d6552:	29ff      	cmp	r1, #255	; 0xff
   d6554:	d008      	beq.n	d6568 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d6556:	f7ff ffb9 	bl	d64cc <pinAvailable>
   d655a:	b128      	cbz	r0, d6568 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d655c:	4629      	mov	r1, r5
   d655e:	4620      	mov	r0, r4
}
   d6560:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d6564:	f7fe bd26 	b.w	d4fb4 <HAL_Pin_Mode>
}
   d6568:	bd38      	pop	{r3, r4, r5, pc}

000d656a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d656a:	b538      	push	{r3, r4, r5, lr}
   d656c:	4604      	mov	r4, r0
   d656e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6570:	f7fe fd28 	bl	d4fc4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6574:	28ff      	cmp	r0, #255	; 0xff
   d6576:	d010      	beq.n	d659a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d6578:	2806      	cmp	r0, #6
   d657a:	d804      	bhi.n	d6586 <digitalWrite+0x1c>
   d657c:	234d      	movs	r3, #77	; 0x4d
   d657e:	fa23 f000 	lsr.w	r0, r3, r0
   d6582:	07c3      	lsls	r3, r0, #31
   d6584:	d409      	bmi.n	d659a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6586:	4620      	mov	r0, r4
   d6588:	f7ff ffa0 	bl	d64cc <pinAvailable>
   d658c:	b128      	cbz	r0, d659a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d658e:	4629      	mov	r1, r5
   d6590:	4620      	mov	r0, r4
}
   d6592:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d6596:	f7fe bd1d 	b.w	d4fd4 <HAL_GPIO_Write>
}
   d659a:	bd38      	pop	{r3, r4, r5, pc}

000d659c <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d659c:	280d      	cmp	r0, #13
{
   d659e:	b510      	push	{r4, lr}
   d65a0:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d65a2:	bf9c      	itt	ls
   d65a4:	340e      	addls	r4, #14
   d65a6:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d65a8:	4620      	mov	r0, r4
   d65aa:	f7ff ff8f 	bl	d64cc <pinAvailable>
   d65ae:	b150      	cbz	r0, d65c6 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d65b0:	2103      	movs	r1, #3
   d65b2:	4620      	mov	r0, r4
   d65b4:	f7fe fcf6 	bl	d4fa4 <HAL_Validate_Pin_Function>
   d65b8:	2803      	cmp	r0, #3
   d65ba:	d104      	bne.n	d65c6 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d65bc:	4620      	mov	r0, r4
}
   d65be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d65c2:	f7fe bd1f 	b.w	d5004 <hal_adc_read>
}
   d65c6:	2000      	movs	r0, #0
   d65c8:	bd10      	pop	{r4, pc}

000d65ca <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d65ca:	4770      	bx	lr

000d65cc <_Z17acquireWireBufferv>:
{
   d65cc:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d65ce:	2300      	movs	r3, #0
   d65d0:	2520      	movs	r5, #32
   d65d2:	8043      	strh	r3, [r0, #2]
   d65d4:	2314      	movs	r3, #20
{
   d65d6:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d65d8:	8003      	strh	r3, [r0, #0]
   d65da:	6085      	str	r5, [r0, #8]
   d65dc:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d65de:	4906      	ldr	r1, [pc, #24]	; (d65f8 <_Z17acquireWireBufferv+0x2c>)
   d65e0:	4628      	mov	r0, r5
   d65e2:	f000 f833 	bl	d664c <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d65e6:	4904      	ldr	r1, [pc, #16]	; (d65f8 <_Z17acquireWireBufferv+0x2c>)
	};
   d65e8:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d65ea:	4628      	mov	r0, r5
   d65ec:	f000 f82e 	bl	d664c <_ZnajRKSt9nothrow_t>
	};
   d65f0:	60e0      	str	r0, [r4, #12]
}
   d65f2:	4620      	mov	r0, r4
   d65f4:	bd38      	pop	{r3, r4, r5, pc}
   d65f6:	bf00      	nop
   d65f8:	000d74b4 	.word	0x000d74b4

000d65fc <_Z19__fetch_global_Wirev>:
{
   d65fc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d65fe:	4d0e      	ldr	r5, [pc, #56]	; (d6638 <_Z19__fetch_global_Wirev+0x3c>)
   d6600:	7829      	ldrb	r1, [r5, #0]
   d6602:	f3bf 8f5b 	dmb	ish
   d6606:	f011 0401 	ands.w	r4, r1, #1
{
   d660a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d660c:	d111      	bne.n	d6632 <_Z19__fetch_global_Wirev+0x36>
   d660e:	4628      	mov	r0, r5
   d6610:	f7fd fd49 	bl	d40a6 <__cxa_guard_acquire>
   d6614:	b168      	cbz	r0, d6632 <_Z19__fetch_global_Wirev+0x36>
   d6616:	a801      	add	r0, sp, #4
   d6618:	f7ff ffd8 	bl	d65cc <_Z17acquireWireBufferv>
   d661c:	aa01      	add	r2, sp, #4
   d661e:	4621      	mov	r1, r4
   d6620:	4806      	ldr	r0, [pc, #24]	; (d663c <_Z19__fetch_global_Wirev+0x40>)
   d6622:	f7fe ff79 	bl	d5518 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d6626:	4628      	mov	r0, r5
   d6628:	f7fd fd42 	bl	d40b0 <__cxa_guard_release>
   d662c:	4804      	ldr	r0, [pc, #16]	; (d6640 <_Z19__fetch_global_Wirev+0x44>)
   d662e:	f000 fc8d 	bl	d6f4c <atexit>
	return wire;
}
   d6632:	4802      	ldr	r0, [pc, #8]	; (d663c <_Z19__fetch_global_Wirev+0x40>)
   d6634:	b007      	add	sp, #28
   d6636:	bd30      	pop	{r4, r5, pc}
   d6638:	2003e73c 	.word	0x2003e73c
   d663c:	2003e740 	.word	0x2003e740
   d6640:	000d65cb 	.word	0x000d65cb

000d6644 <_ZdlPvj>:
   d6644:	f7fd bd2b 	b.w	d409e <_ZdlPv>

000d6648 <_ZnwjRKSt9nothrow_t>:
   d6648:	f7fd bd25 	b.w	d4096 <_Znwj>

000d664c <_ZnajRKSt9nothrow_t>:
   d664c:	f7fd bd25 	b.w	d409a <_Znaj>

000d6650 <__aeabi_drsub>:
   d6650:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d6654:	e002      	b.n	d665c <__adddf3>
   d6656:	bf00      	nop

000d6658 <__aeabi_dsub>:
   d6658:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d665c <__adddf3>:
   d665c:	b530      	push	{r4, r5, lr}
   d665e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d6662:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d6666:	ea94 0f05 	teq	r4, r5
   d666a:	bf08      	it	eq
   d666c:	ea90 0f02 	teqeq	r0, r2
   d6670:	bf1f      	itttt	ne
   d6672:	ea54 0c00 	orrsne.w	ip, r4, r0
   d6676:	ea55 0c02 	orrsne.w	ip, r5, r2
   d667a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d667e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6682:	f000 80e2 	beq.w	d684a <__adddf3+0x1ee>
   d6686:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d668a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d668e:	bfb8      	it	lt
   d6690:	426d      	neglt	r5, r5
   d6692:	dd0c      	ble.n	d66ae <__adddf3+0x52>
   d6694:	442c      	add	r4, r5
   d6696:	ea80 0202 	eor.w	r2, r0, r2
   d669a:	ea81 0303 	eor.w	r3, r1, r3
   d669e:	ea82 0000 	eor.w	r0, r2, r0
   d66a2:	ea83 0101 	eor.w	r1, r3, r1
   d66a6:	ea80 0202 	eor.w	r2, r0, r2
   d66aa:	ea81 0303 	eor.w	r3, r1, r3
   d66ae:	2d36      	cmp	r5, #54	; 0x36
   d66b0:	bf88      	it	hi
   d66b2:	bd30      	pophi	{r4, r5, pc}
   d66b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d66b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d66bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d66c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d66c4:	d002      	beq.n	d66cc <__adddf3+0x70>
   d66c6:	4240      	negs	r0, r0
   d66c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d66cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d66d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d66d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d66d8:	d002      	beq.n	d66e0 <__adddf3+0x84>
   d66da:	4252      	negs	r2, r2
   d66dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d66e0:	ea94 0f05 	teq	r4, r5
   d66e4:	f000 80a7 	beq.w	d6836 <__adddf3+0x1da>
   d66e8:	f1a4 0401 	sub.w	r4, r4, #1
   d66ec:	f1d5 0e20 	rsbs	lr, r5, #32
   d66f0:	db0d      	blt.n	d670e <__adddf3+0xb2>
   d66f2:	fa02 fc0e 	lsl.w	ip, r2, lr
   d66f6:	fa22 f205 	lsr.w	r2, r2, r5
   d66fa:	1880      	adds	r0, r0, r2
   d66fc:	f141 0100 	adc.w	r1, r1, #0
   d6700:	fa03 f20e 	lsl.w	r2, r3, lr
   d6704:	1880      	adds	r0, r0, r2
   d6706:	fa43 f305 	asr.w	r3, r3, r5
   d670a:	4159      	adcs	r1, r3
   d670c:	e00e      	b.n	d672c <__adddf3+0xd0>
   d670e:	f1a5 0520 	sub.w	r5, r5, #32
   d6712:	f10e 0e20 	add.w	lr, lr, #32
   d6716:	2a01      	cmp	r2, #1
   d6718:	fa03 fc0e 	lsl.w	ip, r3, lr
   d671c:	bf28      	it	cs
   d671e:	f04c 0c02 	orrcs.w	ip, ip, #2
   d6722:	fa43 f305 	asr.w	r3, r3, r5
   d6726:	18c0      	adds	r0, r0, r3
   d6728:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d672c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6730:	d507      	bpl.n	d6742 <__adddf3+0xe6>
   d6732:	f04f 0e00 	mov.w	lr, #0
   d6736:	f1dc 0c00 	rsbs	ip, ip, #0
   d673a:	eb7e 0000 	sbcs.w	r0, lr, r0
   d673e:	eb6e 0101 	sbc.w	r1, lr, r1
   d6742:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d6746:	d31b      	bcc.n	d6780 <__adddf3+0x124>
   d6748:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d674c:	d30c      	bcc.n	d6768 <__adddf3+0x10c>
   d674e:	0849      	lsrs	r1, r1, #1
   d6750:	ea5f 0030 	movs.w	r0, r0, rrx
   d6754:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d6758:	f104 0401 	add.w	r4, r4, #1
   d675c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d6760:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d6764:	f080 809a 	bcs.w	d689c <__adddf3+0x240>
   d6768:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d676c:	bf08      	it	eq
   d676e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6772:	f150 0000 	adcs.w	r0, r0, #0
   d6776:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d677a:	ea41 0105 	orr.w	r1, r1, r5
   d677e:	bd30      	pop	{r4, r5, pc}
   d6780:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d6784:	4140      	adcs	r0, r0
   d6786:	eb41 0101 	adc.w	r1, r1, r1
   d678a:	3c01      	subs	r4, #1
   d678c:	bf28      	it	cs
   d678e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d6792:	d2e9      	bcs.n	d6768 <__adddf3+0x10c>
   d6794:	f091 0f00 	teq	r1, #0
   d6798:	bf04      	itt	eq
   d679a:	4601      	moveq	r1, r0
   d679c:	2000      	moveq	r0, #0
   d679e:	fab1 f381 	clz	r3, r1
   d67a2:	bf08      	it	eq
   d67a4:	3320      	addeq	r3, #32
   d67a6:	f1a3 030b 	sub.w	r3, r3, #11
   d67aa:	f1b3 0220 	subs.w	r2, r3, #32
   d67ae:	da0c      	bge.n	d67ca <__adddf3+0x16e>
   d67b0:	320c      	adds	r2, #12
   d67b2:	dd08      	ble.n	d67c6 <__adddf3+0x16a>
   d67b4:	f102 0c14 	add.w	ip, r2, #20
   d67b8:	f1c2 020c 	rsb	r2, r2, #12
   d67bc:	fa01 f00c 	lsl.w	r0, r1, ip
   d67c0:	fa21 f102 	lsr.w	r1, r1, r2
   d67c4:	e00c      	b.n	d67e0 <__adddf3+0x184>
   d67c6:	f102 0214 	add.w	r2, r2, #20
   d67ca:	bfd8      	it	le
   d67cc:	f1c2 0c20 	rsble	ip, r2, #32
   d67d0:	fa01 f102 	lsl.w	r1, r1, r2
   d67d4:	fa20 fc0c 	lsr.w	ip, r0, ip
   d67d8:	bfdc      	itt	le
   d67da:	ea41 010c 	orrle.w	r1, r1, ip
   d67de:	4090      	lslle	r0, r2
   d67e0:	1ae4      	subs	r4, r4, r3
   d67e2:	bfa2      	ittt	ge
   d67e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d67e8:	4329      	orrge	r1, r5
   d67ea:	bd30      	popge	{r4, r5, pc}
   d67ec:	ea6f 0404 	mvn.w	r4, r4
   d67f0:	3c1f      	subs	r4, #31
   d67f2:	da1c      	bge.n	d682e <__adddf3+0x1d2>
   d67f4:	340c      	adds	r4, #12
   d67f6:	dc0e      	bgt.n	d6816 <__adddf3+0x1ba>
   d67f8:	f104 0414 	add.w	r4, r4, #20
   d67fc:	f1c4 0220 	rsb	r2, r4, #32
   d6800:	fa20 f004 	lsr.w	r0, r0, r4
   d6804:	fa01 f302 	lsl.w	r3, r1, r2
   d6808:	ea40 0003 	orr.w	r0, r0, r3
   d680c:	fa21 f304 	lsr.w	r3, r1, r4
   d6810:	ea45 0103 	orr.w	r1, r5, r3
   d6814:	bd30      	pop	{r4, r5, pc}
   d6816:	f1c4 040c 	rsb	r4, r4, #12
   d681a:	f1c4 0220 	rsb	r2, r4, #32
   d681e:	fa20 f002 	lsr.w	r0, r0, r2
   d6822:	fa01 f304 	lsl.w	r3, r1, r4
   d6826:	ea40 0003 	orr.w	r0, r0, r3
   d682a:	4629      	mov	r1, r5
   d682c:	bd30      	pop	{r4, r5, pc}
   d682e:	fa21 f004 	lsr.w	r0, r1, r4
   d6832:	4629      	mov	r1, r5
   d6834:	bd30      	pop	{r4, r5, pc}
   d6836:	f094 0f00 	teq	r4, #0
   d683a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d683e:	bf06      	itte	eq
   d6840:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d6844:	3401      	addeq	r4, #1
   d6846:	3d01      	subne	r5, #1
   d6848:	e74e      	b.n	d66e8 <__adddf3+0x8c>
   d684a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d684e:	bf18      	it	ne
   d6850:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6854:	d029      	beq.n	d68aa <__adddf3+0x24e>
   d6856:	ea94 0f05 	teq	r4, r5
   d685a:	bf08      	it	eq
   d685c:	ea90 0f02 	teqeq	r0, r2
   d6860:	d005      	beq.n	d686e <__adddf3+0x212>
   d6862:	ea54 0c00 	orrs.w	ip, r4, r0
   d6866:	bf04      	itt	eq
   d6868:	4619      	moveq	r1, r3
   d686a:	4610      	moveq	r0, r2
   d686c:	bd30      	pop	{r4, r5, pc}
   d686e:	ea91 0f03 	teq	r1, r3
   d6872:	bf1e      	ittt	ne
   d6874:	2100      	movne	r1, #0
   d6876:	2000      	movne	r0, #0
   d6878:	bd30      	popne	{r4, r5, pc}
   d687a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d687e:	d105      	bne.n	d688c <__adddf3+0x230>
   d6880:	0040      	lsls	r0, r0, #1
   d6882:	4149      	adcs	r1, r1
   d6884:	bf28      	it	cs
   d6886:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d688a:	bd30      	pop	{r4, r5, pc}
   d688c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6890:	bf3c      	itt	cc
   d6892:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d6896:	bd30      	popcc	{r4, r5, pc}
   d6898:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d689c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d68a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d68a4:	f04f 0000 	mov.w	r0, #0
   d68a8:	bd30      	pop	{r4, r5, pc}
   d68aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d68ae:	bf1a      	itte	ne
   d68b0:	4619      	movne	r1, r3
   d68b2:	4610      	movne	r0, r2
   d68b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d68b8:	bf1c      	itt	ne
   d68ba:	460b      	movne	r3, r1
   d68bc:	4602      	movne	r2, r0
   d68be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d68c2:	bf06      	itte	eq
   d68c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d68c8:	ea91 0f03 	teqeq	r1, r3
   d68cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d68d0:	bd30      	pop	{r4, r5, pc}
   d68d2:	bf00      	nop

000d68d4 <__aeabi_ui2d>:
   d68d4:	f090 0f00 	teq	r0, #0
   d68d8:	bf04      	itt	eq
   d68da:	2100      	moveq	r1, #0
   d68dc:	4770      	bxeq	lr
   d68de:	b530      	push	{r4, r5, lr}
   d68e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d68e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d68e8:	f04f 0500 	mov.w	r5, #0
   d68ec:	f04f 0100 	mov.w	r1, #0
   d68f0:	e750      	b.n	d6794 <__adddf3+0x138>
   d68f2:	bf00      	nop

000d68f4 <__aeabi_i2d>:
   d68f4:	f090 0f00 	teq	r0, #0
   d68f8:	bf04      	itt	eq
   d68fa:	2100      	moveq	r1, #0
   d68fc:	4770      	bxeq	lr
   d68fe:	b530      	push	{r4, r5, lr}
   d6900:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6904:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6908:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d690c:	bf48      	it	mi
   d690e:	4240      	negmi	r0, r0
   d6910:	f04f 0100 	mov.w	r1, #0
   d6914:	e73e      	b.n	d6794 <__adddf3+0x138>
   d6916:	bf00      	nop

000d6918 <__aeabi_f2d>:
   d6918:	0042      	lsls	r2, r0, #1
   d691a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d691e:	ea4f 0131 	mov.w	r1, r1, rrx
   d6922:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d6926:	bf1f      	itttt	ne
   d6928:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d692c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6930:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6934:	4770      	bxne	lr
   d6936:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d693a:	bf08      	it	eq
   d693c:	4770      	bxeq	lr
   d693e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d6942:	bf04      	itt	eq
   d6944:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d6948:	4770      	bxeq	lr
   d694a:	b530      	push	{r4, r5, lr}
   d694c:	f44f 7460 	mov.w	r4, #896	; 0x380
   d6950:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6954:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6958:	e71c      	b.n	d6794 <__adddf3+0x138>
   d695a:	bf00      	nop

000d695c <__aeabi_ul2d>:
   d695c:	ea50 0201 	orrs.w	r2, r0, r1
   d6960:	bf08      	it	eq
   d6962:	4770      	bxeq	lr
   d6964:	b530      	push	{r4, r5, lr}
   d6966:	f04f 0500 	mov.w	r5, #0
   d696a:	e00a      	b.n	d6982 <__aeabi_l2d+0x16>

000d696c <__aeabi_l2d>:
   d696c:	ea50 0201 	orrs.w	r2, r0, r1
   d6970:	bf08      	it	eq
   d6972:	4770      	bxeq	lr
   d6974:	b530      	push	{r4, r5, lr}
   d6976:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d697a:	d502      	bpl.n	d6982 <__aeabi_l2d+0x16>
   d697c:	4240      	negs	r0, r0
   d697e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6982:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6986:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d698a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d698e:	f43f aed8 	beq.w	d6742 <__adddf3+0xe6>
   d6992:	f04f 0203 	mov.w	r2, #3
   d6996:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d699a:	bf18      	it	ne
   d699c:	3203      	addne	r2, #3
   d699e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d69a2:	bf18      	it	ne
   d69a4:	3203      	addne	r2, #3
   d69a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d69aa:	f1c2 0320 	rsb	r3, r2, #32
   d69ae:	fa00 fc03 	lsl.w	ip, r0, r3
   d69b2:	fa20 f002 	lsr.w	r0, r0, r2
   d69b6:	fa01 fe03 	lsl.w	lr, r1, r3
   d69ba:	ea40 000e 	orr.w	r0, r0, lr
   d69be:	fa21 f102 	lsr.w	r1, r1, r2
   d69c2:	4414      	add	r4, r2
   d69c4:	e6bd      	b.n	d6742 <__adddf3+0xe6>
   d69c6:	bf00      	nop

000d69c8 <__aeabi_dmul>:
   d69c8:	b570      	push	{r4, r5, r6, lr}
   d69ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d69ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d69d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d69d6:	bf1d      	ittte	ne
   d69d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d69dc:	ea94 0f0c 	teqne	r4, ip
   d69e0:	ea95 0f0c 	teqne	r5, ip
   d69e4:	f000 f8de 	bleq	d6ba4 <__aeabi_dmul+0x1dc>
   d69e8:	442c      	add	r4, r5
   d69ea:	ea81 0603 	eor.w	r6, r1, r3
   d69ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d69f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d69f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d69fa:	bf18      	it	ne
   d69fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6a00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6a04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6a08:	d038      	beq.n	d6a7c <__aeabi_dmul+0xb4>
   d6a0a:	fba0 ce02 	umull	ip, lr, r0, r2
   d6a0e:	f04f 0500 	mov.w	r5, #0
   d6a12:	fbe1 e502 	umlal	lr, r5, r1, r2
   d6a16:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d6a1a:	fbe0 e503 	umlal	lr, r5, r0, r3
   d6a1e:	f04f 0600 	mov.w	r6, #0
   d6a22:	fbe1 5603 	umlal	r5, r6, r1, r3
   d6a26:	f09c 0f00 	teq	ip, #0
   d6a2a:	bf18      	it	ne
   d6a2c:	f04e 0e01 	orrne.w	lr, lr, #1
   d6a30:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d6a34:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6a38:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6a3c:	d204      	bcs.n	d6a48 <__aeabi_dmul+0x80>
   d6a3e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d6a42:	416d      	adcs	r5, r5
   d6a44:	eb46 0606 	adc.w	r6, r6, r6
   d6a48:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d6a4c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d6a50:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6a54:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6a58:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6a5c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6a60:	bf88      	it	hi
   d6a62:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6a66:	d81e      	bhi.n	d6aa6 <__aeabi_dmul+0xde>
   d6a68:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d6a6c:	bf08      	it	eq
   d6a6e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d6a72:	f150 0000 	adcs.w	r0, r0, #0
   d6a76:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6a7a:	bd70      	pop	{r4, r5, r6, pc}
   d6a7c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d6a80:	ea46 0101 	orr.w	r1, r6, r1
   d6a84:	ea40 0002 	orr.w	r0, r0, r2
   d6a88:	ea81 0103 	eor.w	r1, r1, r3
   d6a8c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d6a90:	bfc2      	ittt	gt
   d6a92:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6a96:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6a9a:	bd70      	popgt	{r4, r5, r6, pc}
   d6a9c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6aa0:	f04f 0e00 	mov.w	lr, #0
   d6aa4:	3c01      	subs	r4, #1
   d6aa6:	f300 80ab 	bgt.w	d6c00 <__aeabi_dmul+0x238>
   d6aaa:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d6aae:	bfde      	ittt	le
   d6ab0:	2000      	movle	r0, #0
   d6ab2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d6ab6:	bd70      	pople	{r4, r5, r6, pc}
   d6ab8:	f1c4 0400 	rsb	r4, r4, #0
   d6abc:	3c20      	subs	r4, #32
   d6abe:	da35      	bge.n	d6b2c <__aeabi_dmul+0x164>
   d6ac0:	340c      	adds	r4, #12
   d6ac2:	dc1b      	bgt.n	d6afc <__aeabi_dmul+0x134>
   d6ac4:	f104 0414 	add.w	r4, r4, #20
   d6ac8:	f1c4 0520 	rsb	r5, r4, #32
   d6acc:	fa00 f305 	lsl.w	r3, r0, r5
   d6ad0:	fa20 f004 	lsr.w	r0, r0, r4
   d6ad4:	fa01 f205 	lsl.w	r2, r1, r5
   d6ad8:	ea40 0002 	orr.w	r0, r0, r2
   d6adc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d6ae0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6ae4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6ae8:	fa21 f604 	lsr.w	r6, r1, r4
   d6aec:	eb42 0106 	adc.w	r1, r2, r6
   d6af0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6af4:	bf08      	it	eq
   d6af6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6afa:	bd70      	pop	{r4, r5, r6, pc}
   d6afc:	f1c4 040c 	rsb	r4, r4, #12
   d6b00:	f1c4 0520 	rsb	r5, r4, #32
   d6b04:	fa00 f304 	lsl.w	r3, r0, r4
   d6b08:	fa20 f005 	lsr.w	r0, r0, r5
   d6b0c:	fa01 f204 	lsl.w	r2, r1, r4
   d6b10:	ea40 0002 	orr.w	r0, r0, r2
   d6b14:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6b18:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6b1c:	f141 0100 	adc.w	r1, r1, #0
   d6b20:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6b24:	bf08      	it	eq
   d6b26:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6b2a:	bd70      	pop	{r4, r5, r6, pc}
   d6b2c:	f1c4 0520 	rsb	r5, r4, #32
   d6b30:	fa00 f205 	lsl.w	r2, r0, r5
   d6b34:	ea4e 0e02 	orr.w	lr, lr, r2
   d6b38:	fa20 f304 	lsr.w	r3, r0, r4
   d6b3c:	fa01 f205 	lsl.w	r2, r1, r5
   d6b40:	ea43 0302 	orr.w	r3, r3, r2
   d6b44:	fa21 f004 	lsr.w	r0, r1, r4
   d6b48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6b4c:	fa21 f204 	lsr.w	r2, r1, r4
   d6b50:	ea20 0002 	bic.w	r0, r0, r2
   d6b54:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d6b58:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6b5c:	bf08      	it	eq
   d6b5e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6b62:	bd70      	pop	{r4, r5, r6, pc}
   d6b64:	f094 0f00 	teq	r4, #0
   d6b68:	d10f      	bne.n	d6b8a <__aeabi_dmul+0x1c2>
   d6b6a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d6b6e:	0040      	lsls	r0, r0, #1
   d6b70:	eb41 0101 	adc.w	r1, r1, r1
   d6b74:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6b78:	bf08      	it	eq
   d6b7a:	3c01      	subeq	r4, #1
   d6b7c:	d0f7      	beq.n	d6b6e <__aeabi_dmul+0x1a6>
   d6b7e:	ea41 0106 	orr.w	r1, r1, r6
   d6b82:	f095 0f00 	teq	r5, #0
   d6b86:	bf18      	it	ne
   d6b88:	4770      	bxne	lr
   d6b8a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d6b8e:	0052      	lsls	r2, r2, #1
   d6b90:	eb43 0303 	adc.w	r3, r3, r3
   d6b94:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d6b98:	bf08      	it	eq
   d6b9a:	3d01      	subeq	r5, #1
   d6b9c:	d0f7      	beq.n	d6b8e <__aeabi_dmul+0x1c6>
   d6b9e:	ea43 0306 	orr.w	r3, r3, r6
   d6ba2:	4770      	bx	lr
   d6ba4:	ea94 0f0c 	teq	r4, ip
   d6ba8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6bac:	bf18      	it	ne
   d6bae:	ea95 0f0c 	teqne	r5, ip
   d6bb2:	d00c      	beq.n	d6bce <__aeabi_dmul+0x206>
   d6bb4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6bb8:	bf18      	it	ne
   d6bba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6bbe:	d1d1      	bne.n	d6b64 <__aeabi_dmul+0x19c>
   d6bc0:	ea81 0103 	eor.w	r1, r1, r3
   d6bc4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6bc8:	f04f 0000 	mov.w	r0, #0
   d6bcc:	bd70      	pop	{r4, r5, r6, pc}
   d6bce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6bd2:	bf06      	itte	eq
   d6bd4:	4610      	moveq	r0, r2
   d6bd6:	4619      	moveq	r1, r3
   d6bd8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6bdc:	d019      	beq.n	d6c12 <__aeabi_dmul+0x24a>
   d6bde:	ea94 0f0c 	teq	r4, ip
   d6be2:	d102      	bne.n	d6bea <__aeabi_dmul+0x222>
   d6be4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6be8:	d113      	bne.n	d6c12 <__aeabi_dmul+0x24a>
   d6bea:	ea95 0f0c 	teq	r5, ip
   d6bee:	d105      	bne.n	d6bfc <__aeabi_dmul+0x234>
   d6bf0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6bf4:	bf1c      	itt	ne
   d6bf6:	4610      	movne	r0, r2
   d6bf8:	4619      	movne	r1, r3
   d6bfa:	d10a      	bne.n	d6c12 <__aeabi_dmul+0x24a>
   d6bfc:	ea81 0103 	eor.w	r1, r1, r3
   d6c00:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6c04:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6c08:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6c0c:	f04f 0000 	mov.w	r0, #0
   d6c10:	bd70      	pop	{r4, r5, r6, pc}
   d6c12:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6c16:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d6c1a:	bd70      	pop	{r4, r5, r6, pc}

000d6c1c <__aeabi_ddiv>:
   d6c1c:	b570      	push	{r4, r5, r6, lr}
   d6c1e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6c22:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6c26:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6c2a:	bf1d      	ittte	ne
   d6c2c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6c30:	ea94 0f0c 	teqne	r4, ip
   d6c34:	ea95 0f0c 	teqne	r5, ip
   d6c38:	f000 f8a7 	bleq	d6d8a <__aeabi_ddiv+0x16e>
   d6c3c:	eba4 0405 	sub.w	r4, r4, r5
   d6c40:	ea81 0e03 	eor.w	lr, r1, r3
   d6c44:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6c48:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6c4c:	f000 8088 	beq.w	d6d60 <__aeabi_ddiv+0x144>
   d6c50:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6c54:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d6c58:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d6c5c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d6c60:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d6c64:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d6c68:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d6c6c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d6c70:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d6c74:	429d      	cmp	r5, r3
   d6c76:	bf08      	it	eq
   d6c78:	4296      	cmpeq	r6, r2
   d6c7a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d6c7e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d6c82:	d202      	bcs.n	d6c8a <__aeabi_ddiv+0x6e>
   d6c84:	085b      	lsrs	r3, r3, #1
   d6c86:	ea4f 0232 	mov.w	r2, r2, rrx
   d6c8a:	1ab6      	subs	r6, r6, r2
   d6c8c:	eb65 0503 	sbc.w	r5, r5, r3
   d6c90:	085b      	lsrs	r3, r3, #1
   d6c92:	ea4f 0232 	mov.w	r2, r2, rrx
   d6c96:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d6c9a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d6c9e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6ca2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6ca6:	bf22      	ittt	cs
   d6ca8:	1ab6      	subcs	r6, r6, r2
   d6caa:	4675      	movcs	r5, lr
   d6cac:	ea40 000c 	orrcs.w	r0, r0, ip
   d6cb0:	085b      	lsrs	r3, r3, #1
   d6cb2:	ea4f 0232 	mov.w	r2, r2, rrx
   d6cb6:	ebb6 0e02 	subs.w	lr, r6, r2
   d6cba:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6cbe:	bf22      	ittt	cs
   d6cc0:	1ab6      	subcs	r6, r6, r2
   d6cc2:	4675      	movcs	r5, lr
   d6cc4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6cc8:	085b      	lsrs	r3, r3, #1
   d6cca:	ea4f 0232 	mov.w	r2, r2, rrx
   d6cce:	ebb6 0e02 	subs.w	lr, r6, r2
   d6cd2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6cd6:	bf22      	ittt	cs
   d6cd8:	1ab6      	subcs	r6, r6, r2
   d6cda:	4675      	movcs	r5, lr
   d6cdc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d6ce0:	085b      	lsrs	r3, r3, #1
   d6ce2:	ea4f 0232 	mov.w	r2, r2, rrx
   d6ce6:	ebb6 0e02 	subs.w	lr, r6, r2
   d6cea:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6cee:	bf22      	ittt	cs
   d6cf0:	1ab6      	subcs	r6, r6, r2
   d6cf2:	4675      	movcs	r5, lr
   d6cf4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6cf8:	ea55 0e06 	orrs.w	lr, r5, r6
   d6cfc:	d018      	beq.n	d6d30 <__aeabi_ddiv+0x114>
   d6cfe:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d6d02:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d6d06:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d6d0a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d6d0e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d6d12:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d6d16:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d6d1a:	d1c0      	bne.n	d6c9e <__aeabi_ddiv+0x82>
   d6d1c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6d20:	d10b      	bne.n	d6d3a <__aeabi_ddiv+0x11e>
   d6d22:	ea41 0100 	orr.w	r1, r1, r0
   d6d26:	f04f 0000 	mov.w	r0, #0
   d6d2a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d6d2e:	e7b6      	b.n	d6c9e <__aeabi_ddiv+0x82>
   d6d30:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6d34:	bf04      	itt	eq
   d6d36:	4301      	orreq	r1, r0
   d6d38:	2000      	moveq	r0, #0
   d6d3a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6d3e:	bf88      	it	hi
   d6d40:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6d44:	f63f aeaf 	bhi.w	d6aa6 <__aeabi_dmul+0xde>
   d6d48:	ebb5 0c03 	subs.w	ip, r5, r3
   d6d4c:	bf04      	itt	eq
   d6d4e:	ebb6 0c02 	subseq.w	ip, r6, r2
   d6d52:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6d56:	f150 0000 	adcs.w	r0, r0, #0
   d6d5a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6d5e:	bd70      	pop	{r4, r5, r6, pc}
   d6d60:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d6d64:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d6d68:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d6d6c:	bfc2      	ittt	gt
   d6d6e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6d72:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6d76:	bd70      	popgt	{r4, r5, r6, pc}
   d6d78:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6d7c:	f04f 0e00 	mov.w	lr, #0
   d6d80:	3c01      	subs	r4, #1
   d6d82:	e690      	b.n	d6aa6 <__aeabi_dmul+0xde>
   d6d84:	ea45 0e06 	orr.w	lr, r5, r6
   d6d88:	e68d      	b.n	d6aa6 <__aeabi_dmul+0xde>
   d6d8a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6d8e:	ea94 0f0c 	teq	r4, ip
   d6d92:	bf08      	it	eq
   d6d94:	ea95 0f0c 	teqeq	r5, ip
   d6d98:	f43f af3b 	beq.w	d6c12 <__aeabi_dmul+0x24a>
   d6d9c:	ea94 0f0c 	teq	r4, ip
   d6da0:	d10a      	bne.n	d6db8 <__aeabi_ddiv+0x19c>
   d6da2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6da6:	f47f af34 	bne.w	d6c12 <__aeabi_dmul+0x24a>
   d6daa:	ea95 0f0c 	teq	r5, ip
   d6dae:	f47f af25 	bne.w	d6bfc <__aeabi_dmul+0x234>
   d6db2:	4610      	mov	r0, r2
   d6db4:	4619      	mov	r1, r3
   d6db6:	e72c      	b.n	d6c12 <__aeabi_dmul+0x24a>
   d6db8:	ea95 0f0c 	teq	r5, ip
   d6dbc:	d106      	bne.n	d6dcc <__aeabi_ddiv+0x1b0>
   d6dbe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6dc2:	f43f aefd 	beq.w	d6bc0 <__aeabi_dmul+0x1f8>
   d6dc6:	4610      	mov	r0, r2
   d6dc8:	4619      	mov	r1, r3
   d6dca:	e722      	b.n	d6c12 <__aeabi_dmul+0x24a>
   d6dcc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6dd0:	bf18      	it	ne
   d6dd2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6dd6:	f47f aec5 	bne.w	d6b64 <__aeabi_dmul+0x19c>
   d6dda:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d6dde:	f47f af0d 	bne.w	d6bfc <__aeabi_dmul+0x234>
   d6de2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d6de6:	f47f aeeb 	bne.w	d6bc0 <__aeabi_dmul+0x1f8>
   d6dea:	e712      	b.n	d6c12 <__aeabi_dmul+0x24a>

000d6dec <__gedf2>:
   d6dec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d6df0:	e006      	b.n	d6e00 <__cmpdf2+0x4>
   d6df2:	bf00      	nop

000d6df4 <__ledf2>:
   d6df4:	f04f 0c01 	mov.w	ip, #1
   d6df8:	e002      	b.n	d6e00 <__cmpdf2+0x4>
   d6dfa:	bf00      	nop

000d6dfc <__cmpdf2>:
   d6dfc:	f04f 0c01 	mov.w	ip, #1
   d6e00:	f84d cd04 	str.w	ip, [sp, #-4]!
   d6e04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6e08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6e0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6e10:	bf18      	it	ne
   d6e12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d6e16:	d01b      	beq.n	d6e50 <__cmpdf2+0x54>
   d6e18:	b001      	add	sp, #4
   d6e1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d6e1e:	bf0c      	ite	eq
   d6e20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d6e24:	ea91 0f03 	teqne	r1, r3
   d6e28:	bf02      	ittt	eq
   d6e2a:	ea90 0f02 	teqeq	r0, r2
   d6e2e:	2000      	moveq	r0, #0
   d6e30:	4770      	bxeq	lr
   d6e32:	f110 0f00 	cmn.w	r0, #0
   d6e36:	ea91 0f03 	teq	r1, r3
   d6e3a:	bf58      	it	pl
   d6e3c:	4299      	cmppl	r1, r3
   d6e3e:	bf08      	it	eq
   d6e40:	4290      	cmpeq	r0, r2
   d6e42:	bf2c      	ite	cs
   d6e44:	17d8      	asrcs	r0, r3, #31
   d6e46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d6e4a:	f040 0001 	orr.w	r0, r0, #1
   d6e4e:	4770      	bx	lr
   d6e50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6e54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6e58:	d102      	bne.n	d6e60 <__cmpdf2+0x64>
   d6e5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6e5e:	d107      	bne.n	d6e70 <__cmpdf2+0x74>
   d6e60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6e64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6e68:	d1d6      	bne.n	d6e18 <__cmpdf2+0x1c>
   d6e6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6e6e:	d0d3      	beq.n	d6e18 <__cmpdf2+0x1c>
   d6e70:	f85d 0b04 	ldr.w	r0, [sp], #4
   d6e74:	4770      	bx	lr
   d6e76:	bf00      	nop

000d6e78 <__aeabi_cdrcmple>:
   d6e78:	4684      	mov	ip, r0
   d6e7a:	4610      	mov	r0, r2
   d6e7c:	4662      	mov	r2, ip
   d6e7e:	468c      	mov	ip, r1
   d6e80:	4619      	mov	r1, r3
   d6e82:	4663      	mov	r3, ip
   d6e84:	e000      	b.n	d6e88 <__aeabi_cdcmpeq>
   d6e86:	bf00      	nop

000d6e88 <__aeabi_cdcmpeq>:
   d6e88:	b501      	push	{r0, lr}
   d6e8a:	f7ff ffb7 	bl	d6dfc <__cmpdf2>
   d6e8e:	2800      	cmp	r0, #0
   d6e90:	bf48      	it	mi
   d6e92:	f110 0f00 	cmnmi.w	r0, #0
   d6e96:	bd01      	pop	{r0, pc}

000d6e98 <__aeabi_dcmpeq>:
   d6e98:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6e9c:	f7ff fff4 	bl	d6e88 <__aeabi_cdcmpeq>
   d6ea0:	bf0c      	ite	eq
   d6ea2:	2001      	moveq	r0, #1
   d6ea4:	2000      	movne	r0, #0
   d6ea6:	f85d fb08 	ldr.w	pc, [sp], #8
   d6eaa:	bf00      	nop

000d6eac <__aeabi_dcmplt>:
   d6eac:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6eb0:	f7ff ffea 	bl	d6e88 <__aeabi_cdcmpeq>
   d6eb4:	bf34      	ite	cc
   d6eb6:	2001      	movcc	r0, #1
   d6eb8:	2000      	movcs	r0, #0
   d6eba:	f85d fb08 	ldr.w	pc, [sp], #8
   d6ebe:	bf00      	nop

000d6ec0 <__aeabi_dcmple>:
   d6ec0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6ec4:	f7ff ffe0 	bl	d6e88 <__aeabi_cdcmpeq>
   d6ec8:	bf94      	ite	ls
   d6eca:	2001      	movls	r0, #1
   d6ecc:	2000      	movhi	r0, #0
   d6ece:	f85d fb08 	ldr.w	pc, [sp], #8
   d6ed2:	bf00      	nop

000d6ed4 <__aeabi_dcmpge>:
   d6ed4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6ed8:	f7ff ffce 	bl	d6e78 <__aeabi_cdrcmple>
   d6edc:	bf94      	ite	ls
   d6ede:	2001      	movls	r0, #1
   d6ee0:	2000      	movhi	r0, #0
   d6ee2:	f85d fb08 	ldr.w	pc, [sp], #8
   d6ee6:	bf00      	nop

000d6ee8 <__aeabi_dcmpgt>:
   d6ee8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6eec:	f7ff ffc4 	bl	d6e78 <__aeabi_cdrcmple>
   d6ef0:	bf34      	ite	cc
   d6ef2:	2001      	movcc	r0, #1
   d6ef4:	2000      	movcs	r0, #0
   d6ef6:	f85d fb08 	ldr.w	pc, [sp], #8
   d6efa:	bf00      	nop

000d6efc <__aeabi_d2iz>:
   d6efc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6f00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6f04:	d215      	bcs.n	d6f32 <__aeabi_d2iz+0x36>
   d6f06:	d511      	bpl.n	d6f2c <__aeabi_d2iz+0x30>
   d6f08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6f0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6f10:	d912      	bls.n	d6f38 <__aeabi_d2iz+0x3c>
   d6f12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6f16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6f1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6f1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6f22:	fa23 f002 	lsr.w	r0, r3, r2
   d6f26:	bf18      	it	ne
   d6f28:	4240      	negne	r0, r0
   d6f2a:	4770      	bx	lr
   d6f2c:	f04f 0000 	mov.w	r0, #0
   d6f30:	4770      	bx	lr
   d6f32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6f36:	d105      	bne.n	d6f44 <__aeabi_d2iz+0x48>
   d6f38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d6f3c:	bf08      	it	eq
   d6f3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d6f42:	4770      	bx	lr
   d6f44:	f04f 0000 	mov.w	r0, #0
   d6f48:	4770      	bx	lr
   d6f4a:	bf00      	nop

000d6f4c <atexit>:
   d6f4c:	2300      	movs	r3, #0
   d6f4e:	4601      	mov	r1, r0
   d6f50:	461a      	mov	r2, r3
   d6f52:	4618      	mov	r0, r3
   d6f54:	f000 b8f2 	b.w	d713c <__register_exitproc>

000d6f58 <memcpy>:
   d6f58:	440a      	add	r2, r1
   d6f5a:	4291      	cmp	r1, r2
   d6f5c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d6f60:	d100      	bne.n	d6f64 <memcpy+0xc>
   d6f62:	4770      	bx	lr
   d6f64:	b510      	push	{r4, lr}
   d6f66:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6f6a:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6f6e:	4291      	cmp	r1, r2
   d6f70:	d1f9      	bne.n	d6f66 <memcpy+0xe>
   d6f72:	bd10      	pop	{r4, pc}

000d6f74 <memmove>:
   d6f74:	4288      	cmp	r0, r1
   d6f76:	b510      	push	{r4, lr}
   d6f78:	eb01 0402 	add.w	r4, r1, r2
   d6f7c:	d902      	bls.n	d6f84 <memmove+0x10>
   d6f7e:	4284      	cmp	r4, r0
   d6f80:	4623      	mov	r3, r4
   d6f82:	d807      	bhi.n	d6f94 <memmove+0x20>
   d6f84:	1e43      	subs	r3, r0, #1
   d6f86:	42a1      	cmp	r1, r4
   d6f88:	d008      	beq.n	d6f9c <memmove+0x28>
   d6f8a:	f811 2b01 	ldrb.w	r2, [r1], #1
   d6f8e:	f803 2f01 	strb.w	r2, [r3, #1]!
   d6f92:	e7f8      	b.n	d6f86 <memmove+0x12>
   d6f94:	4402      	add	r2, r0
   d6f96:	4601      	mov	r1, r0
   d6f98:	428a      	cmp	r2, r1
   d6f9a:	d100      	bne.n	d6f9e <memmove+0x2a>
   d6f9c:	bd10      	pop	{r4, pc}
   d6f9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d6fa2:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d6fa6:	e7f7      	b.n	d6f98 <memmove+0x24>

000d6fa8 <memset>:
   d6fa8:	4402      	add	r2, r0
   d6faa:	4603      	mov	r3, r0
   d6fac:	4293      	cmp	r3, r2
   d6fae:	d100      	bne.n	d6fb2 <memset+0xa>
   d6fb0:	4770      	bx	lr
   d6fb2:	f803 1b01 	strb.w	r1, [r3], #1
   d6fb6:	e7f9      	b.n	d6fac <memset+0x4>

000d6fb8 <srand>:
   d6fb8:	b538      	push	{r3, r4, r5, lr}
   d6fba:	4b0d      	ldr	r3, [pc, #52]	; (d6ff0 <srand+0x38>)
   d6fbc:	681d      	ldr	r5, [r3, #0]
   d6fbe:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6fc0:	4604      	mov	r4, r0
   d6fc2:	b97b      	cbnz	r3, d6fe4 <srand+0x2c>
   d6fc4:	2018      	movs	r0, #24
   d6fc6:	f7fe fa09 	bl	d53dc <malloc>
   d6fca:	4a0a      	ldr	r2, [pc, #40]	; (d6ff4 <srand+0x3c>)
   d6fcc:	4b0a      	ldr	r3, [pc, #40]	; (d6ff8 <srand+0x40>)
   d6fce:	63a8      	str	r0, [r5, #56]	; 0x38
   d6fd0:	e9c0 2300 	strd	r2, r3, [r0]
   d6fd4:	4b09      	ldr	r3, [pc, #36]	; (d6ffc <srand+0x44>)
   d6fd6:	6083      	str	r3, [r0, #8]
   d6fd8:	230b      	movs	r3, #11
   d6fda:	8183      	strh	r3, [r0, #12]
   d6fdc:	2201      	movs	r2, #1
   d6fde:	2300      	movs	r3, #0
   d6fe0:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6fe4:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6fe6:	2200      	movs	r2, #0
   d6fe8:	611c      	str	r4, [r3, #16]
   d6fea:	615a      	str	r2, [r3, #20]
   d6fec:	bd38      	pop	{r3, r4, r5, pc}
   d6fee:	bf00      	nop
   d6ff0:	2003e4bc 	.word	0x2003e4bc
   d6ff4:	abcd330e 	.word	0xabcd330e
   d6ff8:	e66d1234 	.word	0xe66d1234
   d6ffc:	0005deec 	.word	0x0005deec

000d7000 <strcmp>:
   d7000:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7004:	f811 3b01 	ldrb.w	r3, [r1], #1
   d7008:	2a01      	cmp	r2, #1
   d700a:	bf28      	it	cs
   d700c:	429a      	cmpcs	r2, r3
   d700e:	d0f7      	beq.n	d7000 <strcmp>
   d7010:	1ad0      	subs	r0, r2, r3
   d7012:	4770      	bx	lr

000d7014 <strcpy>:
   d7014:	4603      	mov	r3, r0
   d7016:	f811 2b01 	ldrb.w	r2, [r1], #1
   d701a:	f803 2b01 	strb.w	r2, [r3], #1
   d701e:	2a00      	cmp	r2, #0
   d7020:	d1f9      	bne.n	d7016 <strcpy+0x2>
   d7022:	4770      	bx	lr

000d7024 <strlen>:
   d7024:	4603      	mov	r3, r0
   d7026:	f813 2b01 	ldrb.w	r2, [r3], #1
   d702a:	2a00      	cmp	r2, #0
   d702c:	d1fb      	bne.n	d7026 <strlen+0x2>
   d702e:	1a18      	subs	r0, r3, r0
   d7030:	3801      	subs	r0, #1
   d7032:	4770      	bx	lr

000d7034 <_strtol_l.isra.0>:
   d7034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7038:	4e3a      	ldr	r6, [pc, #232]	; (d7124 <_strtol_l.isra.0+0xf0>)
   d703a:	4686      	mov	lr, r0
   d703c:	468c      	mov	ip, r1
   d703e:	4660      	mov	r0, ip
   d7040:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d7044:	5da5      	ldrb	r5, [r4, r6]
   d7046:	f015 0508 	ands.w	r5, r5, #8
   d704a:	d1f8      	bne.n	d703e <_strtol_l.isra.0+0xa>
   d704c:	2c2d      	cmp	r4, #45	; 0x2d
   d704e:	d133      	bne.n	d70b8 <_strtol_l.isra.0+0x84>
   d7050:	f89c 4000 	ldrb.w	r4, [ip]
   d7054:	f04f 0801 	mov.w	r8, #1
   d7058:	f100 0c02 	add.w	ip, r0, #2
   d705c:	2b00      	cmp	r3, #0
   d705e:	d05c      	beq.n	d711a <_strtol_l.isra.0+0xe6>
   d7060:	2b10      	cmp	r3, #16
   d7062:	d10c      	bne.n	d707e <_strtol_l.isra.0+0x4a>
   d7064:	2c30      	cmp	r4, #48	; 0x30
   d7066:	d10a      	bne.n	d707e <_strtol_l.isra.0+0x4a>
   d7068:	f89c 0000 	ldrb.w	r0, [ip]
   d706c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d7070:	2858      	cmp	r0, #88	; 0x58
   d7072:	d14d      	bne.n	d7110 <_strtol_l.isra.0+0xdc>
   d7074:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d7078:	2310      	movs	r3, #16
   d707a:	f10c 0c02 	add.w	ip, ip, #2
   d707e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d7082:	3f01      	subs	r7, #1
   d7084:	2600      	movs	r6, #0
   d7086:	fbb7 f9f3 	udiv	r9, r7, r3
   d708a:	4630      	mov	r0, r6
   d708c:	fb03 7a19 	mls	sl, r3, r9, r7
   d7090:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d7094:	2d09      	cmp	r5, #9
   d7096:	d818      	bhi.n	d70ca <_strtol_l.isra.0+0x96>
   d7098:	462c      	mov	r4, r5
   d709a:	42a3      	cmp	r3, r4
   d709c:	dd24      	ble.n	d70e8 <_strtol_l.isra.0+0xb4>
   d709e:	1c75      	adds	r5, r6, #1
   d70a0:	d007      	beq.n	d70b2 <_strtol_l.isra.0+0x7e>
   d70a2:	4581      	cmp	r9, r0
   d70a4:	d31d      	bcc.n	d70e2 <_strtol_l.isra.0+0xae>
   d70a6:	d101      	bne.n	d70ac <_strtol_l.isra.0+0x78>
   d70a8:	45a2      	cmp	sl, r4
   d70aa:	db1a      	blt.n	d70e2 <_strtol_l.isra.0+0xae>
   d70ac:	fb00 4003 	mla	r0, r0, r3, r4
   d70b0:	2601      	movs	r6, #1
   d70b2:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d70b6:	e7eb      	b.n	d7090 <_strtol_l.isra.0+0x5c>
   d70b8:	2c2b      	cmp	r4, #43	; 0x2b
   d70ba:	bf08      	it	eq
   d70bc:	f89c 4000 	ldrbeq.w	r4, [ip]
   d70c0:	46a8      	mov	r8, r5
   d70c2:	bf08      	it	eq
   d70c4:	f100 0c02 	addeq.w	ip, r0, #2
   d70c8:	e7c8      	b.n	d705c <_strtol_l.isra.0+0x28>
   d70ca:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d70ce:	2d19      	cmp	r5, #25
   d70d0:	d801      	bhi.n	d70d6 <_strtol_l.isra.0+0xa2>
   d70d2:	3c37      	subs	r4, #55	; 0x37
   d70d4:	e7e1      	b.n	d709a <_strtol_l.isra.0+0x66>
   d70d6:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d70da:	2d19      	cmp	r5, #25
   d70dc:	d804      	bhi.n	d70e8 <_strtol_l.isra.0+0xb4>
   d70de:	3c57      	subs	r4, #87	; 0x57
   d70e0:	e7db      	b.n	d709a <_strtol_l.isra.0+0x66>
   d70e2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d70e6:	e7e4      	b.n	d70b2 <_strtol_l.isra.0+0x7e>
   d70e8:	1c73      	adds	r3, r6, #1
   d70ea:	d106      	bne.n	d70fa <_strtol_l.isra.0+0xc6>
   d70ec:	2322      	movs	r3, #34	; 0x22
   d70ee:	f8ce 3000 	str.w	r3, [lr]
   d70f2:	4638      	mov	r0, r7
   d70f4:	b942      	cbnz	r2, d7108 <_strtol_l.isra.0+0xd4>
   d70f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d70fa:	f1b8 0f00 	cmp.w	r8, #0
   d70fe:	d000      	beq.n	d7102 <_strtol_l.isra.0+0xce>
   d7100:	4240      	negs	r0, r0
   d7102:	2a00      	cmp	r2, #0
   d7104:	d0f7      	beq.n	d70f6 <_strtol_l.isra.0+0xc2>
   d7106:	b10e      	cbz	r6, d710c <_strtol_l.isra.0+0xd8>
   d7108:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   d710c:	6011      	str	r1, [r2, #0]
   d710e:	e7f2      	b.n	d70f6 <_strtol_l.isra.0+0xc2>
   d7110:	2430      	movs	r4, #48	; 0x30
   d7112:	2b00      	cmp	r3, #0
   d7114:	d1b3      	bne.n	d707e <_strtol_l.isra.0+0x4a>
   d7116:	2308      	movs	r3, #8
   d7118:	e7b1      	b.n	d707e <_strtol_l.isra.0+0x4a>
   d711a:	2c30      	cmp	r4, #48	; 0x30
   d711c:	d0a4      	beq.n	d7068 <_strtol_l.isra.0+0x34>
   d711e:	230a      	movs	r3, #10
   d7120:	e7ad      	b.n	d707e <_strtol_l.isra.0+0x4a>
   d7122:	bf00      	nop
   d7124:	000d74b6 	.word	0x000d74b6

000d7128 <strtol>:
   d7128:	4613      	mov	r3, r2
   d712a:	460a      	mov	r2, r1
   d712c:	4601      	mov	r1, r0
   d712e:	4802      	ldr	r0, [pc, #8]	; (d7138 <strtol+0x10>)
   d7130:	6800      	ldr	r0, [r0, #0]
   d7132:	f7ff bf7f 	b.w	d7034 <_strtol_l.isra.0>
   d7136:	bf00      	nop
   d7138:	2003e4bc 	.word	0x2003e4bc

000d713c <__register_exitproc>:
   d713c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d7140:	f8df 80b8 	ldr.w	r8, [pc, #184]	; d71fc <__register_exitproc+0xc0>
   d7144:	4606      	mov	r6, r0
   d7146:	f8d8 0000 	ldr.w	r0, [r8]
   d714a:	461f      	mov	r7, r3
   d714c:	460d      	mov	r5, r1
   d714e:	4691      	mov	r9, r2
   d7150:	f000 f856 	bl	d7200 <__retarget_lock_acquire_recursive>
   d7154:	4b25      	ldr	r3, [pc, #148]	; (d71ec <__register_exitproc+0xb0>)
   d7156:	681c      	ldr	r4, [r3, #0]
   d7158:	b934      	cbnz	r4, d7168 <__register_exitproc+0x2c>
   d715a:	4c25      	ldr	r4, [pc, #148]	; (d71f0 <__register_exitproc+0xb4>)
   d715c:	601c      	str	r4, [r3, #0]
   d715e:	4b25      	ldr	r3, [pc, #148]	; (d71f4 <__register_exitproc+0xb8>)
   d7160:	b113      	cbz	r3, d7168 <__register_exitproc+0x2c>
   d7162:	681b      	ldr	r3, [r3, #0]
   d7164:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   d7168:	6863      	ldr	r3, [r4, #4]
   d716a:	2b1f      	cmp	r3, #31
   d716c:	dd07      	ble.n	d717e <__register_exitproc+0x42>
   d716e:	f8d8 0000 	ldr.w	r0, [r8]
   d7172:	f000 f847 	bl	d7204 <__retarget_lock_release_recursive>
   d7176:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d717a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d717e:	b34e      	cbz	r6, d71d4 <__register_exitproc+0x98>
   d7180:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   d7184:	b988      	cbnz	r0, d71aa <__register_exitproc+0x6e>
   d7186:	4b1c      	ldr	r3, [pc, #112]	; (d71f8 <__register_exitproc+0xbc>)
   d7188:	b923      	cbnz	r3, d7194 <__register_exitproc+0x58>
   d718a:	f8d8 0000 	ldr.w	r0, [r8]
   d718e:	f000 f838 	bl	d7202 <__retarget_lock_release>
   d7192:	e7f0      	b.n	d7176 <__register_exitproc+0x3a>
   d7194:	f44f 7084 	mov.w	r0, #264	; 0x108
   d7198:	f7fe f920 	bl	d53dc <malloc>
   d719c:	2800      	cmp	r0, #0
   d719e:	d0f4      	beq.n	d718a <__register_exitproc+0x4e>
   d71a0:	2300      	movs	r3, #0
   d71a2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   d71a6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   d71aa:	6863      	ldr	r3, [r4, #4]
   d71ac:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   d71b0:	2201      	movs	r2, #1
   d71b2:	409a      	lsls	r2, r3
   d71b4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   d71b8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   d71bc:	4313      	orrs	r3, r2
   d71be:	2e02      	cmp	r6, #2
   d71c0:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   d71c4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   d71c8:	bf02      	ittt	eq
   d71ca:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   d71ce:	431a      	orreq	r2, r3
   d71d0:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   d71d4:	6863      	ldr	r3, [r4, #4]
   d71d6:	f8d8 0000 	ldr.w	r0, [r8]
   d71da:	1c5a      	adds	r2, r3, #1
   d71dc:	3302      	adds	r3, #2
   d71de:	6062      	str	r2, [r4, #4]
   d71e0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   d71e4:	f000 f80e 	bl	d7204 <__retarget_lock_release_recursive>
   d71e8:	2000      	movs	r0, #0
   d71ea:	e7c6      	b.n	d717a <__register_exitproc+0x3e>
   d71ec:	2003e7e0 	.word	0x2003e7e0
   d71f0:	2003e754 	.word	0x2003e754
   d71f4:	00000000 	.word	0x00000000
   d71f8:	000d53dd 	.word	0x000d53dd
   d71fc:	2003e520 	.word	0x2003e520

000d7200 <__retarget_lock_acquire_recursive>:
   d7200:	4770      	bx	lr

000d7202 <__retarget_lock_release>:
   d7202:	4770      	bx	lr

000d7204 <__retarget_lock_release_recursive>:
   d7204:	4770      	bx	lr

000d7206 <link_code_end>:
	...

000d7208 <dynalib_user>:
   d7208:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   d7218:	0000 0000 6d73 7261 6c74 6769 7468 6400     ....smartlight.d
   d7228:	6f6f 0072 227b 6146 6c69 3a22 2520 7d64     oor.{"Fail": %d}
   d7238:	7b00 4822 6d75 6469 5028 7265 6563 746e     .{"Humid(Percent
   d7248:	2229 253a 322e 2c66 2220 6554 706d 2a28     )":%.2f, "Temp(*
   d7258:	2943 3a22 2e25 6632 007d 227b 2274 253a     C)":%.2f}.{"t":%
   d7268:	2c64 6c22 6769 7468 3a22 7325 202c 6422     d,"light":%s, "d
   d7278:	6f6f 2272 253a 2c73 2220 7463 3a22 6c25     oor":%s, "ct":%l
   d7288:	7d64 7b00 007d 227b 304c 3a22 6425 222c     d}.{}.{"L0":%d,"
   d7298:	314c 3a22 6425 222c 2262 253a 2c64 7322     L1":%d,"b":%d,"s
   d72a8:	3a22 6425 222c 226d 253a 2c64 4d22 3a22     ":%d,"m":%d,"M":
   d72b8:	6425 007d 6e6f 6100 7475 006f 7262 6769     %d}.on.auto.brig
   d72c8:	7468 656e 7373 6d00 6e69 6d00 7861 7b00     htness.min.max.{
   d72d8:	4322 6f6c 6573 3a22 6425 202c 6422 6f6f     "Close":%d, "doo
   d72e8:	5072 6f72 6978 696d 7974 3a22 6625 007d     rProximity":%f}.
   d72f8:	227b 6c61 7265 2274 203a 6425 007d 6f64     {"alert": %d}.do
   d7308:	726f 7250 786f 6d69 7469 0079 7473 7461     orProximity.stat
   d7318:	7375 0000                                   us..

000d731c <_ZTVN5spark13EthernetClassE>:
	...
   d7324:	54a3 000d 5499 000d 548f 000d 5485 000d     .T...T...T...T..
   d7334:	5479 000d 546d 000d 5bb5 000d 5bbd 000d     yT..mT...[...[..
   d7344:	5461 000d 5459 000d 544f 000d 5445 000d     aT..YT..OT..ET..
   d7354:	5bed 000d                                   .[..

000d7358 <_ZTV7TwoWire>:
	...
   d7360:	54c1 000d 550b 000d 54e3 000d 54c3 000d     .T...U...T...T..
   d7370:	54eb 000d 54f3 000d 54fb 000d 5503 000d     .T...T...T...U..

000d7380 <_ZTV9IPAddress>:
	...
   d7388:	5555 000d 5545 000d 5547 000d 2e30 0030     UU..EU..GU..0.0.
   d7398:	6166 736c 0065 0000                         false...

000d73a0 <_ZTVSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d73a8:	5655 000d 565b 000d 5671 000d 5669 000d     UV..[V..qV..iV..
   d73b8:	5657 000d 7061 0070                         WV..app.

000d73c0 <_ZTVN5spark12NetworkClassE>:
	...
   d73c8:	5b75 000d 5b7f 000d 5b89 000d 5b93 000d     u[...[...[...[..
   d73d8:	5b9d 000d 5ba9 000d 5bb5 000d 5bbd 000d     .[...[...[...[..
   d73e8:	5bc5 000d 5bd1 000d 5bd9 000d 5be3 000d     .[...[...[...[..
   d73f8:	5bed 000d 5925 252d 2d6d 6425 2554 3a48     .[..%Y-%m-%dT%H:
   d7408:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000d7418 <_ZTV11USARTSerial>:
	...
   d7420:	611d 000d 618b 000d 6163 000d 5cd5 000d     .a...a..ca...\..
   d7430:	6133 000d 614f 000d 6141 000d 615d 000d     3a..Oa..Aa..]a..
   d7440:	611f 000d 6125 000d                         .a..%a..

000d7448 <_ZTV9USBSerial>:
	...
   d7450:	6217 000d 627f 000d 6255 000d 5cd5 000d     .b...b..Ub...\..
   d7460:	6247 000d 6219 000d 6229 000d 6279 000d     Gb...b..)b..yb..
   d7470:	6239 000d 6211 000d                         9b...b..

000d7478 <_ZTVN5spark9WiFiClassE>:
	...
   d7480:	6377 000d 636d 000d 6363 000d 6319 000d     wc..mc..cc...c..
   d7490:	6357 000d 634b 000d 5bb5 000d 5bbd 000d     Wc..Kc...[...[..
   d74a0:	633f 000d 6337 000d 632d 000d 6323 000d     ?c..7c..-c..#c..
   d74b0:	5bed 000d                                   .[..

000d74b4 <_ZSt7nothrow>:
	...

000d74b5 <_ctype_>:
   d74b5:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d74c5:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d74d5:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d74e5:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d74f5:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d7505:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d7515:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d7525:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d7535:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000d75b6 <link_const_variable_data_end>:
	...

000d75b8 <link_constructors_location>:
   d75b8:	000d4409 	.word	0x000d4409
   d75bc:	000d5435 	.word	0x000d5435
   d75c0:	000d54ad 	.word	0x000d54ad
   d75c4:	000d5b65 	.word	0x000d5b65
   d75c8:	000d5cc1 	.word	0x000d5cc1
   d75cc:	000d5e49 	.word	0x000d5e49
   d75d0:	000d6071 	.word	0x000d6071
   d75d4:	000d6109 	.word	0x000d6109
   d75d8:	000d6381 	.word	0x000d6381

000d75dc <link_constructors_end>:
   d75dc:	00000000 	.word	0x00000000
