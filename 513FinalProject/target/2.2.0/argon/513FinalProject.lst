
/Users/zi/Documents/UofA/ECE513FinalProject/513FinalProject/target/2.2.0/argon/513FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003530  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d7550  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  2003e470  000d7554  0001e470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000314  2003e4dc  2003e4dc  0002e4dc  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d75c0  000d75c0  000275c0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d75e8  000d75e8  000275e8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00177df3  00000000  00000000  000275ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00018f7b  00000000  00000000  0019f3df  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002c1d6  00000000  00000000  001b835a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000029c8  00000000  00000000  001e4530  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00007590  00000000  00000000  001e6ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003adcd  00000000  00000000  001ee488  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003db58  00000000  00000000  00229255  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00105ba9  00000000  00000000  00266dad  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00007378  00000000  00000000  0036c958  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f002 ff35 	bl	d6ea0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f002 ff57 	bl	d6ef0 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e470 	.word	0x2003e470
   d404c:	000d7554 	.word	0x000d7554
   d4050:	2003e4dc 	.word	0x2003e4dc
   d4054:	2003e4dc 	.word	0x2003e4dc
   d4058:	2003e7ed 	.word	0x2003e7ed

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f002 fa45 	bl	d64f0 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d752c 	.word	0x000d752c
   d4080:	000d7550 	.word	0x000d7550

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b826 	b.w	d40d4 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f92d 	bl	d42e8 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f002 b9e5 	b.w	d6460 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f001 b9e5 	b.w	d5464 <malloc>

000d409a <_Znaj>:
   d409a:	f001 b9e3 	b.w	d5464 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f001 b9e9 	b.w	d5474 <free>

000d40a2 <_ZdaPv>:
   d40a2:	f001 b9e7 	b.w	d5474 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr

000d40b6 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d40b6:	b40e      	push	{r1, r2, r3}
   d40b8:	b503      	push	{r0, r1, lr}
   d40ba:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d40bc:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d40be:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d40c2:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d40c4:	f001 fe9f 	bl	d5e06 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d40c8:	b002      	add	sp, #8
   d40ca:	f85d eb04 	ldr.w	lr, [sp], #4
   d40ce:	b003      	add	sp, #12
   d40d0:	4770      	bx	lr
	...

000d40d4 <setup>:
}




void setup() {
   d40d4:	b508      	push	{r3, lr}
  pinMode(LED, OUTPUT);
   d40d6:	2101      	movs	r1, #1
   d40d8:	2000      	movs	r0, #0
   d40da:	f002 fa79 	bl	d65d0 <pinMode>
  pinMode(LED2, OUTPUT);
   d40de:	2101      	movs	r1, #1
   d40e0:	2007      	movs	r0, #7
   d40e2:	f002 fa75 	bl	d65d0 <pinMode>
  RGB.control(true);
   d40e6:	2001      	movs	r0, #1
   d40e8:	f001 febe 	bl	d5e68 <_ZN8RGBClass7controlEb>
  RGB.color(255, 255, 255);
   d40ec:	22ff      	movs	r2, #255	; 0xff
   d40ee:	4611      	mov	r1, r2
   d40f0:	4610      	mov	r0, r2
   d40f2:	f001 fec9 	bl	d5e88 <_ZN8RGBClass5colorEiii>

	Serial.begin();
   d40f6:	f002 f92d 	bl	d6354 <_Z16_fetch_usbserialv>
   d40fa:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40fe:	f002 f91d 	bl	d633c <_ZN9USBSerial5beginEl>

  dht.begin();
   d4102:	4803      	ldr	r0, [pc, #12]	; (d4110 <setup+0x3c>)
   d4104:	f000 f9ec 	bl	d44e0 <_ZN3DHT5beginEv>

  counter = 0;
   d4108:	4b02      	ldr	r3, [pc, #8]	; (d4114 <setup+0x40>)
   d410a:	2200      	movs	r2, #0
   d410c:	601a      	str	r2, [r3, #0]
}
   d410e:	bd08      	pop	{r3, pc}
   d4110:	2003e4e0 	.word	0x2003e4e0
   d4114:	2003e4dc 	.word	0x2003e4dc

000d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4118:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d411a:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d411c:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d411e:	b17c      	cbz	r4, d4140 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d4120:	6863      	ldr	r3, [r4, #4]
   d4122:	3b01      	subs	r3, #1
   d4124:	6063      	str	r3, [r4, #4]
   d4126:	b95b      	cbnz	r3, d4140 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d4128:	6823      	ldr	r3, [r4, #0]
   d412a:	4620      	mov	r0, r4
   d412c:	689b      	ldr	r3, [r3, #8]
   d412e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4130:	68a3      	ldr	r3, [r4, #8]
   d4132:	3b01      	subs	r3, #1
   d4134:	60a3      	str	r3, [r4, #8]
   d4136:	b91b      	cbnz	r3, d4140 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4138:	6823      	ldr	r3, [r4, #0]
   d413a:	4620      	mov	r0, r4
   d413c:	68db      	ldr	r3, [r3, #12]
   d413e:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d4140:	4628      	mov	r0, r5
   d4142:	bd38      	pop	{r3, r4, r5, pc}

000d4144 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4144:	680b      	ldr	r3, [r1, #0]
   d4146:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4148:	b113      	cbz	r3, d4150 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d414a:	685a      	ldr	r2, [r3, #4]
   d414c:	3201      	adds	r2, #1
   d414e:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d4150:	4770      	bx	lr

000d4152 <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d4152:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   d4154:	68cd      	ldr	r5, [r1, #12]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4156:	f851 3b04 	ldr.w	r3, [r1], #4
   d415a:	9300      	str	r3, [sp, #0]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d415c:	4604      	mov	r4, r0
   d415e:	a801      	add	r0, sp, #4
   d4160:	f7ff fff0 	bl	d4144 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d4164:	466a      	mov	r2, sp
   d4166:	4629      	mov	r1, r5
   d4168:	4620      	mov	r0, r4
   d416a:	f001 fc85 	bl	d5a78 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d416e:	a801      	add	r0, sp, #4
   d4170:	f7ff ffd2 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4174:	4620      	mov	r0, r4
   d4176:	b003      	add	sp, #12
   d4178:	bd30      	pop	{r4, r5, pc}

000d417a <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d417a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   d417c:	690d      	ldr	r5, [r1, #16]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d417e:	f851 3b04 	ldr.w	r3, [r1], #4
   d4182:	9300      	str	r3, [sp, #0]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d4184:	4604      	mov	r4, r0
   d4186:	a801      	add	r0, sp, #4
   d4188:	f7ff ffdc 	bl	d4144 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d418c:	466a      	mov	r2, sp
   d418e:	4629      	mov	r1, r5
   d4190:	4620      	mov	r0, r4
   d4192:	f001 faec 	bl	d576e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4196:	a801      	add	r0, sp, #4
   d4198:	f7ff ffbe 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d419c:	4620      	mov	r0, r4
   d419e:	b003      	add	sp, #12
   d41a0:	bd30      	pop	{r4, r5, pc}
	...

000d41a4 <_Z19serialCmdProcessingv>:
void serialCmdProcessing() {
   d41a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d41a6:	b095      	sub	sp, #84	; 0x54
  if (Serial.available() <= 0) return;
   d41a8:	f002 f8d4 	bl	d6354 <_Z16_fetch_usbserialv>
   d41ac:	6803      	ldr	r3, [r0, #0]
   d41ae:	691b      	ldr	r3, [r3, #16]
   d41b0:	4798      	blx	r3
   d41b2:	2800      	cmp	r0, #0
   d41b4:	f340 8087 	ble.w	d42c6 <_Z19serialCmdProcessingv+0x122>
  String cmdStr = "";
   d41b8:	4944      	ldr	r1, [pc, #272]	; (d42cc <_Z19serialCmdProcessingv+0x128>)
   d41ba:	a806      	add	r0, sp, #24
   d41bc:	f001 fee3 	bl	d5f86 <_ZN6StringC1EPKc>
  while (Serial.available()) {
   d41c0:	f002 f8c8 	bl	d6354 <_Z16_fetch_usbserialv>
   d41c4:	6803      	ldr	r3, [r0, #0]
   d41c6:	691b      	ldr	r3, [r3, #16]
   d41c8:	4798      	blx	r3
   d41ca:	b180      	cbz	r0, d41ee <_Z19serialCmdProcessingv+0x4a>
      char c = Serial.read();
   d41cc:	f002 f8c2 	bl	d6354 <_Z16_fetch_usbserialv>
   d41d0:	6803      	ldr	r3, [r0, #0]
   d41d2:	695b      	ldr	r3, [r3, #20]
   d41d4:	4798      	blx	r3
      cmdStr += String(c);
   d41d6:	b2c1      	uxtb	r1, r0
   d41d8:	a80e      	add	r0, sp, #56	; 0x38
   d41da:	f001 ff39 	bl	d6050 <_ZN6StringC1Ec>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d41de:	a90e      	add	r1, sp, #56	; 0x38
   d41e0:	a806      	add	r0, sp, #24
   d41e2:	f001 ff5d 	bl	d60a0 <_ZN6String6concatERKS_>
   d41e6:	a80e      	add	r0, sp, #56	; 0x38
   d41e8:	f001 fe82 	bl	d5ef0 <_ZN6StringD1Ev>
  while (Serial.available()) {
   d41ec:	e7e8      	b.n	d41c0 <_Z19serialCmdProcessingv+0x1c>
  JSONValue cmdJson = JSONValue::parseCopy(cmdStr.c_str());
   d41ee:	9906      	ldr	r1, [sp, #24]
    return parseCopy(json, strlen(json));
   d41f0:	9101      	str	r1, [sp, #4]
   d41f2:	4608      	mov	r0, r1
   d41f4:	f002 feba 	bl	d6f6c <strlen>
   d41f8:	9901      	ldr	r1, [sp, #4]
    return strcmp(s_, str) == 0;
   d41fa:	4d35      	ldr	r5, [pc, #212]	; (d42d0 <_Z19serialCmdProcessingv+0x12c>)
   d41fc:	4e35      	ldr	r6, [pc, #212]	; (d42d4 <_Z19serialCmdProcessingv+0x130>)
   d41fe:	4f36      	ldr	r7, [pc, #216]	; (d42d8 <_Z19serialCmdProcessingv+0x134>)
    return parseCopy(json, strlen(json));
   d4200:	4602      	mov	r2, r0
   d4202:	a803      	add	r0, sp, #12
   d4204:	f001 fc9c 	bl	d5b40 <_ZN5spark9JSONValue9parseCopyEPKcj>
        JSONObjectIterator(value.t_, value.d_) {
   d4208:	9c05      	ldr	r4, [sp, #20]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d420a:	9b03      	ldr	r3, [sp, #12]
   d420c:	930a      	str	r3, [sp, #40]	; 0x28
   d420e:	a904      	add	r1, sp, #16
   d4210:	a80b      	add	r0, sp, #44	; 0x2c
   d4212:	f7ff ff97 	bl	d4144 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d4216:	aa0a      	add	r2, sp, #40	; 0x28
   d4218:	4621      	mov	r1, r4
   d421a:	a80e      	add	r0, sp, #56	; 0x38
   d421c:	f001 fc50 	bl	d5ac0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4220:	a80b      	add	r0, sp, #44	; 0x2c
   d4222:	f7ff ff79 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  while (iter.next()) {
   d4226:	a80e      	add	r0, sp, #56	; 0x38
   d4228:	f001 fc62 	bl	d5af0 <_ZN5spark18JSONObjectIterator4nextEv>
   d422c:	2800      	cmp	r0, #0
   d422e:	d041      	beq.n	d42b4 <_Z19serialCmdProcessingv+0x110>
    if (iter.name() == "smartlight") {
   d4230:	a90e      	add	r1, sp, #56	; 0x38
   d4232:	a80a      	add	r0, sp, #40	; 0x28
   d4234:	f7ff ff8d 	bl	d4152 <_ZNK5spark18JSONObjectIterator4nameEv>
    return strcmp(s_, str) == 0;
   d4238:	4629      	mov	r1, r5
   d423a:	980c      	ldr	r0, [sp, #48]	; 0x30
   d423c:	f002 fe84 	bl	d6f48 <strcmp>
   d4240:	4604      	mov	r4, r0
   d4242:	a80b      	add	r0, sp, #44	; 0x2c
   d4244:	f7ff ff68 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      smartLight.cmdProcessing(iter.value());
   d4248:	a90e      	add	r1, sp, #56	; 0x38
   d424a:	a80a      	add	r0, sp, #40	; 0x28
    if (iter.name() == "smartlight") {
   d424c:	b94c      	cbnz	r4, d4262 <_Z19serialCmdProcessingv+0xbe>
      smartLight.cmdProcessing(iter.value());
   d424e:	f7ff ff94 	bl	d417a <_ZNK5spark18JSONObjectIterator5valueEv>
   d4252:	4822      	ldr	r0, [pc, #136]	; (d42dc <_Z19serialCmdProcessingv+0x138>)
   d4254:	a90a      	add	r1, sp, #40	; 0x28
   d4256:	f000 fc7f 	bl	d4b58 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE>
   d425a:	a80b      	add	r0, sp, #44	; 0x2c
   d425c:	f7ff ff5c 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4260:	e7e1      	b.n	d4226 <_Z19serialCmdProcessingv+0x82>
    } else if (iter.name() == "door") {
   d4262:	f7ff ff76 	bl	d4152 <_ZNK5spark18JSONObjectIterator4nameEv>
   d4266:	4631      	mov	r1, r6
   d4268:	980c      	ldr	r0, [sp, #48]	; 0x30
   d426a:	f002 fe6d 	bl	d6f48 <strcmp>
   d426e:	4604      	mov	r4, r0
   d4270:	a80b      	add	r0, sp, #44	; 0x2c
   d4272:	f7ff ff51 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      door.cmdProcessing(iter.value());
   d4276:	a90e      	add	r1, sp, #56	; 0x38
   d4278:	a80a      	add	r0, sp, #40	; 0x28
    } else if (iter.name() == "door") {
   d427a:	b934      	cbnz	r4, d428a <_Z19serialCmdProcessingv+0xe6>
      door.cmdProcessing(iter.value());
   d427c:	f7ff ff7d 	bl	d417a <_ZNK5spark18JSONObjectIterator5valueEv>
   d4280:	4817      	ldr	r0, [pc, #92]	; (d42e0 <_Z19serialCmdProcessingv+0x13c>)
   d4282:	a90a      	add	r1, sp, #40	; 0x28
   d4284:	f000 fd20 	bl	d4cc8 <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE>
   d4288:	e7e7      	b.n	d425a <_Z19serialCmdProcessingv+0xb6>
    } else if (iter.name() == "systemControl") {
   d428a:	f7ff ff62 	bl	d4152 <_ZNK5spark18JSONObjectIterator4nameEv>
   d428e:	980c      	ldr	r0, [sp, #48]	; 0x30
   d4290:	4639      	mov	r1, r7
   d4292:	f002 fe59 	bl	d6f48 <strcmp>
   d4296:	4604      	mov	r4, r0
   d4298:	a80b      	add	r0, sp, #44	; 0x2c
   d429a:	f7ff ff3d 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d429e:	2c00      	cmp	r4, #0
   d42a0:	d1c1      	bne.n	d4226 <_Z19serialCmdProcessingv+0x82>
      thermostat.cmdProcessing(iter.value());
   d42a2:	a90e      	add	r1, sp, #56	; 0x38
   d42a4:	a80a      	add	r0, sp, #40	; 0x28
   d42a6:	f7ff ff68 	bl	d417a <_ZNK5spark18JSONObjectIterator5valueEv>
   d42aa:	480e      	ldr	r0, [pc, #56]	; (d42e4 <_Z19serialCmdProcessingv+0x140>)
   d42ac:	a90a      	add	r1, sp, #40	; 0x28
   d42ae:	f000 fdf3 	bl	d4e98 <_ZN11CThermostat13cmdProcessingEN5spark9JSONValueE>
   d42b2:	e7d2      	b.n	d425a <_Z19serialCmdProcessingv+0xb6>
   d42b4:	a80f      	add	r0, sp, #60	; 0x3c
   d42b6:	f7ff ff2f 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d42ba:	a804      	add	r0, sp, #16
   d42bc:	f7ff ff2c 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  String cmdStr = "";
   d42c0:	a806      	add	r0, sp, #24
   d42c2:	f001 fe15 	bl	d5ef0 <_ZN6StringD1Ev>
}
   d42c6:	b015      	add	sp, #84	; 0x54
   d42c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d42ca:	bf00      	nop
   d42cc:	000d730b 	.word	0x000d730b
   d42d0:	000d7164 	.word	0x000d7164
   d42d4:	000d716f 	.word	0x000d716f
   d42d8:	000d7174 	.word	0x000d7174
   d42dc:	2003e528 	.word	0x2003e528
   d42e0:	2003e4f4 	.word	0x2003e4f4
   d42e4:	2003e558 	.word	0x2003e558

000d42e8 <loop>:

void loop() {
   d42e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d42ec:	ed2d 8b04 	vpush	{d8-d9}
// Wait a few seconds between measurements.
	//delay(100);

	float h = dht.getHumidity();
   d42f0:	4846      	ldr	r0, [pc, #280]	; (d440c <loop+0x124>)
  thermostat.execute(temp);
  //door.execute();
  unsigned long period = millis() - t;


  if (counter % (SERAIL_COMM_FREQUENCY * LOOP_FREQUENCY) == 0) {
   d42f2:	4d47      	ldr	r5, [pc, #284]	; (d4410 <loop+0x128>)
void loop() {
   d42f4:	b096      	sub	sp, #88	; 0x58
	float h = dht.getHumidity();
   d42f6:	f000 fb21 	bl	d493c <_ZN3DHT11getHumidityEv>
	float temp = dht.getTempCelcius();
   d42fa:	4844      	ldr	r0, [pc, #272]	; (d440c <loop+0x124>)
	float h = dht.getHumidity();
   d42fc:	eef0 8a40 	vmov.f32	s17, s0
	float temp = dht.getTempCelcius();
   d4300:	f000 fadc 	bl	d48bc <_ZN3DHT14getTempCelciusEv>
	float f = dht.getTempFarenheit();
   d4304:	4841      	ldr	r0, [pc, #260]	; (d440c <loop+0x124>)
	float temp = dht.getTempCelcius();
   d4306:	eeb0 8a40 	vmov.f32	s16, s0
	float f = dht.getTempFarenheit();
   d430a:	f000 fad9 	bl	d48c0 <_ZN3DHT16getTempFarenheitEv>
   d430e:	eeb0 9a40 	vmov.f32	s18, s0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4312:	f000 fe7b 	bl	d500c <HAL_Timer_Get_Milli_Seconds>
   d4316:	4604      	mov	r4, r0
  serialCmdProcessing();
   d4318:	f7ff ff44 	bl	d41a4 <_Z19serialCmdProcessingv>
  smartLight.execute();
   d431c:	483d      	ldr	r0, [pc, #244]	; (d4414 <loop+0x12c>)
   d431e:	f000 fbe3 	bl	d4ae8 <_ZN11CSmartLight7executeEv>
  thermostat.execute(temp);
   d4322:	483d      	ldr	r0, [pc, #244]	; (d4418 <loop+0x130>)
   d4324:	eeb0 0a48 	vmov.f32	s0, s16
   d4328:	f000 fd88 	bl	d4e3c <_ZN11CThermostat7executeEf>
   d432c:	f000 fe6e 	bl	d500c <HAL_Timer_Get_Milli_Seconds>
   d4330:	6829      	ldr	r1, [r5, #0]
   d4332:	220a      	movs	r2, #10
   d4334:	fb91 f3f2 	sdiv	r3, r1, r2
   d4338:	fb02 1313 	mls	r3, r2, r3, r1
   d433c:	4606      	mov	r6, r0
  if (counter % (SERAIL_COMM_FREQUENCY * LOOP_FREQUENCY) == 0) {
   d433e:	2b00      	cmp	r3, #0
   d4340:	d158      	bne.n	d43f4 <loop+0x10c>
    counter = 0;
    if (isnan(h) || isnan(temp) || isnan(f)) {
   d4342:	eef4 8a68 	vcmp.f32	s17, s17
   d4346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    counter = 0;
   d434a:	602b      	str	r3, [r5, #0]
    if (isnan(h) || isnan(temp) || isnan(f)) {
   d434c:	d609      	bvs.n	d4362 <loop+0x7a>
   d434e:	eeb4 8a48 	vcmp.f32	s16, s16
   d4352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4356:	d604      	bvs.n	d4362 <loop+0x7a>
   d4358:	eeb4 9a49 	vcmp.f32	s18, s18
   d435c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4360:	d70e      	bvc.n	d4380 <loop+0x98>
      //Serial.println("Failed to read from DHT sensor!");
      Serial.printf("{\"Fail\": %d}", true);
   d4362:	f001 fff7 	bl	d6354 <_Z16_fetch_usbserialv>
   d4366:	492d      	ldr	r1, [pc, #180]	; (d441c <loop+0x134>)
   d4368:	2201      	movs	r2, #1
   d436a:	f7ff fea4 	bl	d40b6 <_ZN5Print6printfEPKcz>
      Serial.println();
   d436e:	f001 fff1 	bl	d6354 <_Z16_fetch_usbserialv>
   d4372:	f001 fd1e 	bl	d5db2 <_ZN5Print7printlnEv>
  }
  counter++;

  period = PERIOD - (millis() - t);
  if (period > 0) delay(period);
}
   d4376:	b016      	add	sp, #88	; 0x58
   d4378:	ecbd 8b04 	vpop	{d8-d9}
   d437c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    Serial.printf("{\"t\":%d,\"light\":%s, \"door\":%s, \"thermostat\":%s, \"Humid\":%.2f, \"Temp\":%.2f, \"ct\":%ld}",
   d4380:	f001 ffe8 	bl	d6354 <_Z16_fetch_usbserialv>
   d4384:	4607      	mov	r7, r0
      (int)Time.now(), smartLight.getStatusStr().c_str(), door.getStatusStr().c_str(), thermostat.getStatusStr().c_str(), h, temp,
   d4386:	f001 fef3 	bl	d6170 <_ZN9TimeClass3nowEv>

    void execute();

    int getSensorVal();
    void readSensorVal();
    String getStatusStr() {return statusStr;};
   d438a:	4925      	ldr	r1, [pc, #148]	; (d4420 <loop+0x138>)
   d438c:	9009      	str	r0, [sp, #36]	; 0x24
   d438e:	a80a      	add	r0, sp, #40	; 0x28
   d4390:	f001 fe39 	bl	d6006 <_ZN6StringC1ERKS_>
    Serial.printf("{\"t\":%d,\"light\":%s, \"door\":%s, \"thermostat\":%s, \"Humid\":%.2f, \"Temp\":%.2f, \"ct\":%ld}",
   d4394:	9b0a      	ldr	r3, [sp, #40]	; 0x28

    void execute();

    int getSensorVal();
    void readSensorVal();
    String getStatusStr() {return statusStr;};
   d4396:	4923      	ldr	r1, [pc, #140]	; (d4424 <loop+0x13c>)
   d4398:	9308      	str	r3, [sp, #32]
   d439a:	a80e      	add	r0, sp, #56	; 0x38
   d439c:	f001 fe33 	bl	d6006 <_ZN6StringC1ERKS_>
  public:
    CThermostat();
    void cmdProcessing(JSONValue cmdJson);
    void execute(float currTemp);
    void createStatusStr();
    String getStatusStr() {return statusStr;};
   d43a0:	4921      	ldr	r1, [pc, #132]	; (d4428 <loop+0x140>)
   d43a2:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
   d43a6:	a812      	add	r0, sp, #72	; 0x48
   d43a8:	f001 fe2d 	bl	d6006 <_ZN6StringC1ERKS_>
  unsigned long period = millis() - t;
   d43ac:	1b36      	subs	r6, r6, r4
    Serial.printf("{\"t\":%d,\"light\":%s, \"door\":%s, \"thermostat\":%s, \"Humid\":%.2f, \"Temp\":%.2f, \"ct\":%ld}",
   d43ae:	ee18 0a10 	vmov	r0, s16
   d43b2:	9606      	str	r6, [sp, #24]
   d43b4:	f002 fadc 	bl	d6970 <__aeabi_f2d>
   d43b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d43bc:	ee18 0a90 	vmov	r0, s17
   d43c0:	f002 fad6 	bl	d6970 <__aeabi_f2d>
   d43c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d43c8:	9912      	ldr	r1, [sp, #72]	; 0x48
   d43ca:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
   d43ce:	e9cd 8100 	strd	r8, r1, [sp]
   d43d2:	4638      	mov	r0, r7
   d43d4:	4915      	ldr	r1, [pc, #84]	; (d442c <loop+0x144>)
   d43d6:	f7ff fe6e 	bl	d40b6 <_ZN5Print6printfEPKcz>
      (int)Time.now(), smartLight.getStatusStr().c_str(), door.getStatusStr().c_str(), thermostat.getStatusStr().c_str(), h, temp,
   d43da:	a812      	add	r0, sp, #72	; 0x48
   d43dc:	f001 fd88 	bl	d5ef0 <_ZN6StringD1Ev>
   d43e0:	a80e      	add	r0, sp, #56	; 0x38
   d43e2:	f001 fd85 	bl	d5ef0 <_ZN6StringD1Ev>
   d43e6:	a80a      	add	r0, sp, #40	; 0x28
   d43e8:	f001 fd82 	bl	d5ef0 <_ZN6StringD1Ev>
    Serial.println();
   d43ec:	f001 ffb2 	bl	d6354 <_Z16_fetch_usbserialv>
   d43f0:	f001 fcdf 	bl	d5db2 <_ZN5Print7printlnEv>
  counter++;
   d43f4:	682b      	ldr	r3, [r5, #0]
   d43f6:	3301      	adds	r3, #1
   d43f8:	602b      	str	r3, [r5, #0]
   d43fa:	f000 fe07 	bl	d500c <HAL_Timer_Get_Milli_Seconds>
  period = PERIOD - (millis() - t);
   d43fe:	3464      	adds	r4, #100	; 0x64
  if (period > 0) delay(period);
   d4400:	1a20      	subs	r0, r4, r0
   d4402:	d0b8      	beq.n	d4376 <loop+0x8e>
   d4404:	f001 f856 	bl	d54b4 <delay>
   d4408:	e7b5      	b.n	d4376 <loop+0x8e>
   d440a:	bf00      	nop
   d440c:	2003e4e0 	.word	0x2003e4e0
   d4410:	2003e4dc 	.word	0x2003e4dc
   d4414:	2003e528 	.word	0x2003e528
   d4418:	2003e558 	.word	0x2003e558
   d441c:	000d7182 	.word	0x000d7182
   d4420:	2003e548 	.word	0x2003e548
   d4424:	2003e518 	.word	0x2003e518
   d4428:	2003e57c 	.word	0x2003e57c
   d442c:	000d718f 	.word	0x000d718f

000d4430 <_GLOBAL__sub_I_dht>:
}
   d4430:	b508      	push	{r3, lr}
SYSTEM_THREAD(ENABLED);
   d4432:	2100      	movs	r1, #0
   d4434:	2001      	movs	r0, #1
   d4436:	f000 ff71 	bl	d531c <system_thread_set_state>
DHT dht(DHTPIN, DHTTYPE);
   d443a:	2306      	movs	r3, #6
   d443c:	220b      	movs	r2, #11
   d443e:	2102      	movs	r1, #2
   d4440:	4806      	ldr	r0, [pc, #24]	; (d445c <_GLOBAL__sub_I_dht+0x2c>)
   d4442:	f000 f846 	bl	d44d2 <_ZN3DHTC1Ehhh>
CSmartLight smartLight;
   d4446:	4806      	ldr	r0, [pc, #24]	; (d4460 <_GLOBAL__sub_I_dht+0x30>)
   d4448:	f000 fa7a 	bl	d4940 <_ZN11CSmartLightC1Ev>
CDoor door;
   d444c:	4805      	ldr	r0, [pc, #20]	; (d4464 <_GLOBAL__sub_I_dht+0x34>)
   d444e:	f000 fc19 	bl	d4c84 <_ZN5CDoorC1Ev>
}
   d4452:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
CThermostat thermostat;
   d4456:	4804      	ldr	r0, [pc, #16]	; (d4468 <_GLOBAL__sub_I_dht+0x38>)
   d4458:	f000 bcb6 	b.w	d4dc8 <_ZN11CThermostatC1Ev>
   d445c:	2003e4e0 	.word	0x2003e4e0
   d4460:	2003e528 	.word	0x2003e528
   d4464:	2003e4f4 	.word	0x2003e4f4
   d4468:	2003e558 	.word	0x2003e558

000d446c <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d446c:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d446e:	6803      	ldr	r3, [r0, #0]
   d4470:	2b2f      	cmp	r3, #47	; 0x2f
{
   d4472:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d4474:	d904      	bls.n	d4480 <nrf_gpio_pin_port_decode+0x14>
   d4476:	4a07      	ldr	r2, [pc, #28]	; (d4494 <nrf_gpio_pin_port_decode+0x28>)
   d4478:	2100      	movs	r1, #0
   d447a:	200a      	movs	r0, #10
   d447c:	f000 ff1e 	bl	d52bc <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d4480:	6823      	ldr	r3, [r4, #0]
   d4482:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d4484:	bf83      	ittte	hi
   d4486:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   d448a:	4803      	ldrhi	r0, [pc, #12]	; (d4498 <nrf_gpio_pin_port_decode+0x2c>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d448c:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   d448e:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    }
#endif
}
   d4492:	bd10      	pop	{r4, pc}
   d4494:	000d4ffd 	.word	0x000d4ffd
   d4498:	50000300 	.word	0x50000300

000d449c <nrf_gpio_pin_set>:
    }
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
   d449c:	b507      	push	{r0, r1, r2, lr}
   d449e:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d44a0:	a801      	add	r0, sp, #4
   d44a2:	f7ff ffe3 	bl	d446c <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d44a6:	9a01      	ldr	r2, [sp, #4]
   d44a8:	2301      	movs	r3, #1
   d44aa:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d44ac:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   d44b0:	b003      	add	sp, #12
   d44b2:	f85d fb04 	ldr.w	pc, [sp], #4

000d44b6 <nrf_gpio_pin_read>:
{
   d44b6:	b507      	push	{r0, r1, r2, lr}
   d44b8:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d44ba:	a801      	add	r0, sp, #4
   d44bc:	f7ff ffd6 	bl	d446c <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d44c0:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   d44c2:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d44c6:	40d8      	lsrs	r0, r3
}
   d44c8:	f000 0001 	and.w	r0, r0, #1
   d44cc:	b003      	add	sp, #12
   d44ce:	f85d fb04 	ldr.w	pc, [sp], #4

000d44d2 <_ZN3DHTC1Ehhh>:
 * modified for Spark Core by RussGrue
 * */

#include "Adafruit_DHT.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
   d44d2:	b510      	push	{r4, lr}
	_pin = pin;
	_type = type;
	_count = count;
   d44d4:	7203      	strb	r3, [r0, #8]
	firstreading = true;
   d44d6:	2301      	movs	r3, #1
	_pin = pin;
   d44d8:	7181      	strb	r1, [r0, #6]
	_type = type;
   d44da:	71c2      	strb	r2, [r0, #7]
	firstreading = true;
   d44dc:	7403      	strb	r3, [r0, #16]
}
   d44de:	bd10      	pop	{r4, pc}

000d44e0 <_ZN3DHT5beginEv>:

void DHT::begin(void) {
   d44e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d44e4:	4605      	mov	r5, r0
/* Disabling USE_BIT_BAND since bitbanding is much slower! as per comment
 * by @pkourany on PR: https://github.com/spark/firmware/pull/556 */
#define USE_BIT_BAND 0

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d44e6:	4c1e      	ldr	r4, [pc, #120]	; (d4560 <_ZN3DHT5beginEv+0x80>)
// set up the pins!
	pinMode(_pin, INPUT);
   d44e8:	7980      	ldrb	r0, [r0, #6]
   d44ea:	f8df 8078 	ldr.w	r8, [pc, #120]	; d4564 <_ZN3DHT5beginEv+0x84>
   d44ee:	2100      	movs	r1, #0
   d44f0:	f002 f86e 	bl	d65d0 <pinMode>
	pinSetFast(_pin);
   d44f4:	79ae      	ldrb	r6, [r5, #6]
   d44f6:	7823      	ldrb	r3, [r4, #0]
   d44f8:	f3bf 8f5b 	dmb	ish
   d44fc:	f013 0f01 	tst.w	r3, #1
   d4500:	d10a      	bne.n	d4518 <_ZN3DHT5beginEv+0x38>
   d4502:	4620      	mov	r0, r4
   d4504:	f7ff fdcf 	bl	d40a6 <__cxa_guard_acquire>
   d4508:	b130      	cbz	r0, d4518 <_ZN3DHT5beginEv+0x38>
   d450a:	f000 fd97 	bl	d503c <HAL_Pin_Map>
   d450e:	f8c8 0000 	str.w	r0, [r8]
   d4512:	4620      	mov	r0, r4
   d4514:	f7ff fdcc 	bl	d40b0 <__cxa_guard_release>
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));


inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4518:	f8d8 3000 	ldr.w	r3, [r8]
   d451c:	0136      	lsls	r6, r6, #4
   d451e:	5d9f      	ldrb	r7, [r3, r6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4520:	7823      	ldrb	r3, [r4, #0]
   d4522:	f3bf 8f5b 	dmb	ish
   d4526:	07db      	lsls	r3, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4528:	ea4f 1747 	mov.w	r7, r7, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d452c:	d40a      	bmi.n	d4544 <_ZN3DHT5beginEv+0x64>
   d452e:	480c      	ldr	r0, [pc, #48]	; (d4560 <_ZN3DHT5beginEv+0x80>)
   d4530:	f7ff fdb9 	bl	d40a6 <__cxa_guard_acquire>
   d4534:	b130      	cbz	r0, d4544 <_ZN3DHT5beginEv+0x64>
   d4536:	f000 fd81 	bl	d503c <HAL_Pin_Map>
   d453a:	f8c8 0000 	str.w	r0, [r8]
   d453e:	4808      	ldr	r0, [pc, #32]	; (d4560 <_ZN3DHT5beginEv+0x80>)
   d4540:	f7ff fdb6 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4544:	f8d8 3000 	ldr.w	r3, [r8]
   d4548:	4433      	add	r3, r6
   d454a:	785b      	ldrb	r3, [r3, #1]
   d454c:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_pin_set(nrf_pin);
   d4550:	ea43 0007 	orr.w	r0, r3, r7
   d4554:	f7ff ffa2 	bl	d449c <nrf_gpio_pin_set>
	_lastreadtime = 0;
   d4558:	2300      	movs	r3, #0
   d455a:	60eb      	str	r3, [r5, #12]
}
   d455c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4560:	2003e5a0 	.word	0x2003e5a0
   d4564:	2003e5a4 	.word	0x2003e5a4

000d4568 <_ZN3DHT4readEv>:
	double tC = (a * (float) tempCelcius) / (b + (float) tempCelcius) + log( (float) percentHumidity / 100);
	double Td = (b * tC) / (a - tC);
	return Td;
}

boolean DHT::read(void) {
   d4568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d456c:	4604      	mov	r4, r0
   d456e:	b085      	sub	sp, #20
   d4570:	f000 fd4c 	bl	d500c <HAL_Timer_Get_Milli_Seconds>
	unsigned long currenttime;

// Check if sensor was read less than two seconds ago and return early
// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime) {
   d4574:	68e3      	ldr	r3, [r4, #12]
   d4576:	4283      	cmp	r3, r0
// ie there was a rollover
		_lastreadtime = 0;
   d4578:	bf84      	itt	hi
   d457a:	2300      	movhi	r3, #0
   d457c:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
   d457e:	7c23      	ldrb	r3, [r4, #16]
   d4580:	b92b      	cbnz	r3, d458e <_ZN3DHT4readEv+0x26>
   d4582:	68e3      	ldr	r3, [r4, #12]
   d4584:	1ac0      	subs	r0, r0, r3
   d4586:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d458a:	f0c0 815d 	bcc.w	d4848 <_ZN3DHT4readEv+0x2e0>
		return true; // return last correct measurement
//		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
   d458e:	2500      	movs	r5, #0
   d4590:	7425      	strb	r5, [r4, #16]
   d4592:	f000 fd3b 	bl	d500c <HAL_Timer_Get_Milli_Seconds>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4596:	4eae      	ldr	r6, [pc, #696]	; (d4850 <_ZN3DHT4readEv+0x2e8>)
	Serial.print("Currtime: "); Serial.print(currenttime);
	Serial.print(" Lasttime: "); Serial.print(_lastreadtime);
*/
	_lastreadtime = millis();

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   d4598:	6025      	str	r5, [r4, #0]
   d459a:	7125      	strb	r5, [r4, #4]
	_lastreadtime = millis();
   d459c:	60e0      	str	r0, [r4, #12]

// pull the pin high and wait 250 milliseconds
	pinSetFast(_pin);
   d459e:	79a7      	ldrb	r7, [r4, #6]
   d45a0:	7833      	ldrb	r3, [r6, #0]
   d45a2:	4dac      	ldr	r5, [pc, #688]	; (d4854 <_ZN3DHT4readEv+0x2ec>)
   d45a4:	f3bf 8f5b 	dmb	ish
   d45a8:	f013 0f01 	tst.w	r3, #1
   d45ac:	d109      	bne.n	d45c2 <_ZN3DHT4readEv+0x5a>
   d45ae:	4630      	mov	r0, r6
   d45b0:	f7ff fd79 	bl	d40a6 <__cxa_guard_acquire>
   d45b4:	b128      	cbz	r0, d45c2 <_ZN3DHT4readEv+0x5a>
   d45b6:	f000 fd41 	bl	d503c <HAL_Pin_Map>
   d45ba:	6028      	str	r0, [r5, #0]
   d45bc:	4630      	mov	r0, r6
   d45be:	f7ff fd77 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d45c2:	682b      	ldr	r3, [r5, #0]
   d45c4:	013f      	lsls	r7, r7, #4
   d45c6:	f813 8007 	ldrb.w	r8, [r3, r7]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d45ca:	7833      	ldrb	r3, [r6, #0]
   d45cc:	f3bf 8f5b 	dmb	ish
   d45d0:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d45d2:	ea4f 1848 	mov.w	r8, r8, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d45d6:	d409      	bmi.n	d45ec <_ZN3DHT4readEv+0x84>
   d45d8:	489d      	ldr	r0, [pc, #628]	; (d4850 <_ZN3DHT4readEv+0x2e8>)
   d45da:	f7ff fd64 	bl	d40a6 <__cxa_guard_acquire>
   d45de:	b128      	cbz	r0, d45ec <_ZN3DHT4readEv+0x84>
   d45e0:	f000 fd2c 	bl	d503c <HAL_Pin_Map>
   d45e4:	6028      	str	r0, [r5, #0]
   d45e6:	489a      	ldr	r0, [pc, #616]	; (d4850 <_ZN3DHT4readEv+0x2e8>)
   d45e8:	f7ff fd62 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d45ec:	682b      	ldr	r3, [r5, #0]
   d45ee:	441f      	add	r7, r3
   d45f0:	7878      	ldrb	r0, [r7, #1]
   d45f2:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_pin_set(nrf_pin);
   d45f6:	ea40 0008 	orr.w	r0, r0, r8
   d45fa:	f7ff ff4f 	bl	d449c <nrf_gpio_pin_set>
	//delay(250);

// now pull it low for ~20 milliseconds
	pinMode(_pin, OUTPUT);
   d45fe:	79a0      	ldrb	r0, [r4, #6]
   d4600:	2101      	movs	r1, #1
   d4602:	f001 ffe5 	bl	d65d0 <pinMode>
	pinResetFast(_pin);
   d4606:	79a7      	ldrb	r7, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4608:	7833      	ldrb	r3, [r6, #0]
   d460a:	f3bf 8f5b 	dmb	ish
   d460e:	07da      	lsls	r2, r3, #31
   d4610:	d409      	bmi.n	d4626 <_ZN3DHT4readEv+0xbe>
   d4612:	488f      	ldr	r0, [pc, #572]	; (d4850 <_ZN3DHT4readEv+0x2e8>)
   d4614:	f7ff fd47 	bl	d40a6 <__cxa_guard_acquire>
   d4618:	b128      	cbz	r0, d4626 <_ZN3DHT4readEv+0xbe>
   d461a:	f000 fd0f 	bl	d503c <HAL_Pin_Map>
   d461e:	6028      	str	r0, [r5, #0]
   d4620:	488b      	ldr	r0, [pc, #556]	; (d4850 <_ZN3DHT4readEv+0x2e8>)
   d4622:	f7ff fd45 	bl	d40b0 <__cxa_guard_release>
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4626:	682b      	ldr	r3, [r5, #0]
   d4628:	013f      	lsls	r7, r7, #4
   d462a:	5ddb      	ldrb	r3, [r3, r7]
   d462c:	ea4f 1843 	mov.w	r8, r3, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4630:	7833      	ldrb	r3, [r6, #0]
   d4632:	f3bf 8f5b 	dmb	ish
   d4636:	07db      	lsls	r3, r3, #31
   d4638:	d409      	bmi.n	d464e <_ZN3DHT4readEv+0xe6>
   d463a:	4885      	ldr	r0, [pc, #532]	; (d4850 <_ZN3DHT4readEv+0x2e8>)
   d463c:	f7ff fd33 	bl	d40a6 <__cxa_guard_acquire>
   d4640:	b128      	cbz	r0, d464e <_ZN3DHT4readEv+0xe6>
   d4642:	f000 fcfb 	bl	d503c <HAL_Pin_Map>
   d4646:	6028      	str	r0, [r5, #0]
   d4648:	4881      	ldr	r0, [pc, #516]	; (d4850 <_ZN3DHT4readEv+0x2e8>)
   d464a:	f7ff fd31 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d464e:	682b      	ldr	r3, [r5, #0]
   d4650:	441f      	add	r7, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4652:	a803      	add	r0, sp, #12
   d4654:	787b      	ldrb	r3, [r7, #1]
   d4656:	f003 031f 	and.w	r3, r3, #31
   d465a:	ea43 0308 	orr.w	r3, r3, r8
   d465e:	9303      	str	r3, [sp, #12]
   d4660:	f7ff ff04 	bl	d446c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d4664:	9a03      	ldr	r2, [sp, #12]
   d4666:	2301      	movs	r3, #1
   d4668:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d466a:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
	delay(20);
   d466e:	2014      	movs	r0, #20
   d4670:	f000 ff20 	bl	d54b4 <delay>
	noInterrupts();
   d4674:	f000 ffa6 	bl	d55c4 <_Z12noInterruptsv>
	pinSetFast(_pin);
   d4678:	79a7      	ldrb	r7, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d467a:	7833      	ldrb	r3, [r6, #0]
   d467c:	f3bf 8f5b 	dmb	ish
   d4680:	07d8      	lsls	r0, r3, #31
   d4682:	d409      	bmi.n	d4698 <_ZN3DHT4readEv+0x130>
   d4684:	4872      	ldr	r0, [pc, #456]	; (d4850 <_ZN3DHT4readEv+0x2e8>)
   d4686:	f7ff fd0e 	bl	d40a6 <__cxa_guard_acquire>
   d468a:	b128      	cbz	r0, d4698 <_ZN3DHT4readEv+0x130>
   d468c:	f000 fcd6 	bl	d503c <HAL_Pin_Map>
   d4690:	6028      	str	r0, [r5, #0]
   d4692:	486f      	ldr	r0, [pc, #444]	; (d4850 <_ZN3DHT4readEv+0x2e8>)
   d4694:	f7ff fd0c 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4698:	682b      	ldr	r3, [r5, #0]
   d469a:	013f      	lsls	r7, r7, #4
   d469c:	f813 8007 	ldrb.w	r8, [r3, r7]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d46a0:	7833      	ldrb	r3, [r6, #0]
   d46a2:	f3bf 8f5b 	dmb	ish
   d46a6:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d46a8:	ea4f 1848 	mov.w	r8, r8, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d46ac:	d409      	bmi.n	d46c2 <_ZN3DHT4readEv+0x15a>
   d46ae:	4868      	ldr	r0, [pc, #416]	; (d4850 <_ZN3DHT4readEv+0x2e8>)
   d46b0:	f7ff fcf9 	bl	d40a6 <__cxa_guard_acquire>
   d46b4:	b128      	cbz	r0, d46c2 <_ZN3DHT4readEv+0x15a>
   d46b6:	f000 fcc1 	bl	d503c <HAL_Pin_Map>
   d46ba:	6028      	str	r0, [r5, #0]
   d46bc:	4864      	ldr	r0, [pc, #400]	; (d4850 <_ZN3DHT4readEv+0x2e8>)
   d46be:	f7ff fcf7 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d46c2:	682b      	ldr	r3, [r5, #0]
   d46c4:	441f      	add	r7, r3
   d46c6:	7878      	ldrb	r0, [r7, #1]
   d46c8:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_pin_set(nrf_pin);
   d46cc:	ea40 0008 	orr.w	r0, r0, r8
   d46d0:	f7ff fee4 	bl	d449c <nrf_gpio_pin_set>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d46d4:	2028      	movs	r0, #40	; 0x28
   d46d6:	f000 fc91 	bl	d4ffc <HAL_Delay_Microseconds>
	delayMicroseconds(40);
	pinMode(_pin, INPUT);
   d46da:	79a0      	ldrb	r0, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d46dc:	f8df 8170 	ldr.w	r8, [pc, #368]	; d4850 <_ZN3DHT4readEv+0x2e8>
   d46e0:	2100      	movs	r1, #0
   d46e2:	f001 ff75 	bl	d65d0 <pinMode>

// read in timings
	for ( i=0; i< MAXTIMINGS; i++) {
   d46e6:	2700      	movs	r7, #0
	uint8_t laststate = HIGH;
   d46e8:	2301      	movs	r3, #1
	uint8_t j = 0, i;
   d46ea:	46ba      	mov	sl, r7
	uint8_t laststate = HIGH;
   d46ec:	9300      	str	r3, [sp, #0]
		counter = 0;
   d46ee:	f04f 0900 	mov.w	r9, #0
		while (pinReadFast(_pin) == laststate) {
   d46f2:	f894 b006 	ldrb.w	fp, [r4, #6]
   d46f6:	7833      	ldrb	r3, [r6, #0]
   d46f8:	f3bf 8f5b 	dmb	ish
   d46fc:	07da      	lsls	r2, r3, #31
   d46fe:	d409      	bmi.n	d4714 <_ZN3DHT4readEv+0x1ac>
   d4700:	4640      	mov	r0, r8
   d4702:	f7ff fcd0 	bl	d40a6 <__cxa_guard_acquire>
   d4706:	b128      	cbz	r0, d4714 <_ZN3DHT4readEv+0x1ac>
   d4708:	f000 fc98 	bl	d503c <HAL_Pin_Map>
   d470c:	6028      	str	r0, [r5, #0]
   d470e:	4640      	mov	r0, r8
   d4710:	f7ff fcce 	bl	d40b0 <__cxa_guard_release>
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4714:	682b      	ldr	r3, [r5, #0]
   d4716:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
   d471a:	f813 300b 	ldrb.w	r3, [r3, fp]
   d471e:	015b      	lsls	r3, r3, #5
   d4720:	9301      	str	r3, [sp, #4]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4722:	7833      	ldrb	r3, [r6, #0]
   d4724:	f3bf 8f5b 	dmb	ish
   d4728:	07db      	lsls	r3, r3, #31
   d472a:	d409      	bmi.n	d4740 <_ZN3DHT4readEv+0x1d8>
   d472c:	4640      	mov	r0, r8
   d472e:	f7ff fcba 	bl	d40a6 <__cxa_guard_acquire>
   d4732:	b128      	cbz	r0, d4740 <_ZN3DHT4readEv+0x1d8>
   d4734:	f000 fc82 	bl	d503c <HAL_Pin_Map>
   d4738:	6028      	str	r0, [r5, #0]
   d473a:	4640      	mov	r0, r8
   d473c:	f7ff fcb8 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4740:	682b      	ldr	r3, [r5, #0]
   d4742:	445b      	add	r3, fp
   d4744:	f893 b001 	ldrb.w	fp, [r3, #1]
   d4748:	9b01      	ldr	r3, [sp, #4]
   d474a:	f00b 0b1f 	and.w	fp, fp, #31
   d474e:	ea4b 0b03 	orr.w	fp, fp, r3
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
   d4752:	4658      	mov	r0, fp
   d4754:	f7ff feaf 	bl	d44b6 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d4758:	4658      	mov	r0, fp
   d475a:	f7ff feac 	bl	d44b6 <nrf_gpio_pin_read>
   d475e:	9b00      	ldr	r3, [sp, #0]
   d4760:	4283      	cmp	r3, r0
   d4762:	d109      	bne.n	d4778 <_ZN3DHT4readEv+0x210>
			counter++;
   d4764:	f109 0901 	add.w	r9, r9, #1
   d4768:	fa5f f989 	uxtb.w	r9, r9
   d476c:	2001      	movs	r0, #1
   d476e:	f000 fc45 	bl	d4ffc <HAL_Delay_Microseconds>
			delayMicroseconds(1);
			if (counter == 255) {
   d4772:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   d4776:	d1bc      	bne.n	d46f2 <_ZN3DHT4readEv+0x18a>
				break;
			}
		}
		laststate = pinReadFast(_pin);
   d4778:	f894 b006 	ldrb.w	fp, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d477c:	7833      	ldrb	r3, [r6, #0]
   d477e:	f3bf 8f5b 	dmb	ish
   d4782:	07d8      	lsls	r0, r3, #31
   d4784:	d409      	bmi.n	d479a <_ZN3DHT4readEv+0x232>
   d4786:	4640      	mov	r0, r8
   d4788:	f7ff fc8d 	bl	d40a6 <__cxa_guard_acquire>
   d478c:	b128      	cbz	r0, d479a <_ZN3DHT4readEv+0x232>
   d478e:	f000 fc55 	bl	d503c <HAL_Pin_Map>
   d4792:	6028      	str	r0, [r5, #0]
   d4794:	4640      	mov	r0, r8
   d4796:	f7ff fc8b 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d479a:	682b      	ldr	r3, [r5, #0]
   d479c:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
   d47a0:	f813 300b 	ldrb.w	r3, [r3, fp]
   d47a4:	015b      	lsls	r3, r3, #5
   d47a6:	9300      	str	r3, [sp, #0]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d47a8:	7833      	ldrb	r3, [r6, #0]
   d47aa:	f3bf 8f5b 	dmb	ish
   d47ae:	07d9      	lsls	r1, r3, #31
   d47b0:	d409      	bmi.n	d47c6 <_ZN3DHT4readEv+0x25e>
   d47b2:	4640      	mov	r0, r8
   d47b4:	f7ff fc77 	bl	d40a6 <__cxa_guard_acquire>
   d47b8:	b128      	cbz	r0, d47c6 <_ZN3DHT4readEv+0x25e>
   d47ba:	f000 fc3f 	bl	d503c <HAL_Pin_Map>
   d47be:	6028      	str	r0, [r5, #0]
   d47c0:	4640      	mov	r0, r8
   d47c2:	f7ff fc75 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d47c6:	682b      	ldr	r3, [r5, #0]
   d47c8:	445b      	add	r3, fp
   d47ca:	f893 b001 	ldrb.w	fp, [r3, #1]
   d47ce:	9b00      	ldr	r3, [sp, #0]
   d47d0:	f00b 0b1f 	and.w	fp, fp, #31
   d47d4:	ea4b 0b03 	orr.w	fp, fp, r3
    (void)nrf_gpio_pin_read(nrf_pin);
   d47d8:	4658      	mov	r0, fp
   d47da:	f7ff fe6c 	bl	d44b6 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d47de:	4658      	mov	r0, fp
   d47e0:	f7ff fe69 	bl	d44b6 <nrf_gpio_pin_read>

		if (counter == 255) break;
   d47e4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
		laststate = pinReadFast(_pin);
   d47e8:	b2c3      	uxtb	r3, r0
   d47ea:	9300      	str	r3, [sp, #0]
		if (counter == 255) break;
   d47ec:	d018      	beq.n	d4820 <_ZN3DHT4readEv+0x2b8>

// ignore first 3 transitions
		if ((i >= 4) && (i%2 == 0)) {
   d47ee:	2f03      	cmp	r7, #3
   d47f0:	d911      	bls.n	d4816 <_ZN3DHT4readEv+0x2ae>
   d47f2:	07fa      	lsls	r2, r7, #31
   d47f4:	d40f      	bmi.n	d4816 <_ZN3DHT4readEv+0x2ae>
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   d47f6:	ea4f 02da 	mov.w	r2, sl, lsr #3
			if (counter > _count)
				data[j/8] |= 1;
			j++;
   d47fa:	f10a 0a01 	add.w	sl, sl, #1
			data[j/8] <<= 1;
   d47fe:	5ca3      	ldrb	r3, [r4, r2]
   d4800:	005b      	lsls	r3, r3, #1
   d4802:	b2db      	uxtb	r3, r3
   d4804:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
   d4806:	7a21      	ldrb	r1, [r4, #8]
   d4808:	4549      	cmp	r1, r9
				data[j/8] |= 1;
   d480a:	bf3c      	itt	cc
   d480c:	f043 0301 	orrcc.w	r3, r3, #1
   d4810:	54a3      	strbcc	r3, [r4, r2]
			j++;
   d4812:	fa5f fa8a 	uxtb.w	sl, sl
	for ( i=0; i< MAXTIMINGS; i++) {
   d4816:	3701      	adds	r7, #1
   d4818:	b2ff      	uxtb	r7, r7
   d481a:	2f55      	cmp	r7, #85	; 0x55
   d481c:	f47f af67 	bne.w	d46ee <_ZN3DHT4readEv+0x186>
		}
	}

	interrupts();
   d4820:	f000 fed2 	bl	d55c8 <_Z10interruptsv>
	Serial.print(data[4], HEX); Serial.print(" =? ");
	Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
*/

// check we read 40 bits and that the checksum matches
	if ((j >= 40) &&
   d4824:	f1ba 0f27 	cmp.w	sl, #39	; 0x27
   d4828:	d910      	bls.n	d484c <_ZN3DHT4readEv+0x2e4>
	   (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
   d482a:	7863      	ldrb	r3, [r4, #1]
   d482c:	7820      	ldrb	r0, [r4, #0]
   d482e:	4418      	add	r0, r3
   d4830:	78a3      	ldrb	r3, [r4, #2]
   d4832:	4418      	add	r0, r3
   d4834:	78e3      	ldrb	r3, [r4, #3]
   d4836:	4418      	add	r0, r3
   d4838:	7923      	ldrb	r3, [r4, #4]
   d483a:	b2c0      	uxtb	r0, r0
	if ((j >= 40) &&
   d483c:	1ac3      	subs	r3, r0, r3
   d483e:	4258      	negs	r0, r3
   d4840:	4158      	adcs	r0, r3
		return true;
	}

	return false;

}
   d4842:	b005      	add	sp, #20
   d4844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return true; // return last correct measurement
   d4848:	2001      	movs	r0, #1
   d484a:	e7fa      	b.n	d4842 <_ZN3DHT4readEv+0x2da>
	return false;
   d484c:	2000      	movs	r0, #0
   d484e:	e7f8      	b.n	d4842 <_ZN3DHT4readEv+0x2da>
   d4850:	2003e5a0 	.word	0x2003e5a0
   d4854:	2003e5a4 	.word	0x2003e5a4

000d4858 <_ZN3DHT15readTemperatureEv>:
float DHT::readTemperature() {
   d4858:	b510      	push	{r4, lr}
   d485a:	4604      	mov	r4, r0
	if (read()) {
   d485c:	f7ff fe84 	bl	d4568 <_ZN3DHT4readEv>
   d4860:	b320      	cbz	r0, d48ac <_ZN3DHT15readTemperatureEv+0x54>
		switch (_type) {
   d4862:	79e3      	ldrb	r3, [r4, #7]
   d4864:	2b0b      	cmp	r3, #11
   d4866:	d01b      	beq.n	d48a0 <_ZN3DHT15readTemperatureEv+0x48>
   d4868:	3b15      	subs	r3, #21
   d486a:	2b01      	cmp	r3, #1
   d486c:	d81e      	bhi.n	d48ac <_ZN3DHT15readTemperatureEv+0x54>
				f = data[2] & 0x7F;
   d486e:	78a3      	ldrb	r3, [r4, #2]
				f += data[3];
   d4870:	eddf 6a10 	vldr	s13, [pc, #64]	; d48b4 <_ZN3DHT15readTemperatureEv+0x5c>
				f = data[2] & 0x7F;
   d4874:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   d4878:	ee07 2a10 	vmov	s14, r2
				f += data[3];
   d487c:	78e2      	ldrb	r2, [r4, #3]
   d487e:	ee07 2a90 	vmov	s15, r2
				f = data[2] & 0x7F;
   d4882:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
				f += data[3];
   d4886:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				if (data[2] & 0x80)
   d488a:	061b      	lsls	r3, r3, #24
				f += data[3];
   d488c:	eee7 7a26 	vfma.f32	s15, s14, s13
				f /= 10;
   d4890:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   d4894:	ee87 0a87 	vdiv.f32	s0, s15, s14
				if (data[2] & 0x80)
   d4898:	d507      	bpl.n	d48aa <_ZN3DHT15readTemperatureEv+0x52>
					f *= -1;
   d489a:	eeb1 0a40 	vneg.f32	s0, s0
   d489e:	e004      	b.n	d48aa <_ZN3DHT15readTemperatureEv+0x52>
				f = data[2];
   d48a0:	78a3      	ldrb	r3, [r4, #2]
   d48a2:	ee00 3a10 	vmov	s0, r3
   d48a6:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
   d48aa:	bd10      	pop	{r4, pc}
		switch (_type) {
   d48ac:	ed9f 0a02 	vldr	s0, [pc, #8]	; d48b8 <_ZN3DHT15readTemperatureEv+0x60>
   d48b0:	e7fb      	b.n	d48aa <_ZN3DHT15readTemperatureEv+0x52>
   d48b2:	bf00      	nop
   d48b4:	43800000 	.word	0x43800000
   d48b8:	7fc00000 	.word	0x7fc00000

000d48bc <_ZN3DHT14getTempCelciusEv>:
	return readTemperature();
   d48bc:	f7ff bfcc 	b.w	d4858 <_ZN3DHT15readTemperatureEv>

000d48c0 <_ZN3DHT16getTempFarenheitEv>:
float DHT::getTempFarenheit() {
   d48c0:	b508      	push	{r3, lr}
	return convertCtoF(readTemperature());
   d48c2:	f7ff ffc9 	bl	d4858 <_ZN3DHT15readTemperatureEv>
	return c * 9 / 5 + 32;
   d48c6:	eef2 7a02 	vmov.f32	s15, #34	; 0x41100000  9.0
   d48ca:	ee20 0a27 	vmul.f32	s0, s0, s15
   d48ce:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
   d48d2:	ee80 7a27 	vdiv.f32	s14, s0, s15
}
   d48d6:	ed9f 0a02 	vldr	s0, [pc, #8]	; d48e0 <_ZN3DHT16getTempFarenheitEv+0x20>
   d48da:	ee37 0a00 	vadd.f32	s0, s14, s0
   d48de:	bd08      	pop	{r3, pc}
   d48e0:	42000000 	.word	0x42000000

000d48e4 <_ZN3DHT12readHumidityEv>:
float DHT::readHumidity(void) {
   d48e4:	b510      	push	{r4, lr}
   d48e6:	4604      	mov	r4, r0
	if (read()) {
   d48e8:	f7ff fe3e 	bl	d4568 <_ZN3DHT4readEv>
   d48ec:	b1f0      	cbz	r0, d492c <_ZN3DHT12readHumidityEv+0x48>
		switch (_type) {
   d48ee:	79e3      	ldrb	r3, [r4, #7]
   d48f0:	2b0b      	cmp	r3, #11
   d48f2:	d015      	beq.n	d4920 <_ZN3DHT12readHumidityEv+0x3c>
   d48f4:	3b15      	subs	r3, #21
   d48f6:	2b01      	cmp	r3, #1
   d48f8:	d818      	bhi.n	d492c <_ZN3DHT12readHumidityEv+0x48>
				f = data[0];
   d48fa:	7823      	ldrb	r3, [r4, #0]
				f += data[1];
   d48fc:	eddf 6a0d 	vldr	s13, [pc, #52]	; d4934 <_ZN3DHT12readHumidityEv+0x50>
				f = data[0];
   d4900:	ee07 3a10 	vmov	s14, r3
				f += data[1];
   d4904:	7863      	ldrb	r3, [r4, #1]
   d4906:	ee07 3a90 	vmov	s15, r3
				f = data[0];
   d490a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
				f += data[1];
   d490e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4912:	eee7 7a26 	vfma.f32	s15, s14, s13
				f /= 10;
   d4916:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   d491a:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   d491e:	bd10      	pop	{r4, pc}
				f = data[0];
   d4920:	7823      	ldrb	r3, [r4, #0]
   d4922:	ee00 3a10 	vmov	s0, r3
   d4926:	eeb8 0a40 	vcvt.f32.u32	s0, s0
				return f;
   d492a:	e7f8      	b.n	d491e <_ZN3DHT12readHumidityEv+0x3a>
		switch (_type) {
   d492c:	ed9f 0a02 	vldr	s0, [pc, #8]	; d4938 <_ZN3DHT12readHumidityEv+0x54>
   d4930:	e7f5      	b.n	d491e <_ZN3DHT12readHumidityEv+0x3a>
   d4932:	bf00      	nop
   d4934:	43800000 	.word	0x43800000
   d4938:	7fc00000 	.word	0x7fc00000

000d493c <_ZN3DHT11getHumidityEv>:
	return readHumidity();
   d493c:	f7ff bfd2 	b.w	d48e4 <_ZN3DHT12readHumidityEv>

000d4940 <_ZN11CSmartLightC1Ev>:
#include "smartlight.h"

CSmartLight::CSmartLight() {
   d4940:	b538      	push	{r3, r4, r5, lr}
   d4942:	f100 0520 	add.w	r5, r0, #32
   d4946:	4604      	mov	r4, r0
   d4948:	490c      	ldr	r1, [pc, #48]	; (d497c <_ZN11CSmartLightC1Ev+0x3c>)
   d494a:	4628      	mov	r0, r5
   d494c:	f001 fb1b 	bl	d5f86 <_ZN6StringC1EPKc>
    state_L0 = CSmartLight::S_ON;
   d4950:	f240 1301 	movw	r3, #257	; 0x101
   d4954:	8023      	strh	r3, [r4, #0]
    state_L1 = CSmartLight::S_AUTO;
    brightness = RGB_BRIGHTNESS_DEAULT;
   d4956:	2380      	movs	r3, #128	; 0x80
   d4958:	6063      	str	r3, [r4, #4]
    sensorMax = LIGHT_SENSOR_MAX;
    sensorMin = LIGHT_SENSOR_MIN;
   d495a:	f640 11c4 	movw	r1, #2500	; 0x9c4
   d495e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d4962:	e9c4 1303 	strd	r1, r3, [r4, #12]

    statusStr = "{}";
   d4966:	4628      	mov	r0, r5
   d4968:	4905      	ldr	r1, [pc, #20]	; (d4980 <_ZN11CSmartLightC1Ev+0x40>)
   d496a:	f001 fb5f 	bl	d602c <_ZN6StringaSEPKc>
    resetCmd();
    createStatusStr();
}

void CSmartLight::resetCmd() {
    cmd.On = INVALID_CMD;
   d496e:	4b05      	ldr	r3, [pc, #20]	; (d4984 <_ZN11CSmartLightC1Ev+0x44>)
    cmd.Auto = INVALID_CMD;
    cmd.Brightness = INVALID_CMD;
   d4970:	61e3      	str	r3, [r4, #28]
    cmd.Auto = INVALID_CMD;
   d4972:	e9c4 3305 	strd	r3, r3, [r4, #20]
}
   d4976:	4620      	mov	r0, r4
   d4978:	bd38      	pop	{r3, r4, r5, pc}
   d497a:	bf00      	nop
   d497c:	000d730b 	.word	0x000d730b
   d4980:	000d71e4 	.word	0x000d71e4
   d4984:	fffe7961 	.word	0xfffe7961

000d4988 <_ZN11CSmartLight12turnOffLightEv>:
}

void CSmartLight::turnOffLight() {
   d4988:	b508      	push	{r3, lr}
    if (RGB.brightness() != 0) RGB.brightness(0);
   d498a:	f001 fa9e 	bl	d5eca <_ZN8RGBClass10brightnessEv>
   d498e:	b128      	cbz	r0, d499c <_ZN11CSmartLight12turnOffLightEv+0x14>
}
   d4990:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (RGB.brightness() != 0) RGB.brightness(0);
   d4994:	2101      	movs	r1, #1
   d4996:	2000      	movs	r0, #0
   d4998:	f001 ba89 	b.w	d5eae <_ZN8RGBClass10brightnessEhb>
}
   d499c:	bd08      	pop	{r3, pc}
	...

000d49a0 <_ZN11CSmartLight24updateBrightnessManuallyEi>:

// 0 <= val <= 100 (i.e., %)
void CSmartLight::updateBrightnessManually(int val) {
   d49a0:	b538      	push	{r3, r4, r5, lr}
    if (val == INVALID_CMD) {
   d49a2:	4b13      	ldr	r3, [pc, #76]	; (d49f0 <_ZN11CSmartLight24updateBrightnessManuallyEi+0x50>)
   d49a4:	4299      	cmp	r1, r3
void CSmartLight::updateBrightnessManually(int val) {
   d49a6:	4604      	mov	r4, r0
   d49a8:	4608      	mov	r0, r1
    if (val == INVALID_CMD) {
   d49aa:	d10a      	bne.n	d49c2 <_ZN11CSmartLight24updateBrightnessManuallyEi+0x22>
        if (brightness != RGB.brightness()) RGB.brightness(brightness);
   d49ac:	6865      	ldr	r5, [r4, #4]
   d49ae:	f001 fa8c 	bl	d5eca <_ZN8RGBClass10brightnessEv>
   d49b2:	4285      	cmp	r5, r0
   d49b4:	d016      	beq.n	d49e4 <_ZN11CSmartLight24updateBrightnessManuallyEi+0x44>
   d49b6:	7920      	ldrb	r0, [r4, #4]
   d49b8:	2101      	movs	r1, #1
        return;
    }
    brightness = (int)((val/100.0)*RGB_BRIGHTNESS_MAX);
    RGB.brightness(brightness);
}
   d49ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    RGB.brightness(brightness);
   d49be:	f001 ba76 	b.w	d5eae <_ZN8RGBClass10brightnessEhb>
    brightness = (int)((val/100.0)*RGB_BRIGHTNESS_MAX);
   d49c2:	f001 ffc3 	bl	d694c <__aeabi_i2d>
   d49c6:	4b0b      	ldr	r3, [pc, #44]	; (d49f4 <_ZN11CSmartLight24updateBrightnessManuallyEi+0x54>)
   d49c8:	2200      	movs	r2, #0
   d49ca:	f002 f953 	bl	d6c74 <__aeabi_ddiv>
   d49ce:	a306      	add	r3, pc, #24	; (adr r3, d49e8 <_ZN11CSmartLight24updateBrightnessManuallyEi+0x48>)
   d49d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d49d4:	f002 f824 	bl	d6a20 <__aeabi_dmul>
   d49d8:	f002 fa34 	bl	d6e44 <__aeabi_d2iz>
    RGB.brightness(brightness);
   d49dc:	2101      	movs	r1, #1
    brightness = (int)((val/100.0)*RGB_BRIGHTNESS_MAX);
   d49de:	6060      	str	r0, [r4, #4]
    RGB.brightness(brightness);
   d49e0:	b2c0      	uxtb	r0, r0
   d49e2:	e7ea      	b.n	d49ba <_ZN11CSmartLight24updateBrightnessManuallyEi+0x1a>
}
   d49e4:	bd38      	pop	{r3, r4, r5, pc}
   d49e6:	bf00      	nop
   d49e8:	00000000 	.word	0x00000000
   d49ec:	406fe000 	.word	0x406fe000
   d49f0:	fffe7961 	.word	0xfffe7961
   d49f4:	40590000 	.word	0x40590000

000d49f8 <_ZN11CSmartLight13readSensorValEv>:

    RGB.brightness(brightness);
}


void CSmartLight::readSensorVal() {
   d49f8:	b510      	push	{r4, lr}
   d49fa:	4604      	mov	r4, r0
    sensorVal = analogRead(LIGHT_SENSOR);
   d49fc:	2013      	movs	r0, #19
   d49fe:	f001 fdf8 	bl	d65f2 <analogRead>
   d4a02:	60a0      	str	r0, [r4, #8]
}
   d4a04:	bd10      	pop	{r4, pc}
	...

000d4a08 <_ZN11CSmartLight29updataBrightnessAutomaticallyEv>:
void CSmartLight::updataBrightnessAutomatically() {
   d4a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4a0c:	4604      	mov	r4, r0
    readSensorVal();
   d4a0e:	f7ff fff3 	bl	d49f8 <_ZN11CSmartLight13readSensorValEv>
    if (curSensorVal < sensorMin) curSensorVal = sensorMin;
   d4a12:	6925      	ldr	r5, [r4, #16]
   d4a14:	68a0      	ldr	r0, [r4, #8]
    if (curSensorVal > sensorMax) curSensorVal = sensorMax;
   d4a16:	f8d4 800c 	ldr.w	r8, [r4, #12]
   d4a1a:	42a8      	cmp	r0, r5
   d4a1c:	bfb8      	it	lt
   d4a1e:	4628      	movlt	r0, r5
    double amountOfLight = (double)(curSensorVal-sensorMin) / (double)(sensorMax-sensorMin);
   d4a20:	4580      	cmp	r8, r0
   d4a22:	bfd4      	ite	le
   d4a24:	ebc5 0008 	rsble	r0, r5, r8
   d4a28:	ebc5 0000 	rsbgt	r0, r5, r0
   d4a2c:	f001 ff8e 	bl	d694c <__aeabi_i2d>
   d4a30:	4606      	mov	r6, r0
   d4a32:	eba8 0005 	sub.w	r0, r8, r5
   d4a36:	460f      	mov	r7, r1
   d4a38:	f001 ff88 	bl	d694c <__aeabi_i2d>
   d4a3c:	4602      	mov	r2, r0
   d4a3e:	460b      	mov	r3, r1
   d4a40:	4630      	mov	r0, r6
   d4a42:	4639      	mov	r1, r7
   d4a44:	f002 f916 	bl	d6c74 <__aeabi_ddiv>
   d4a48:	4602      	mov	r2, r0
   d4a4a:	460b      	mov	r3, r1
    brightness = (int)((double)RGB_BRIGHTNESS_MAX*(1.0-amountOfLight));
   d4a4c:	2000      	movs	r0, #0
   d4a4e:	490a      	ldr	r1, [pc, #40]	; (d4a78 <_ZN11CSmartLight29updataBrightnessAutomaticallyEv+0x70>)
   d4a50:	f001 fe2e 	bl	d66b0 <__aeabi_dsub>
   d4a54:	a306      	add	r3, pc, #24	; (adr r3, d4a70 <_ZN11CSmartLight29updataBrightnessAutomaticallyEv+0x68>)
   d4a56:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4a5a:	f001 ffe1 	bl	d6a20 <__aeabi_dmul>
   d4a5e:	f002 f9f1 	bl	d6e44 <__aeabi_d2iz>
    RGB.brightness(brightness);
   d4a62:	2101      	movs	r1, #1
    brightness = (int)((double)RGB_BRIGHTNESS_MAX*(1.0-amountOfLight));
   d4a64:	6060      	str	r0, [r4, #4]
}
   d4a66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    RGB.brightness(brightness);
   d4a6a:	b2c0      	uxtb	r0, r0
   d4a6c:	f001 ba1f 	b.w	d5eae <_ZN8RGBClass10brightnessEhb>
   d4a70:	00000000 	.word	0x00000000
   d4a74:	406fe000 	.word	0x406fe000
   d4a78:	3ff00000 	.word	0x3ff00000
   d4a7c:	00000000 	.word	0x00000000

000d4a80 <_ZN11CSmartLight15createStatusStrEv>:
int CSmartLight::getSensorVal() {
    return sensorVal;
}


void CSmartLight::createStatusStr() {
   d4a80:	b570      	push	{r4, r5, r6, lr}
   d4a82:	b088      	sub	sp, #32
    statusStr = String::format("{\"L0\":%d,\"L1\":%d,\"b\":%d,\"s\":%d,\"m\":%d,\"M\":%d}",
   d4a84:	68c3      	ldr	r3, [r0, #12]
   d4a86:	7846      	ldrb	r6, [r0, #1]
   d4a88:	7805      	ldrb	r5, [r0, #0]
   d4a8a:	9303      	str	r3, [sp, #12]
   d4a8c:	6903      	ldr	r3, [r0, #16]
   d4a8e:	9302      	str	r3, [sp, #8]
   d4a90:	6883      	ldr	r3, [r0, #8]
   d4a92:	9301      	str	r3, [sp, #4]
void CSmartLight::createStatusStr() {
   d4a94:	4604      	mov	r4, r0
        state_L0, state_L1, (int)((double)brightness/RGB_BRIGHTNESS_MAX*100.0), sensorVal, sensorMin, sensorMax);
   d4a96:	6840      	ldr	r0, [r0, #4]
   d4a98:	f001 ff58 	bl	d694c <__aeabi_i2d>
   d4a9c:	a310      	add	r3, pc, #64	; (adr r3, d4ae0 <_ZN11CSmartLight15createStatusStrEv+0x60>)
   d4a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4aa2:	f002 f8e7 	bl	d6c74 <__aeabi_ddiv>
   d4aa6:	4b0c      	ldr	r3, [pc, #48]	; (d4ad8 <_ZN11CSmartLight15createStatusStrEv+0x58>)
   d4aa8:	2200      	movs	r2, #0
   d4aaa:	f001 ffb9 	bl	d6a20 <__aeabi_dmul>
    statusStr = String::format("{\"L0\":%d,\"L1\":%d,\"b\":%d,\"s\":%d,\"m\":%d,\"M\":%d}",
   d4aae:	f002 f9c9 	bl	d6e44 <__aeabi_d2iz>
   d4ab2:	4633      	mov	r3, r6
   d4ab4:	462a      	mov	r2, r5
   d4ab6:	9000      	str	r0, [sp, #0]
   d4ab8:	4908      	ldr	r1, [pc, #32]	; (d4adc <_ZN11CSmartLight15createStatusStrEv+0x5c>)
   d4aba:	a804      	add	r0, sp, #16
   d4abc:	f001 faf4 	bl	d60a8 <_ZN6String6formatEPKcz>
        state_L0, state_L1, (int)((double)brightness/RGB_BRIGHTNESS_MAX*100.0), sensorVal, sensorMin, sensorMax);
   d4ac0:	a904      	add	r1, sp, #16
   d4ac2:	f104 0020 	add.w	r0, r4, #32
   d4ac6:	f001 faa9 	bl	d601c <_ZN6StringaSEOS_>
   d4aca:	a804      	add	r0, sp, #16
   d4acc:	f001 fa10 	bl	d5ef0 <_ZN6StringD1Ev>
}
   d4ad0:	b008      	add	sp, #32
   d4ad2:	bd70      	pop	{r4, r5, r6, pc}
   d4ad4:	f3af 8000 	nop.w
   d4ad8:	40590000 	.word	0x40590000
   d4adc:	000d71e7 	.word	0x000d71e7
   d4ae0:	00000000 	.word	0x00000000
   d4ae4:	406fe000 	.word	0x406fe000

000d4ae8 <_ZN11CSmartLight7executeEv>:
void CSmartLight::execute() {
   d4ae8:	b538      	push	{r3, r4, r5, lr}
    switch (state_L0) {
   d4aea:	7805      	ldrb	r5, [r0, #0]
void CSmartLight::execute() {
   d4aec:	4604      	mov	r4, r0
    switch (state_L0) {
   d4aee:	b155      	cbz	r5, d4b06 <_ZN11CSmartLight7executeEv+0x1e>
   d4af0:	2d01      	cmp	r5, #1
   d4af2:	d013      	beq.n	d4b1c <_ZN11CSmartLight7executeEv+0x34>
    cmd.On = INVALID_CMD;
   d4af4:	4b17      	ldr	r3, [pc, #92]	; (d4b54 <_ZN11CSmartLight7executeEv+0x6c>)
    cmd.Brightness = INVALID_CMD;
   d4af6:	61e3      	str	r3, [r4, #28]
    cmd.Auto = INVALID_CMD;
   d4af8:	e9c4 3305 	strd	r3, r3, [r4, #20]
    createStatusStr();
   d4afc:	4620      	mov	r0, r4
}
   d4afe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    createStatusStr();
   d4b02:	f7ff bfbd 	b.w	d4a80 <_ZN11CSmartLight15createStatusStrEv>
            turnOffLight();
   d4b06:	f7ff ff3f 	bl	d4988 <_ZN11CSmartLight12turnOffLightEv>
            if (cmd.On != INVALID_CMD) {
   d4b0a:	6963      	ldr	r3, [r4, #20]
   d4b0c:	4a11      	ldr	r2, [pc, #68]	; (d4b54 <_ZN11CSmartLight7executeEv+0x6c>)
   d4b0e:	4293      	cmp	r3, r2
   d4b10:	d0f0      	beq.n	d4af4 <_ZN11CSmartLight7executeEv+0xc>
                if (cmd.On) {
   d4b12:	2b00      	cmp	r3, #0
   d4b14:	d0ee      	beq.n	d4af4 <_ZN11CSmartLight7executeEv+0xc>
                    state_L0 = CSmartLight::S_ON;
   d4b16:	2301      	movs	r3, #1
   d4b18:	8023      	strh	r3, [r4, #0]
   d4b1a:	e7eb      	b.n	d4af4 <_ZN11CSmartLight7executeEv+0xc>
            switch (state_L1) {
   d4b1c:	7843      	ldrb	r3, [r0, #1]
   d4b1e:	b133      	cbz	r3, d4b2e <_ZN11CSmartLight7executeEv+0x46>
   d4b20:	2b01      	cmp	r3, #1
   d4b22:	d00f      	beq.n	d4b44 <_ZN11CSmartLight7executeEv+0x5c>
                if (!cmd.On) state_L0 = CSmartLight::S_OFF;
   d4b24:	6963      	ldr	r3, [r4, #20]
   d4b26:	2b00      	cmp	r3, #0
   d4b28:	d1e4      	bne.n	d4af4 <_ZN11CSmartLight7executeEv+0xc>
   d4b2a:	7023      	strb	r3, [r4, #0]
   d4b2c:	e7e2      	b.n	d4af4 <_ZN11CSmartLight7executeEv+0xc>
                    updateBrightnessManually(cmd.Brightness);
   d4b2e:	69c1      	ldr	r1, [r0, #28]
   d4b30:	f7ff ff36 	bl	d49a0 <_ZN11CSmartLight24updateBrightnessManuallyEi>
                    if (cmd.Auto != INVALID_CMD) {
   d4b34:	69a3      	ldr	r3, [r4, #24]
   d4b36:	4a07      	ldr	r2, [pc, #28]	; (d4b54 <_ZN11CSmartLight7executeEv+0x6c>)
   d4b38:	4293      	cmp	r3, r2
   d4b3a:	d0f3      	beq.n	d4b24 <_ZN11CSmartLight7executeEv+0x3c>
                        if (cmd.Auto) state_L1 = CSmartLight::S_AUTO;
   d4b3c:	2b00      	cmp	r3, #0
   d4b3e:	d0f1      	beq.n	d4b24 <_ZN11CSmartLight7executeEv+0x3c>
   d4b40:	7065      	strb	r5, [r4, #1]
   d4b42:	e7ef      	b.n	d4b24 <_ZN11CSmartLight7executeEv+0x3c>
                    updataBrightnessAutomatically();
   d4b44:	f7ff ff60 	bl	d4a08 <_ZN11CSmartLight29updataBrightnessAutomaticallyEv>
                        if (!cmd.Auto) state_L1 = CSmartLight::S_MANUAL;
   d4b48:	69a3      	ldr	r3, [r4, #24]
   d4b4a:	2b00      	cmp	r3, #0
   d4b4c:	d1ea      	bne.n	d4b24 <_ZN11CSmartLight7executeEv+0x3c>
   d4b4e:	7063      	strb	r3, [r4, #1]
   d4b50:	e7e8      	b.n	d4b24 <_ZN11CSmartLight7executeEv+0x3c>
   d4b52:	bf00      	nop
   d4b54:	fffe7961 	.word	0xfffe7961

000d4b58 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE>:
void CSmartLight::cmdProcessing(JSONValue cmdJson) {
   d4b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4b5c:	b08a      	sub	sp, #40	; 0x28
        JSONObjectIterator(value.t_, value.d_) {
   d4b5e:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4b60:	f851 3b04 	ldr.w	r3, [r1], #4
   d4b64:	9300      	str	r3, [sp, #0]
   d4b66:	4604      	mov	r4, r0
   d4b68:	a801      	add	r0, sp, #4
   d4b6a:	f7ff faeb 	bl	d4144 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d4b6e:	466a      	mov	r2, sp
   d4b70:	4629      	mov	r1, r5
   d4b72:	a804      	add	r0, sp, #16
   d4b74:	f000 ffa4 	bl	d5ac0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4b78:	a801      	add	r0, sp, #4
   d4b7a:	f7ff facd 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return strcmp(s_, str) == 0;
   d4b7e:	4e3c      	ldr	r6, [pc, #240]	; (d4c70 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x118>)
   d4b80:	4f3c      	ldr	r7, [pc, #240]	; (d4c74 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x11c>)
   d4b82:	f8df 80fc 	ldr.w	r8, [pc, #252]	; d4c80 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x128>
    while (iter.next()) {
   d4b86:	a804      	add	r0, sp, #16
   d4b88:	f000 ffb2 	bl	d5af0 <_ZN5spark18JSONObjectIterator4nextEv>
   d4b8c:	2800      	cmp	r0, #0
   d4b8e:	d069      	beq.n	d4c64 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x10c>
        if (iter.name() == "on") {
   d4b90:	a904      	add	r1, sp, #16
   d4b92:	4668      	mov	r0, sp
   d4b94:	f7ff fadd 	bl	d4152 <_ZNK5spark18JSONObjectIterator4nameEv>
   d4b98:	4631      	mov	r1, r6
   d4b9a:	9802      	ldr	r0, [sp, #8]
   d4b9c:	f002 f9d4 	bl	d6f48 <strcmp>
   d4ba0:	4605      	mov	r5, r0
   d4ba2:	a801      	add	r0, sp, #4
   d4ba4:	f7ff fab8 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            cmd.On = (int)iter.value().toBool();
   d4ba8:	a904      	add	r1, sp, #16
   d4baa:	4668      	mov	r0, sp
        if (iter.name() == "on") {
   d4bac:	b94d      	cbnz	r5, d4bc2 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x6a>
            cmd.On = (int)iter.value().toBool();
   d4bae:	f7ff fae4 	bl	d417a <_ZNK5spark18JSONObjectIterator5valueEv>
   d4bb2:	4668      	mov	r0, sp
   d4bb4:	f000 fe12 	bl	d57dc <_ZNK5spark9JSONValue6toBoolEv>
   d4bb8:	6160      	str	r0, [r4, #20]
   d4bba:	a801      	add	r0, sp, #4
   d4bbc:	f7ff faac 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4bc0:	e7e1      	b.n	d4b86 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x2e>
        else if (iter.name() == "auto") {
   d4bc2:	f7ff fac6 	bl	d4152 <_ZNK5spark18JSONObjectIterator4nameEv>
   d4bc6:	4639      	mov	r1, r7
   d4bc8:	9802      	ldr	r0, [sp, #8]
   d4bca:	f002 f9bd 	bl	d6f48 <strcmp>
   d4bce:	4605      	mov	r5, r0
   d4bd0:	a801      	add	r0, sp, #4
   d4bd2:	f7ff faa1 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            cmd.Auto = (int)iter.value().toBool();
   d4bd6:	a904      	add	r1, sp, #16
   d4bd8:	4668      	mov	r0, sp
        else if (iter.name() == "auto") {
   d4bda:	b935      	cbnz	r5, d4bea <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x92>
            cmd.Auto = (int)iter.value().toBool();
   d4bdc:	f7ff facd 	bl	d417a <_ZNK5spark18JSONObjectIterator5valueEv>
   d4be0:	4668      	mov	r0, sp
   d4be2:	f000 fdfb 	bl	d57dc <_ZNK5spark9JSONValue6toBoolEv>
   d4be6:	61a0      	str	r0, [r4, #24]
   d4be8:	e7e7      	b.n	d4bba <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x62>
        else if (iter.name() == "brightness") {
   d4bea:	f7ff fab2 	bl	d4152 <_ZNK5spark18JSONObjectIterator4nameEv>
   d4bee:	4641      	mov	r1, r8
   d4bf0:	9802      	ldr	r0, [sp, #8]
   d4bf2:	f002 f9a9 	bl	d6f48 <strcmp>
   d4bf6:	4605      	mov	r5, r0
   d4bf8:	a801      	add	r0, sp, #4
   d4bfa:	f7ff fa8d 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            cmd.Brightness = iter.value().toInt();
   d4bfe:	a904      	add	r1, sp, #16
   d4c00:	4668      	mov	r0, sp
        else if (iter.name() == "brightness") {
   d4c02:	b935      	cbnz	r5, d4c12 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0xba>
            cmd.Brightness = iter.value().toInt();
   d4c04:	f7ff fab9 	bl	d417a <_ZNK5spark18JSONObjectIterator5valueEv>
   d4c08:	4668      	mov	r0, sp
   d4c0a:	f000 fe25 	bl	d5858 <_ZNK5spark9JSONValue5toIntEv>
   d4c0e:	61e0      	str	r0, [r4, #28]
   d4c10:	e7d3      	b.n	d4bba <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x62>
        else if (iter.name() == "min") {
   d4c12:	f7ff fa9e 	bl	d4152 <_ZNK5spark18JSONObjectIterator4nameEv>
   d4c16:	4918      	ldr	r1, [pc, #96]	; (d4c78 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x120>)
   d4c18:	9802      	ldr	r0, [sp, #8]
   d4c1a:	f002 f995 	bl	d6f48 <strcmp>
   d4c1e:	4605      	mov	r5, r0
   d4c20:	a801      	add	r0, sp, #4
   d4c22:	f7ff fa79 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            sensorMin = iter.value().toInt();
   d4c26:	a904      	add	r1, sp, #16
   d4c28:	4668      	mov	r0, sp
        else if (iter.name() == "min") {
   d4c2a:	b935      	cbnz	r5, d4c3a <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0xe2>
            sensorMin = iter.value().toInt();
   d4c2c:	f7ff faa5 	bl	d417a <_ZNK5spark18JSONObjectIterator5valueEv>
   d4c30:	4668      	mov	r0, sp
   d4c32:	f000 fe11 	bl	d5858 <_ZNK5spark9JSONValue5toIntEv>
   d4c36:	6120      	str	r0, [r4, #16]
   d4c38:	e7bf      	b.n	d4bba <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x62>
        else if ( iter.name() == "max") {
   d4c3a:	f7ff fa8a 	bl	d4152 <_ZNK5spark18JSONObjectIterator4nameEv>
   d4c3e:	490f      	ldr	r1, [pc, #60]	; (d4c7c <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x124>)
   d4c40:	9802      	ldr	r0, [sp, #8]
   d4c42:	f002 f981 	bl	d6f48 <strcmp>
   d4c46:	4605      	mov	r5, r0
   d4c48:	a801      	add	r0, sp, #4
   d4c4a:	f7ff fa65 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4c4e:	2d00      	cmp	r5, #0
   d4c50:	d199      	bne.n	d4b86 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x2e>
            sensorMax = iter.value().toInt();
   d4c52:	a904      	add	r1, sp, #16
   d4c54:	4668      	mov	r0, sp
   d4c56:	f7ff fa90 	bl	d417a <_ZNK5spark18JSONObjectIterator5valueEv>
   d4c5a:	4668      	mov	r0, sp
   d4c5c:	f000 fdfc 	bl	d5858 <_ZNK5spark9JSONValue5toIntEv>
   d4c60:	60e0      	str	r0, [r4, #12]
   d4c62:	e7aa      	b.n	d4bba <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x62>
   d4c64:	a805      	add	r0, sp, #20
   d4c66:	f7ff fa57 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4c6a:	b00a      	add	sp, #40	; 0x28
   d4c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4c70:	000d7215 	.word	0x000d7215
   d4c74:	000d7218 	.word	0x000d7218
   d4c78:	000d7228 	.word	0x000d7228
   d4c7c:	000d722c 	.word	0x000d722c
   d4c80:	000d721d 	.word	0x000d721d

000d4c84 <_ZN5CDoorC1Ev>:
#include "door.h"

CDoor::CDoor() {
   d4c84:	b538      	push	{r3, r4, r5, lr}
   d4c86:	f100 0524 	add.w	r5, r0, #36	; 0x24
   d4c8a:	4604      	mov	r4, r0
   d4c8c:	490b      	ldr	r1, [pc, #44]	; (d4cbc <_ZN5CDoorC1Ev+0x38>)
   d4c8e:	4628      	mov	r0, r5
   d4c90:	f001 f979 	bl	d5f86 <_ZN6StringC1EPKc>
  state_D0 = CDoor::S_CLOSED;
   d4c94:	2301      	movs	r3, #1
   d4c96:	7023      	strb	r3, [r4, #0]
  doorProximity = RGB_BRIGHTNESS_DEAULT;
   d4c98:	2380      	movs	r3, #128	; 0x80
   d4c9a:	6063      	str	r3, [r4, #4]
  sensorMax = LIGHT_SENSOR_MAX;
  sensorMin = LIGHT_SENSOR_MIN;
   d4c9c:	f640 11c4 	movw	r1, #2500	; 0x9c4
   d4ca0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d4ca4:	e9c4 1303 	strd	r1, r3, [r4, #12]

  statusStr = "{}";
   d4ca8:	4628      	mov	r0, r5
   d4caa:	4905      	ldr	r1, [pc, #20]	; (d4cc0 <_ZN5CDoorC1Ev+0x3c>)
   d4cac:	f001 f9be 	bl	d602c <_ZN6StringaSEPKc>
    state_D0, doorProximity, sensorVal
  );
}

void CDoor::resetCmd() {
  cmd.DoorProximity = INVALID_CMD;
   d4cb0:	4b04      	ldr	r3, [pc, #16]	; (d4cc4 <_ZN5CDoorC1Ev+0x40>)
}
   d4cb2:	4620      	mov	r0, r4
  cmd.Status = INVALID_CMD;
   d4cb4:	e9c4 3307 	strd	r3, r3, [r4, #28]
}
   d4cb8:	bd38      	pop	{r3, r4, r5, pc}
   d4cba:	bf00      	nop
   d4cbc:	000d730b 	.word	0x000d730b
   d4cc0:	000d71e4 	.word	0x000d71e4
   d4cc4:	fffe7961 	.word	0xfffe7961

000d4cc8 <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE>:
void CDoor::cmdProcessing(JSONValue cmdJson) {
   d4cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4ccc:	b08a      	sub	sp, #40	; 0x28
        JSONObjectIterator(value.t_, value.d_) {
   d4cce:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4cd0:	f851 3b04 	ldr.w	r3, [r1], #4
   d4cd4:	9300      	str	r3, [sp, #0]
   d4cd6:	4604      	mov	r4, r0
   d4cd8:	a801      	add	r0, sp, #4
   d4cda:	f7ff fa33 	bl	d4144 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d4cde:	466a      	mov	r2, sp
   d4ce0:	4629      	mov	r1, r5
   d4ce2:	a804      	add	r0, sp, #16
   d4ce4:	f000 feec 	bl	d5ac0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4ce8:	a801      	add	r0, sp, #4
   d4cea:	f7ff fa15 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return strcmp(s_, str) == 0;
   d4cee:	4e32      	ldr	r6, [pc, #200]	; (d4db8 <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0xf0>)
   d4cf0:	4f32      	ldr	r7, [pc, #200]	; (d4dbc <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0xf4>)
   d4cf2:	f8df 80d0 	ldr.w	r8, [pc, #208]	; d4dc4 <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0xfc>
  while (iter.next()) {
   d4cf6:	a804      	add	r0, sp, #16
   d4cf8:	f000 fefa 	bl	d5af0 <_ZN5spark18JSONObjectIterator4nextEv>
   d4cfc:	2800      	cmp	r0, #0
   d4cfe:	d055      	beq.n	d4dac <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0xe4>
    if (iter.name() == "min") {
   d4d00:	a904      	add	r1, sp, #16
   d4d02:	4668      	mov	r0, sp
   d4d04:	f7ff fa25 	bl	d4152 <_ZNK5spark18JSONObjectIterator4nameEv>
   d4d08:	4631      	mov	r1, r6
   d4d0a:	9802      	ldr	r0, [sp, #8]
   d4d0c:	f002 f91c 	bl	d6f48 <strcmp>
   d4d10:	4605      	mov	r5, r0
   d4d12:	a801      	add	r0, sp, #4
   d4d14:	f7ff fa00 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      sensorMin = iter.value().toInt();
   d4d18:	a904      	add	r1, sp, #16
   d4d1a:	4668      	mov	r0, sp
    if (iter.name() == "min") {
   d4d1c:	b94d      	cbnz	r5, d4d32 <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0x6a>
      sensorMin = iter.value().toInt();
   d4d1e:	f7ff fa2c 	bl	d417a <_ZNK5spark18JSONObjectIterator5valueEv>
   d4d22:	4668      	mov	r0, sp
   d4d24:	f000 fd98 	bl	d5858 <_ZNK5spark9JSONValue5toIntEv>
   d4d28:	6120      	str	r0, [r4, #16]
   d4d2a:	a801      	add	r0, sp, #4
   d4d2c:	f7ff f9f4 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4d30:	e7e1      	b.n	d4cf6 <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0x2e>
    } else if (iter.name() == "max") {
   d4d32:	f7ff fa0e 	bl	d4152 <_ZNK5spark18JSONObjectIterator4nameEv>
   d4d36:	4639      	mov	r1, r7
   d4d38:	9802      	ldr	r0, [sp, #8]
   d4d3a:	f002 f905 	bl	d6f48 <strcmp>
   d4d3e:	4605      	mov	r5, r0
   d4d40:	a801      	add	r0, sp, #4
   d4d42:	f7ff f9e9 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      sensorMax = iter.value().toInt();
   d4d46:	a904      	add	r1, sp, #16
   d4d48:	4668      	mov	r0, sp
    } else if (iter.name() == "max") {
   d4d4a:	b935      	cbnz	r5, d4d5a <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0x92>
      sensorMax = iter.value().toInt();
   d4d4c:	f7ff fa15 	bl	d417a <_ZNK5spark18JSONObjectIterator5valueEv>
   d4d50:	4668      	mov	r0, sp
   d4d52:	f000 fd81 	bl	d5858 <_ZNK5spark9JSONValue5toIntEv>
   d4d56:	60e0      	str	r0, [r4, #12]
   d4d58:	e7e7      	b.n	d4d2a <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0x62>
    } else if (iter.name() == "doorProximity") {
   d4d5a:	f7ff f9fa 	bl	d4152 <_ZNK5spark18JSONObjectIterator4nameEv>
   d4d5e:	4641      	mov	r1, r8
   d4d60:	9802      	ldr	r0, [sp, #8]
   d4d62:	f002 f8f1 	bl	d6f48 <strcmp>
   d4d66:	4605      	mov	r5, r0
   d4d68:	a801      	add	r0, sp, #4
   d4d6a:	f7ff f9d5 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      cmd.DoorProximity = iter.value().toInt();
   d4d6e:	a904      	add	r1, sp, #16
   d4d70:	4668      	mov	r0, sp
    } else if (iter.name() == "doorProximity") {
   d4d72:	b935      	cbnz	r5, d4d82 <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0xba>
      cmd.DoorProximity = iter.value().toInt();
   d4d74:	f7ff fa01 	bl	d417a <_ZNK5spark18JSONObjectIterator5valueEv>
   d4d78:	4668      	mov	r0, sp
   d4d7a:	f000 fd6d 	bl	d5858 <_ZNK5spark9JSONValue5toIntEv>
   d4d7e:	6220      	str	r0, [r4, #32]
   d4d80:	e7d3      	b.n	d4d2a <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0x62>
    } else if (iter.name() == "status") {
   d4d82:	f7ff f9e6 	bl	d4152 <_ZNK5spark18JSONObjectIterator4nameEv>
   d4d86:	490e      	ldr	r1, [pc, #56]	; (d4dc0 <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0xf8>)
   d4d88:	9802      	ldr	r0, [sp, #8]
   d4d8a:	f002 f8dd 	bl	d6f48 <strcmp>
   d4d8e:	4605      	mov	r5, r0
   d4d90:	a801      	add	r0, sp, #4
   d4d92:	f7ff f9c1 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4d96:	2d00      	cmp	r5, #0
   d4d98:	d1ad      	bne.n	d4cf6 <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0x2e>
      cmd.Status = (int)iter.value().toBool();
   d4d9a:	a904      	add	r1, sp, #16
   d4d9c:	4668      	mov	r0, sp
   d4d9e:	f7ff f9ec 	bl	d417a <_ZNK5spark18JSONObjectIterator5valueEv>
   d4da2:	4668      	mov	r0, sp
   d4da4:	f000 fd1a 	bl	d57dc <_ZNK5spark9JSONValue6toBoolEv>
   d4da8:	61e0      	str	r0, [r4, #28]
   d4daa:	e7be      	b.n	d4d2a <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0x62>
   d4dac:	a805      	add	r0, sp, #20
   d4dae:	f7ff f9b3 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4db2:	b00a      	add	sp, #40	; 0x28
   d4db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4db8:	000d7228 	.word	0x000d7228
   d4dbc:	000d722c 	.word	0x000d722c
   d4dc0:	000d723e 	.word	0x000d723e
   d4dc4:	000d7230 	.word	0x000d7230

000d4dc8 <_ZN11CThermostatC1Ev>:
#include "thermostat.h"

CThermostat::CThermostat() {
   d4dc8:	b538      	push	{r3, r4, r5, lr}
   d4dca:	490e      	ldr	r1, [pc, #56]	; (d4e04 <_ZN11CThermostatC1Ev+0x3c>)
   d4dcc:	4604      	mov	r4, r0
   d4dce:	f104 0524 	add.w	r5, r4, #36	; 0x24
   d4dd2:	f001 f8d8 	bl	d5f86 <_ZN6StringC1EPKc>
   d4dd6:	490b      	ldr	r1, [pc, #44]	; (d4e04 <_ZN11CThermostatC1Ev+0x3c>)
   d4dd8:	f104 0010 	add.w	r0, r4, #16
   d4ddc:	f001 f8d3 	bl	d5f86 <_ZN6StringC1EPKc>
   d4de0:	4908      	ldr	r1, [pc, #32]	; (d4e04 <_ZN11CThermostatC1Ev+0x3c>)
   d4de2:	4628      	mov	r0, r5
   d4de4:	f001 f8cf 	bl	d5f86 <_ZN6StringC1EPKc>
struct ThermostatStruct {
   d4de8:	2300      	movs	r3, #0
   d4dea:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
   d4dee:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
  sys_state = CThermostat::S_OFF;
  fan_state = CThermostat::S_ON;

  statusStr = "{}";
   d4df2:	4905      	ldr	r1, [pc, #20]	; (d4e08 <_ZN11CThermostatC1Ev+0x40>)
   d4df4:	6463      	str	r3, [r4, #68]	; 0x44
  sys_state = CThermostat::S_OFF;
   d4df6:	8423      	strh	r3, [r4, #32]
  statusStr = "{}";
   d4df8:	4628      	mov	r0, r5
   d4dfa:	f001 f917 	bl	d602c <_ZN6StringaSEPKc>
  //resetCmd();
}
   d4dfe:	4620      	mov	r0, r4
   d4e00:	bd38      	pop	{r3, r4, r5, pc}
   d4e02:	bf00      	nop
   d4e04:	000d730b 	.word	0x000d730b
   d4e08:	000d71e4 	.word	0x000d71e4

000d4e0c <_ZN11CThermostat15createStatusStrEv>:
  thermoStruct.cool = INVALID_CMD;
  thermoStruct.assignedTemp = INVALID_CMD;
  thermoStruct.fanMode = INVALID_CMD;
}

void CThermostat::createStatusStr() {
   d4e0c:	b510      	push	{r4, lr}
   d4e0e:	b086      	sub	sp, #24
    statusStr = String::format("{\"heatStatus\":%d,\"coolStatus\":%d,\"fanStatus\":%d}",
   d4e10:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   d4e12:	9300      	str	r3, [sp, #0]
   d4e14:	e9d0 230d 	ldrd	r2, r3, [r0, #52]	; 0x34
void CThermostat::createStatusStr() {
   d4e18:	4604      	mov	r4, r0
    statusStr = String::format("{\"heatStatus\":%d,\"coolStatus\":%d,\"fanStatus\":%d}",
   d4e1a:	4907      	ldr	r1, [pc, #28]	; (d4e38 <_ZN11CThermostat15createStatusStrEv+0x2c>)
   d4e1c:	a802      	add	r0, sp, #8
   d4e1e:	f001 f943 	bl	d60a8 <_ZN6String6formatEPKcz>
      thermoStruct.heat, thermoStruct.cool, thermoStruct.fanMode);
   d4e22:	a902      	add	r1, sp, #8
   d4e24:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d4e28:	f001 f8f8 	bl	d601c <_ZN6StringaSEOS_>
   d4e2c:	a802      	add	r0, sp, #8
   d4e2e:	f001 f85f 	bl	d5ef0 <_ZN6StringD1Ev>
}
   d4e32:	b006      	add	sp, #24
   d4e34:	bd10      	pop	{r4, pc}
   d4e36:	bf00      	nop
   d4e38:	000d7245 	.word	0x000d7245

000d4e3c <_ZN11CThermostat7executeEf>:
  thermoStruct.assignedTemp = 30;
   d4e3c:	231e      	movs	r3, #30
   d4e3e:	6443      	str	r3, [r0, #68]	; 0x44
  switch (sys_state) {
   d4e40:	f890 3020 	ldrb.w	r3, [r0, #32]
   d4e44:	2b01      	cmp	r3, #1
   d4e46:	d005      	beq.n	d4e54 <_ZN11CThermostat7executeEf+0x18>
   d4e48:	2b02      	cmp	r3, #2
   d4e4a:	d017      	beq.n	d4e7c <_ZN11CThermostat7executeEf+0x40>
   d4e4c:	b9a3      	cbnz	r3, d4e78 <_ZN11CThermostat7executeEf+0x3c>
      thermoStruct.heat = 0;
   d4e4e:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
   d4e52:	e00c      	b.n	d4e6e <_ZN11CThermostat7executeEf+0x32>
      if (currTemp > thermoStruct.assignedTemp) {
   d4e54:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
   d4e58:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d4e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4e60:	dd09      	ble.n	d4e76 <_ZN11CThermostat7executeEf+0x3a>
        thermoStruct.heat = 0;
   d4e62:	2300      	movs	r3, #0
   d4e64:	6343      	str	r3, [r0, #52]	; 0x34
        if (thermoStruct.fanMode == 1) {
   d4e66:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   d4e68:	2b01      	cmp	r3, #1
   d4e6a:	d102      	bne.n	d4e72 <_ZN11CThermostat7executeEf+0x36>
          thermoStruct.fanStatus = 1;
   d4e6c:	2301      	movs	r3, #1
      thermoStruct.fanStatus = 0;
   d4e6e:	6403      	str	r3, [r0, #64]	; 0x40
      break;
   d4e70:	e002      	b.n	d4e78 <_ZN11CThermostat7executeEf+0x3c>
          thermoStruct.fanStatus = 0;
   d4e72:	2300      	movs	r3, #0
   d4e74:	e7fb      	b.n	d4e6e <_ZN11CThermostat7executeEf+0x32>
      } else if (currTemp < thermoStruct.assignedTemp) {
   d4e76:	d4f5      	bmi.n	d4e64 <_ZN11CThermostat7executeEf+0x28>
  createStatusStr();
   d4e78:	f7ff bfc8 	b.w	d4e0c <_ZN11CThermostat15createStatusStrEv>
      if (currTemp > thermoStruct.assignedTemp) {
   d4e7c:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
   d4e80:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d4e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4e88:	dd02      	ble.n	d4e90 <_ZN11CThermostat7executeEf+0x54>
        thermoStruct.cool = 1;
   d4e8a:	2301      	movs	r3, #1
   d4e8c:	6383      	str	r3, [r0, #56]	; 0x38
        if (thermoStruct.fanMode == 1) {
   d4e8e:	e7ed      	b.n	d4e6c <_ZN11CThermostat7executeEf+0x30>
      } else if (currTemp < thermoStruct.assignedTemp) {
   d4e90:	d5f2      	bpl.n	d4e78 <_ZN11CThermostat7executeEf+0x3c>
        thermoStruct.cool = 0;
   d4e92:	2300      	movs	r3, #0
   d4e94:	6383      	str	r3, [r0, #56]	; 0x38
        if (thermoStruct.fanMode == 1) {
   d4e96:	e7e6      	b.n	d4e66 <_ZN11CThermostat7executeEf+0x2a>

000d4e98 <_ZN11CThermostat13cmdProcessingEN5spark9JSONValueE>:
void CThermostat::cmdProcessing(JSONValue cmdJson) {
   d4e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4e9c:	b08c      	sub	sp, #48	; 0x30
        JSONObjectIterator(value.t_, value.d_) {
   d4e9e:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4ea0:	f851 3b04 	ldr.w	r3, [r1], #4
   d4ea4:	9302      	str	r3, [sp, #8]
   d4ea6:	4604      	mov	r4, r0
   d4ea8:	a803      	add	r0, sp, #12
   d4eaa:	f7ff f94b 	bl	d4144 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d4eae:	aa02      	add	r2, sp, #8
   d4eb0:	4629      	mov	r1, r5
   d4eb2:	a806      	add	r0, sp, #24
   d4eb4:	f000 fe04 	bl	d5ac0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4eb8:	a803      	add	r0, sp, #12
   d4eba:	f7ff f92d 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return strcmp(s_, str) == 0;
   d4ebe:	4e42      	ldr	r6, [pc, #264]	; (d4fc8 <_ZN11CThermostat13cmdProcessingEN5spark9JSONValueE+0x130>)
   d4ec0:	4f42      	ldr	r7, [pc, #264]	; (d4fcc <_ZN11CThermostat13cmdProcessingEN5spark9JSONValueE+0x134>)
   d4ec2:	f8df 8114 	ldr.w	r8, [pc, #276]	; d4fd8 <_ZN11CThermostat13cmdProcessingEN5spark9JSONValueE+0x140>
  while (iter.next()) {
   d4ec6:	a806      	add	r0, sp, #24
   d4ec8:	f000 fe12 	bl	d5af0 <_ZN5spark18JSONObjectIterator4nextEv>
   d4ecc:	2800      	cmp	r0, #0
   d4ece:	d075      	beq.n	d4fbc <_ZN11CThermostat13cmdProcessingEN5spark9JSONValueE+0x124>
    if (iter.name() == "heat") {
   d4ed0:	a906      	add	r1, sp, #24
   d4ed2:	a802      	add	r0, sp, #8
   d4ed4:	f7ff f93d 	bl	d4152 <_ZNK5spark18JSONObjectIterator4nameEv>
   d4ed8:	9804      	ldr	r0, [sp, #16]
   d4eda:	4631      	mov	r1, r6
   d4edc:	f002 f834 	bl	d6f48 <strcmp>
   d4ee0:	4605      	mov	r5, r0
   d4ee2:	a803      	add	r0, sp, #12
   d4ee4:	f7ff f918 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4ee8:	b91d      	cbnz	r5, d4ef2 <_ZN11CThermostat13cmdProcessingEN5spark9JSONValueE+0x5a>
      sys_state = CThermostat::S_HEAT;
   d4eea:	2301      	movs	r3, #1
      sys_state = CThermostat::S_COOL;
   d4eec:	f884 3020 	strb.w	r3, [r4, #32]
   d4ef0:	e7e9      	b.n	d4ec6 <_ZN11CThermostat13cmdProcessingEN5spark9JSONValueE+0x2e>
    } else if (iter.name() == "cool") {
   d4ef2:	a906      	add	r1, sp, #24
   d4ef4:	a802      	add	r0, sp, #8
   d4ef6:	f7ff f92c 	bl	d4152 <_ZNK5spark18JSONObjectIterator4nameEv>
   d4efa:	9804      	ldr	r0, [sp, #16]
   d4efc:	4639      	mov	r1, r7
   d4efe:	f002 f823 	bl	d6f48 <strcmp>
   d4f02:	4605      	mov	r5, r0
   d4f04:	a803      	add	r0, sp, #12
   d4f06:	f7ff f907 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4f0a:	b90d      	cbnz	r5, d4f10 <_ZN11CThermostat13cmdProcessingEN5spark9JSONValueE+0x78>
      sys_state = CThermostat::S_COOL;
   d4f0c:	2302      	movs	r3, #2
   d4f0e:	e7ed      	b.n	d4eec <_ZN11CThermostat13cmdProcessingEN5spark9JSONValueE+0x54>
    } else if (iter.name() == "off") {
   d4f10:	a906      	add	r1, sp, #24
   d4f12:	a802      	add	r0, sp, #8
   d4f14:	f7ff f91d 	bl	d4152 <_ZNK5spark18JSONObjectIterator4nameEv>
   d4f18:	9804      	ldr	r0, [sp, #16]
   d4f1a:	4641      	mov	r1, r8
   d4f1c:	f002 f814 	bl	d6f48 <strcmp>
   d4f20:	4605      	mov	r5, r0
   d4f22:	a803      	add	r0, sp, #12
   d4f24:	f7ff f8f8 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4f28:	b915      	cbnz	r5, d4f30 <_ZN11CThermostat13cmdProcessingEN5spark9JSONValueE+0x98>
      sys_state = CThermostat::S_OFF;
   d4f2a:	f884 5020 	strb.w	r5, [r4, #32]
   d4f2e:	e7ca      	b.n	d4ec6 <_ZN11CThermostat13cmdProcessingEN5spark9JSONValueE+0x2e>
    } else if (iter.name() == "fan") {
   d4f30:	a906      	add	r1, sp, #24
   d4f32:	a802      	add	r0, sp, #8
   d4f34:	f7ff f90d 	bl	d4152 <_ZNK5spark18JSONObjectIterator4nameEv>
   d4f38:	4925      	ldr	r1, [pc, #148]	; (d4fd0 <_ZN11CThermostat13cmdProcessingEN5spark9JSONValueE+0x138>)
   d4f3a:	9804      	ldr	r0, [sp, #16]
   d4f3c:	f002 f804 	bl	d6f48 <strcmp>
   d4f40:	4605      	mov	r5, r0
   d4f42:	a803      	add	r0, sp, #12
   d4f44:	f7ff f8e8 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4f48:	b9b5      	cbnz	r5, d4f78 <_ZN11CThermostat13cmdProcessingEN5spark9JSONValueE+0xe0>
    return JSONValue(v_, d_);
   d4f4a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4f4c:	9b06      	ldr	r3, [sp, #24]
   d4f4e:	9300      	str	r3, [sp, #0]
   d4f50:	a907      	add	r1, sp, #28
   d4f52:	a801      	add	r0, sp, #4
   d4f54:	f7ff f8f6 	bl	d4144 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d4f58:	466a      	mov	r2, sp
   d4f5a:	4629      	mov	r1, r5
   d4f5c:	a802      	add	r0, sp, #8
   d4f5e:	f000 fc06 	bl	d576e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4f62:	a801      	add	r0, sp, #4
   d4f64:	f7ff f8d8 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      thermoStruct.fanMode = iter.value().toInt();
   d4f68:	a802      	add	r0, sp, #8
   d4f6a:	f000 fc75 	bl	d5858 <_ZNK5spark9JSONValue5toIntEv>
   d4f6e:	63e0      	str	r0, [r4, #60]	; 0x3c
   d4f70:	a803      	add	r0, sp, #12
   d4f72:	f7ff f8d1 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4f76:	e7a6      	b.n	d4ec6 <_ZN11CThermostat13cmdProcessingEN5spark9JSONValueE+0x2e>
    } else if (iter.name() == "temp") {
   d4f78:	a906      	add	r1, sp, #24
   d4f7a:	a802      	add	r0, sp, #8
   d4f7c:	f7ff f8e9 	bl	d4152 <_ZNK5spark18JSONObjectIterator4nameEv>
    return strcmp(s_, str) == 0;
   d4f80:	4914      	ldr	r1, [pc, #80]	; (d4fd4 <_ZN11CThermostat13cmdProcessingEN5spark9JSONValueE+0x13c>)
   d4f82:	9804      	ldr	r0, [sp, #16]
   d4f84:	f001 ffe0 	bl	d6f48 <strcmp>
   d4f88:	4605      	mov	r5, r0
   d4f8a:	a803      	add	r0, sp, #12
   d4f8c:	f7ff f8c4 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4f90:	2d00      	cmp	r5, #0
   d4f92:	d198      	bne.n	d4ec6 <_ZN11CThermostat13cmdProcessingEN5spark9JSONValueE+0x2e>
    return JSONValue(v_, d_);
   d4f94:	9d0a      	ldr	r5, [sp, #40]	; 0x28
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4f96:	9b06      	ldr	r3, [sp, #24]
   d4f98:	9300      	str	r3, [sp, #0]
   d4f9a:	a907      	add	r1, sp, #28
   d4f9c:	a801      	add	r0, sp, #4
   d4f9e:	f7ff f8d1 	bl	d4144 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d4fa2:	466a      	mov	r2, sp
   d4fa4:	4629      	mov	r1, r5
   d4fa6:	a802      	add	r0, sp, #8
   d4fa8:	f000 fbe1 	bl	d576e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4fac:	a801      	add	r0, sp, #4
   d4fae:	f7ff f8b3 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      thermoStruct.assignedTemp = iter.value().toInt();
   d4fb2:	a802      	add	r0, sp, #8
   d4fb4:	f000 fc50 	bl	d5858 <_ZNK5spark9JSONValue5toIntEv>
   d4fb8:	6460      	str	r0, [r4, #68]	; 0x44
   d4fba:	e7d9      	b.n	d4f70 <_ZN11CThermostat13cmdProcessingEN5spark9JSONValueE+0xd8>
   d4fbc:	a807      	add	r0, sp, #28
   d4fbe:	f7ff f8ab 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4fc2:	b00c      	add	sp, #48	; 0x30
   d4fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4fc8:	000d7276 	.word	0x000d7276
   d4fcc:	000d727b 	.word	0x000d727b
   d4fd0:	000d7284 	.word	0x000d7284
   d4fd4:	000d7288 	.word	0x000d7288
   d4fd8:	000d7280 	.word	0x000d7280

000d4fdc <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4fdc:	b508      	push	{r3, lr}
   d4fde:	4b02      	ldr	r3, [pc, #8]	; (d4fe8 <os_mutex_recursive_create+0xc>)
   d4fe0:	681b      	ldr	r3, [r3, #0]
   d4fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4fe4:	9301      	str	r3, [sp, #4]
   d4fe6:	bd08      	pop	{r3, pc}
   d4fe8:	00030248 	.word	0x00030248

000d4fec <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4fec:	b508      	push	{r3, lr}
   d4fee:	4b02      	ldr	r3, [pc, #8]	; (d4ff8 <HAL_RNG_GetRandomNumber+0xc>)
   d4ff0:	681b      	ldr	r3, [r3, #0]
   d4ff2:	685b      	ldr	r3, [r3, #4]
   d4ff4:	9301      	str	r3, [sp, #4]
   d4ff6:	bd08      	pop	{r3, pc}
   d4ff8:	00030218 	.word	0x00030218

000d4ffc <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4ffc:	b508      	push	{r3, lr}
   d4ffe:	4b02      	ldr	r3, [pc, #8]	; (d5008 <HAL_Delay_Microseconds+0xc>)
   d5000:	681b      	ldr	r3, [r3, #0]
   d5002:	68db      	ldr	r3, [r3, #12]
   d5004:	9301      	str	r3, [sp, #4]
   d5006:	bd08      	pop	{r3, pc}
   d5008:	00030218 	.word	0x00030218

000d500c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d500c:	b508      	push	{r3, lr}
   d500e:	4b02      	ldr	r3, [pc, #8]	; (d5018 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5010:	681b      	ldr	r3, [r3, #0]
   d5012:	695b      	ldr	r3, [r3, #20]
   d5014:	9301      	str	r3, [sp, #4]
   d5016:	bd08      	pop	{r3, pc}
   d5018:	00030218 	.word	0x00030218

000d501c <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d501c:	b508      	push	{r3, lr}
   d501e:	4b02      	ldr	r3, [pc, #8]	; (d5028 <hal_rtc_time_is_valid+0xc>)
   d5020:	681b      	ldr	r3, [r3, #0]
   d5022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5024:	9301      	str	r3, [sp, #4]
   d5026:	bd08      	pop	{r3, pc}
   d5028:	00030218 	.word	0x00030218

000d502c <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d502c:	b508      	push	{r3, lr}
   d502e:	4b02      	ldr	r3, [pc, #8]	; (d5038 <hal_rtc_get_time+0xc>)
   d5030:	681b      	ldr	r3, [r3, #0]
   d5032:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d5034:	9301      	str	r3, [sp, #4]
   d5036:	bd08      	pop	{r3, pc}
   d5038:	00030218 	.word	0x00030218

000d503c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d503c:	b508      	push	{r3, lr}
   d503e:	4b02      	ldr	r3, [pc, #8]	; (d5048 <HAL_Pin_Map+0xc>)
   d5040:	681b      	ldr	r3, [r3, #0]
   d5042:	681b      	ldr	r3, [r3, #0]
   d5044:	9301      	str	r3, [sp, #4]
   d5046:	bd08      	pop	{r3, pc}
   d5048:	0003022c 	.word	0x0003022c

000d504c <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d504c:	b508      	push	{r3, lr}
   d504e:	4b02      	ldr	r3, [pc, #8]	; (d5058 <HAL_Validate_Pin_Function+0xc>)
   d5050:	681b      	ldr	r3, [r3, #0]
   d5052:	685b      	ldr	r3, [r3, #4]
   d5054:	9301      	str	r3, [sp, #4]
   d5056:	bd08      	pop	{r3, pc}
   d5058:	0003022c 	.word	0x0003022c

000d505c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d505c:	b508      	push	{r3, lr}
   d505e:	4b02      	ldr	r3, [pc, #8]	; (d5068 <HAL_Pin_Mode+0xc>)
   d5060:	681b      	ldr	r3, [r3, #0]
   d5062:	689b      	ldr	r3, [r3, #8]
   d5064:	9301      	str	r3, [sp, #4]
   d5066:	bd08      	pop	{r3, pc}
   d5068:	0003022c 	.word	0x0003022c

000d506c <HAL_Interrupts_Enable_All>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d506c:	b508      	push	{r3, lr}
   d506e:	4b02      	ldr	r3, [pc, #8]	; (d5078 <HAL_Interrupts_Enable_All+0xc>)
   d5070:	681b      	ldr	r3, [r3, #0]
   d5072:	6a1b      	ldr	r3, [r3, #32]
   d5074:	9301      	str	r3, [sp, #4]
   d5076:	bd08      	pop	{r3, pc}
   d5078:	0003022c 	.word	0x0003022c

000d507c <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d507c:	b508      	push	{r3, lr}
   d507e:	4b02      	ldr	r3, [pc, #8]	; (d5088 <HAL_Interrupts_Disable_All+0xc>)
   d5080:	681b      	ldr	r3, [r3, #0]
   d5082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5084:	9301      	str	r3, [sp, #4]
   d5086:	bd08      	pop	{r3, pc}
   d5088:	0003022c 	.word	0x0003022c

000d508c <hal_adc_read>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d508c:	b508      	push	{r3, lr}
   d508e:	4b02      	ldr	r3, [pc, #8]	; (d5098 <hal_adc_read+0xc>)
   d5090:	681b      	ldr	r3, [r3, #0]
   d5092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5094:	9301      	str	r3, [sp, #4]
   d5096:	bd08      	pop	{r3, pc}
   d5098:	0003022c 	.word	0x0003022c

000d509c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d509c:	b508      	push	{r3, lr}
   d509e:	4b02      	ldr	r3, [pc, #8]	; (d50a8 <hal_i2c_write+0xc>)
   d50a0:	681b      	ldr	r3, [r3, #0]
   d50a2:	6a1b      	ldr	r3, [r3, #32]
   d50a4:	9301      	str	r3, [sp, #4]
   d50a6:	bd08      	pop	{r3, pc}
   d50a8:	00030228 	.word	0x00030228

000d50ac <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d50ac:	b508      	push	{r3, lr}
   d50ae:	4b02      	ldr	r3, [pc, #8]	; (d50b8 <hal_i2c_available+0xc>)
   d50b0:	681b      	ldr	r3, [r3, #0]
   d50b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d50b4:	9301      	str	r3, [sp, #4]
   d50b6:	bd08      	pop	{r3, pc}
   d50b8:	00030228 	.word	0x00030228

000d50bc <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d50bc:	b508      	push	{r3, lr}
   d50be:	4b02      	ldr	r3, [pc, #8]	; (d50c8 <hal_i2c_read+0xc>)
   d50c0:	681b      	ldr	r3, [r3, #0]
   d50c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d50c4:	9301      	str	r3, [sp, #4]
   d50c6:	bd08      	pop	{r3, pc}
   d50c8:	00030228 	.word	0x00030228

000d50cc <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d50cc:	b508      	push	{r3, lr}
   d50ce:	4b02      	ldr	r3, [pc, #8]	; (d50d8 <hal_i2c_peek+0xc>)
   d50d0:	681b      	ldr	r3, [r3, #0]
   d50d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d50d4:	9301      	str	r3, [sp, #4]
   d50d6:	bd08      	pop	{r3, pc}
   d50d8:	00030228 	.word	0x00030228

000d50dc <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d50dc:	b508      	push	{r3, lr}
   d50de:	4b02      	ldr	r3, [pc, #8]	; (d50e8 <hal_i2c_flush+0xc>)
   d50e0:	681b      	ldr	r3, [r3, #0]
   d50e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d50e4:	9301      	str	r3, [sp, #4]
   d50e6:	bd08      	pop	{r3, pc}
   d50e8:	00030228 	.word	0x00030228

000d50ec <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d50ec:	b508      	push	{r3, lr}
   d50ee:	4b02      	ldr	r3, [pc, #8]	; (d50f8 <hal_i2c_is_enabled+0xc>)
   d50f0:	681b      	ldr	r3, [r3, #0]
   d50f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d50f4:	9301      	str	r3, [sp, #4]
   d50f6:	bd08      	pop	{r3, pc}
   d50f8:	00030228 	.word	0x00030228

000d50fc <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d50fc:	b508      	push	{r3, lr}
   d50fe:	4b02      	ldr	r3, [pc, #8]	; (d5108 <hal_i2c_init+0xc>)
   d5100:	681b      	ldr	r3, [r3, #0]
   d5102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5104:	9301      	str	r3, [sp, #4]
   d5106:	bd08      	pop	{r3, pc}
   d5108:	00030228 	.word	0x00030228

000d510c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d510c:	b508      	push	{r3, lr}
   d510e:	4b02      	ldr	r3, [pc, #8]	; (d5118 <inet_inet_ntop+0xc>)
   d5110:	681b      	ldr	r3, [r3, #0]
   d5112:	695b      	ldr	r3, [r3, #20]
   d5114:	9301      	str	r3, [sp, #4]
   d5116:	bd08      	pop	{r3, pc}
   d5118:	00030264 	.word	0x00030264

000d511c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d511c:	b508      	push	{r3, lr}
   d511e:	4b02      	ldr	r3, [pc, #8]	; (d5128 <netdb_freeaddrinfo+0xc>)
   d5120:	681b      	ldr	r3, [r3, #0]
   d5122:	689b      	ldr	r3, [r3, #8]
   d5124:	9301      	str	r3, [sp, #4]
   d5126:	bd08      	pop	{r3, pc}
   d5128:	00030268 	.word	0x00030268

000d512c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d512c:	b508      	push	{r3, lr}
   d512e:	4b02      	ldr	r3, [pc, #8]	; (d5138 <netdb_getaddrinfo+0xc>)
   d5130:	681b      	ldr	r3, [r3, #0]
   d5132:	68db      	ldr	r3, [r3, #12]
   d5134:	9301      	str	r3, [sp, #4]
   d5136:	bd08      	pop	{r3, pc}
   d5138:	00030268 	.word	0x00030268

000d513c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d513c:	b508      	push	{r3, lr}
   d513e:	4b02      	ldr	r3, [pc, #8]	; (d5148 <hal_spi_init+0xc>)
   d5140:	681b      	ldr	r3, [r3, #0]
   d5142:	69db      	ldr	r3, [r3, #28]
   d5144:	9301      	str	r3, [sp, #4]
   d5146:	bd08      	pop	{r3, pc}
   d5148:	00030230 	.word	0x00030230

000d514c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d514c:	b508      	push	{r3, lr}
   d514e:	4b02      	ldr	r3, [pc, #8]	; (d5158 <hal_spi_is_enabled+0xc>)
   d5150:	681b      	ldr	r3, [r3, #0]
   d5152:	6a1b      	ldr	r3, [r3, #32]
   d5154:	9301      	str	r3, [sp, #4]
   d5156:	bd08      	pop	{r3, pc}
   d5158:	00030230 	.word	0x00030230

000d515c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d515c:	b508      	push	{r3, lr}
   d515e:	4b02      	ldr	r3, [pc, #8]	; (d5168 <hal_usart_init+0xc>)
   d5160:	681b      	ldr	r3, [r3, #0]
   d5162:	681b      	ldr	r3, [r3, #0]
   d5164:	9301      	str	r3, [sp, #4]
   d5166:	bd08      	pop	{r3, pc}
   d5168:	0003023c 	.word	0x0003023c

000d516c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d516c:	b508      	push	{r3, lr}
   d516e:	4b02      	ldr	r3, [pc, #8]	; (d5178 <hal_usart_write+0xc>)
   d5170:	681b      	ldr	r3, [r3, #0]
   d5172:	68db      	ldr	r3, [r3, #12]
   d5174:	9301      	str	r3, [sp, #4]
   d5176:	bd08      	pop	{r3, pc}
   d5178:	0003023c 	.word	0x0003023c

000d517c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d517c:	b508      	push	{r3, lr}
   d517e:	4b02      	ldr	r3, [pc, #8]	; (d5188 <hal_usart_available+0xc>)
   d5180:	681b      	ldr	r3, [r3, #0]
   d5182:	691b      	ldr	r3, [r3, #16]
   d5184:	9301      	str	r3, [sp, #4]
   d5186:	bd08      	pop	{r3, pc}
   d5188:	0003023c 	.word	0x0003023c

000d518c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d518c:	b508      	push	{r3, lr}
   d518e:	4b02      	ldr	r3, [pc, #8]	; (d5198 <hal_usart_read+0xc>)
   d5190:	681b      	ldr	r3, [r3, #0]
   d5192:	695b      	ldr	r3, [r3, #20]
   d5194:	9301      	str	r3, [sp, #4]
   d5196:	bd08      	pop	{r3, pc}
   d5198:	0003023c 	.word	0x0003023c

000d519c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d519c:	b508      	push	{r3, lr}
   d519e:	4b02      	ldr	r3, [pc, #8]	; (d51a8 <hal_usart_peek+0xc>)
   d51a0:	681b      	ldr	r3, [r3, #0]
   d51a2:	699b      	ldr	r3, [r3, #24]
   d51a4:	9301      	str	r3, [sp, #4]
   d51a6:	bd08      	pop	{r3, pc}
   d51a8:	0003023c 	.word	0x0003023c

000d51ac <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d51ac:	b508      	push	{r3, lr}
   d51ae:	4b02      	ldr	r3, [pc, #8]	; (d51b8 <hal_usart_flush+0xc>)
   d51b0:	681b      	ldr	r3, [r3, #0]
   d51b2:	69db      	ldr	r3, [r3, #28]
   d51b4:	9301      	str	r3, [sp, #4]
   d51b6:	bd08      	pop	{r3, pc}
   d51b8:	0003023c 	.word	0x0003023c

000d51bc <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d51bc:	b508      	push	{r3, lr}
   d51be:	4b02      	ldr	r3, [pc, #8]	; (d51c8 <hal_usart_is_enabled+0xc>)
   d51c0:	681b      	ldr	r3, [r3, #0]
   d51c2:	6a1b      	ldr	r3, [r3, #32]
   d51c4:	9301      	str	r3, [sp, #4]
   d51c6:	bd08      	pop	{r3, pc}
   d51c8:	0003023c 	.word	0x0003023c

000d51cc <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d51cc:	b508      	push	{r3, lr}
   d51ce:	4b02      	ldr	r3, [pc, #8]	; (d51d8 <hal_usart_available_data_for_write+0xc>)
   d51d0:	681b      	ldr	r3, [r3, #0]
   d51d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d51d4:	9301      	str	r3, [sp, #4]
   d51d6:	bd08      	pop	{r3, pc}
   d51d8:	0003023c 	.word	0x0003023c

000d51dc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d51dc:	b508      	push	{r3, lr}
   d51de:	4b02      	ldr	r3, [pc, #8]	; (d51e8 <HAL_USB_USART_Init+0xc>)
   d51e0:	681b      	ldr	r3, [r3, #0]
   d51e2:	681b      	ldr	r3, [r3, #0]
   d51e4:	9301      	str	r3, [sp, #4]
   d51e6:	bd08      	pop	{r3, pc}
   d51e8:	0003024c 	.word	0x0003024c

000d51ec <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d51ec:	b508      	push	{r3, lr}
   d51ee:	4b02      	ldr	r3, [pc, #8]	; (d51f8 <HAL_USB_USART_Begin+0xc>)
   d51f0:	681b      	ldr	r3, [r3, #0]
   d51f2:	685b      	ldr	r3, [r3, #4]
   d51f4:	9301      	str	r3, [sp, #4]
   d51f6:	bd08      	pop	{r3, pc}
   d51f8:	0003024c 	.word	0x0003024c

000d51fc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d51fc:	b508      	push	{r3, lr}
   d51fe:	4b02      	ldr	r3, [pc, #8]	; (d5208 <HAL_USB_USART_Available_Data+0xc>)
   d5200:	681b      	ldr	r3, [r3, #0]
   d5202:	691b      	ldr	r3, [r3, #16]
   d5204:	9301      	str	r3, [sp, #4]
   d5206:	bd08      	pop	{r3, pc}
   d5208:	0003024c 	.word	0x0003024c

000d520c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d520c:	b508      	push	{r3, lr}
   d520e:	4b02      	ldr	r3, [pc, #8]	; (d5218 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5210:	681b      	ldr	r3, [r3, #0]
   d5212:	695b      	ldr	r3, [r3, #20]
   d5214:	9301      	str	r3, [sp, #4]
   d5216:	bd08      	pop	{r3, pc}
   d5218:	0003024c 	.word	0x0003024c

000d521c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d521c:	b508      	push	{r3, lr}
   d521e:	4b02      	ldr	r3, [pc, #8]	; (d5228 <HAL_USB_USART_Receive_Data+0xc>)
   d5220:	681b      	ldr	r3, [r3, #0]
   d5222:	699b      	ldr	r3, [r3, #24]
   d5224:	9301      	str	r3, [sp, #4]
   d5226:	bd08      	pop	{r3, pc}
   d5228:	0003024c 	.word	0x0003024c

000d522c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d522c:	b508      	push	{r3, lr}
   d522e:	4b02      	ldr	r3, [pc, #8]	; (d5238 <HAL_USB_USART_Send_Data+0xc>)
   d5230:	681b      	ldr	r3, [r3, #0]
   d5232:	69db      	ldr	r3, [r3, #28]
   d5234:	9301      	str	r3, [sp, #4]
   d5236:	bd08      	pop	{r3, pc}
   d5238:	0003024c 	.word	0x0003024c

000d523c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d523c:	b508      	push	{r3, lr}
   d523e:	4b02      	ldr	r3, [pc, #8]	; (d5248 <HAL_USB_USART_Flush_Data+0xc>)
   d5240:	681b      	ldr	r3, [r3, #0]
   d5242:	6a1b      	ldr	r3, [r3, #32]
   d5244:	9301      	str	r3, [sp, #4]
   d5246:	bd08      	pop	{r3, pc}
   d5248:	0003024c 	.word	0x0003024c

000d524c <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
   d524c:	b508      	push	{r3, lr}
   d524e:	4b02      	ldr	r3, [pc, #8]	; (d5258 <LED_SetSignalingColor+0xc>)
   d5250:	681b      	ldr	r3, [r3, #0]
   d5252:	685b      	ldr	r3, [r3, #4]
   d5254:	9301      	str	r3, [sp, #4]
   d5256:	bd08      	pop	{r3, pc}
   d5258:	00030260 	.word	0x00030260

000d525c <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
   d525c:	b508      	push	{r3, lr}
   d525e:	4b02      	ldr	r3, [pc, #8]	; (d5268 <LED_Signaling_Start+0xc>)
   d5260:	681b      	ldr	r3, [r3, #0]
   d5262:	689b      	ldr	r3, [r3, #8]
   d5264:	9301      	str	r3, [sp, #4]
   d5266:	bd08      	pop	{r3, pc}
   d5268:	00030260 	.word	0x00030260

000d526c <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
   d526c:	b508      	push	{r3, lr}
   d526e:	4b02      	ldr	r3, [pc, #8]	; (d5278 <LED_Signaling_Stop+0xc>)
   d5270:	681b      	ldr	r3, [r3, #0]
   d5272:	68db      	ldr	r3, [r3, #12]
   d5274:	9301      	str	r3, [sp, #4]
   d5276:	bd08      	pop	{r3, pc}
   d5278:	00030260 	.word	0x00030260

000d527c <LED_SetBrightness>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
   d527c:	b508      	push	{r3, lr}
   d527e:	4b02      	ldr	r3, [pc, #8]	; (d5288 <LED_SetBrightness+0xc>)
   d5280:	681b      	ldr	r3, [r3, #0]
   d5282:	691b      	ldr	r3, [r3, #16]
   d5284:	9301      	str	r3, [sp, #4]
   d5286:	bd08      	pop	{r3, pc}
   d5288:	00030260 	.word	0x00030260

000d528c <LED_RGB_IsOverRidden>:
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   d528c:	b508      	push	{r3, lr}
   d528e:	4b02      	ldr	r3, [pc, #8]	; (d5298 <LED_RGB_IsOverRidden+0xc>)
   d5290:	681b      	ldr	r3, [r3, #0]
   d5292:	699b      	ldr	r3, [r3, #24]
   d5294:	9301      	str	r3, [sp, #4]
   d5296:	bd08      	pop	{r3, pc}
   d5298:	00030260 	.word	0x00030260

000d529c <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   d529c:	b508      	push	{r3, lr}
   d529e:	4b02      	ldr	r3, [pc, #8]	; (d52a8 <LED_On+0xc>)
   d52a0:	681b      	ldr	r3, [r3, #0]
   d52a2:	69db      	ldr	r3, [r3, #28]
   d52a4:	9301      	str	r3, [sp, #4]
   d52a6:	bd08      	pop	{r3, pc}
   d52a8:	00030260 	.word	0x00030260

000d52ac <Get_LED_Brightness>:
DYNALIB_FN(8, services, LED_Off, void(Led_TypeDef))
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))
   d52ac:	b508      	push	{r3, lr}
   d52ae:	4b02      	ldr	r3, [pc, #8]	; (d52b8 <Get_LED_Brightness+0xc>)
   d52b0:	681b      	ldr	r3, [r3, #0]
   d52b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d52b4:	9301      	str	r3, [sp, #4]
   d52b6:	bd08      	pop	{r3, pc}
   d52b8:	00030260 	.word	0x00030260

000d52bc <panic_>:

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d52bc:	b508      	push	{r3, lr}
   d52be:	4b02      	ldr	r3, [pc, #8]	; (d52c8 <panic_+0xc>)
   d52c0:	681b      	ldr	r3, [r3, #0]
   d52c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d52c4:	9301      	str	r3, [sp, #4]
   d52c6:	bd08      	pop	{r3, pc}
   d52c8:	00030260 	.word	0x00030260

000d52cc <jsmn_init>:

DYNALIB_FN(14, services, jsmn_init, void(jsmn_parser*, void*))
   d52cc:	b508      	push	{r3, lr}
   d52ce:	4b02      	ldr	r3, [pc, #8]	; (d52d8 <jsmn_init+0xc>)
   d52d0:	681b      	ldr	r3, [r3, #0]
   d52d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d52d4:	9301      	str	r3, [sp, #4]
   d52d6:	bd08      	pop	{r3, pc}
   d52d8:	00030260 	.word	0x00030260

000d52dc <jsmn_parse_deprecated>:
DYNALIB_FN(15, services, jsmn_parse_deprecated, jsmnerr_t(jsmn_parser*, const char*, size_t, jsmntok_t*, unsigned int, void*))
   d52dc:	b508      	push	{r3, lr}
   d52de:	4b02      	ldr	r3, [pc, #8]	; (d52e8 <jsmn_parse_deprecated+0xc>)
   d52e0:	681b      	ldr	r3, [r3, #0]
   d52e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d52e4:	9301      	str	r3, [sp, #4]
   d52e6:	bd08      	pop	{r3, pc}
   d52e8:	00030260 	.word	0x00030260

000d52ec <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d52ec:	b508      	push	{r3, lr}
   d52ee:	4b02      	ldr	r3, [pc, #8]	; (d52f8 <system_mode+0xc>)
   d52f0:	681b      	ldr	r3, [r3, #0]
   d52f2:	681b      	ldr	r3, [r3, #0]
   d52f4:	9301      	str	r3, [sp, #4]
   d52f6:	bd08      	pop	{r3, pc}
   d52f8:	00030220 	.word	0x00030220

000d52fc <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d52fc:	b508      	push	{r3, lr}
   d52fe:	4b02      	ldr	r3, [pc, #8]	; (d5308 <set_system_mode+0xc>)
   d5300:	681b      	ldr	r3, [r3, #0]
   d5302:	685b      	ldr	r3, [r3, #4]
   d5304:	9301      	str	r3, [sp, #4]
   d5306:	bd08      	pop	{r3, pc}
   d5308:	00030220 	.word	0x00030220

000d530c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d530c:	b508      	push	{r3, lr}
   d530e:	4b02      	ldr	r3, [pc, #8]	; (d5318 <system_delay_ms+0xc>)
   d5310:	681b      	ldr	r3, [r3, #0]
   d5312:	695b      	ldr	r3, [r3, #20]
   d5314:	9301      	str	r3, [sp, #4]
   d5316:	bd08      	pop	{r3, pc}
   d5318:	00030220 	.word	0x00030220

000d531c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d531c:	b508      	push	{r3, lr}
   d531e:	4b02      	ldr	r3, [pc, #8]	; (d5328 <system_thread_set_state+0xc>)
   d5320:	681b      	ldr	r3, [r3, #0]
   d5322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5324:	9301      	str	r3, [sp, #4]
   d5326:	bd08      	pop	{r3, pc}
   d5328:	00030220 	.word	0x00030220

000d532c <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d532c:	b508      	push	{r3, lr}
   d532e:	4b02      	ldr	r3, [pc, #8]	; (d5338 <system_thread_get_state+0xc>)
   d5330:	681b      	ldr	r3, [r3, #0]
   d5332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5334:	9301      	str	r3, [sp, #4]
   d5336:	bd08      	pop	{r3, pc}
   d5338:	00030220 	.word	0x00030220

000d533c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d533c:	b508      	push	{r3, lr}
   d533e:	4b03      	ldr	r3, [pc, #12]	; (d534c <system_ctrl_set_app_request_handler+0x10>)
   d5340:	681b      	ldr	r3, [r3, #0]
   d5342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5346:	9301      	str	r3, [sp, #4]
   d5348:	bd08      	pop	{r3, pc}
   d534a:	0000      	.short	0x0000
   d534c:	00030220 	.word	0x00030220

000d5350 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5350:	b508      	push	{r3, lr}
   d5352:	4b03      	ldr	r3, [pc, #12]	; (d5360 <system_ctrl_set_result+0x10>)
   d5354:	681b      	ldr	r3, [r3, #0]
   d5356:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d535a:	9301      	str	r3, [sp, #4]
   d535c:	bd08      	pop	{r3, pc}
   d535e:	0000      	.short	0x0000
   d5360:	00030220 	.word	0x00030220

000d5364 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d5364:	b508      	push	{r3, lr}
   d5366:	4b02      	ldr	r3, [pc, #8]	; (d5370 <spark_process+0xc>)
   d5368:	681b      	ldr	r3, [r3, #0]
   d536a:	689b      	ldr	r3, [r3, #8]
   d536c:	9301      	str	r3, [sp, #4]
   d536e:	bd08      	pop	{r3, pc}
   d5370:	00030244 	.word	0x00030244

000d5374 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d5374:	b508      	push	{r3, lr}
   d5376:	4b02      	ldr	r3, [pc, #8]	; (d5380 <spark_cloud_flag_connected+0xc>)
   d5378:	681b      	ldr	r3, [r3, #0]
   d537a:	695b      	ldr	r3, [r3, #20]
   d537c:	9301      	str	r3, [sp, #4]
   d537e:	bd08      	pop	{r3, pc}
   d5380:	00030244 	.word	0x00030244

000d5384 <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d5384:	b508      	push	{r3, lr}
   d5386:	4b02      	ldr	r3, [pc, #8]	; (d5390 <spark_sync_time_pending+0xc>)
   d5388:	681b      	ldr	r3, [r3, #0]
   d538a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d538c:	9301      	str	r3, [sp, #4]
   d538e:	bd08      	pop	{r3, pc}
   d5390:	00030244 	.word	0x00030244

000d5394 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5394:	b508      	push	{r3, lr}
   d5396:	4b02      	ldr	r3, [pc, #8]	; (d53a0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5398:	681b      	ldr	r3, [r3, #0]
   d539a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d539c:	9301      	str	r3, [sp, #4]
   d539e:	bd08      	pop	{r3, pc}
   d53a0:	00030244 	.word	0x00030244

000d53a4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d53a4:	b508      	push	{r3, lr}
   d53a6:	4b02      	ldr	r3, [pc, #8]	; (d53b0 <network_connect+0xc>)
   d53a8:	681b      	ldr	r3, [r3, #0]
   d53aa:	685b      	ldr	r3, [r3, #4]
   d53ac:	9301      	str	r3, [sp, #4]
   d53ae:	bd08      	pop	{r3, pc}
   d53b0:	00030240 	.word	0x00030240

000d53b4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d53b4:	b508      	push	{r3, lr}
   d53b6:	4b02      	ldr	r3, [pc, #8]	; (d53c0 <network_connecting+0xc>)
   d53b8:	681b      	ldr	r3, [r3, #0]
   d53ba:	689b      	ldr	r3, [r3, #8]
   d53bc:	9301      	str	r3, [sp, #4]
   d53be:	bd08      	pop	{r3, pc}
   d53c0:	00030240 	.word	0x00030240

000d53c4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d53c4:	b508      	push	{r3, lr}
   d53c6:	4b02      	ldr	r3, [pc, #8]	; (d53d0 <network_disconnect+0xc>)
   d53c8:	681b      	ldr	r3, [r3, #0]
   d53ca:	68db      	ldr	r3, [r3, #12]
   d53cc:	9301      	str	r3, [sp, #4]
   d53ce:	bd08      	pop	{r3, pc}
   d53d0:	00030240 	.word	0x00030240

000d53d4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d53d4:	b508      	push	{r3, lr}
   d53d6:	4b02      	ldr	r3, [pc, #8]	; (d53e0 <network_ready+0xc>)
   d53d8:	681b      	ldr	r3, [r3, #0]
   d53da:	691b      	ldr	r3, [r3, #16]
   d53dc:	9301      	str	r3, [sp, #4]
   d53de:	bd08      	pop	{r3, pc}
   d53e0:	00030240 	.word	0x00030240

000d53e4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d53e4:	b508      	push	{r3, lr}
   d53e6:	4b02      	ldr	r3, [pc, #8]	; (d53f0 <network_on+0xc>)
   d53e8:	681b      	ldr	r3, [r3, #0]
   d53ea:	695b      	ldr	r3, [r3, #20]
   d53ec:	9301      	str	r3, [sp, #4]
   d53ee:	bd08      	pop	{r3, pc}
   d53f0:	00030240 	.word	0x00030240

000d53f4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d53f4:	b508      	push	{r3, lr}
   d53f6:	4b02      	ldr	r3, [pc, #8]	; (d5400 <network_off+0xc>)
   d53f8:	681b      	ldr	r3, [r3, #0]
   d53fa:	699b      	ldr	r3, [r3, #24]
   d53fc:	9301      	str	r3, [sp, #4]
   d53fe:	bd08      	pop	{r3, pc}
   d5400:	00030240 	.word	0x00030240

000d5404 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5404:	b508      	push	{r3, lr}
   d5406:	4b02      	ldr	r3, [pc, #8]	; (d5410 <network_listen+0xc>)
   d5408:	681b      	ldr	r3, [r3, #0]
   d540a:	69db      	ldr	r3, [r3, #28]
   d540c:	9301      	str	r3, [sp, #4]
   d540e:	bd08      	pop	{r3, pc}
   d5410:	00030240 	.word	0x00030240

000d5414 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5414:	b508      	push	{r3, lr}
   d5416:	4b02      	ldr	r3, [pc, #8]	; (d5420 <network_listening+0xc>)
   d5418:	681b      	ldr	r3, [r3, #0]
   d541a:	6a1b      	ldr	r3, [r3, #32]
   d541c:	9301      	str	r3, [sp, #4]
   d541e:	bd08      	pop	{r3, pc}
   d5420:	00030240 	.word	0x00030240

000d5424 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5424:	b508      	push	{r3, lr}
   d5426:	4b02      	ldr	r3, [pc, #8]	; (d5430 <network_set_listen_timeout+0xc>)
   d5428:	681b      	ldr	r3, [r3, #0]
   d542a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d542c:	9301      	str	r3, [sp, #4]
   d542e:	bd08      	pop	{r3, pc}
   d5430:	00030240 	.word	0x00030240

000d5434 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5434:	b508      	push	{r3, lr}
   d5436:	4b02      	ldr	r3, [pc, #8]	; (d5440 <network_get_listen_timeout+0xc>)
   d5438:	681b      	ldr	r3, [r3, #0]
   d543a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d543c:	9301      	str	r3, [sp, #4]
   d543e:	bd08      	pop	{r3, pc}
   d5440:	00030240 	.word	0x00030240

000d5444 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d5444:	b508      	push	{r3, lr}
   d5446:	4b02      	ldr	r3, [pc, #8]	; (d5450 <network_is_on+0xc>)
   d5448:	681b      	ldr	r3, [r3, #0]
   d544a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d544c:	9301      	str	r3, [sp, #4]
   d544e:	bd08      	pop	{r3, pc}
   d5450:	00030240 	.word	0x00030240

000d5454 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d5454:	b508      	push	{r3, lr}
   d5456:	4b02      	ldr	r3, [pc, #8]	; (d5460 <network_is_off+0xc>)
   d5458:	681b      	ldr	r3, [r3, #0]
   d545a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d545c:	9301      	str	r3, [sp, #4]
   d545e:	bd08      	pop	{r3, pc}
   d5460:	00030240 	.word	0x00030240

000d5464 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5464:	b508      	push	{r3, lr}
   d5466:	4b02      	ldr	r3, [pc, #8]	; (d5470 <malloc+0xc>)
   d5468:	681b      	ldr	r3, [r3, #0]
   d546a:	681b      	ldr	r3, [r3, #0]
   d546c:	9301      	str	r3, [sp, #4]
   d546e:	bd08      	pop	{r3, pc}
   d5470:	0003021c 	.word	0x0003021c

000d5474 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5474:	b508      	push	{r3, lr}
   d5476:	4b02      	ldr	r3, [pc, #8]	; (d5480 <free+0xc>)
   d5478:	681b      	ldr	r3, [r3, #0]
   d547a:	685b      	ldr	r3, [r3, #4]
   d547c:	9301      	str	r3, [sp, #4]
   d547e:	bd08      	pop	{r3, pc}
   d5480:	0003021c 	.word	0x0003021c

000d5484 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5484:	b508      	push	{r3, lr}
   d5486:	4b02      	ldr	r3, [pc, #8]	; (d5490 <realloc+0xc>)
   d5488:	681b      	ldr	r3, [r3, #0]
   d548a:	689b      	ldr	r3, [r3, #8]
   d548c:	9301      	str	r3, [sp, #4]
   d548e:	bd08      	pop	{r3, pc}
   d5490:	0003021c 	.word	0x0003021c

000d5494 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5494:	b508      	push	{r3, lr}
   d5496:	4b02      	ldr	r3, [pc, #8]	; (d54a0 <vsnprintf+0xc>)
   d5498:	681b      	ldr	r3, [r3, #0]
   d549a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d549c:	9301      	str	r3, [sp, #4]
   d549e:	bd08      	pop	{r3, pc}
   d54a0:	0003021c 	.word	0x0003021c

000d54a4 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d54a4:	b508      	push	{r3, lr}
   d54a6:	4b02      	ldr	r3, [pc, #8]	; (d54b0 <newlib_impure_ptr_callback+0xc>)
   d54a8:	681b      	ldr	r3, [r3, #0]
   d54aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d54ac:	9301      	str	r3, [sp, #4]
   d54ae:	bd08      	pop	{r3, pc}
   d54b0:	0003021c 	.word	0x0003021c

000d54b4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d54b4:	2100      	movs	r1, #0
   d54b6:	f7ff bf29 	b.w	d530c <system_delay_ms>
	...

000d54bc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d54bc:	4802      	ldr	r0, [pc, #8]	; (d54c8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d54be:	2300      	movs	r3, #0
   d54c0:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d54c2:	f7ff bd8b 	b.w	d4fdc <os_mutex_recursive_create>
   d54c6:	bf00      	nop
   d54c8:	2003e5a8 	.word	0x2003e5a8

000d54cc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d54cc:	2200      	movs	r2, #0
   d54ce:	6840      	ldr	r0, [r0, #4]
   d54d0:	4611      	mov	r1, r2
   d54d2:	f7ff bf9f 	b.w	d5414 <network_listening>

000d54d6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d54d6:	2200      	movs	r2, #0
   d54d8:	6840      	ldr	r0, [r0, #4]
   d54da:	4611      	mov	r1, r2
   d54dc:	f7ff bfaa 	b.w	d5434 <network_get_listen_timeout>

000d54e0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d54e0:	6840      	ldr	r0, [r0, #4]
   d54e2:	2200      	movs	r2, #0
   d54e4:	f7ff bf9e 	b.w	d5424 <network_set_listen_timeout>

000d54e8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d54e8:	6840      	ldr	r0, [r0, #4]
   d54ea:	2200      	movs	r2, #0
   d54ec:	f081 0101 	eor.w	r1, r1, #1
   d54f0:	f7ff bf88 	b.w	d5404 <network_listen>

000d54f4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d54f4:	2300      	movs	r3, #0
   d54f6:	6840      	ldr	r0, [r0, #4]
   d54f8:	461a      	mov	r2, r3
   d54fa:	4619      	mov	r1, r3
   d54fc:	f7ff bf7a 	b.w	d53f4 <network_off>

000d5500 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5500:	2300      	movs	r3, #0
   d5502:	6840      	ldr	r0, [r0, #4]
   d5504:	461a      	mov	r2, r3
   d5506:	4619      	mov	r1, r3
   d5508:	f7ff bf6c 	b.w	d53e4 <network_on>

000d550c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d550c:	2200      	movs	r2, #0
   d550e:	6840      	ldr	r0, [r0, #4]
   d5510:	4611      	mov	r1, r2
   d5512:	f7ff bf5f 	b.w	d53d4 <network_ready>

000d5516 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5516:	2200      	movs	r2, #0
   d5518:	6840      	ldr	r0, [r0, #4]
   d551a:	4611      	mov	r1, r2
   d551c:	f7ff bf4a 	b.w	d53b4 <network_connecting>

000d5520 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5520:	6840      	ldr	r0, [r0, #4]
   d5522:	2200      	movs	r2, #0
   d5524:	2102      	movs	r1, #2
   d5526:	f7ff bf4d 	b.w	d53c4 <network_disconnect>

000d552a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d552a:	2300      	movs	r3, #0
   d552c:	6840      	ldr	r0, [r0, #4]
   d552e:	461a      	mov	r2, r3
   d5530:	f7ff bf38 	b.w	d53a4 <network_connect>

000d5534 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5534:	4b02      	ldr	r3, [pc, #8]	; (d5540 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5536:	2203      	movs	r2, #3
   d5538:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d553a:	4a02      	ldr	r2, [pc, #8]	; (d5544 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d553c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d553e:	4770      	bx	lr
   d5540:	2003e5ac 	.word	0x2003e5ac
   d5544:	000d7298 	.word	0x000d7298

000d5548 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d5548:	4770      	bx	lr

000d554a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d554a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d554c:	4606      	mov	r6, r0
   d554e:	4615      	mov	r5, r2
   d5550:	460c      	mov	r4, r1
   d5552:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5554:	42bc      	cmp	r4, r7
   d5556:	d006      	beq.n	d5566 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5558:	6833      	ldr	r3, [r6, #0]
   d555a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d555e:	689b      	ldr	r3, [r3, #8]
   d5560:	4630      	mov	r0, r6
   d5562:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d5564:	e7f6      	b.n	d5554 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d5566:	4628      	mov	r0, r5
   d5568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d556a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d556a:	7c00      	ldrb	r0, [r0, #16]
   d556c:	2200      	movs	r2, #0
   d556e:	f7ff bd95 	b.w	d509c <hal_i2c_write>

000d5572 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d5572:	7c00      	ldrb	r0, [r0, #16]
   d5574:	2100      	movs	r1, #0
   d5576:	f7ff bd99 	b.w	d50ac <hal_i2c_available>

000d557a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d557a:	7c00      	ldrb	r0, [r0, #16]
   d557c:	2100      	movs	r1, #0
   d557e:	f7ff bd9d 	b.w	d50bc <hal_i2c_read>

000d5582 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d5582:	7c00      	ldrb	r0, [r0, #16]
   d5584:	2100      	movs	r1, #0
   d5586:	f7ff bda1 	b.w	d50cc <hal_i2c_peek>

000d558a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d558a:	7c00      	ldrb	r0, [r0, #16]
   d558c:	2100      	movs	r1, #0
   d558e:	f7ff bda5 	b.w	d50dc <hal_i2c_flush>

000d5592 <_ZN7TwoWireD0Ev>:
   d5592:	b510      	push	{r4, lr}
   d5594:	2114      	movs	r1, #20
   d5596:	4604      	mov	r4, r0
   d5598:	f001 f880 	bl	d669c <_ZdlPvj>
   d559c:	4620      	mov	r0, r4
   d559e:	bd10      	pop	{r4, pc}

000d55a0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d55a0:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d55a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d55a6:	4604      	mov	r4, r0
   d55a8:	4608      	mov	r0, r1
   d55aa:	2100      	movs	r1, #0
   d55ac:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d55b0:	4b03      	ldr	r3, [pc, #12]	; (d55c0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d55b2:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d55b4:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d55b6:	4611      	mov	r1, r2
   d55b8:	f7ff fda0 	bl	d50fc <hal_i2c_init>
}
   d55bc:	4620      	mov	r0, r4
   d55be:	bd10      	pop	{r4, pc}
   d55c0:	000d72d4 	.word	0x000d72d4

000d55c4 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d55c4:	f7ff bd5a 	b.w	d507c <HAL_Interrupts_Disable_All>

000d55c8 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d55c8:	f7ff bd50 	b.w	d506c <HAL_Interrupts_Enable_All>

000d55cc <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d55cc:	4770      	bx	lr

000d55ce <_ZN9IPAddressD0Ev>:
   d55ce:	b510      	push	{r4, lr}
   d55d0:	2118      	movs	r1, #24
   d55d2:	4604      	mov	r4, r0
   d55d4:	f001 f862 	bl	d669c <_ZdlPvj>
   d55d8:	4620      	mov	r0, r4
   d55da:	bd10      	pop	{r4, pc}

000d55dc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d55dc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d55de:	7d03      	ldrb	r3, [r0, #20]
   d55e0:	2b06      	cmp	r3, #6
{
   d55e2:	b08d      	sub	sp, #52	; 0x34
   d55e4:	460e      	mov	r6, r1
   d55e6:	f100 0704 	add.w	r7, r0, #4
   d55ea:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d55ee:	d012      	beq.n	d5616 <_ZNK9IPAddress7printToER5Print+0x3a>
   d55f0:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d55f4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d55f8:	220a      	movs	r2, #10
   d55fa:	4630      	mov	r0, r6
   d55fc:	f000 fbe5 	bl	d5dca <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5600:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5602:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d5604:	d019      	beq.n	d563a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d5606:	2c00      	cmp	r4, #0
   d5608:	d0f4      	beq.n	d55f4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d560a:	212e      	movs	r1, #46	; 0x2e
   d560c:	4630      	mov	r0, r6
   d560e:	f000 fbcd 	bl	d5dac <_ZN5Print5printEc>
   d5612:	4404      	add	r4, r0
   d5614:	e7ee      	b.n	d55f4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5616:	232f      	movs	r3, #47	; 0x2f
   d5618:	466a      	mov	r2, sp
   d561a:	4639      	mov	r1, r7
   d561c:	200a      	movs	r0, #10
		buf[0] = 0;
   d561e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5622:	f7ff fd73 	bl	d510c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d5626:	4668      	mov	r0, sp
   d5628:	f001 fca0 	bl	d6f6c <strlen>
   d562c:	6833      	ldr	r3, [r6, #0]
   d562e:	4602      	mov	r2, r0
   d5630:	68db      	ldr	r3, [r3, #12]
   d5632:	4669      	mov	r1, sp
   d5634:	4630      	mov	r0, r6
   d5636:	4798      	blx	r3
   d5638:	4604      	mov	r4, r0
    }
    return n;
}
   d563a:	4620      	mov	r0, r4
   d563c:	b00d      	add	sp, #52	; 0x34
   d563e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5640 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d5640:	b510      	push	{r4, lr}
   d5642:	4b05      	ldr	r3, [pc, #20]	; (d5658 <_ZN9IPAddressC1Ev+0x18>)
   d5644:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5646:	2211      	movs	r2, #17
   d5648:	f840 3b04 	str.w	r3, [r0], #4
   d564c:	2100      	movs	r1, #0
   d564e:	f001 fc4f 	bl	d6ef0 <memset>
}
   d5652:	4620      	mov	r0, r4
   d5654:	bd10      	pop	{r4, pc}
   d5656:	bf00      	nop
   d5658:	000d72fc 	.word	0x000d72fc

000d565c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d565c:	4603      	mov	r3, r0
   d565e:	4a07      	ldr	r2, [pc, #28]	; (d567c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5660:	b510      	push	{r4, lr}
   d5662:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d5666:	f101 0210 	add.w	r2, r1, #16
   d566a:	f851 4b04 	ldr.w	r4, [r1], #4
   d566e:	f843 4b04 	str.w	r4, [r3], #4
   d5672:	4291      	cmp	r1, r2
   d5674:	d1f9      	bne.n	d566a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5676:	780a      	ldrb	r2, [r1, #0]
   d5678:	701a      	strb	r2, [r3, #0]
}
   d567a:	bd10      	pop	{r4, pc}
   d567c:	000d72fc 	.word	0x000d72fc

000d5680 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d5680:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5682:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5686:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d568a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d568e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d5692:	2304      	movs	r3, #4
   d5694:	6041      	str	r1, [r0, #4]
   d5696:	7503      	strb	r3, [r0, #20]
}
   d5698:	bd10      	pop	{r4, pc}

000d569a <_ZN9IPAddressaSEPKh>:
{
   d569a:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d569c:	78cb      	ldrb	r3, [r1, #3]
   d569e:	9300      	str	r3, [sp, #0]
   d56a0:	788b      	ldrb	r3, [r1, #2]
   d56a2:	784a      	ldrb	r2, [r1, #1]
   d56a4:	7809      	ldrb	r1, [r1, #0]
   d56a6:	f7ff ffeb 	bl	d5680 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d56aa:	b002      	add	sp, #8
   d56ac:	bd10      	pop	{r4, pc}

000d56ae <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   d56ae:	f100 0310 	add.w	r3, r0, #16
   d56b2:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d56b4:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d56b8:	2901      	cmp	r1, #1
   d56ba:	4618      	mov	r0, r3
   d56bc:	d108      	bne.n	d56d0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   d56be:	f853 1c04 	ldr.w	r1, [r3, #-4]
   d56c2:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   d56c6:	3a01      	subs	r2, #1
   d56c8:	f103 0310 	add.w	r3, r3, #16
   d56cc:	d1f2      	bne.n	d56b4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   d56ce:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   d56d0:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d56d2:	bf04      	itt	eq
   d56d4:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   d56d8:	1852      	addeq	r2, r2, r1
   d56da:	e7f4      	b.n	d56c6 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000d56dc <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d56dc:	4770      	bx	lr

000d56de <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d56de:	2000      	movs	r0, #0
   d56e0:	4770      	bx	lr

000d56e2 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d56e2:	b510      	push	{r4, lr}
   d56e4:	2110      	movs	r1, #16
   d56e6:	4604      	mov	r4, r0
   d56e8:	f000 ffd8 	bl	d669c <_ZdlPvj>
   d56ec:	4620      	mov	r0, r4
   d56ee:	bd10      	pop	{r4, pc}

000d56f0 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d56f0:	b508      	push	{r3, lr}
      { delete this; }
   d56f2:	f7ff fff6 	bl	d56e2 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d56f6:	bd08      	pop	{r3, pc}

000d56f8 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d56f8:	b510      	push	{r4, lr}
      { delete _M_ptr; }
   d56fa:	68c4      	ldr	r4, [r0, #12]
   d56fc:	b17c      	cbz	r4, d571e <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
            json(nullptr),
            freeJson(false) {
    }

    ~JSONData() {
        delete[] tokens;
   d56fe:	6820      	ldr	r0, [r4, #0]
   d5700:	b108      	cbz	r0, d5706 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0xe>
   d5702:	f7fe fcce 	bl	d40a2 <_ZdaPv>
        if (freeJson) {
   d5706:	7a23      	ldrb	r3, [r4, #8]
   d5708:	b11b      	cbz	r3, d5712 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
            delete[] json;
   d570a:	6860      	ldr	r0, [r4, #4]
   d570c:	b108      	cbz	r0, d5712 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
   d570e:	f7fe fcc8 	bl	d40a2 <_ZdaPv>
   d5712:	4620      	mov	r0, r4
   d5714:	210c      	movs	r1, #12
   d5716:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d571a:	f000 bfbf 	b.w	d669c <_ZdlPvj>
   d571e:	bd10      	pop	{r4, pc}

000d5720 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5720:	b510      	push	{r4, lr}
          _M_dispose();
   d5722:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5724:	4604      	mov	r4, r0
          _M_dispose();
   d5726:	689b      	ldr	r3, [r3, #8]
   d5728:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d572a:	68a3      	ldr	r3, [r4, #8]
   d572c:	3b01      	subs	r3, #1
   d572e:	60a3      	str	r3, [r4, #8]
   d5730:	b92b      	cbnz	r3, d573e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d5732:	6823      	ldr	r3, [r4, #0]
   d5734:	4620      	mov	r0, r4
   d5736:	68db      	ldr	r3, [r3, #12]
    }
   d5738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d573c:	4718      	bx	r3
    }
   d573e:	bd10      	pop	{r4, pc}

000d5740 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   d5740:	b538      	push	{r3, r4, r5, lr}
   d5742:	680b      	ldr	r3, [r1, #0]
   d5744:	6003      	str	r3, [r0, #0]
   d5746:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   d5748:	6843      	ldr	r3, [r0, #4]
   d574a:	429d      	cmp	r5, r3
    class __shared_ptr
   d574c:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   d574e:	d00c      	beq.n	d576a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   d5750:	b115      	cbz	r5, d5758 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   d5752:	686b      	ldr	r3, [r5, #4]
   d5754:	3301      	adds	r3, #1
   d5756:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   d5758:	6860      	ldr	r0, [r4, #4]
   d575a:	b128      	cbz	r0, d5768 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   d575c:	6843      	ldr	r3, [r0, #4]
   d575e:	3b01      	subs	r3, #1
   d5760:	6043      	str	r3, [r0, #4]
   d5762:	b90b      	cbnz	r3, d5768 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   d5764:	f7ff ffdc 	bl	d5720 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d5768:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   d576a:	4620      	mov	r0, r4
   d576c:	bd38      	pop	{r3, r4, r5, pc}

000d576e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
        }
    }
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d576e:	460b      	mov	r3, r1
   d5770:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   d5772:	2200      	movs	r2, #0
   d5774:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   d5776:	e9c0 2200 	strd	r2, r2, [r0]
   d577a:	4604      	mov	r4, r0
        JSONValue() {
    if (t) {
        t_ = t;
   d577c:	6083      	str	r3, [r0, #8]
    if (t) {
   d577e:	b90b      	cbnz	r3, d5784 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
        d_ = d;
    }
}
   d5780:	4620      	mov	r0, r4
   d5782:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   d5784:	f7ff ffdc 	bl	d5740 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   d5788:	e7fa      	b.n	d5780 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000d578a <_ZNK5spark9JSONValue4typeEv>:
        return 0.0;
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
   d578a:	6883      	ldr	r3, [r0, #8]
   d578c:	b1eb      	cbz	r3, d57ca <_ZNK5spark9JSONValue4typeEv+0x40>
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
   d578e:	781a      	ldrb	r2, [r3, #0]
   d5790:	2a03      	cmp	r2, #3
   d5792:	d81a      	bhi.n	d57ca <_ZNK5spark9JSONValue4typeEv+0x40>
   d5794:	e8df f002 	tbb	[pc, r2]
   d5798:	1b021704 	.word	0x1b021704
   d579c:	2005      	movs	r0, #5
   d579e:	4770      	bx	lr
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
   d57a0:	6802      	ldr	r2, [r0, #0]
   d57a2:	685b      	ldr	r3, [r3, #4]
   d57a4:	6852      	ldr	r2, [r2, #4]
   d57a6:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d57a8:	282d      	cmp	r0, #45	; 0x2d
   d57aa:	d012      	beq.n	d57d2 <_ZNK5spark9JSONValue4typeEv+0x48>
   d57ac:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d57b0:	2b09      	cmp	r3, #9
   d57b2:	d90e      	bls.n	d57d2 <_ZNK5spark9JSONValue4typeEv+0x48>
            return JSON_TYPE_NUMBER;
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d57b4:	2874      	cmp	r0, #116	; 0x74
   d57b6:	d00e      	beq.n	d57d6 <_ZNK5spark9JSONValue4typeEv+0x4c>
   d57b8:	2866      	cmp	r0, #102	; 0x66
   d57ba:	d00c      	beq.n	d57d6 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   d57bc:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d57c0:	4258      	negs	r0, r3
   d57c2:	4158      	adcs	r0, r3
   d57c4:	4770      	bx	lr
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
   d57c6:	2006      	movs	r0, #6
   d57c8:	4770      	bx	lr
    default:
        return JSON_TYPE_INVALID;
   d57ca:	2000      	movs	r0, #0
   d57cc:	4770      	bx	lr
        return JSON_TYPE_STRING;
   d57ce:	2004      	movs	r0, #4
   d57d0:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   d57d2:	2003      	movs	r0, #3
   d57d4:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   d57d6:	2002      	movs	r0, #2
    }
}
   d57d8:	4770      	bx	lr
	...

000d57dc <_ZNK5spark9JSONValue6toBoolEv>:
bool spark::JSONValue::toBool() const {
   d57dc:	b510      	push	{r4, lr}
   d57de:	4604      	mov	r4, r0
    switch (type()) {
   d57e0:	f7ff ffd3 	bl	d578a <_ZNK5spark9JSONValue4typeEv>
   d57e4:	2803      	cmp	r0, #3
   d57e6:	d00d      	beq.n	d5804 <_ZNK5spark9JSONValue6toBoolEv+0x28>
   d57e8:	2804      	cmp	r0, #4
   d57ea:	d01e      	beq.n	d582a <_ZNK5spark9JSONValue6toBoolEv+0x4e>
   d57ec:	2802      	cmp	r0, #2
   d57ee:	d12b      	bne.n	d5848 <_ZNK5spark9JSONValue6toBoolEv+0x6c>
        const char* const s = d_->json + t_->start;
   d57f0:	6822      	ldr	r2, [r4, #0]
   d57f2:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d57f4:	6852      	ldr	r2, [r2, #4]
   d57f6:	685b      	ldr	r3, [r3, #4]
   d57f8:	5cd0      	ldrb	r0, [r2, r3]
   d57fa:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d57fe:	4258      	negs	r0, r3
   d5800:	4158      	adcs	r0, r3
}
   d5802:	bd10      	pop	{r4, pc}
        const char* const s = d_->json + t_->start;
   d5804:	68a3      	ldr	r3, [r4, #8]
   d5806:	6822      	ldr	r2, [r4, #0]
   d5808:	685b      	ldr	r3, [r3, #4]
   d580a:	6854      	ldr	r4, [r2, #4]
   d580c:	441c      	add	r4, r3
        if (*s == '\0' || strcmp(s, "false") == 0 || strcmp(s, "0") == 0 || strcmp(s, "0.0") == 0) {
   d580e:	490f      	ldr	r1, [pc, #60]	; (d584c <_ZNK5spark9JSONValue6toBoolEv+0x70>)
   d5810:	4620      	mov	r0, r4
   d5812:	f001 fb99 	bl	d6f48 <strcmp>
   d5816:	2800      	cmp	r0, #0
   d5818:	d0f3      	beq.n	d5802 <_ZNK5spark9JSONValue6toBoolEv+0x26>
   d581a:	490d      	ldr	r1, [pc, #52]	; (d5850 <_ZNK5spark9JSONValue6toBoolEv+0x74>)
   d581c:	4620      	mov	r0, r4
   d581e:	f001 fb93 	bl	d6f48 <strcmp>
   d5822:	3800      	subs	r0, #0
   d5824:	bf18      	it	ne
   d5826:	2001      	movne	r0, #1
   d5828:	e7eb      	b.n	d5802 <_ZNK5spark9JSONValue6toBoolEv+0x26>
        const char* const s = d_->json + t_->start;
   d582a:	6822      	ldr	r2, [r4, #0]
   d582c:	68a3      	ldr	r3, [r4, #8]
   d582e:	6852      	ldr	r2, [r2, #4]
   d5830:	685b      	ldr	r3, [r3, #4]
        if (*s == '\0' || strcmp(s, "false") == 0 || strcmp(s, "0") == 0 || strcmp(s, "0.0") == 0) {
   d5832:	5cd0      	ldrb	r0, [r2, r3]
        const char* const s = d_->json + t_->start;
   d5834:	18d4      	adds	r4, r2, r3
        if (*s == '\0' || strcmp(s, "false") == 0 || strcmp(s, "0") == 0 || strcmp(s, "0.0") == 0) {
   d5836:	2800      	cmp	r0, #0
   d5838:	d0e3      	beq.n	d5802 <_ZNK5spark9JSONValue6toBoolEv+0x26>
   d583a:	4906      	ldr	r1, [pc, #24]	; (d5854 <_ZNK5spark9JSONValue6toBoolEv+0x78>)
   d583c:	4620      	mov	r0, r4
   d583e:	f001 fb83 	bl	d6f48 <strcmp>
   d5842:	2800      	cmp	r0, #0
   d5844:	d1e3      	bne.n	d580e <_ZNK5spark9JSONValue6toBoolEv+0x32>
   d5846:	e7dc      	b.n	d5802 <_ZNK5spark9JSONValue6toBoolEv+0x26>
    switch (type()) {
   d5848:	2000      	movs	r0, #0
   d584a:	e7da      	b.n	d5802 <_ZNK5spark9JSONValue6toBoolEv+0x26>
   d584c:	000d730a 	.word	0x000d730a
   d5850:	000d7308 	.word	0x000d7308
   d5854:	000d730c 	.word	0x000d730c

000d5858 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   d5858:	b510      	push	{r4, lr}
   d585a:	4604      	mov	r4, r0
    switch (type()) {
   d585c:	f7ff ff95 	bl	d578a <_ZNK5spark9JSONValue4typeEv>
   d5860:	2802      	cmp	r0, #2
   d5862:	d00e      	beq.n	d5882 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   d5864:	1ec3      	subs	r3, r0, #3
   d5866:	b2db      	uxtb	r3, r3
   d5868:	2b01      	cmp	r3, #1
   d586a:	d814      	bhi.n	d5896 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   d586c:	6822      	ldr	r2, [r4, #0]
   d586e:	68a3      	ldr	r3, [r4, #8]
   d5870:	6850      	ldr	r0, [r2, #4]
   d5872:	685b      	ldr	r3, [r3, #4]
}
   d5874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   d5878:	220a      	movs	r2, #10
   d587a:	2100      	movs	r1, #0
   d587c:	4418      	add	r0, r3
   d587e:	f001 bbf7 	b.w	d7070 <strtol>
        const char* const s = d_->json + t_->start;
   d5882:	6822      	ldr	r2, [r4, #0]
   d5884:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d5886:	6852      	ldr	r2, [r2, #4]
   d5888:	685b      	ldr	r3, [r3, #4]
   d588a:	5cd0      	ldrb	r0, [r2, r3]
   d588c:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d5890:	4258      	negs	r0, r3
   d5892:	4158      	adcs	r0, r3
}
   d5894:	bd10      	pop	{r4, pc}
    switch (type()) {
   d5896:	2000      	movs	r0, #0
   d5898:	e7fc      	b.n	d5894 <_ZNK5spark9JSONValue5toIntEv+0x3c>
	...

000d589c <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>:
        return JSONValue();
    }
    return JSONValue(d->tokens, d);
}

bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   d589c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d58a0:	4699      	mov	r9, r3
   d58a2:	b088      	sub	sp, #32
    jsmn_parser parser;
    parser.size = sizeof(jsmn_parser);
   d58a4:	2310      	movs	r3, #16
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   d58a6:	4607      	mov	r7, r0
   d58a8:	4688      	mov	r8, r1
    jsmn_init(&parser, nullptr);
   d58aa:	eb0d 0003 	add.w	r0, sp, r3
   d58ae:	2100      	movs	r1, #0
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   d58b0:	4692      	mov	sl, r2
    parser.size = sizeof(jsmn_parser);
   d58b2:	9304      	str	r3, [sp, #16]
    int nExt = -1;
    int n = jsmn_parse_deprecated(&parser, json, size, nullptr, 0, &nExt); // Get number of tokens
   d58b4:	2400      	movs	r4, #0
    jsmn_init(&parser, nullptr);
   d58b6:	f7ff fd09 	bl	d52cc <jsmn_init>
    int n = jsmn_parse_deprecated(&parser, json, size, nullptr, 0, &nExt); // Get number of tokens
   d58ba:	ab03      	add	r3, sp, #12
   d58bc:	9301      	str	r3, [sp, #4]
    int nExt = -1;
   d58be:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    int n = jsmn_parse_deprecated(&parser, json, size, nullptr, 0, &nExt); // Get number of tokens
   d58c2:	9400      	str	r4, [sp, #0]
   d58c4:	4623      	mov	r3, r4
   d58c6:	4642      	mov	r2, r8
   d58c8:	4639      	mov	r1, r7
   d58ca:	a804      	add	r0, sp, #16
    int nExt = -1;
   d58cc:	9603      	str	r6, [sp, #12]
    int n = jsmn_parse_deprecated(&parser, json, size, nullptr, 0, &nExt); // Get number of tokens
   d58ce:	f7ff fd05 	bl	d52dc <jsmn_parse_deprecated>
    if (n <= 0) {
   d58d2:	1e05      	subs	r5, r0, #0
   d58d4:	dd27      	ble.n	d5926 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x8a>
        return false; // Parsing error
    }
    if (nExt > n) {
   d58d6:	9803      	ldr	r0, [sp, #12]
        n = nExt;
    }
    std::unique_ptr<jsmntok_t[]> t(new(std::nothrow) jsmntok_t[n]);
   d58d8:	4914      	ldr	r1, [pc, #80]	; (d592c <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x90>)
   d58da:	4285      	cmp	r5, r0
   d58dc:	bfb8      	it	lt
   d58de:	4605      	movlt	r5, r0
   d58e0:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
   d58e4:	bfac      	ite	ge
   d58e6:	4630      	movge	r0, r6
   d58e8:	0128      	lsllt	r0, r5, #4
   d58ea:	f000 fedb 	bl	d66a4 <_ZnajRKSt9nothrow_t>
    if (!t) {
   d58ee:	4606      	mov	r6, r0
   d58f0:	b198      	cbz	r0, d591a <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x7e>
        return false;
    }
    jsmn_init(&parser, nullptr); // Reset parser
   d58f2:	2100      	movs	r1, #0
   d58f4:	a804      	add	r0, sp, #16
    if (jsmn_parse_deprecated(&parser, json, size, t.get(), n, nullptr) <= 0) {
   d58f6:	2400      	movs	r4, #0
    jsmn_init(&parser, nullptr); // Reset parser
   d58f8:	f7ff fce8 	bl	d52cc <jsmn_init>
    if (jsmn_parse_deprecated(&parser, json, size, t.get(), n, nullptr) <= 0) {
   d58fc:	e9cd 5400 	strd	r5, r4, [sp]
   d5900:	4633      	mov	r3, r6
   d5902:	4642      	mov	r2, r8
   d5904:	4639      	mov	r1, r7
   d5906:	a804      	add	r0, sp, #16
   d5908:	f7ff fce8 	bl	d52dc <jsmn_parse_deprecated>
   d590c:	42a0      	cmp	r0, r4
   d590e:	dd07      	ble.n	d5920 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x84>
        return false;
    }
    *tokens = t.release();
   d5910:	f8ca 6000 	str.w	r6, [sl]
    *count = n;
    return true;
   d5914:	2001      	movs	r0, #1
    *count = n;
   d5916:	f8c9 5000 	str.w	r5, [r9]
}
   d591a:	b008      	add	sp, #32
   d591c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      typename enable_if<is_convertible<_Up(*)[], _Tp(*)[]>::value>::type
	operator()(_Up* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5920:	4630      	mov	r0, r6
   d5922:	f7fe fbbe 	bl	d40a2 <_ZdaPv>
      }
   d5926:	4620      	mov	r0, r4
   d5928:	e7f7      	b.n	d591a <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x7e>
   d592a:	bf00      	nop
   d592c:	000d7428 	.word	0x000d7428

000d5930 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>:
        ++t;
    }
    return true;
}

bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   d5930:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    char *str = json + t->start; // Destination string
   d5934:	6843      	ldr	r3, [r0, #4]
    const char* const end = json + t->end; // End of the source string
   d5936:	6886      	ldr	r6, [r0, #8]
    char *str = json + t->start; // Destination string
   d5938:	440b      	add	r3, r1
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   d593a:	4688      	mov	r8, r1
    const char* const end = json + t->end; // End of the source string
   d593c:	440e      	add	r6, r1
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   d593e:	4607      	mov	r7, r0
    const char *s1 = str; // Beginning of an unescaped sequence
    const char *s = s1;
   d5940:	461c      	mov	r4, r3
    const char *s1 = str; // Beginning of an unescaped sequence
   d5942:	4619      	mov	r1, r3
                    break;
                case 'f': // Form feed
                    *str = 0x0c;
                    break;
                case 'r': // Carriage return
                    *str = 0x0d;
   d5944:	f04f 090d 	mov.w	r9, #13
                    *str = 0x09;
   d5948:	f04f 0a09 	mov.w	sl, #9
    while (s != end) {
   d594c:	42b4      	cmp	r4, r6
   d594e:	d063      	beq.n	d5a18 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xe8>
        if (*s == '\\') {
   d5950:	4625      	mov	r5, r4
   d5952:	f815 2b01 	ldrb.w	r2, [r5], #1
   d5956:	2a5c      	cmp	r2, #92	; 0x5c
   d5958:	d12b      	bne.n	d59b2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x82>
            if (s != s1) {
   d595a:	42a1      	cmp	r1, r4
   d595c:	d007      	beq.n	d596e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x3e>
                const size_t n = s - s1;
   d595e:	eba4 0b01 	sub.w	fp, r4, r1
                memmove(str, s1, n); // Shift preceeding characters
   d5962:	4618      	mov	r0, r3
   d5964:	465a      	mov	r2, fp
   d5966:	f001 faa9 	bl	d6ebc <memmove>
   d596a:	4603      	mov	r3, r0
                str += n;
   d596c:	445b      	add	r3, fp
            if (s == end) {
   d596e:	42b5      	cmp	r5, r6
   d5970:	d039      	beq.n	d59e6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
            if (*s == 'u') { // Arbitrary character, e.g. "\u001f"
   d5972:	7862      	ldrb	r2, [r4, #1]
   d5974:	2a75      	cmp	r2, #117	; 0x75
   d5976:	d12a      	bne.n	d59ce <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x9e>
                ++s;
   d5978:	1ca2      	adds	r2, r4, #2
                if (end - s < 4) {
   d597a:	1ab2      	subs	r2, r6, r2
   d597c:	2a03      	cmp	r2, #3
   d597e:	dd32      	ble.n	d59e6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
    const char* const end = s + size;
   d5980:	1da0      	adds	r0, r4, #6
   d5982:	f104 0e05 	add.w	lr, r4, #5
    uint32_t v = 0;
   d5986:	f04f 0c00 	mov.w	ip, #0
    while (s != end) {
   d598a:	45ae      	cmp	lr, r5
   d598c:	d053      	beq.n	d5a36 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x106>
        const char c = *s;
   d598e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
        if (c >= '0' && c <= '9') {
   d5992:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   d5996:	fa5f fb82 	uxtb.w	fp, r2
   d599a:	f1bb 0f09 	cmp.w	fp, #9
   d599e:	d905      	bls.n	d59ac <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x7c>
        } else if (c >= 'a' && c <= 'f') {
   d59a0:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
   d59a4:	2a05      	cmp	r2, #5
   d59a6:	d807      	bhi.n	d59b8 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x88>
            n = c - 'a' + 10;
   d59a8:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
        v = (v << 4) | n;
   d59ac:	ea42 1c0c 	orr.w	ip, r2, ip, lsl #4
    while (s != end) {
   d59b0:	e7eb      	b.n	d598a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x5a>
   d59b2:	4628      	mov	r0, r5
   d59b4:	4604      	mov	r4, r0
   d59b6:	e7c9      	b.n	d594c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x1c>
        } else if (c >= 'A' && c <= 'F') {
   d59b8:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
   d59bc:	2a05      	cmp	r2, #5
   d59be:	d812      	bhi.n	d59e6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
            n = c - 'A' + 10;
   d59c0:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
   d59c4:	e7f2      	b.n	d59ac <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x7c>
                    *str = u;
   d59c6:	f803 cb01 	strb.w	ip, [r3], #1
                    s1 += 6; // Skip escaped sequence
   d59ca:	4601      	mov	r1, r0
   d59cc:	e7f2      	b.n	d59b4 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>
                switch (*s) {
   d59ce:	2a6e      	cmp	r2, #110	; 0x6e
   d59d0:	d01c      	beq.n	d5a0c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xdc>
   d59d2:	d80e      	bhi.n	d59f2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xc2>
   d59d4:	2a62      	cmp	r2, #98	; 0x62
   d59d6:	d013      	beq.n	d5a00 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd0>
   d59d8:	d807      	bhi.n	d59ea <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xba>
   d59da:	2a2f      	cmp	r2, #47	; 0x2f
   d59dc:	d011      	beq.n	d5a02 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
   d59de:	2a5c      	cmp	r2, #92	; 0x5c
   d59e0:	d00f      	beq.n	d5a02 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
   d59e2:	2a22      	cmp	r2, #34	; 0x22
   d59e4:	d00d      	beq.n	d5a02 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                return false; // Unexpected end of string
   d59e6:	2000      	movs	r0, #0
   d59e8:	e023      	b.n	d5a32 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x102>
                switch (*s) {
   d59ea:	2a66      	cmp	r2, #102	; 0x66
   d59ec:	d1fb      	bne.n	d59e6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
                    *str = 0x0c;
   d59ee:	220c      	movs	r2, #12
   d59f0:	e007      	b.n	d5a02 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                switch (*s) {
   d59f2:	2a72      	cmp	r2, #114	; 0x72
   d59f4:	d00d      	beq.n	d5a12 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xe2>
   d59f6:	2a74      	cmp	r2, #116	; 0x74
   d59f8:	d1f5      	bne.n	d59e6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
                    *str = 0x09;
   d59fa:	f883 a000 	strb.w	sl, [r3]
                    break;
   d59fe:	e001      	b.n	d5a04 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd4>
                    *str = 0x08;
   d5a00:	2208      	movs	r2, #8
   d5a02:	701a      	strb	r2, [r3, #0]
                    break;
                default:
                    return false; // Invalid escaped sequence
                }
                ++str;
                ++s;
   d5a04:	1ca1      	adds	r1, r4, #2
                ++str;
   d5a06:	3301      	adds	r3, #1
                ++s;
   d5a08:	4608      	mov	r0, r1
   d5a0a:	e7d3      	b.n	d59b4 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>
                    *str = 0x0a;
   d5a0c:	f04f 020a 	mov.w	r2, #10
   d5a10:	e7f7      	b.n	d5a02 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                    *str = 0x0d;
   d5a12:	f883 9000 	strb.w	r9, [r3]
                    break;
   d5a16:	e7f5      	b.n	d5a04 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd4>
            }
        } else {
            ++s;
        }
    }
    if (s != s1) {
   d5a18:	42a1      	cmp	r1, r4
   d5a1a:	d006      	beq.n	d5a2a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xfa>
        const size_t n = s - s1;
   d5a1c:	1a64      	subs	r4, r4, r1
        memmove(str, s1, n); // Shift remaining characters
   d5a1e:	4618      	mov	r0, r3
   d5a20:	4622      	mov	r2, r4
   d5a22:	f001 fa4b 	bl	d6ebc <memmove>
   d5a26:	4603      	mov	r3, r0
        str += n;
   d5a28:	4423      	add	r3, r4
    }
    t->end = str - json; // Update string length
   d5a2a:	eba3 0308 	sub.w	r3, r3, r8
   d5a2e:	60bb      	str	r3, [r7, #8]
    return true;
   d5a30:	2001      	movs	r0, #1
}
   d5a32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if (u <= 0x7f) { // Processing only code points within the basic latin block
   d5a36:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
   d5a3a:	d9c4      	bls.n	d59c6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x96>
   d5a3c:	4621      	mov	r1, r4
   d5a3e:	e7b9      	b.n	d59b4 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>

000d5a40 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>:
bool spark::JSONValue::stringize(jsmntok_t *t, size_t count, char *json) {
   d5a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5a42:	4604      	mov	r4, r0
   d5a44:	4615      	mov	r5, r2
    const jsmntok_t* const end = t + count;
   d5a46:	eb00 1601 	add.w	r6, r0, r1, lsl #4
            json[t->end] = '\0';
   d5a4a:	2700      	movs	r7, #0
    while (t != end) {
   d5a4c:	42b4      	cmp	r4, r6
   d5a4e:	d010      	beq.n	d5a72 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x32>
        if (t->type == JSMN_STRING) {
   d5a50:	7823      	ldrb	r3, [r4, #0]
   d5a52:	2b03      	cmp	r3, #3
   d5a54:	d108      	bne.n	d5a68 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x28>
            if (!unescape(t, json)) {
   d5a56:	4629      	mov	r1, r5
   d5a58:	4620      	mov	r0, r4
   d5a5a:	f7ff ff69 	bl	d5930 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>
   d5a5e:	b148      	cbz	r0, d5a74 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x34>
            json[t->end] = '\0';
   d5a60:	68a3      	ldr	r3, [r4, #8]
   d5a62:	54ef      	strb	r7, [r5, r3]
        ++t;
   d5a64:	3410      	adds	r4, #16
    while (t != end) {
   d5a66:	e7f1      	b.n	d5a4c <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0xc>
        } else if (t->type == JSMN_PRIMITIVE) {
   d5a68:	2b00      	cmp	r3, #0
   d5a6a:	d1fb      	bne.n	d5a64 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x24>
            json[t->end] = '\0';
   d5a6c:	68a2      	ldr	r2, [r4, #8]
   d5a6e:	54ab      	strb	r3, [r5, r2]
   d5a70:	e7f8      	b.n	d5a64 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x24>
    return true;
   d5a72:	2001      	movs	r0, #1
}
   d5a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d5a78 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

// spark::JSONString
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d5a78:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d5a7a:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d5a7c:	e9c0 3300 	strd	r3, r3, [r0]
   d5a80:	4604      	mov	r4, r0
}

// spark::JSONString
inline spark::JSONString::JSONString() :
        s_(""),
        n_(0) {
   d5a82:	480e      	ldr	r0, [pc, #56]	; (d5abc <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   d5a84:	e9c4 0302 	strd	r0, r3, [r4, #8]
        JSONString() {
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d5a88:	b1a9      	cbz	r1, d5ab6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   d5a8a:	780b      	ldrb	r3, [r1, #0]
   d5a8c:	2b03      	cmp	r3, #3
   d5a8e:	d006      	beq.n	d5a9e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d5a90:	b98b      	cbnz	r3, d5ab6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d5a92:	6813      	ldr	r3, [r2, #0]
   d5a94:	6858      	ldr	r0, [r3, #4]
   d5a96:	684b      	ldr	r3, [r1, #4]
   d5a98:	5cc3      	ldrb	r3, [r0, r3]
   d5a9a:	2b6e      	cmp	r3, #110	; 0x6e
   d5a9c:	d007      	beq.n	d5aae <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   d5a9e:	6813      	ldr	r3, [r2, #0]
   d5aa0:	684d      	ldr	r5, [r1, #4]
   d5aa2:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   d5aa4:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   d5aa6:	4428      	add	r0, r5
            n_ = t->end - t->start;
   d5aa8:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   d5aaa:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   d5aac:	60e3      	str	r3, [r4, #12]
   d5aae:	4611      	mov	r1, r2
   d5ab0:	4620      	mov	r0, r4
   d5ab2:	f7ff fe45 	bl	d5740 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
        }
        d_ = d;
    }
}
   d5ab6:	4620      	mov	r0, r4
   d5ab8:	bd38      	pop	{r3, r4, r5, pc}
   d5aba:	bf00      	nop
   d5abc:	000d730b 	.word	0x000d730b

000d5ac0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
bool spark::JSONString::operator==(const JSONString &str) const {
    return n_ == str.n_ && strncmp(s_, str.s_, n_) == 0;
}

// spark::JSONObjectIterator
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d5ac0:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d5ac2:	2500      	movs	r5, #0
   d5ac4:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   d5ac6:	e9c0 5500 	strd	r5, r5, [r0]
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
   d5aca:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d5ace:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d5ad2:	4604      	mov	r4, r0
   d5ad4:	4611      	mov	r1, r2
        JSONObjectIterator() {
    if (t && t->type == JSMN_OBJECT) {
   d5ad6:	b14b      	cbz	r3, d5aec <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   d5ad8:	781a      	ldrb	r2, [r3, #0]
   d5ada:	2a01      	cmp	r2, #1
   d5adc:	d106      	bne.n	d5aec <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   d5ade:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   d5ae2:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   d5ae4:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   d5ae6:	6143      	str	r3, [r0, #20]
   d5ae8:	f7ff fe2a 	bl	d5740 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
        d_ = d;
    }
}
   d5aec:	4620      	mov	r0, r4
   d5aee:	bd38      	pop	{r3, r4, r5, pc}

000d5af0 <_ZN5spark18JSONObjectIterator4nextEv>:

bool spark::JSONObjectIterator::next() {
   d5af0:	b510      	push	{r4, lr}
    if (!n_) {
   d5af2:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   d5af4:	4604      	mov	r4, r0
    if (!n_) {
   d5af6:	b163      	cbz	r3, d5b12 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
        return false;
    }
    k_ = t_; // Name
   d5af8:	6880      	ldr	r0, [r0, #8]
   d5afa:	60e0      	str	r0, [r4, #12]
    ++t_;
    v_ = t_; // Value
    --n_;
   d5afc:	3b01      	subs	r3, #1
    ++t_;
   d5afe:	3010      	adds	r0, #16
   d5b00:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d5b02:	6120      	str	r0, [r4, #16]
    --n_;
   d5b04:	6163      	str	r3, [r4, #20]
    if (n_) {
   d5b06:	b113      	cbz	r3, d5b0e <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   d5b08:	f7ff fdd1 	bl	d56ae <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d5b0c:	60a0      	str	r0, [r4, #8]
    }
    return true;
   d5b0e:	2001      	movs	r0, #1
   d5b10:	e000      	b.n	d5b14 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   d5b12:	4618      	mov	r0, r3
}
   d5b14:	bd10      	pop	{r4, pc}
	...

000d5b18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d5b18:	b538      	push	{r3, r4, r5, lr}
   d5b1a:	2300      	movs	r3, #0
   d5b1c:	4604      	mov	r4, r0
   d5b1e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5b20:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d5b22:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5b24:	f7fe fab7 	bl	d4096 <_Znwj>
   d5b28:	b128      	cbz	r0, d5b36 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d5b2a:	2301      	movs	r3, #1
   d5b2c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d5b30:	4b02      	ldr	r3, [pc, #8]	; (d5b3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x24>)
   d5b32:	6003      	str	r3, [r0, #0]
   d5b34:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5b36:	6020      	str	r0, [r4, #0]
	}
   d5b38:	4620      	mov	r0, r4
   d5b3a:	bd38      	pop	{r3, r4, r5, pc}
   d5b3c:	000d731c 	.word	0x000d731c

000d5b40 <_ZN5spark9JSONValue9parseCopyEPKcj>:
spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
   d5b40:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5b42:	4604      	mov	r4, r0
   d5b44:	b087      	sub	sp, #28
   d5b46:	460e      	mov	r6, r1
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
   d5b48:	200c      	movs	r0, #12
   d5b4a:	4927      	ldr	r1, [pc, #156]	; (d5be8 <_ZN5spark9JSONValue9parseCopyEPKcj+0xa8>)
spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
   d5b4c:	4615      	mov	r5, r2
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
   d5b4e:	f000 fda7 	bl	d66a0 <_ZnwjRKSt9nothrow_t>
   d5b52:	4601      	mov	r1, r0
   d5b54:	b118      	cbz	r0, d5b5e <_ZN5spark9JSONValue9parseCopyEPKcj+0x1e>
            freeJson(false) {
   d5b56:	2300      	movs	r3, #0
   d5b58:	e9c0 3300 	strd	r3, r3, [r0]
   d5b5c:	7203      	strb	r3, [r0, #8]
	: __shared_count(__p)
   d5b5e:	a803      	add	r0, sp, #12
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5b60:	9102      	str	r1, [sp, #8]
	: __shared_count(__p)
   d5b62:	f7ff ffd9 	bl	d5b18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>
    if (!d) {
   d5b66:	9a02      	ldr	r2, [sp, #8]
   d5b68:	b942      	cbnz	r2, d5b7c <_ZN5spark9JSONValue9parseCopyEPKcj+0x3c>
      constexpr __shared_count() noexcept : _M_pi(0)
   d5b6a:	e9c4 2200 	strd	r2, r2, [r4]
        t_(nullptr) {
   d5b6e:	60a2      	str	r2, [r4, #8]
      ~__shared_ptr() = default;
   d5b70:	a803      	add	r0, sp, #12
   d5b72:	f7fe fad1 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5b76:	4620      	mov	r0, r4
   d5b78:	b007      	add	sp, #28
   d5b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    size_t tokenCount = 0;
   d5b7c:	2300      	movs	r3, #0
   d5b7e:	9301      	str	r3, [sp, #4]
    if (!tokenize(json, size, &d->tokens, &tokenCount)) {
   d5b80:	4629      	mov	r1, r5
   d5b82:	ab01      	add	r3, sp, #4
   d5b84:	4630      	mov	r0, r6
   d5b86:	f7ff fe89 	bl	d589c <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>
   d5b8a:	b918      	cbnz	r0, d5b94 <_ZN5spark9JSONValue9parseCopyEPKcj+0x54>
      constexpr __shared_count() noexcept : _M_pi(0)
   d5b8c:	e9c4 0000 	strd	r0, r0, [r4]
   d5b90:	60a0      	str	r0, [r4, #8]
}
   d5b92:	e7ed      	b.n	d5b70 <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
    d->json = new(std::nothrow) char[size + 1];
   d5b94:	4914      	ldr	r1, [pc, #80]	; (d5be8 <_ZN5spark9JSONValue9parseCopyEPKcj+0xa8>)
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d5b96:	9f02      	ldr	r7, [sp, #8]
   d5b98:	1c68      	adds	r0, r5, #1
   d5b9a:	f000 fd83 	bl	d66a4 <_ZnajRKSt9nothrow_t>
    if (!d->json) {
   d5b9e:	9b02      	ldr	r3, [sp, #8]
    d->json = new(std::nothrow) char[size + 1];
   d5ba0:	6078      	str	r0, [r7, #4]
    if (!d->json) {
   d5ba2:	6858      	ldr	r0, [r3, #4]
   d5ba4:	2800      	cmp	r0, #0
   d5ba6:	d0f1      	beq.n	d5b8c <_ZN5spark9JSONValue9parseCopyEPKcj+0x4c>
    memcpy(d->json, json, size); // TODO: Copy only token data
   d5ba8:	462a      	mov	r2, r5
   d5baa:	4631      	mov	r1, r6
   d5bac:	f001 f978 	bl	d6ea0 <memcpy>
   d5bb0:	9b02      	ldr	r3, [sp, #8]
    if (!stringize(d->tokens, tokenCount, d->json)) {
   d5bb2:	9901      	ldr	r1, [sp, #4]
   d5bb4:	6818      	ldr	r0, [r3, #0]
    d->freeJson = true;
   d5bb6:	2201      	movs	r2, #1
   d5bb8:	721a      	strb	r2, [r3, #8]
    if (!stringize(d->tokens, tokenCount, d->json)) {
   d5bba:	685a      	ldr	r2, [r3, #4]
   d5bbc:	f7ff ff40 	bl	d5a40 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>
   d5bc0:	2800      	cmp	r0, #0
   d5bc2:	d0e3      	beq.n	d5b8c <_ZN5spark9JSONValue9parseCopyEPKcj+0x4c>
   d5bc4:	9b02      	ldr	r3, [sp, #8]
    return JSONValue(d->tokens, d);
   d5bc6:	6819      	ldr	r1, [r3, #0]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5bc8:	9304      	str	r3, [sp, #16]
      : _M_pi(__r._M_pi)
   d5bca:	9b03      	ldr	r3, [sp, #12]
   d5bcc:	9305      	str	r3, [sp, #20]
	if (_M_pi != 0)
   d5bce:	b113      	cbz	r3, d5bd6 <_ZN5spark9JSONValue9parseCopyEPKcj+0x96>
    { ++_M_use_count; }
   d5bd0:	685a      	ldr	r2, [r3, #4]
   d5bd2:	3201      	adds	r2, #1
   d5bd4:	605a      	str	r2, [r3, #4]
   d5bd6:	aa04      	add	r2, sp, #16
   d5bd8:	4620      	mov	r0, r4
   d5bda:	f7ff fdc8 	bl	d576e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d5bde:	a805      	add	r0, sp, #20
   d5be0:	f7fe fa9a 	bl	d4118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5be4:	e7c4      	b.n	d5b70 <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
   d5be6:	bf00      	nop
   d5be8:	000d7428 	.word	0x000d7428

000d5bec <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5bec:	4b01      	ldr	r3, [pc, #4]	; (d5bf4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5bee:	4a02      	ldr	r2, [pc, #8]	; (d5bf8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5bf0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d5bf2:	4770      	bx	lr
   d5bf4:	2003e5b4 	.word	0x2003e5b4
   d5bf8:	000d7330 	.word	0x000d7330

000d5bfc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5bfc:	2300      	movs	r3, #0
   d5bfe:	6840      	ldr	r0, [r0, #4]
   d5c00:	461a      	mov	r2, r3
   d5c02:	f7ff bbcf 	b.w	d53a4 <network_connect>

000d5c06 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5c06:	6840      	ldr	r0, [r0, #4]
   d5c08:	2200      	movs	r2, #0
   d5c0a:	2102      	movs	r1, #2
   d5c0c:	f7ff bbda 	b.w	d53c4 <network_disconnect>

000d5c10 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5c10:	2200      	movs	r2, #0
   d5c12:	6840      	ldr	r0, [r0, #4]
   d5c14:	4611      	mov	r1, r2
   d5c16:	f7ff bbcd 	b.w	d53b4 <network_connecting>

000d5c1a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5c1a:	2200      	movs	r2, #0
   d5c1c:	6840      	ldr	r0, [r0, #4]
   d5c1e:	4611      	mov	r1, r2
   d5c20:	f7ff bbd8 	b.w	d53d4 <network_ready>

000d5c24 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5c24:	2300      	movs	r3, #0
   d5c26:	6840      	ldr	r0, [r0, #4]
   d5c28:	461a      	mov	r2, r3
   d5c2a:	4619      	mov	r1, r3
   d5c2c:	f7ff bbda 	b.w	d53e4 <network_on>

000d5c30 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5c30:	2300      	movs	r3, #0
   d5c32:	6840      	ldr	r0, [r0, #4]
   d5c34:	461a      	mov	r2, r3
   d5c36:	4619      	mov	r1, r3
   d5c38:	f7ff bbdc 	b.w	d53f4 <network_off>

000d5c3c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d5c3c:	6840      	ldr	r0, [r0, #4]
   d5c3e:	2100      	movs	r1, #0
   d5c40:	f7ff bc00 	b.w	d5444 <network_is_on>

000d5c44 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d5c44:	6840      	ldr	r0, [r0, #4]
   d5c46:	2100      	movs	r1, #0
   d5c48:	f7ff bc04 	b.w	d5454 <network_is_off>

000d5c4c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5c4c:	6840      	ldr	r0, [r0, #4]
   d5c4e:	2200      	movs	r2, #0
   d5c50:	f081 0101 	eor.w	r1, r1, #1
   d5c54:	f7ff bbd6 	b.w	d5404 <network_listen>

000d5c58 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5c58:	6840      	ldr	r0, [r0, #4]
   d5c5a:	2200      	movs	r2, #0
   d5c5c:	f7ff bbe2 	b.w	d5424 <network_set_listen_timeout>

000d5c60 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5c60:	2200      	movs	r2, #0
   d5c62:	6840      	ldr	r0, [r0, #4]
   d5c64:	4611      	mov	r1, r2
   d5c66:	f7ff bbe5 	b.w	d5434 <network_get_listen_timeout>

000d5c6a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5c6a:	2200      	movs	r2, #0
   d5c6c:	6840      	ldr	r0, [r0, #4]
   d5c6e:	4611      	mov	r1, r2
   d5c70:	f7ff bbd0 	b.w	d5414 <network_listening>

000d5c74 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5c74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5c78:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d5c7a:	b095      	sub	sp, #84	; 0x54
   d5c7c:	4616      	mov	r6, r2
   d5c7e:	460d      	mov	r5, r1
   d5c80:	4607      	mov	r7, r0
    IPAddress addr;
   d5c82:	f7ff fcdd 	bl	d5640 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d5c86:	4621      	mov	r1, r4
   d5c88:	2218      	movs	r2, #24
   d5c8a:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d5c8c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5c8e:	f001 f92f 	bl	d6ef0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5c92:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d5c94:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5c98:	4621      	mov	r1, r4
   d5c9a:	466b      	mov	r3, sp
   d5c9c:	aa0c      	add	r2, sp, #48	; 0x30
   d5c9e:	4630      	mov	r0, r6
   d5ca0:	f7ff fa44 	bl	d512c <netdb_getaddrinfo>
    if (!r) {
   d5ca4:	4604      	mov	r4, r0
   d5ca6:	2800      	cmp	r0, #0
   d5ca8:	d146      	bne.n	d5d38 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5caa:	4602      	mov	r2, r0
   d5cac:	2101      	movs	r1, #1
   d5cae:	6868      	ldr	r0, [r5, #4]
   d5cb0:	f7ff fb90 	bl	d53d4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5cb4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5cb6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5cb8:	4622      	mov	r2, r4
   d5cba:	6868      	ldr	r0, [r5, #4]
   d5cbc:	f7ff fb8a 	bl	d53d4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5cc0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5cc2:	4681      	mov	r9, r0
        bool ok = false;
   d5cc4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5cc6:	2e00      	cmp	r6, #0
   d5cc8:	d036      	beq.n	d5d38 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d5cca:	2900      	cmp	r1, #0
   d5ccc:	d134      	bne.n	d5d38 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5cce:	6873      	ldr	r3, [r6, #4]
   d5cd0:	2b02      	cmp	r3, #2
   d5cd2:	d003      	beq.n	d5cdc <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d5cd4:	2b0a      	cmp	r3, #10
   d5cd6:	d00b      	beq.n	d5cf0 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5cd8:	69f6      	ldr	r6, [r6, #28]
   d5cda:	e7f4      	b.n	d5cc6 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d5cdc:	f1b8 0f00 	cmp.w	r8, #0
   d5ce0:	d004      	beq.n	d5cec <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5ce2:	6971      	ldr	r1, [r6, #20]
   d5ce4:	4638      	mov	r0, r7
   d5ce6:	3104      	adds	r1, #4
   d5ce8:	f7ff fcd7 	bl	d569a <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d5cec:	4641      	mov	r1, r8
   d5cee:	e7f3      	b.n	d5cd8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5cf0:	f1b9 0f00 	cmp.w	r9, #0
   d5cf4:	d101      	bne.n	d5cfa <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d5cf6:	4649      	mov	r1, r9
   d5cf8:	e7ee      	b.n	d5cd8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5cfa:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5cfc:	2210      	movs	r2, #16
   d5cfe:	a801      	add	r0, sp, #4
   d5d00:	f001 f8f6 	bl	d6ef0 <memset>
                    a.v = 6;
   d5d04:	2306      	movs	r3, #6
   d5d06:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5d0a:	ad01      	add	r5, sp, #4
   d5d0c:	f104 0308 	add.w	r3, r4, #8
   d5d10:	3418      	adds	r4, #24
   d5d12:	6818      	ldr	r0, [r3, #0]
   d5d14:	6859      	ldr	r1, [r3, #4]
   d5d16:	462a      	mov	r2, r5
   d5d18:	c203      	stmia	r2!, {r0, r1}
   d5d1a:	3308      	adds	r3, #8
   d5d1c:	42a3      	cmp	r3, r4
   d5d1e:	4615      	mov	r5, r2
   d5d20:	d1f7      	bne.n	d5d12 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d5d22:	a901      	add	r1, sp, #4
   d5d24:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d5d26:	ad07      	add	r5, sp, #28
   d5d28:	f7ff fc98 	bl	d565c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5d2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5d2e:	1d3c      	adds	r4, r7, #4
   d5d30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5d32:	682b      	ldr	r3, [r5, #0]
   d5d34:	7023      	strb	r3, [r4, #0]
   d5d36:	e7de      	b.n	d5cf6 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5d38:	9800      	ldr	r0, [sp, #0]
   d5d3a:	f7ff f9ef 	bl	d511c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5d3e:	4638      	mov	r0, r7
   d5d40:	b015      	add	sp, #84	; 0x54
   d5d42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d5d48 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5d48:	4b02      	ldr	r3, [pc, #8]	; (d5d54 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5d4a:	4a03      	ldr	r2, [pc, #12]	; (d5d58 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5d4c:	601a      	str	r2, [r3, #0]
   d5d4e:	2200      	movs	r2, #0
   d5d50:	605a      	str	r2, [r3, #4]

} // spark
   d5d52:	4770      	bx	lr
   d5d54:	2003e5b8 	.word	0x2003e5b8
   d5d58:	000d733c 	.word	0x000d733c

000d5d5c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5d5e:	4606      	mov	r6, r0
   d5d60:	460d      	mov	r5, r1
  size_t n = 0;
   d5d62:	188f      	adds	r7, r1, r2
   d5d64:	2400      	movs	r4, #0
  while (size--) {
   d5d66:	42bd      	cmp	r5, r7
   d5d68:	d00c      	beq.n	d5d84 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5d6a:	6833      	ldr	r3, [r6, #0]
   d5d6c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5d70:	689b      	ldr	r3, [r3, #8]
   d5d72:	4630      	mov	r0, r6
   d5d74:	4798      	blx	r3
     if (chunk>=0)
   d5d76:	1e03      	subs	r3, r0, #0
   d5d78:	db01      	blt.n	d5d7e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5d7a:	441c      	add	r4, r3
  while (size--) {
   d5d7c:	e7f3      	b.n	d5d66 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5d7e:	2c00      	cmp	r4, #0
   d5d80:	bf08      	it	eq
   d5d82:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d5d84:	4620      	mov	r0, r4
   d5d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5d88 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d5d88:	b513      	push	{r0, r1, r4, lr}
   d5d8a:	4604      	mov	r4, r0
    }
   d5d8c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d5d8e:	b159      	cbz	r1, d5da8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d5d90:	9101      	str	r1, [sp, #4]
   d5d92:	f001 f8eb 	bl	d6f6c <strlen>
   d5d96:	6823      	ldr	r3, [r4, #0]
   d5d98:	9901      	ldr	r1, [sp, #4]
   d5d9a:	68db      	ldr	r3, [r3, #12]
   d5d9c:	4602      	mov	r2, r0
   d5d9e:	4620      	mov	r0, r4
    }
   d5da0:	b002      	add	sp, #8
   d5da2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d5da6:	4718      	bx	r3
    }
   d5da8:	b002      	add	sp, #8
   d5daa:	bd10      	pop	{r4, pc}

000d5dac <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5dac:	6803      	ldr	r3, [r0, #0]
   d5dae:	689b      	ldr	r3, [r3, #8]
   d5db0:	4718      	bx	r3

000d5db2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5db2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5db4:	210d      	movs	r1, #13
{
   d5db6:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5db8:	f7ff fff8 	bl	d5dac <_ZN5Print5printEc>
  n += print('\n');
   d5dbc:	210a      	movs	r1, #10
  size_t n = print('\r');
   d5dbe:	4604      	mov	r4, r0
  n += print('\n');
   d5dc0:	4628      	mov	r0, r5
   d5dc2:	f7ff fff3 	bl	d5dac <_ZN5Print5printEc>
  return n;
}
   d5dc6:	4420      	add	r0, r4
   d5dc8:	bd38      	pop	{r3, r4, r5, pc}

000d5dca <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5dca:	b530      	push	{r4, r5, lr}
   d5dcc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5dce:	2300      	movs	r3, #0
   d5dd0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5dd4:	2a01      	cmp	r2, #1
   d5dd6:	bf98      	it	ls
   d5dd8:	220a      	movls	r2, #10
   d5dda:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d5ddc:	460d      	mov	r5, r1
   d5dde:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d5de2:	fb01 5312 	mls	r3, r1, r2, r5
   d5de6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5dea:	2b09      	cmp	r3, #9
   d5dec:	bf94      	ite	ls
   d5dee:	3330      	addls	r3, #48	; 0x30
   d5df0:	3337      	addhi	r3, #55	; 0x37
   d5df2:	b2db      	uxtb	r3, r3
  } while(n);
   d5df4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5df6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d5dfa:	d9ef      	bls.n	d5ddc <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d5dfc:	4621      	mov	r1, r4
   d5dfe:	f7ff ffc3 	bl	d5d88 <_ZN5Print5writeEPKc>
}
   d5e02:	b00b      	add	sp, #44	; 0x2c
   d5e04:	bd30      	pop	{r4, r5, pc}

000d5e06 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d5e06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5e0a:	b086      	sub	sp, #24
   d5e0c:	af00      	add	r7, sp, #0
   d5e0e:	4605      	mov	r5, r0
   d5e10:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d5e12:	1d38      	adds	r0, r7, #4
   d5e14:	2114      	movs	r1, #20
{
   d5e16:	4614      	mov	r4, r2
    va_copy(args2, args);
   d5e18:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d5e1a:	f7ff fb3b 	bl	d5494 <vsnprintf>

    if (n<bufsize)
   d5e1e:	2813      	cmp	r0, #19
   d5e20:	d80e      	bhi.n	d5e40 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d5e22:	1d39      	adds	r1, r7, #4
   d5e24:	4628      	mov	r0, r5
   d5e26:	f7ff ffaf 	bl	d5d88 <_ZN5Print5writeEPKc>
   d5e2a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d5e2c:	b11e      	cbz	r6, d5e36 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d5e2e:	4628      	mov	r0, r5
   d5e30:	f7ff ffbf 	bl	d5db2 <_ZN5Print7printlnEv>
   d5e34:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d5e36:	4620      	mov	r0, r4
   d5e38:	3718      	adds	r7, #24
   d5e3a:	46bd      	mov	sp, r7
   d5e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d5e40:	f100 0308 	add.w	r3, r0, #8
   d5e44:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d5e48:	46e8      	mov	r8, sp
        char bigger[n+1];
   d5e4a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d5e4e:	4622      	mov	r2, r4
   d5e50:	1c41      	adds	r1, r0, #1
   d5e52:	683b      	ldr	r3, [r7, #0]
   d5e54:	4668      	mov	r0, sp
   d5e56:	f7ff fb1d 	bl	d5494 <vsnprintf>
  return write(str);
   d5e5a:	4669      	mov	r1, sp
   d5e5c:	4628      	mov	r0, r5
   d5e5e:	f7ff ff93 	bl	d5d88 <_ZN5Print5writeEPKc>
   d5e62:	4604      	mov	r4, r0
   d5e64:	46c5      	mov	sp, r8
   d5e66:	e7e1      	b.n	d5e2c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d5e68 <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
   d5e68:	b510      	push	{r4, lr}
   d5e6a:	4604      	mov	r4, r0
    return LED_RGB_IsOverRidden();
   d5e6c:	f7ff fa0e 	bl	d528c <LED_RGB_IsOverRidden>
    if (override == controlled()) {
   d5e70:	4284      	cmp	r4, r0
   d5e72:	d008      	beq.n	d5e86 <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
   d5e74:	b11c      	cbz	r4, d5e7e <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
   d5e76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Start();
   d5e7a:	f7ff b9ef 	b.w	d525c <LED_Signaling_Start>
}
   d5e7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Stop();
   d5e82:	f7ff b9f3 	b.w	d526c <LED_Signaling_Stop>
}
   d5e86:	bd10      	pop	{r4, pc}

000d5e88 <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
   d5e88:	b570      	push	{r4, r5, r6, lr}
   d5e8a:	4605      	mov	r5, r0
   d5e8c:	460e      	mov	r6, r1
   d5e8e:	4614      	mov	r4, r2
    return LED_RGB_IsOverRidden();
   d5e90:	f7ff f9fc 	bl	d528c <LED_RGB_IsOverRidden>
    if (!controlled()) {
   d5e94:	b150      	cbz	r0, d5eac <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
   d5e96:	ea44 2006 	orr.w	r0, r4, r6, lsl #8
   d5e9a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   d5e9e:	f7ff f9d5 	bl	d524c <LED_SetSignalingColor>
    LED_On(LED_RGB);
}
   d5ea2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LED_On(LED_RGB);
   d5ea6:	20e7      	movs	r0, #231	; 0xe7
   d5ea8:	f7ff b9f8 	b.w	d529c <LED_On>
}
   d5eac:	bd70      	pop	{r4, r5, r6, pc}

000d5eae <_ZN8RGBClass10brightnessEhb>:

void RGBClass::brightness(uint8_t brightness, bool update)
{
   d5eae:	b510      	push	{r4, lr}
   d5eb0:	460c      	mov	r4, r1
    LED_SetBrightness(brightness);
   d5eb2:	f7ff f9e3 	bl	d527c <LED_SetBrightness>
    return LED_RGB_IsOverRidden();
   d5eb6:	f7ff f9e9 	bl	d528c <LED_RGB_IsOverRidden>
    if (controlled() && update) {
   d5eba:	b128      	cbz	r0, d5ec8 <_ZN8RGBClass10brightnessEhb+0x1a>
   d5ebc:	b124      	cbz	r4, d5ec8 <_ZN8RGBClass10brightnessEhb+0x1a>
        LED_On(LED_RGB);
    }
}
   d5ebe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_On(LED_RGB);
   d5ec2:	20e7      	movs	r0, #231	; 0xe7
   d5ec4:	f7ff b9ea 	b.w	d529c <LED_On>
}
   d5ec8:	bd10      	pop	{r4, pc}

000d5eca <_ZN8RGBClass10brightnessEv>:

uint8_t RGBClass::brightness()
{
    return Get_LED_Brightness();
   d5eca:	f7ff b9ef 	b.w	d52ac <Get_LED_Brightness>
	...

000d5ed0 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   d5ed0:	4b01      	ldr	r3, [pc, #4]	; (d5ed8 <_GLOBAL__sub_I_RGB+0x8>)
   d5ed2:	2200      	movs	r2, #0
   d5ed4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d5ed6:	4770      	bx	lr
   d5ed8:	2003e5c0 	.word	0x2003e5c0

000d5edc <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d5edc:	b510      	push	{r4, lr}
   d5ede:	4604      	mov	r4, r0
   d5ee0:	4608      	mov	r0, r1
{
    _spi = spi;
   d5ee2:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d5ee4:	f7ff f92a 	bl	d513c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5ee8:	2300      	movs	r3, #0
   d5eea:	6063      	str	r3, [r4, #4]
}
   d5eec:	4620      	mov	r0, r4
   d5eee:	bd10      	pop	{r4, pc}

000d5ef0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5ef0:	b510      	push	{r4, lr}
   d5ef2:	4604      	mov	r4, r0
{
	free(buffer);
   d5ef4:	6800      	ldr	r0, [r0, #0]
   d5ef6:	f7ff fabd 	bl	d5474 <free>
}
   d5efa:	4620      	mov	r0, r4
   d5efc:	bd10      	pop	{r4, pc}

000d5efe <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5efe:	b510      	push	{r4, lr}
   d5f00:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5f02:	6800      	ldr	r0, [r0, #0]
   d5f04:	b108      	cbz	r0, d5f0a <_ZN6String10invalidateEv+0xc>
   d5f06:	f7ff fab5 	bl	d5474 <free>
	buffer = NULL;
   d5f0a:	2300      	movs	r3, #0
	capacity = len = 0;
   d5f0c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d5f10:	6023      	str	r3, [r4, #0]
}
   d5f12:	bd10      	pop	{r4, pc}

000d5f14 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5f14:	b538      	push	{r3, r4, r5, lr}
   d5f16:	4604      	mov	r4, r0
   d5f18:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5f1a:	6800      	ldr	r0, [r0, #0]
   d5f1c:	3101      	adds	r1, #1
   d5f1e:	f7ff fab1 	bl	d5484 <realloc>
	if (newbuffer) {
   d5f22:	b110      	cbz	r0, d5f2a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5f24:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d5f28:	2001      	movs	r0, #1
	}
	return 0;
}
   d5f2a:	bd38      	pop	{r3, r4, r5, pc}

000d5f2c <_ZN6String7reserveEj>:
{
   d5f2c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5f2e:	6803      	ldr	r3, [r0, #0]
{
   d5f30:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5f32:	b123      	cbz	r3, d5f3e <_ZN6String7reserveEj+0x12>
   d5f34:	6843      	ldr	r3, [r0, #4]
   d5f36:	428b      	cmp	r3, r1
   d5f38:	d301      	bcc.n	d5f3e <_ZN6String7reserveEj+0x12>
   d5f3a:	2001      	movs	r0, #1
}
   d5f3c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d5f3e:	4620      	mov	r0, r4
   d5f40:	f7ff ffe8 	bl	d5f14 <_ZN6String12changeBufferEj>
   d5f44:	2800      	cmp	r0, #0
   d5f46:	d0f9      	beq.n	d5f3c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d5f48:	68a3      	ldr	r3, [r4, #8]
   d5f4a:	2b00      	cmp	r3, #0
   d5f4c:	d1f5      	bne.n	d5f3a <_ZN6String7reserveEj+0xe>
   d5f4e:	6822      	ldr	r2, [r4, #0]
   d5f50:	7013      	strb	r3, [r2, #0]
   d5f52:	e7f2      	b.n	d5f3a <_ZN6String7reserveEj+0xe>

000d5f54 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5f54:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5f56:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d5f58:	4611      	mov	r1, r2
   d5f5a:	9201      	str	r2, [sp, #4]
{
   d5f5c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d5f5e:	f7ff ffe5 	bl	d5f2c <_ZN6String7reserveEj>
   d5f62:	9a01      	ldr	r2, [sp, #4]
   d5f64:	b928      	cbnz	r0, d5f72 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d5f66:	4620      	mov	r0, r4
   d5f68:	f7ff ffc9 	bl	d5efe <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d5f6c:	4620      	mov	r0, r4
   d5f6e:	b003      	add	sp, #12
   d5f70:	bd30      	pop	{r4, r5, pc}
	len = length;
   d5f72:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d5f74:	4629      	mov	r1, r5
   d5f76:	6820      	ldr	r0, [r4, #0]
   d5f78:	f000 ff92 	bl	d6ea0 <memcpy>
	buffer[len] = 0;
   d5f7c:	6822      	ldr	r2, [r4, #0]
   d5f7e:	68a3      	ldr	r3, [r4, #8]
   d5f80:	2100      	movs	r1, #0
   d5f82:	54d1      	strb	r1, [r2, r3]
	return *this;
   d5f84:	e7f2      	b.n	d5f6c <_ZN6String4copyEPKcj+0x18>

000d5f86 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d5f86:	2300      	movs	r3, #0
String::String(const char *cstr)
   d5f88:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d5f8a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d5f8e:	4604      	mov	r4, r0
	len = 0;
   d5f90:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5f92:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d5f94:	b141      	cbz	r1, d5fa8 <_ZN6StringC1EPKc+0x22>
   d5f96:	4608      	mov	r0, r1
   d5f98:	9101      	str	r1, [sp, #4]
   d5f9a:	f000 ffe7 	bl	d6f6c <strlen>
   d5f9e:	9901      	ldr	r1, [sp, #4]
   d5fa0:	4602      	mov	r2, r0
   d5fa2:	4620      	mov	r0, r4
   d5fa4:	f7ff ffd6 	bl	d5f54 <_ZN6String4copyEPKcj>
}
   d5fa8:	4620      	mov	r0, r4
   d5faa:	b002      	add	sp, #8
   d5fac:	bd10      	pop	{r4, pc}

000d5fae <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d5fae:	b538      	push	{r3, r4, r5, lr}
   d5fb0:	4605      	mov	r5, r0
	if (buffer) {
   d5fb2:	6800      	ldr	r0, [r0, #0]
{
   d5fb4:	460c      	mov	r4, r1
	if (buffer) {
   d5fb6:	b168      	cbz	r0, d5fd4 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d5fb8:	686a      	ldr	r2, [r5, #4]
   d5fba:	688b      	ldr	r3, [r1, #8]
   d5fbc:	429a      	cmp	r2, r3
   d5fbe:	d307      	bcc.n	d5fd0 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d5fc0:	6809      	ldr	r1, [r1, #0]
   d5fc2:	f000 ffcb 	bl	d6f5c <strcpy>
			len = rhs.len;
   d5fc6:	68a3      	ldr	r3, [r4, #8]
   d5fc8:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d5fca:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d5fcc:	60a3      	str	r3, [r4, #8]
}
   d5fce:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d5fd0:	f7ff fa50 	bl	d5474 <free>
	buffer = rhs.buffer;
   d5fd4:	6823      	ldr	r3, [r4, #0]
   d5fd6:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d5fd8:	6863      	ldr	r3, [r4, #4]
   d5fda:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d5fdc:	68a3      	ldr	r3, [r4, #8]
   d5fde:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d5fe0:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d5fe2:	e9c4 3300 	strd	r3, r3, [r4]
   d5fe6:	e7f1      	b.n	d5fcc <_ZN6String4moveERS_+0x1e>

000d5fe8 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d5fe8:	4288      	cmp	r0, r1
{
   d5fea:	b510      	push	{r4, lr}
   d5fec:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d5fee:	d005      	beq.n	d5ffc <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d5ff0:	680b      	ldr	r3, [r1, #0]
   d5ff2:	b12b      	cbz	r3, d6000 <_ZN6StringaSERKS_+0x18>
   d5ff4:	688a      	ldr	r2, [r1, #8]
   d5ff6:	4619      	mov	r1, r3
   d5ff8:	f7ff ffac 	bl	d5f54 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d5ffc:	4620      	mov	r0, r4
   d5ffe:	bd10      	pop	{r4, pc}
	else invalidate();
   d6000:	f7ff ff7d 	bl	d5efe <_ZN6String10invalidateEv>
   d6004:	e7fa      	b.n	d5ffc <_ZN6StringaSERKS_+0x14>

000d6006 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d6006:	b510      	push	{r4, lr}
	buffer = NULL;
   d6008:	2300      	movs	r3, #0
String::String(const String &value)
   d600a:	4604      	mov	r4, r0
	capacity = 0;
   d600c:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d6010:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6012:	7303      	strb	r3, [r0, #12]
	*this = value;
   d6014:	f7ff ffe8 	bl	d5fe8 <_ZN6StringaSERKS_>
}
   d6018:	4620      	mov	r0, r4
   d601a:	bd10      	pop	{r4, pc}

000d601c <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d601c:	4288      	cmp	r0, r1
{
   d601e:	b510      	push	{r4, lr}
   d6020:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d6022:	d001      	beq.n	d6028 <_ZN6StringaSEOS_+0xc>
   d6024:	f7ff ffc3 	bl	d5fae <_ZN6String4moveERS_>
	return *this;
}
   d6028:	4620      	mov	r0, r4
   d602a:	bd10      	pop	{r4, pc}

000d602c <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d602c:	b513      	push	{r0, r1, r4, lr}
   d602e:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d6030:	b159      	cbz	r1, d604a <_ZN6StringaSEPKc+0x1e>
   d6032:	4608      	mov	r0, r1
   d6034:	9101      	str	r1, [sp, #4]
   d6036:	f000 ff99 	bl	d6f6c <strlen>
   d603a:	9901      	ldr	r1, [sp, #4]
   d603c:	4602      	mov	r2, r0
   d603e:	4620      	mov	r0, r4
   d6040:	f7ff ff88 	bl	d5f54 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d6044:	4620      	mov	r0, r4
   d6046:	b002      	add	sp, #8
   d6048:	bd10      	pop	{r4, pc}
	else invalidate();
   d604a:	f7ff ff58 	bl	d5efe <_ZN6String10invalidateEv>
   d604e:	e7f9      	b.n	d6044 <_ZN6StringaSEPKc+0x18>

000d6050 <_ZN6StringC1Ec>:
String::String(char c)
   d6050:	b513      	push	{r0, r1, r4, lr}
	buffer = NULL;
   d6052:	2300      	movs	r3, #0
	buf[0] = c;
   d6054:	f88d 1004 	strb.w	r1, [sp, #4]
	capacity = 0;
   d6058:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d605c:	6083      	str	r3, [r0, #8]
	flags = 0;
   d605e:	7303      	strb	r3, [r0, #12]
	*this = buf;
   d6060:	a901      	add	r1, sp, #4
String::String(char c)
   d6062:	4604      	mov	r4, r0
	buf[1] = 0;
   d6064:	f88d 3005 	strb.w	r3, [sp, #5]
	*this = buf;
   d6068:	f7ff ffe0 	bl	d602c <_ZN6StringaSEPKc>
}
   d606c:	4620      	mov	r0, r4
   d606e:	b002      	add	sp, #8
   d6070:	bd10      	pop	{r4, pc}

000d6072 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d6072:	b570      	push	{r4, r5, r6, lr}
   d6074:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d6076:	460e      	mov	r6, r1
   d6078:	b909      	cbnz	r1, d607e <_ZN6String6concatEPKcj+0xc>
   d607a:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d607c:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d607e:	b16a      	cbz	r2, d609c <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d6080:	6884      	ldr	r4, [r0, #8]
   d6082:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d6084:	4621      	mov	r1, r4
   d6086:	f7ff ff51 	bl	d5f2c <_ZN6String7reserveEj>
   d608a:	2800      	cmp	r0, #0
   d608c:	d0f5      	beq.n	d607a <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d608e:	6828      	ldr	r0, [r5, #0]
   d6090:	68ab      	ldr	r3, [r5, #8]
   d6092:	4631      	mov	r1, r6
   d6094:	4418      	add	r0, r3
   d6096:	f000 ff61 	bl	d6f5c <strcpy>
	len = newlen;
   d609a:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d609c:	2001      	movs	r0, #1
   d609e:	e7ed      	b.n	d607c <_ZN6String6concatEPKcj+0xa>

000d60a0 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   d60a0:	688a      	ldr	r2, [r1, #8]
   d60a2:	6809      	ldr	r1, [r1, #0]
   d60a4:	f7ff bfe5 	b.w	d6072 <_ZN6String6concatEPKcj>

000d60a8 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   d60a8:	b40e      	push	{r1, r2, r3}
   d60aa:	b570      	push	{r4, r5, r6, lr}
   d60ac:	b087      	sub	sp, #28
   d60ae:	ad0b      	add	r5, sp, #44	; 0x2c
   d60b0:	4604      	mov	r4, r0
   d60b2:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d60b6:	9201      	str	r2, [sp, #4]
   d60b8:	462b      	mov	r3, r5
   d60ba:	2105      	movs	r1, #5
   d60bc:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   d60be:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d60c0:	f7ff f9e8 	bl	d5494 <vsnprintf>
    va_end(marker);

    String result;
   d60c4:	490b      	ldr	r1, [pc, #44]	; (d60f4 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d60c6:	4606      	mov	r6, r0
    String result;
   d60c8:	4620      	mov	r0, r4
   d60ca:	f7ff ff5c 	bl	d5f86 <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
   d60ce:	4631      	mov	r1, r6
   d60d0:	4620      	mov	r0, r4
   d60d2:	f7ff ff2b 	bl	d5f2c <_ZN6String7reserveEj>
    if (result.buffer) {
   d60d6:	6820      	ldr	r0, [r4, #0]
   d60d8:	b130      	cbz	r0, d60e8 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d60da:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   d60dc:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d60de:	462b      	mov	r3, r5
   d60e0:	1c71      	adds	r1, r6, #1
   d60e2:	f7ff f9d7 	bl	d5494 <vsnprintf>
        va_end(marker);
        result.len = n;
   d60e6:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   d60e8:	4620      	mov	r0, r4
   d60ea:	b007      	add	sp, #28
   d60ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d60f0:	b003      	add	sp, #12
   d60f2:	4770      	bx	lr
   d60f4:	000d730b 	.word	0x000d730b

000d60f8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d60f8:	4b05      	ldr	r3, [pc, #20]	; (d6110 <_GLOBAL__sub_I_System+0x18>)
   d60fa:	2202      	movs	r2, #2
   d60fc:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d60fe:	4b05      	ldr	r3, [pc, #20]	; (d6114 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   d6100:	4a05      	ldr	r2, [pc, #20]	; (d6118 <_GLOBAL__sub_I_System+0x20>)
   d6102:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d6104:	2000      	movs	r0, #0
   d6106:	6018      	str	r0, [r3, #0]
   d6108:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   d610a:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d610c:	f7ff b8f6 	b.w	d52fc <set_system_mode>
   d6110:	2003e5dc 	.word	0x2003e5dc
   d6114:	2003e5d0 	.word	0x2003e5d0
   d6118:	ffff0000 	.word	0xffff0000

000d611c <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d611c:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d611e:	2000      	movs	r0, #0
   d6120:	f7ff f930 	bl	d5384 <spark_sync_time_pending>
   d6124:	b128      	cbz	r0, d6132 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6126:	f7ff f925 	bl	d5374 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d612a:	f080 0001 	eor.w	r0, r0, #1
   d612e:	b2c0      	uxtb	r0, r0
    }
   d6130:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d6132:	2001      	movs	r0, #1
   d6134:	e7fc      	b.n	d6130 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d6136 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d6136:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d6138:	2000      	movs	r0, #0
   d613a:	f7fe ff6f 	bl	d501c <hal_rtc_time_is_valid>
    if (rtcstate)
   d613e:	4604      	mov	r4, r0
   d6140:	b9a0      	cbnz	r0, d616c <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d6142:	f7ff f8d3 	bl	d52ec <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d6146:	2801      	cmp	r0, #1
   d6148:	d110      	bne.n	d616c <_ZN9TimeClass7isValidEv+0x36>
   d614a:	4620      	mov	r0, r4
   d614c:	f7ff f8ee 	bl	d532c <system_thread_get_state>
   d6150:	b960      	cbnz	r0, d616c <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d6152:	f7ff ffe3 	bl	d611c <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d6156:	b910      	cbnz	r0, d615e <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d6158:	f7ff f904 	bl	d5364 <spark_process>
        while (_while() && !_condition()) {
   d615c:	e7f9      	b.n	d6152 <_ZN9TimeClass7isValidEv+0x1c>
   d615e:	f7ff ffdd 	bl	d611c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d6162:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d6166:	2000      	movs	r0, #0
   d6168:	f7fe bf58 	b.w	d501c <hal_rtc_time_is_valid>
}
   d616c:	4620      	mov	r0, r4
   d616e:	bd10      	pop	{r4, pc}

000d6170 <_ZN9TimeClass3nowEv>:
{
   d6170:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d6172:	f7ff ffe0 	bl	d6136 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d6176:	2210      	movs	r2, #16
   d6178:	2100      	movs	r1, #0
   d617a:	4668      	mov	r0, sp
   d617c:	f000 feb8 	bl	d6ef0 <memset>
    hal_rtc_get_time(&tv, nullptr);
   d6180:	2100      	movs	r1, #0
   d6182:	4668      	mov	r0, sp
   d6184:	f7fe ff52 	bl	d502c <hal_rtc_get_time>
}
   d6188:	9800      	ldr	r0, [sp, #0]
   d618a:	b005      	add	sp, #20
   d618c:	f85d fb04 	ldr.w	pc, [sp], #4

000d6190 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6190:	4b02      	ldr	r3, [pc, #8]	; (d619c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6192:	681a      	ldr	r2, [r3, #0]
   d6194:	4b02      	ldr	r3, [pc, #8]	; (d61a0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6196:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d6198:	4770      	bx	lr
   d619a:	bf00      	nop
   d619c:	2003e470 	.word	0x2003e470
   d61a0:	2003e5e0 	.word	0x2003e5e0

000d61a4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d61a4:	4770      	bx	lr

000d61a6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d61a6:	7441      	strb	r1, [r0, #17]
}
   d61a8:	4770      	bx	lr

000d61aa <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d61aa:	4770      	bx	lr

000d61ac <_ZN11USARTSerial17availableForWriteEv>:
{
   d61ac:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d61ae:	7c00      	ldrb	r0, [r0, #16]
   d61b0:	f7ff f80c 	bl	d51cc <hal_usart_available_data_for_write>
}
   d61b4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d61b8:	bd08      	pop	{r3, pc}

000d61ba <_ZN11USARTSerial9availableEv>:
{
   d61ba:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d61bc:	7c00      	ldrb	r0, [r0, #16]
   d61be:	f7fe ffdd 	bl	d517c <hal_usart_available>
}
   d61c2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d61c6:	bd08      	pop	{r3, pc}

000d61c8 <_ZN11USARTSerial4peekEv>:
{
   d61c8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d61ca:	7c00      	ldrb	r0, [r0, #16]
   d61cc:	f7fe ffe6 	bl	d519c <hal_usart_peek>
}
   d61d0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d61d4:	bd08      	pop	{r3, pc}

000d61d6 <_ZN11USARTSerial4readEv>:
{
   d61d6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d61d8:	7c00      	ldrb	r0, [r0, #16]
   d61da:	f7fe ffd7 	bl	d518c <hal_usart_read>
}
   d61de:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d61e2:	bd08      	pop	{r3, pc}

000d61e4 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   d61e4:	7c00      	ldrb	r0, [r0, #16]
   d61e6:	f7fe bfe1 	b.w	d51ac <hal_usart_flush>

000d61ea <_ZN11USARTSerial5writeEh>:
{
   d61ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d61ec:	7c45      	ldrb	r5, [r0, #17]
{
   d61ee:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d61f0:	b12d      	cbz	r5, d61fe <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   d61f2:	7c20      	ldrb	r0, [r4, #16]
}
   d61f4:	b003      	add	sp, #12
   d61f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d61fa:	f7fe bfb7 	b.w	d516c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d61fe:	7c00      	ldrb	r0, [r0, #16]
   d6200:	9101      	str	r1, [sp, #4]
   d6202:	f7fe ffe3 	bl	d51cc <hal_usart_available_data_for_write>
   d6206:	2800      	cmp	r0, #0
   d6208:	9901      	ldr	r1, [sp, #4]
   d620a:	dcf2      	bgt.n	d61f2 <_ZN11USARTSerial5writeEh+0x8>
}
   d620c:	4628      	mov	r0, r5
   d620e:	b003      	add	sp, #12
   d6210:	bd30      	pop	{r4, r5, pc}

000d6212 <_ZN11USARTSerialD0Ev>:
   d6212:	b510      	push	{r4, lr}
   d6214:	2114      	movs	r1, #20
   d6216:	4604      	mov	r4, r0
   d6218:	f000 fa40 	bl	d669c <_ZdlPvj>
   d621c:	4620      	mov	r0, r4
   d621e:	bd10      	pop	{r4, pc}

000d6220 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d6220:	b510      	push	{r4, lr}
   d6222:	f04f 0c00 	mov.w	ip, #0
   d6226:	4604      	mov	r4, r0
   d6228:	4608      	mov	r0, r1
   d622a:	4611      	mov	r1, r2
   d622c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6230:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d6234:	4a04      	ldr	r2, [pc, #16]	; (d6248 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d6236:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d6238:	2201      	movs	r2, #1
  _serial = serial;
   d623a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d623c:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d623e:	461a      	mov	r2, r3
   d6240:	f7fe ff8c 	bl	d515c <hal_usart_init>
}
   d6244:	4620      	mov	r0, r4
   d6246:	bd10      	pop	{r4, pc}
   d6248:	000d7394 	.word	0x000d7394

000d624c <_Z22__fetch_global_Serial1v>:
{
   d624c:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d624e:	4c0d      	ldr	r4, [pc, #52]	; (d6284 <_Z22__fetch_global_Serial1v+0x38>)
   d6250:	7821      	ldrb	r1, [r4, #0]
   d6252:	f3bf 8f5b 	dmb	ish
   d6256:	f011 0101 	ands.w	r1, r1, #1
   d625a:	d110      	bne.n	d627e <_Z22__fetch_global_Serial1v+0x32>
   d625c:	4620      	mov	r0, r4
   d625e:	9101      	str	r1, [sp, #4]
   d6260:	f7fd ff21 	bl	d40a6 <__cxa_guard_acquire>
   d6264:	9901      	ldr	r1, [sp, #4]
   d6266:	b150      	cbz	r0, d627e <_Z22__fetch_global_Serial1v+0x32>
   d6268:	4b07      	ldr	r3, [pc, #28]	; (d6288 <_Z22__fetch_global_Serial1v+0x3c>)
   d626a:	4a08      	ldr	r2, [pc, #32]	; (d628c <_Z22__fetch_global_Serial1v+0x40>)
   d626c:	4808      	ldr	r0, [pc, #32]	; (d6290 <_Z22__fetch_global_Serial1v+0x44>)
   d626e:	f7ff ffd7 	bl	d6220 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d6272:	4620      	mov	r0, r4
   d6274:	f7fd ff1c 	bl	d40b0 <__cxa_guard_release>
   d6278:	4806      	ldr	r0, [pc, #24]	; (d6294 <_Z22__fetch_global_Serial1v+0x48>)
   d627a:	f000 fe0b 	bl	d6e94 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d627e:	4804      	ldr	r0, [pc, #16]	; (d6290 <_Z22__fetch_global_Serial1v+0x44>)
   d6280:	b002      	add	sp, #8
   d6282:	bd10      	pop	{r4, pc}
   d6284:	2003e5e4 	.word	0x2003e5e4
   d6288:	2003e66c 	.word	0x2003e66c
   d628c:	2003e5e8 	.word	0x2003e5e8
   d6290:	2003e6f0 	.word	0x2003e6f0
   d6294:	000d61ab 	.word	0x000d61ab

000d6298 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6298:	7441      	strb	r1, [r0, #17]
}
   d629a:	4770      	bx	lr

000d629c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d629c:	4770      	bx	lr

000d629e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d629e:	4770      	bx	lr

000d62a0 <_ZN9USBSerial4readEv>:
{
   d62a0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d62a2:	2100      	movs	r1, #0
   d62a4:	7c00      	ldrb	r0, [r0, #16]
   d62a6:	f7fe ffb9 	bl	d521c <HAL_USB_USART_Receive_Data>
}
   d62aa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d62ae:	bd08      	pop	{r3, pc}

000d62b0 <_ZN9USBSerial4peekEv>:
{
   d62b0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d62b2:	2101      	movs	r1, #1
   d62b4:	7c00      	ldrb	r0, [r0, #16]
   d62b6:	f7fe ffb1 	bl	d521c <HAL_USB_USART_Receive_Data>
}
   d62ba:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d62be:	bd08      	pop	{r3, pc}

000d62c0 <_ZN9USBSerial17availableForWriteEv>:
{
   d62c0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d62c2:	7c00      	ldrb	r0, [r0, #16]
   d62c4:	f7fe ffa2 	bl	d520c <HAL_USB_USART_Available_Data_For_Write>
}
   d62c8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d62cc:	bd08      	pop	{r3, pc}

000d62ce <_ZN9USBSerial9availableEv>:
{
   d62ce:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d62d0:	7c00      	ldrb	r0, [r0, #16]
   d62d2:	f7fe ff93 	bl	d51fc <HAL_USB_USART_Available_Data>
}
   d62d6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d62da:	bd08      	pop	{r3, pc}

000d62dc <_ZN9USBSerial5writeEh>:
{
   d62dc:	b513      	push	{r0, r1, r4, lr}
   d62de:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d62e0:	7c00      	ldrb	r0, [r0, #16]
{
   d62e2:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d62e4:	f7fe ff92 	bl	d520c <HAL_USB_USART_Available_Data_For_Write>
   d62e8:	2800      	cmp	r0, #0
   d62ea:	9901      	ldr	r1, [sp, #4]
   d62ec:	dc01      	bgt.n	d62f2 <_ZN9USBSerial5writeEh+0x16>
   d62ee:	7c60      	ldrb	r0, [r4, #17]
   d62f0:	b120      	cbz	r0, d62fc <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d62f2:	7c20      	ldrb	r0, [r4, #16]
   d62f4:	f7fe ff9a 	bl	d522c <HAL_USB_USART_Send_Data>
   d62f8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d62fc:	b002      	add	sp, #8
   d62fe:	bd10      	pop	{r4, pc}

000d6300 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d6300:	7c00      	ldrb	r0, [r0, #16]
   d6302:	f7fe bf9b 	b.w	d523c <HAL_USB_USART_Flush_Data>

000d6306 <_ZN9USBSerialD0Ev>:
   d6306:	b510      	push	{r4, lr}
   d6308:	2114      	movs	r1, #20
   d630a:	4604      	mov	r4, r0
   d630c:	f000 f9c6 	bl	d669c <_ZdlPvj>
   d6310:	4620      	mov	r0, r4
   d6312:	bd10      	pop	{r4, pc}

000d6314 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6314:	b510      	push	{r4, lr}
   d6316:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d631a:	4604      	mov	r4, r0
   d631c:	4608      	mov	r0, r1
   d631e:	2100      	movs	r1, #0
   d6320:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d6324:	4b04      	ldr	r3, [pc, #16]	; (d6338 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6326:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d6328:	2301      	movs	r3, #1
  _serial = serial;
   d632a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d632c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d632e:	4611      	mov	r1, r2
   d6330:	f7fe ff54 	bl	d51dc <HAL_USB_USART_Init>
}
   d6334:	4620      	mov	r0, r4
   d6336:	bd10      	pop	{r4, pc}
   d6338:	000d73c4 	.word	0x000d73c4

000d633c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d633c:	7c00      	ldrb	r0, [r0, #16]
   d633e:	2200      	movs	r2, #0
   d6340:	f7fe bf54 	b.w	d51ec <HAL_USB_USART_Begin>

000d6344 <_Z19acquireSerialBufferv>:
{
   d6344:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6346:	2214      	movs	r2, #20
{
   d6348:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d634a:	2100      	movs	r1, #0
   d634c:	f000 fdd0 	bl	d6ef0 <memset>
}
   d6350:	4620      	mov	r0, r4
   d6352:	bd10      	pop	{r4, pc}

000d6354 <_Z16_fetch_usbserialv>:
{
   d6354:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6356:	4c0f      	ldr	r4, [pc, #60]	; (d6394 <_Z16_fetch_usbserialv+0x40>)
{
   d6358:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d635a:	a803      	add	r0, sp, #12
   d635c:	f7ff fff2 	bl	d6344 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6360:	7821      	ldrb	r1, [r4, #0]
   d6362:	f3bf 8f5b 	dmb	ish
   d6366:	f011 0101 	ands.w	r1, r1, #1
   d636a:	d10f      	bne.n	d638c <_Z16_fetch_usbserialv+0x38>
   d636c:	4620      	mov	r0, r4
   d636e:	9101      	str	r1, [sp, #4]
   d6370:	f7fd fe99 	bl	d40a6 <__cxa_guard_acquire>
   d6374:	9901      	ldr	r1, [sp, #4]
   d6376:	b148      	cbz	r0, d638c <_Z16_fetch_usbserialv+0x38>
   d6378:	aa03      	add	r2, sp, #12
   d637a:	4807      	ldr	r0, [pc, #28]	; (d6398 <_Z16_fetch_usbserialv+0x44>)
   d637c:	f7ff ffca 	bl	d6314 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6380:	4620      	mov	r0, r4
   d6382:	f7fd fe95 	bl	d40b0 <__cxa_guard_release>
   d6386:	4805      	ldr	r0, [pc, #20]	; (d639c <_Z16_fetch_usbserialv+0x48>)
   d6388:	f000 fd84 	bl	d6e94 <atexit>
	return _usbserial;
}
   d638c:	4802      	ldr	r0, [pc, #8]	; (d6398 <_Z16_fetch_usbserialv+0x44>)
   d638e:	b008      	add	sp, #32
   d6390:	bd10      	pop	{r4, pc}
   d6392:	bf00      	nop
   d6394:	2003e704 	.word	0x2003e704
   d6398:	2003e708 	.word	0x2003e708
   d639c:	000d629d 	.word	0x000d629d

000d63a0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d63a0:	2200      	movs	r2, #0
   d63a2:	6840      	ldr	r0, [r0, #4]
   d63a4:	4611      	mov	r1, r2
   d63a6:	f7ff b815 	b.w	d53d4 <network_ready>

000d63aa <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d63aa:	2200      	movs	r2, #0
   d63ac:	6840      	ldr	r0, [r0, #4]
   d63ae:	4611      	mov	r1, r2
   d63b0:	f7ff b830 	b.w	d5414 <network_listening>

000d63b4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d63b4:	2200      	movs	r2, #0
   d63b6:	6840      	ldr	r0, [r0, #4]
   d63b8:	4611      	mov	r1, r2
   d63ba:	f7ff b83b 	b.w	d5434 <network_get_listen_timeout>

000d63be <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d63be:	6840      	ldr	r0, [r0, #4]
   d63c0:	2200      	movs	r2, #0
   d63c2:	f7ff b82f 	b.w	d5424 <network_set_listen_timeout>

000d63c6 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d63c6:	6840      	ldr	r0, [r0, #4]
   d63c8:	2200      	movs	r2, #0
   d63ca:	f081 0101 	eor.w	r1, r1, #1
   d63ce:	f7ff b819 	b.w	d5404 <network_listen>

000d63d2 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d63d2:	2300      	movs	r3, #0
   d63d4:	6840      	ldr	r0, [r0, #4]
   d63d6:	461a      	mov	r2, r3
   d63d8:	4619      	mov	r1, r3
   d63da:	f7ff b80b 	b.w	d53f4 <network_off>

000d63de <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d63de:	2300      	movs	r3, #0
   d63e0:	6840      	ldr	r0, [r0, #4]
   d63e2:	461a      	mov	r2, r3
   d63e4:	4619      	mov	r1, r3
   d63e6:	f7fe bffd 	b.w	d53e4 <network_on>

000d63ea <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d63ea:	2200      	movs	r2, #0
   d63ec:	6840      	ldr	r0, [r0, #4]
   d63ee:	4611      	mov	r1, r2
   d63f0:	f7fe bfe0 	b.w	d53b4 <network_connecting>

000d63f4 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d63f4:	6840      	ldr	r0, [r0, #4]
   d63f6:	2200      	movs	r2, #0
   d63f8:	2102      	movs	r1, #2
   d63fa:	f7fe bfe3 	b.w	d53c4 <network_disconnect>

000d63fe <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d63fe:	2300      	movs	r3, #0
   d6400:	6840      	ldr	r0, [r0, #4]
   d6402:	461a      	mov	r2, r3
   d6404:	f7fe bfce 	b.w	d53a4 <network_connect>

000d6408 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d6408:	4b02      	ldr	r3, [pc, #8]	; (d6414 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d640a:	2204      	movs	r2, #4
   d640c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d640e:	4a02      	ldr	r2, [pc, #8]	; (d6418 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d6410:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d6412:	4770      	bx	lr
   d6414:	2003e71c 	.word	0x2003e71c
   d6418:	000d73f4 	.word	0x000d73f4

000d641c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d641c:	4b01      	ldr	r3, [pc, #4]	; (d6424 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d641e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d6420:	4770      	bx	lr
   d6422:	bf00      	nop
   d6424:	2003e474 	.word	0x2003e474

000d6428 <serialEventRun>:
{
   d6428:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d642a:	4b0b      	ldr	r3, [pc, #44]	; (d6458 <serialEventRun+0x30>)
   d642c:	b143      	cbz	r3, d6440 <serialEventRun+0x18>
   d642e:	f7ff ff91 	bl	d6354 <_Z16_fetch_usbserialv>
   d6432:	6803      	ldr	r3, [r0, #0]
   d6434:	691b      	ldr	r3, [r3, #16]
   d6436:	4798      	blx	r3
   d6438:	2800      	cmp	r0, #0
   d643a:	dd01      	ble.n	d6440 <serialEventRun+0x18>
        serialEvent();
   d643c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d6440:	4b06      	ldr	r3, [pc, #24]	; (d645c <serialEventRun+0x34>)
   d6442:	b143      	cbz	r3, d6456 <serialEventRun+0x2e>
   d6444:	f7ff ff02 	bl	d624c <_Z22__fetch_global_Serial1v>
   d6448:	6803      	ldr	r3, [r0, #0]
   d644a:	691b      	ldr	r3, [r3, #16]
   d644c:	4798      	blx	r3
   d644e:	2800      	cmp	r0, #0
   d6450:	dd01      	ble.n	d6456 <serialEventRun+0x2e>
        serialEvent1();
   d6452:	f3af 8000 	nop.w
}
   d6456:	bd08      	pop	{r3, pc}
	...

000d6460 <_post_loop>:
{
   d6460:	b508      	push	{r3, lr}
	serialEventRun();
   d6462:	f7ff ffe1 	bl	d6428 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6466:	f7fe fdd1 	bl	d500c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d646a:	4b01      	ldr	r3, [pc, #4]	; (d6470 <_post_loop+0x10>)
   d646c:	6018      	str	r0, [r3, #0]
}
   d646e:	bd08      	pop	{r3, pc}
   d6470:	2003e738 	.word	0x2003e738

000d6474 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d6474:	4805      	ldr	r0, [pc, #20]	; (d648c <_Z33system_initialize_user_backup_ramv+0x18>)
   d6476:	4a06      	ldr	r2, [pc, #24]	; (d6490 <_Z33system_initialize_user_backup_ramv+0x1c>)
   d6478:	4906      	ldr	r1, [pc, #24]	; (d6494 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   d647a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d647c:	1a12      	subs	r2, r2, r0
   d647e:	f000 fd0f 	bl	d6ea0 <memcpy>
    __backup_sram_signature = signature;
   d6482:	4b05      	ldr	r3, [pc, #20]	; (d6498 <_Z33system_initialize_user_backup_ramv+0x24>)
   d6484:	4a05      	ldr	r2, [pc, #20]	; (d649c <_Z33system_initialize_user_backup_ramv+0x28>)
   d6486:	601a      	str	r2, [r3, #0]
}
   d6488:	bd08      	pop	{r3, pc}
   d648a:	bf00      	nop
   d648c:	2003f400 	.word	0x2003f400
   d6490:	2003f404 	.word	0x2003f404
   d6494:	000d7550 	.word	0x000d7550
   d6498:	2003f400 	.word	0x2003f400
   d649c:	9a271c1e 	.word	0x9a271c1e

000d64a0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d64a0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d64a2:	2300      	movs	r3, #0
   d64a4:	9300      	str	r3, [sp, #0]
   d64a6:	461a      	mov	r2, r3
   d64a8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d64ac:	f7fe ff50 	bl	d5350 <system_ctrl_set_result>
}
   d64b0:	b003      	add	sp, #12
   d64b2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d64b8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d64b8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d64ba:	8843      	ldrh	r3, [r0, #2]
   d64bc:	2b0a      	cmp	r3, #10
   d64be:	d008      	beq.n	d64d2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d64c0:	2b50      	cmp	r3, #80	; 0x50
   d64c2:	d10b      	bne.n	d64dc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d64c4:	4b09      	ldr	r3, [pc, #36]	; (d64ec <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d64c6:	681b      	ldr	r3, [r3, #0]
   d64c8:	b14b      	cbz	r3, d64de <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d64ca:	b003      	add	sp, #12
   d64cc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d64d0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d64d2:	f7ff ffe5 	bl	d64a0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d64d6:	b003      	add	sp, #12
   d64d8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d64dc:	2300      	movs	r3, #0
   d64de:	9300      	str	r3, [sp, #0]
   d64e0:	461a      	mov	r2, r3
   d64e2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d64e6:	f7fe ff33 	bl	d5350 <system_ctrl_set_result>
}
   d64ea:	e7f4      	b.n	d64d6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d64ec:	2003e728 	.word	0x2003e728

000d64f0 <module_user_init_hook>:
{
   d64f0:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d64f2:	4812      	ldr	r0, [pc, #72]	; (d653c <module_user_init_hook+0x4c>)
   d64f4:	2100      	movs	r1, #0
   d64f6:	f7fe ffd5 	bl	d54a4 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   d64fa:	4b11      	ldr	r3, [pc, #68]	; (d6540 <module_user_init_hook+0x50>)
   d64fc:	681a      	ldr	r2, [r3, #0]
   d64fe:	4b11      	ldr	r3, [pc, #68]	; (d6544 <module_user_init_hook+0x54>)
   d6500:	429a      	cmp	r2, r3
   d6502:	4b11      	ldr	r3, [pc, #68]	; (d6548 <module_user_init_hook+0x58>)
   d6504:	bf0c      	ite	eq
   d6506:	2201      	moveq	r2, #1
   d6508:	2200      	movne	r2, #0
   d650a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d650c:	d001      	beq.n	d6512 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   d650e:	f7ff ffb1 	bl	d6474 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6512:	f7fe fd6b 	bl	d4fec <HAL_RNG_GetRandomNumber>
   d6516:	4604      	mov	r4, r0
    srand(seed);
   d6518:	f000 fcf2 	bl	d6f00 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d651c:	4b0b      	ldr	r3, [pc, #44]	; (d654c <module_user_init_hook+0x5c>)
   d651e:	b113      	cbz	r3, d6526 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   d6520:	4620      	mov	r0, r4
   d6522:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6526:	2100      	movs	r1, #0
   d6528:	4808      	ldr	r0, [pc, #32]	; (d654c <module_user_init_hook+0x5c>)
   d652a:	f7fe ff33 	bl	d5394 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d652e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6532:	4807      	ldr	r0, [pc, #28]	; (d6550 <module_user_init_hook+0x60>)
   d6534:	2100      	movs	r1, #0
   d6536:	f7fe bf01 	b.w	d533c <system_ctrl_set_app_request_handler>
   d653a:	bf00      	nop
   d653c:	000d641d 	.word	0x000d641d
   d6540:	2003f400 	.word	0x2003f400
   d6544:	9a271c1e 	.word	0x9a271c1e
   d6548:	2003e724 	.word	0x2003e724
   d654c:	00000000 	.word	0x00000000
   d6550:	000d64b9 	.word	0x000d64b9

000d6554 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d6554:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d6556:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d6558:	d902      	bls.n	d6560 <pinAvailable+0xc>
    return false;
   d655a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d655c:	b002      	add	sp, #8
   d655e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d6560:	f1a0 030b 	sub.w	r3, r0, #11
   d6564:	2b02      	cmp	r3, #2
   d6566:	d81a      	bhi.n	d659e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d6568:	4c17      	ldr	r4, [pc, #92]	; (d65c8 <pinAvailable+0x74>)
   d656a:	7821      	ldrb	r1, [r4, #0]
   d656c:	f3bf 8f5b 	dmb	ish
   d6570:	f011 0101 	ands.w	r1, r1, #1
   d6574:	d10b      	bne.n	d658e <pinAvailable+0x3a>
   d6576:	4620      	mov	r0, r4
   d6578:	9101      	str	r1, [sp, #4]
   d657a:	f7fd fd94 	bl	d40a6 <__cxa_guard_acquire>
   d657e:	9901      	ldr	r1, [sp, #4]
   d6580:	b128      	cbz	r0, d658e <pinAvailable+0x3a>
   d6582:	4812      	ldr	r0, [pc, #72]	; (d65cc <pinAvailable+0x78>)
   d6584:	f7ff fcaa 	bl	d5edc <_ZN8SPIClassC1E19hal_spi_interface_t>
   d6588:	4620      	mov	r0, r4
   d658a:	f7fd fd91 	bl	d40b0 <__cxa_guard_release>
   d658e:	4b0f      	ldr	r3, [pc, #60]	; (d65cc <pinAvailable+0x78>)
   d6590:	7818      	ldrb	r0, [r3, #0]
   d6592:	f7fe fddb 	bl	d514c <hal_spi_is_enabled>
   d6596:	2800      	cmp	r0, #0
   d6598:	d1df      	bne.n	d655a <pinAvailable+0x6>
  return true; // 'pin' is available
   d659a:	2001      	movs	r0, #1
   d659c:	e7de      	b.n	d655c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d659e:	2801      	cmp	r0, #1
   d65a0:	d809      	bhi.n	d65b6 <pinAvailable+0x62>
   d65a2:	f000 f857 	bl	d6654 <_Z19__fetch_global_Wirev>
   d65a6:	2100      	movs	r1, #0
   d65a8:	7c00      	ldrb	r0, [r0, #16]
   d65aa:	f7fe fd9f 	bl	d50ec <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d65ae:	f080 0001 	eor.w	r0, r0, #1
   d65b2:	b2c0      	uxtb	r0, r0
   d65b4:	e7d2      	b.n	d655c <pinAvailable+0x8>
   d65b6:	3809      	subs	r0, #9
   d65b8:	2801      	cmp	r0, #1
   d65ba:	d8ee      	bhi.n	d659a <pinAvailable+0x46>
   d65bc:	f7ff fe46 	bl	d624c <_Z22__fetch_global_Serial1v>
   d65c0:	7c00      	ldrb	r0, [r0, #16]
   d65c2:	f7fe fdfb 	bl	d51bc <hal_usart_is_enabled>
   d65c6:	e7f2      	b.n	d65ae <pinAvailable+0x5a>
   d65c8:	2003e72c 	.word	0x2003e72c
   d65cc:	2003e730 	.word	0x2003e730

000d65d0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d65d0:	2823      	cmp	r0, #35	; 0x23
{
   d65d2:	b538      	push	{r3, r4, r5, lr}
   d65d4:	4604      	mov	r4, r0
   d65d6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d65d8:	d80a      	bhi.n	d65f0 <pinMode+0x20>
   d65da:	29ff      	cmp	r1, #255	; 0xff
   d65dc:	d008      	beq.n	d65f0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d65de:	f7ff ffb9 	bl	d6554 <pinAvailable>
   d65e2:	b128      	cbz	r0, d65f0 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d65e4:	4629      	mov	r1, r5
   d65e6:	4620      	mov	r0, r4
}
   d65e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d65ec:	f7fe bd36 	b.w	d505c <HAL_Pin_Mode>
}
   d65f0:	bd38      	pop	{r3, r4, r5, pc}

000d65f2 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d65f2:	280d      	cmp	r0, #13
{
   d65f4:	b510      	push	{r4, lr}
   d65f6:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d65f8:	bf9c      	itt	ls
   d65fa:	340e      	addls	r4, #14
   d65fc:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d65fe:	4620      	mov	r0, r4
   d6600:	f7ff ffa8 	bl	d6554 <pinAvailable>
   d6604:	b150      	cbz	r0, d661c <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d6606:	2103      	movs	r1, #3
   d6608:	4620      	mov	r0, r4
   d660a:	f7fe fd1f 	bl	d504c <HAL_Validate_Pin_Function>
   d660e:	2803      	cmp	r0, #3
   d6610:	d104      	bne.n	d661c <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d6612:	4620      	mov	r0, r4
}
   d6614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d6618:	f7fe bd38 	b.w	d508c <hal_adc_read>
}
   d661c:	2000      	movs	r0, #0
   d661e:	bd10      	pop	{r4, pc}

000d6620 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6620:	4770      	bx	lr
	...

000d6624 <_Z17acquireWireBufferv>:
{
   d6624:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d6626:	2300      	movs	r3, #0
   d6628:	2520      	movs	r5, #32
   d662a:	8043      	strh	r3, [r0, #2]
   d662c:	2314      	movs	r3, #20
{
   d662e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d6630:	8003      	strh	r3, [r0, #0]
   d6632:	6085      	str	r5, [r0, #8]
   d6634:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6636:	4906      	ldr	r1, [pc, #24]	; (d6650 <_Z17acquireWireBufferv+0x2c>)
   d6638:	4628      	mov	r0, r5
   d663a:	f000 f833 	bl	d66a4 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d663e:	4904      	ldr	r1, [pc, #16]	; (d6650 <_Z17acquireWireBufferv+0x2c>)
	};
   d6640:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6642:	4628      	mov	r0, r5
   d6644:	f000 f82e 	bl	d66a4 <_ZnajRKSt9nothrow_t>
	};
   d6648:	60e0      	str	r0, [r4, #12]
}
   d664a:	4620      	mov	r0, r4
   d664c:	bd38      	pop	{r3, r4, r5, pc}
   d664e:	bf00      	nop
   d6650:	000d7428 	.word	0x000d7428

000d6654 <_Z19__fetch_global_Wirev>:
{
   d6654:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6656:	4d0e      	ldr	r5, [pc, #56]	; (d6690 <_Z19__fetch_global_Wirev+0x3c>)
   d6658:	7829      	ldrb	r1, [r5, #0]
   d665a:	f3bf 8f5b 	dmb	ish
   d665e:	f011 0401 	ands.w	r4, r1, #1
{
   d6662:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6664:	d111      	bne.n	d668a <_Z19__fetch_global_Wirev+0x36>
   d6666:	4628      	mov	r0, r5
   d6668:	f7fd fd1d 	bl	d40a6 <__cxa_guard_acquire>
   d666c:	b168      	cbz	r0, d668a <_Z19__fetch_global_Wirev+0x36>
   d666e:	a801      	add	r0, sp, #4
   d6670:	f7ff ffd8 	bl	d6624 <_Z17acquireWireBufferv>
   d6674:	aa01      	add	r2, sp, #4
   d6676:	4621      	mov	r1, r4
   d6678:	4806      	ldr	r0, [pc, #24]	; (d6694 <_Z19__fetch_global_Wirev+0x40>)
   d667a:	f7fe ff91 	bl	d55a0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d667e:	4628      	mov	r0, r5
   d6680:	f7fd fd16 	bl	d40b0 <__cxa_guard_release>
   d6684:	4804      	ldr	r0, [pc, #16]	; (d6698 <_Z19__fetch_global_Wirev+0x44>)
   d6686:	f000 fc05 	bl	d6e94 <atexit>
	return wire;
}
   d668a:	4802      	ldr	r0, [pc, #8]	; (d6694 <_Z19__fetch_global_Wirev+0x40>)
   d668c:	b007      	add	sp, #28
   d668e:	bd30      	pop	{r4, r5, pc}
   d6690:	2003e73c 	.word	0x2003e73c
   d6694:	2003e740 	.word	0x2003e740
   d6698:	000d6621 	.word	0x000d6621

000d669c <_ZdlPvj>:
   d669c:	f7fd bcff 	b.w	d409e <_ZdlPv>

000d66a0 <_ZnwjRKSt9nothrow_t>:
   d66a0:	f7fd bcf9 	b.w	d4096 <_Znwj>

000d66a4 <_ZnajRKSt9nothrow_t>:
   d66a4:	f7fd bcf9 	b.w	d409a <_Znaj>

000d66a8 <__aeabi_drsub>:
   d66a8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d66ac:	e002      	b.n	d66b4 <__adddf3>
   d66ae:	bf00      	nop

000d66b0 <__aeabi_dsub>:
   d66b0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d66b4 <__adddf3>:
   d66b4:	b530      	push	{r4, r5, lr}
   d66b6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d66ba:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d66be:	ea94 0f05 	teq	r4, r5
   d66c2:	bf08      	it	eq
   d66c4:	ea90 0f02 	teqeq	r0, r2
   d66c8:	bf1f      	itttt	ne
   d66ca:	ea54 0c00 	orrsne.w	ip, r4, r0
   d66ce:	ea55 0c02 	orrsne.w	ip, r5, r2
   d66d2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d66d6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d66da:	f000 80e2 	beq.w	d68a2 <__adddf3+0x1ee>
   d66de:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d66e2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d66e6:	bfb8      	it	lt
   d66e8:	426d      	neglt	r5, r5
   d66ea:	dd0c      	ble.n	d6706 <__adddf3+0x52>
   d66ec:	442c      	add	r4, r5
   d66ee:	ea80 0202 	eor.w	r2, r0, r2
   d66f2:	ea81 0303 	eor.w	r3, r1, r3
   d66f6:	ea82 0000 	eor.w	r0, r2, r0
   d66fa:	ea83 0101 	eor.w	r1, r3, r1
   d66fe:	ea80 0202 	eor.w	r2, r0, r2
   d6702:	ea81 0303 	eor.w	r3, r1, r3
   d6706:	2d36      	cmp	r5, #54	; 0x36
   d6708:	bf88      	it	hi
   d670a:	bd30      	pophi	{r4, r5, pc}
   d670c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6710:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6714:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d6718:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d671c:	d002      	beq.n	d6724 <__adddf3+0x70>
   d671e:	4240      	negs	r0, r0
   d6720:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6724:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d6728:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d672c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6730:	d002      	beq.n	d6738 <__adddf3+0x84>
   d6732:	4252      	negs	r2, r2
   d6734:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d6738:	ea94 0f05 	teq	r4, r5
   d673c:	f000 80a7 	beq.w	d688e <__adddf3+0x1da>
   d6740:	f1a4 0401 	sub.w	r4, r4, #1
   d6744:	f1d5 0e20 	rsbs	lr, r5, #32
   d6748:	db0d      	blt.n	d6766 <__adddf3+0xb2>
   d674a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d674e:	fa22 f205 	lsr.w	r2, r2, r5
   d6752:	1880      	adds	r0, r0, r2
   d6754:	f141 0100 	adc.w	r1, r1, #0
   d6758:	fa03 f20e 	lsl.w	r2, r3, lr
   d675c:	1880      	adds	r0, r0, r2
   d675e:	fa43 f305 	asr.w	r3, r3, r5
   d6762:	4159      	adcs	r1, r3
   d6764:	e00e      	b.n	d6784 <__adddf3+0xd0>
   d6766:	f1a5 0520 	sub.w	r5, r5, #32
   d676a:	f10e 0e20 	add.w	lr, lr, #32
   d676e:	2a01      	cmp	r2, #1
   d6770:	fa03 fc0e 	lsl.w	ip, r3, lr
   d6774:	bf28      	it	cs
   d6776:	f04c 0c02 	orrcs.w	ip, ip, #2
   d677a:	fa43 f305 	asr.w	r3, r3, r5
   d677e:	18c0      	adds	r0, r0, r3
   d6780:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d6784:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6788:	d507      	bpl.n	d679a <__adddf3+0xe6>
   d678a:	f04f 0e00 	mov.w	lr, #0
   d678e:	f1dc 0c00 	rsbs	ip, ip, #0
   d6792:	eb7e 0000 	sbcs.w	r0, lr, r0
   d6796:	eb6e 0101 	sbc.w	r1, lr, r1
   d679a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d679e:	d31b      	bcc.n	d67d8 <__adddf3+0x124>
   d67a0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d67a4:	d30c      	bcc.n	d67c0 <__adddf3+0x10c>
   d67a6:	0849      	lsrs	r1, r1, #1
   d67a8:	ea5f 0030 	movs.w	r0, r0, rrx
   d67ac:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d67b0:	f104 0401 	add.w	r4, r4, #1
   d67b4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d67b8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d67bc:	f080 809a 	bcs.w	d68f4 <__adddf3+0x240>
   d67c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d67c4:	bf08      	it	eq
   d67c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d67ca:	f150 0000 	adcs.w	r0, r0, #0
   d67ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d67d2:	ea41 0105 	orr.w	r1, r1, r5
   d67d6:	bd30      	pop	{r4, r5, pc}
   d67d8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d67dc:	4140      	adcs	r0, r0
   d67de:	eb41 0101 	adc.w	r1, r1, r1
   d67e2:	3c01      	subs	r4, #1
   d67e4:	bf28      	it	cs
   d67e6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d67ea:	d2e9      	bcs.n	d67c0 <__adddf3+0x10c>
   d67ec:	f091 0f00 	teq	r1, #0
   d67f0:	bf04      	itt	eq
   d67f2:	4601      	moveq	r1, r0
   d67f4:	2000      	moveq	r0, #0
   d67f6:	fab1 f381 	clz	r3, r1
   d67fa:	bf08      	it	eq
   d67fc:	3320      	addeq	r3, #32
   d67fe:	f1a3 030b 	sub.w	r3, r3, #11
   d6802:	f1b3 0220 	subs.w	r2, r3, #32
   d6806:	da0c      	bge.n	d6822 <__adddf3+0x16e>
   d6808:	320c      	adds	r2, #12
   d680a:	dd08      	ble.n	d681e <__adddf3+0x16a>
   d680c:	f102 0c14 	add.w	ip, r2, #20
   d6810:	f1c2 020c 	rsb	r2, r2, #12
   d6814:	fa01 f00c 	lsl.w	r0, r1, ip
   d6818:	fa21 f102 	lsr.w	r1, r1, r2
   d681c:	e00c      	b.n	d6838 <__adddf3+0x184>
   d681e:	f102 0214 	add.w	r2, r2, #20
   d6822:	bfd8      	it	le
   d6824:	f1c2 0c20 	rsble	ip, r2, #32
   d6828:	fa01 f102 	lsl.w	r1, r1, r2
   d682c:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6830:	bfdc      	itt	le
   d6832:	ea41 010c 	orrle.w	r1, r1, ip
   d6836:	4090      	lslle	r0, r2
   d6838:	1ae4      	subs	r4, r4, r3
   d683a:	bfa2      	ittt	ge
   d683c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6840:	4329      	orrge	r1, r5
   d6842:	bd30      	popge	{r4, r5, pc}
   d6844:	ea6f 0404 	mvn.w	r4, r4
   d6848:	3c1f      	subs	r4, #31
   d684a:	da1c      	bge.n	d6886 <__adddf3+0x1d2>
   d684c:	340c      	adds	r4, #12
   d684e:	dc0e      	bgt.n	d686e <__adddf3+0x1ba>
   d6850:	f104 0414 	add.w	r4, r4, #20
   d6854:	f1c4 0220 	rsb	r2, r4, #32
   d6858:	fa20 f004 	lsr.w	r0, r0, r4
   d685c:	fa01 f302 	lsl.w	r3, r1, r2
   d6860:	ea40 0003 	orr.w	r0, r0, r3
   d6864:	fa21 f304 	lsr.w	r3, r1, r4
   d6868:	ea45 0103 	orr.w	r1, r5, r3
   d686c:	bd30      	pop	{r4, r5, pc}
   d686e:	f1c4 040c 	rsb	r4, r4, #12
   d6872:	f1c4 0220 	rsb	r2, r4, #32
   d6876:	fa20 f002 	lsr.w	r0, r0, r2
   d687a:	fa01 f304 	lsl.w	r3, r1, r4
   d687e:	ea40 0003 	orr.w	r0, r0, r3
   d6882:	4629      	mov	r1, r5
   d6884:	bd30      	pop	{r4, r5, pc}
   d6886:	fa21 f004 	lsr.w	r0, r1, r4
   d688a:	4629      	mov	r1, r5
   d688c:	bd30      	pop	{r4, r5, pc}
   d688e:	f094 0f00 	teq	r4, #0
   d6892:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d6896:	bf06      	itte	eq
   d6898:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d689c:	3401      	addeq	r4, #1
   d689e:	3d01      	subne	r5, #1
   d68a0:	e74e      	b.n	d6740 <__adddf3+0x8c>
   d68a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d68a6:	bf18      	it	ne
   d68a8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d68ac:	d029      	beq.n	d6902 <__adddf3+0x24e>
   d68ae:	ea94 0f05 	teq	r4, r5
   d68b2:	bf08      	it	eq
   d68b4:	ea90 0f02 	teqeq	r0, r2
   d68b8:	d005      	beq.n	d68c6 <__adddf3+0x212>
   d68ba:	ea54 0c00 	orrs.w	ip, r4, r0
   d68be:	bf04      	itt	eq
   d68c0:	4619      	moveq	r1, r3
   d68c2:	4610      	moveq	r0, r2
   d68c4:	bd30      	pop	{r4, r5, pc}
   d68c6:	ea91 0f03 	teq	r1, r3
   d68ca:	bf1e      	ittt	ne
   d68cc:	2100      	movne	r1, #0
   d68ce:	2000      	movne	r0, #0
   d68d0:	bd30      	popne	{r4, r5, pc}
   d68d2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d68d6:	d105      	bne.n	d68e4 <__adddf3+0x230>
   d68d8:	0040      	lsls	r0, r0, #1
   d68da:	4149      	adcs	r1, r1
   d68dc:	bf28      	it	cs
   d68de:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d68e2:	bd30      	pop	{r4, r5, pc}
   d68e4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d68e8:	bf3c      	itt	cc
   d68ea:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d68ee:	bd30      	popcc	{r4, r5, pc}
   d68f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d68f4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d68f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d68fc:	f04f 0000 	mov.w	r0, #0
   d6900:	bd30      	pop	{r4, r5, pc}
   d6902:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6906:	bf1a      	itte	ne
   d6908:	4619      	movne	r1, r3
   d690a:	4610      	movne	r0, r2
   d690c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d6910:	bf1c      	itt	ne
   d6912:	460b      	movne	r3, r1
   d6914:	4602      	movne	r2, r0
   d6916:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d691a:	bf06      	itte	eq
   d691c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6920:	ea91 0f03 	teqeq	r1, r3
   d6924:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6928:	bd30      	pop	{r4, r5, pc}
   d692a:	bf00      	nop

000d692c <__aeabi_ui2d>:
   d692c:	f090 0f00 	teq	r0, #0
   d6930:	bf04      	itt	eq
   d6932:	2100      	moveq	r1, #0
   d6934:	4770      	bxeq	lr
   d6936:	b530      	push	{r4, r5, lr}
   d6938:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d693c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6940:	f04f 0500 	mov.w	r5, #0
   d6944:	f04f 0100 	mov.w	r1, #0
   d6948:	e750      	b.n	d67ec <__adddf3+0x138>
   d694a:	bf00      	nop

000d694c <__aeabi_i2d>:
   d694c:	f090 0f00 	teq	r0, #0
   d6950:	bf04      	itt	eq
   d6952:	2100      	moveq	r1, #0
   d6954:	4770      	bxeq	lr
   d6956:	b530      	push	{r4, r5, lr}
   d6958:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d695c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6960:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6964:	bf48      	it	mi
   d6966:	4240      	negmi	r0, r0
   d6968:	f04f 0100 	mov.w	r1, #0
   d696c:	e73e      	b.n	d67ec <__adddf3+0x138>
   d696e:	bf00      	nop

000d6970 <__aeabi_f2d>:
   d6970:	0042      	lsls	r2, r0, #1
   d6972:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d6976:	ea4f 0131 	mov.w	r1, r1, rrx
   d697a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d697e:	bf1f      	itttt	ne
   d6980:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6984:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6988:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d698c:	4770      	bxne	lr
   d698e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d6992:	bf08      	it	eq
   d6994:	4770      	bxeq	lr
   d6996:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d699a:	bf04      	itt	eq
   d699c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d69a0:	4770      	bxeq	lr
   d69a2:	b530      	push	{r4, r5, lr}
   d69a4:	f44f 7460 	mov.w	r4, #896	; 0x380
   d69a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d69ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d69b0:	e71c      	b.n	d67ec <__adddf3+0x138>
   d69b2:	bf00      	nop

000d69b4 <__aeabi_ul2d>:
   d69b4:	ea50 0201 	orrs.w	r2, r0, r1
   d69b8:	bf08      	it	eq
   d69ba:	4770      	bxeq	lr
   d69bc:	b530      	push	{r4, r5, lr}
   d69be:	f04f 0500 	mov.w	r5, #0
   d69c2:	e00a      	b.n	d69da <__aeabi_l2d+0x16>

000d69c4 <__aeabi_l2d>:
   d69c4:	ea50 0201 	orrs.w	r2, r0, r1
   d69c8:	bf08      	it	eq
   d69ca:	4770      	bxeq	lr
   d69cc:	b530      	push	{r4, r5, lr}
   d69ce:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d69d2:	d502      	bpl.n	d69da <__aeabi_l2d+0x16>
   d69d4:	4240      	negs	r0, r0
   d69d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d69da:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d69de:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d69e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d69e6:	f43f aed8 	beq.w	d679a <__adddf3+0xe6>
   d69ea:	f04f 0203 	mov.w	r2, #3
   d69ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d69f2:	bf18      	it	ne
   d69f4:	3203      	addne	r2, #3
   d69f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d69fa:	bf18      	it	ne
   d69fc:	3203      	addne	r2, #3
   d69fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d6a02:	f1c2 0320 	rsb	r3, r2, #32
   d6a06:	fa00 fc03 	lsl.w	ip, r0, r3
   d6a0a:	fa20 f002 	lsr.w	r0, r0, r2
   d6a0e:	fa01 fe03 	lsl.w	lr, r1, r3
   d6a12:	ea40 000e 	orr.w	r0, r0, lr
   d6a16:	fa21 f102 	lsr.w	r1, r1, r2
   d6a1a:	4414      	add	r4, r2
   d6a1c:	e6bd      	b.n	d679a <__adddf3+0xe6>
   d6a1e:	bf00      	nop

000d6a20 <__aeabi_dmul>:
   d6a20:	b570      	push	{r4, r5, r6, lr}
   d6a22:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6a26:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6a2a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6a2e:	bf1d      	ittte	ne
   d6a30:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6a34:	ea94 0f0c 	teqne	r4, ip
   d6a38:	ea95 0f0c 	teqne	r5, ip
   d6a3c:	f000 f8de 	bleq	d6bfc <__aeabi_dmul+0x1dc>
   d6a40:	442c      	add	r4, r5
   d6a42:	ea81 0603 	eor.w	r6, r1, r3
   d6a46:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d6a4a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d6a4e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d6a52:	bf18      	it	ne
   d6a54:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6a58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6a5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6a60:	d038      	beq.n	d6ad4 <__aeabi_dmul+0xb4>
   d6a62:	fba0 ce02 	umull	ip, lr, r0, r2
   d6a66:	f04f 0500 	mov.w	r5, #0
   d6a6a:	fbe1 e502 	umlal	lr, r5, r1, r2
   d6a6e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d6a72:	fbe0 e503 	umlal	lr, r5, r0, r3
   d6a76:	f04f 0600 	mov.w	r6, #0
   d6a7a:	fbe1 5603 	umlal	r5, r6, r1, r3
   d6a7e:	f09c 0f00 	teq	ip, #0
   d6a82:	bf18      	it	ne
   d6a84:	f04e 0e01 	orrne.w	lr, lr, #1
   d6a88:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d6a8c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6a90:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6a94:	d204      	bcs.n	d6aa0 <__aeabi_dmul+0x80>
   d6a96:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d6a9a:	416d      	adcs	r5, r5
   d6a9c:	eb46 0606 	adc.w	r6, r6, r6
   d6aa0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d6aa4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d6aa8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6aac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6ab0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6ab4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6ab8:	bf88      	it	hi
   d6aba:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6abe:	d81e      	bhi.n	d6afe <__aeabi_dmul+0xde>
   d6ac0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d6ac4:	bf08      	it	eq
   d6ac6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d6aca:	f150 0000 	adcs.w	r0, r0, #0
   d6ace:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6ad2:	bd70      	pop	{r4, r5, r6, pc}
   d6ad4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d6ad8:	ea46 0101 	orr.w	r1, r6, r1
   d6adc:	ea40 0002 	orr.w	r0, r0, r2
   d6ae0:	ea81 0103 	eor.w	r1, r1, r3
   d6ae4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d6ae8:	bfc2      	ittt	gt
   d6aea:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6aee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6af2:	bd70      	popgt	{r4, r5, r6, pc}
   d6af4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6af8:	f04f 0e00 	mov.w	lr, #0
   d6afc:	3c01      	subs	r4, #1
   d6afe:	f300 80ab 	bgt.w	d6c58 <__aeabi_dmul+0x238>
   d6b02:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d6b06:	bfde      	ittt	le
   d6b08:	2000      	movle	r0, #0
   d6b0a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d6b0e:	bd70      	pople	{r4, r5, r6, pc}
   d6b10:	f1c4 0400 	rsb	r4, r4, #0
   d6b14:	3c20      	subs	r4, #32
   d6b16:	da35      	bge.n	d6b84 <__aeabi_dmul+0x164>
   d6b18:	340c      	adds	r4, #12
   d6b1a:	dc1b      	bgt.n	d6b54 <__aeabi_dmul+0x134>
   d6b1c:	f104 0414 	add.w	r4, r4, #20
   d6b20:	f1c4 0520 	rsb	r5, r4, #32
   d6b24:	fa00 f305 	lsl.w	r3, r0, r5
   d6b28:	fa20 f004 	lsr.w	r0, r0, r4
   d6b2c:	fa01 f205 	lsl.w	r2, r1, r5
   d6b30:	ea40 0002 	orr.w	r0, r0, r2
   d6b34:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d6b38:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6b3c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6b40:	fa21 f604 	lsr.w	r6, r1, r4
   d6b44:	eb42 0106 	adc.w	r1, r2, r6
   d6b48:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6b4c:	bf08      	it	eq
   d6b4e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6b52:	bd70      	pop	{r4, r5, r6, pc}
   d6b54:	f1c4 040c 	rsb	r4, r4, #12
   d6b58:	f1c4 0520 	rsb	r5, r4, #32
   d6b5c:	fa00 f304 	lsl.w	r3, r0, r4
   d6b60:	fa20 f005 	lsr.w	r0, r0, r5
   d6b64:	fa01 f204 	lsl.w	r2, r1, r4
   d6b68:	ea40 0002 	orr.w	r0, r0, r2
   d6b6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6b70:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6b74:	f141 0100 	adc.w	r1, r1, #0
   d6b78:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6b7c:	bf08      	it	eq
   d6b7e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6b82:	bd70      	pop	{r4, r5, r6, pc}
   d6b84:	f1c4 0520 	rsb	r5, r4, #32
   d6b88:	fa00 f205 	lsl.w	r2, r0, r5
   d6b8c:	ea4e 0e02 	orr.w	lr, lr, r2
   d6b90:	fa20 f304 	lsr.w	r3, r0, r4
   d6b94:	fa01 f205 	lsl.w	r2, r1, r5
   d6b98:	ea43 0302 	orr.w	r3, r3, r2
   d6b9c:	fa21 f004 	lsr.w	r0, r1, r4
   d6ba0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6ba4:	fa21 f204 	lsr.w	r2, r1, r4
   d6ba8:	ea20 0002 	bic.w	r0, r0, r2
   d6bac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d6bb0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6bb4:	bf08      	it	eq
   d6bb6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6bba:	bd70      	pop	{r4, r5, r6, pc}
   d6bbc:	f094 0f00 	teq	r4, #0
   d6bc0:	d10f      	bne.n	d6be2 <__aeabi_dmul+0x1c2>
   d6bc2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d6bc6:	0040      	lsls	r0, r0, #1
   d6bc8:	eb41 0101 	adc.w	r1, r1, r1
   d6bcc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6bd0:	bf08      	it	eq
   d6bd2:	3c01      	subeq	r4, #1
   d6bd4:	d0f7      	beq.n	d6bc6 <__aeabi_dmul+0x1a6>
   d6bd6:	ea41 0106 	orr.w	r1, r1, r6
   d6bda:	f095 0f00 	teq	r5, #0
   d6bde:	bf18      	it	ne
   d6be0:	4770      	bxne	lr
   d6be2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d6be6:	0052      	lsls	r2, r2, #1
   d6be8:	eb43 0303 	adc.w	r3, r3, r3
   d6bec:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d6bf0:	bf08      	it	eq
   d6bf2:	3d01      	subeq	r5, #1
   d6bf4:	d0f7      	beq.n	d6be6 <__aeabi_dmul+0x1c6>
   d6bf6:	ea43 0306 	orr.w	r3, r3, r6
   d6bfa:	4770      	bx	lr
   d6bfc:	ea94 0f0c 	teq	r4, ip
   d6c00:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6c04:	bf18      	it	ne
   d6c06:	ea95 0f0c 	teqne	r5, ip
   d6c0a:	d00c      	beq.n	d6c26 <__aeabi_dmul+0x206>
   d6c0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6c10:	bf18      	it	ne
   d6c12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6c16:	d1d1      	bne.n	d6bbc <__aeabi_dmul+0x19c>
   d6c18:	ea81 0103 	eor.w	r1, r1, r3
   d6c1c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6c20:	f04f 0000 	mov.w	r0, #0
   d6c24:	bd70      	pop	{r4, r5, r6, pc}
   d6c26:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6c2a:	bf06      	itte	eq
   d6c2c:	4610      	moveq	r0, r2
   d6c2e:	4619      	moveq	r1, r3
   d6c30:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6c34:	d019      	beq.n	d6c6a <__aeabi_dmul+0x24a>
   d6c36:	ea94 0f0c 	teq	r4, ip
   d6c3a:	d102      	bne.n	d6c42 <__aeabi_dmul+0x222>
   d6c3c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6c40:	d113      	bne.n	d6c6a <__aeabi_dmul+0x24a>
   d6c42:	ea95 0f0c 	teq	r5, ip
   d6c46:	d105      	bne.n	d6c54 <__aeabi_dmul+0x234>
   d6c48:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6c4c:	bf1c      	itt	ne
   d6c4e:	4610      	movne	r0, r2
   d6c50:	4619      	movne	r1, r3
   d6c52:	d10a      	bne.n	d6c6a <__aeabi_dmul+0x24a>
   d6c54:	ea81 0103 	eor.w	r1, r1, r3
   d6c58:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6c5c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6c60:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6c64:	f04f 0000 	mov.w	r0, #0
   d6c68:	bd70      	pop	{r4, r5, r6, pc}
   d6c6a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6c6e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d6c72:	bd70      	pop	{r4, r5, r6, pc}

000d6c74 <__aeabi_ddiv>:
   d6c74:	b570      	push	{r4, r5, r6, lr}
   d6c76:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6c7a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6c7e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6c82:	bf1d      	ittte	ne
   d6c84:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6c88:	ea94 0f0c 	teqne	r4, ip
   d6c8c:	ea95 0f0c 	teqne	r5, ip
   d6c90:	f000 f8a7 	bleq	d6de2 <__aeabi_ddiv+0x16e>
   d6c94:	eba4 0405 	sub.w	r4, r4, r5
   d6c98:	ea81 0e03 	eor.w	lr, r1, r3
   d6c9c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6ca0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6ca4:	f000 8088 	beq.w	d6db8 <__aeabi_ddiv+0x144>
   d6ca8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6cac:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d6cb0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d6cb4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d6cb8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d6cbc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d6cc0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d6cc4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d6cc8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d6ccc:	429d      	cmp	r5, r3
   d6cce:	bf08      	it	eq
   d6cd0:	4296      	cmpeq	r6, r2
   d6cd2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d6cd6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d6cda:	d202      	bcs.n	d6ce2 <__aeabi_ddiv+0x6e>
   d6cdc:	085b      	lsrs	r3, r3, #1
   d6cde:	ea4f 0232 	mov.w	r2, r2, rrx
   d6ce2:	1ab6      	subs	r6, r6, r2
   d6ce4:	eb65 0503 	sbc.w	r5, r5, r3
   d6ce8:	085b      	lsrs	r3, r3, #1
   d6cea:	ea4f 0232 	mov.w	r2, r2, rrx
   d6cee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d6cf2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d6cf6:	ebb6 0e02 	subs.w	lr, r6, r2
   d6cfa:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6cfe:	bf22      	ittt	cs
   d6d00:	1ab6      	subcs	r6, r6, r2
   d6d02:	4675      	movcs	r5, lr
   d6d04:	ea40 000c 	orrcs.w	r0, r0, ip
   d6d08:	085b      	lsrs	r3, r3, #1
   d6d0a:	ea4f 0232 	mov.w	r2, r2, rrx
   d6d0e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6d12:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6d16:	bf22      	ittt	cs
   d6d18:	1ab6      	subcs	r6, r6, r2
   d6d1a:	4675      	movcs	r5, lr
   d6d1c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6d20:	085b      	lsrs	r3, r3, #1
   d6d22:	ea4f 0232 	mov.w	r2, r2, rrx
   d6d26:	ebb6 0e02 	subs.w	lr, r6, r2
   d6d2a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6d2e:	bf22      	ittt	cs
   d6d30:	1ab6      	subcs	r6, r6, r2
   d6d32:	4675      	movcs	r5, lr
   d6d34:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d6d38:	085b      	lsrs	r3, r3, #1
   d6d3a:	ea4f 0232 	mov.w	r2, r2, rrx
   d6d3e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6d42:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6d46:	bf22      	ittt	cs
   d6d48:	1ab6      	subcs	r6, r6, r2
   d6d4a:	4675      	movcs	r5, lr
   d6d4c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6d50:	ea55 0e06 	orrs.w	lr, r5, r6
   d6d54:	d018      	beq.n	d6d88 <__aeabi_ddiv+0x114>
   d6d56:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d6d5a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d6d5e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d6d62:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d6d66:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d6d6a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d6d6e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d6d72:	d1c0      	bne.n	d6cf6 <__aeabi_ddiv+0x82>
   d6d74:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6d78:	d10b      	bne.n	d6d92 <__aeabi_ddiv+0x11e>
   d6d7a:	ea41 0100 	orr.w	r1, r1, r0
   d6d7e:	f04f 0000 	mov.w	r0, #0
   d6d82:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d6d86:	e7b6      	b.n	d6cf6 <__aeabi_ddiv+0x82>
   d6d88:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6d8c:	bf04      	itt	eq
   d6d8e:	4301      	orreq	r1, r0
   d6d90:	2000      	moveq	r0, #0
   d6d92:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6d96:	bf88      	it	hi
   d6d98:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6d9c:	f63f aeaf 	bhi.w	d6afe <__aeabi_dmul+0xde>
   d6da0:	ebb5 0c03 	subs.w	ip, r5, r3
   d6da4:	bf04      	itt	eq
   d6da6:	ebb6 0c02 	subseq.w	ip, r6, r2
   d6daa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6dae:	f150 0000 	adcs.w	r0, r0, #0
   d6db2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6db6:	bd70      	pop	{r4, r5, r6, pc}
   d6db8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d6dbc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d6dc0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d6dc4:	bfc2      	ittt	gt
   d6dc6:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6dca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6dce:	bd70      	popgt	{r4, r5, r6, pc}
   d6dd0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6dd4:	f04f 0e00 	mov.w	lr, #0
   d6dd8:	3c01      	subs	r4, #1
   d6dda:	e690      	b.n	d6afe <__aeabi_dmul+0xde>
   d6ddc:	ea45 0e06 	orr.w	lr, r5, r6
   d6de0:	e68d      	b.n	d6afe <__aeabi_dmul+0xde>
   d6de2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6de6:	ea94 0f0c 	teq	r4, ip
   d6dea:	bf08      	it	eq
   d6dec:	ea95 0f0c 	teqeq	r5, ip
   d6df0:	f43f af3b 	beq.w	d6c6a <__aeabi_dmul+0x24a>
   d6df4:	ea94 0f0c 	teq	r4, ip
   d6df8:	d10a      	bne.n	d6e10 <__aeabi_ddiv+0x19c>
   d6dfa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6dfe:	f47f af34 	bne.w	d6c6a <__aeabi_dmul+0x24a>
   d6e02:	ea95 0f0c 	teq	r5, ip
   d6e06:	f47f af25 	bne.w	d6c54 <__aeabi_dmul+0x234>
   d6e0a:	4610      	mov	r0, r2
   d6e0c:	4619      	mov	r1, r3
   d6e0e:	e72c      	b.n	d6c6a <__aeabi_dmul+0x24a>
   d6e10:	ea95 0f0c 	teq	r5, ip
   d6e14:	d106      	bne.n	d6e24 <__aeabi_ddiv+0x1b0>
   d6e16:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6e1a:	f43f aefd 	beq.w	d6c18 <__aeabi_dmul+0x1f8>
   d6e1e:	4610      	mov	r0, r2
   d6e20:	4619      	mov	r1, r3
   d6e22:	e722      	b.n	d6c6a <__aeabi_dmul+0x24a>
   d6e24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6e28:	bf18      	it	ne
   d6e2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6e2e:	f47f aec5 	bne.w	d6bbc <__aeabi_dmul+0x19c>
   d6e32:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d6e36:	f47f af0d 	bne.w	d6c54 <__aeabi_dmul+0x234>
   d6e3a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d6e3e:	f47f aeeb 	bne.w	d6c18 <__aeabi_dmul+0x1f8>
   d6e42:	e712      	b.n	d6c6a <__aeabi_dmul+0x24a>

000d6e44 <__aeabi_d2iz>:
   d6e44:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6e48:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6e4c:	d215      	bcs.n	d6e7a <__aeabi_d2iz+0x36>
   d6e4e:	d511      	bpl.n	d6e74 <__aeabi_d2iz+0x30>
   d6e50:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6e54:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6e58:	d912      	bls.n	d6e80 <__aeabi_d2iz+0x3c>
   d6e5a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6e5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6e62:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6e66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6e6a:	fa23 f002 	lsr.w	r0, r3, r2
   d6e6e:	bf18      	it	ne
   d6e70:	4240      	negne	r0, r0
   d6e72:	4770      	bx	lr
   d6e74:	f04f 0000 	mov.w	r0, #0
   d6e78:	4770      	bx	lr
   d6e7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6e7e:	d105      	bne.n	d6e8c <__aeabi_d2iz+0x48>
   d6e80:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d6e84:	bf08      	it	eq
   d6e86:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d6e8a:	4770      	bx	lr
   d6e8c:	f04f 0000 	mov.w	r0, #0
   d6e90:	4770      	bx	lr
   d6e92:	bf00      	nop

000d6e94 <atexit>:
   d6e94:	2300      	movs	r3, #0
   d6e96:	4601      	mov	r1, r0
   d6e98:	461a      	mov	r2, r3
   d6e9a:	4618      	mov	r0, r3
   d6e9c:	f000 b8f2 	b.w	d7084 <__register_exitproc>

000d6ea0 <memcpy>:
   d6ea0:	440a      	add	r2, r1
   d6ea2:	4291      	cmp	r1, r2
   d6ea4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d6ea8:	d100      	bne.n	d6eac <memcpy+0xc>
   d6eaa:	4770      	bx	lr
   d6eac:	b510      	push	{r4, lr}
   d6eae:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6eb2:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6eb6:	4291      	cmp	r1, r2
   d6eb8:	d1f9      	bne.n	d6eae <memcpy+0xe>
   d6eba:	bd10      	pop	{r4, pc}

000d6ebc <memmove>:
   d6ebc:	4288      	cmp	r0, r1
   d6ebe:	b510      	push	{r4, lr}
   d6ec0:	eb01 0402 	add.w	r4, r1, r2
   d6ec4:	d902      	bls.n	d6ecc <memmove+0x10>
   d6ec6:	4284      	cmp	r4, r0
   d6ec8:	4623      	mov	r3, r4
   d6eca:	d807      	bhi.n	d6edc <memmove+0x20>
   d6ecc:	1e43      	subs	r3, r0, #1
   d6ece:	42a1      	cmp	r1, r4
   d6ed0:	d008      	beq.n	d6ee4 <memmove+0x28>
   d6ed2:	f811 2b01 	ldrb.w	r2, [r1], #1
   d6ed6:	f803 2f01 	strb.w	r2, [r3, #1]!
   d6eda:	e7f8      	b.n	d6ece <memmove+0x12>
   d6edc:	4402      	add	r2, r0
   d6ede:	4601      	mov	r1, r0
   d6ee0:	428a      	cmp	r2, r1
   d6ee2:	d100      	bne.n	d6ee6 <memmove+0x2a>
   d6ee4:	bd10      	pop	{r4, pc}
   d6ee6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d6eea:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d6eee:	e7f7      	b.n	d6ee0 <memmove+0x24>

000d6ef0 <memset>:
   d6ef0:	4402      	add	r2, r0
   d6ef2:	4603      	mov	r3, r0
   d6ef4:	4293      	cmp	r3, r2
   d6ef6:	d100      	bne.n	d6efa <memset+0xa>
   d6ef8:	4770      	bx	lr
   d6efa:	f803 1b01 	strb.w	r1, [r3], #1
   d6efe:	e7f9      	b.n	d6ef4 <memset+0x4>

000d6f00 <srand>:
   d6f00:	b538      	push	{r3, r4, r5, lr}
   d6f02:	4b0d      	ldr	r3, [pc, #52]	; (d6f38 <srand+0x38>)
   d6f04:	681d      	ldr	r5, [r3, #0]
   d6f06:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6f08:	4604      	mov	r4, r0
   d6f0a:	b97b      	cbnz	r3, d6f2c <srand+0x2c>
   d6f0c:	2018      	movs	r0, #24
   d6f0e:	f7fe faa9 	bl	d5464 <malloc>
   d6f12:	4a0a      	ldr	r2, [pc, #40]	; (d6f3c <srand+0x3c>)
   d6f14:	4b0a      	ldr	r3, [pc, #40]	; (d6f40 <srand+0x40>)
   d6f16:	63a8      	str	r0, [r5, #56]	; 0x38
   d6f18:	e9c0 2300 	strd	r2, r3, [r0]
   d6f1c:	4b09      	ldr	r3, [pc, #36]	; (d6f44 <srand+0x44>)
   d6f1e:	6083      	str	r3, [r0, #8]
   d6f20:	230b      	movs	r3, #11
   d6f22:	8183      	strh	r3, [r0, #12]
   d6f24:	2201      	movs	r2, #1
   d6f26:	2300      	movs	r3, #0
   d6f28:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6f2c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6f2e:	2200      	movs	r2, #0
   d6f30:	611c      	str	r4, [r3, #16]
   d6f32:	615a      	str	r2, [r3, #20]
   d6f34:	bd38      	pop	{r3, r4, r5, pc}
   d6f36:	bf00      	nop
   d6f38:	2003e474 	.word	0x2003e474
   d6f3c:	abcd330e 	.word	0xabcd330e
   d6f40:	e66d1234 	.word	0xe66d1234
   d6f44:	0005deec 	.word	0x0005deec

000d6f48 <strcmp>:
   d6f48:	f810 2b01 	ldrb.w	r2, [r0], #1
   d6f4c:	f811 3b01 	ldrb.w	r3, [r1], #1
   d6f50:	2a01      	cmp	r2, #1
   d6f52:	bf28      	it	cs
   d6f54:	429a      	cmpcs	r2, r3
   d6f56:	d0f7      	beq.n	d6f48 <strcmp>
   d6f58:	1ad0      	subs	r0, r2, r3
   d6f5a:	4770      	bx	lr

000d6f5c <strcpy>:
   d6f5c:	4603      	mov	r3, r0
   d6f5e:	f811 2b01 	ldrb.w	r2, [r1], #1
   d6f62:	f803 2b01 	strb.w	r2, [r3], #1
   d6f66:	2a00      	cmp	r2, #0
   d6f68:	d1f9      	bne.n	d6f5e <strcpy+0x2>
   d6f6a:	4770      	bx	lr

000d6f6c <strlen>:
   d6f6c:	4603      	mov	r3, r0
   d6f6e:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6f72:	2a00      	cmp	r2, #0
   d6f74:	d1fb      	bne.n	d6f6e <strlen+0x2>
   d6f76:	1a18      	subs	r0, r3, r0
   d6f78:	3801      	subs	r0, #1
   d6f7a:	4770      	bx	lr

000d6f7c <_strtol_l.isra.0>:
   d6f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6f80:	4e3a      	ldr	r6, [pc, #232]	; (d706c <_strtol_l.isra.0+0xf0>)
   d6f82:	4686      	mov	lr, r0
   d6f84:	468c      	mov	ip, r1
   d6f86:	4660      	mov	r0, ip
   d6f88:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d6f8c:	5da5      	ldrb	r5, [r4, r6]
   d6f8e:	f015 0508 	ands.w	r5, r5, #8
   d6f92:	d1f8      	bne.n	d6f86 <_strtol_l.isra.0+0xa>
   d6f94:	2c2d      	cmp	r4, #45	; 0x2d
   d6f96:	d133      	bne.n	d7000 <_strtol_l.isra.0+0x84>
   d6f98:	f89c 4000 	ldrb.w	r4, [ip]
   d6f9c:	f04f 0801 	mov.w	r8, #1
   d6fa0:	f100 0c02 	add.w	ip, r0, #2
   d6fa4:	2b00      	cmp	r3, #0
   d6fa6:	d05c      	beq.n	d7062 <_strtol_l.isra.0+0xe6>
   d6fa8:	2b10      	cmp	r3, #16
   d6faa:	d10c      	bne.n	d6fc6 <_strtol_l.isra.0+0x4a>
   d6fac:	2c30      	cmp	r4, #48	; 0x30
   d6fae:	d10a      	bne.n	d6fc6 <_strtol_l.isra.0+0x4a>
   d6fb0:	f89c 0000 	ldrb.w	r0, [ip]
   d6fb4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d6fb8:	2858      	cmp	r0, #88	; 0x58
   d6fba:	d14d      	bne.n	d7058 <_strtol_l.isra.0+0xdc>
   d6fbc:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d6fc0:	2310      	movs	r3, #16
   d6fc2:	f10c 0c02 	add.w	ip, ip, #2
   d6fc6:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d6fca:	3f01      	subs	r7, #1
   d6fcc:	2600      	movs	r6, #0
   d6fce:	fbb7 f9f3 	udiv	r9, r7, r3
   d6fd2:	4630      	mov	r0, r6
   d6fd4:	fb03 7a19 	mls	sl, r3, r9, r7
   d6fd8:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d6fdc:	2d09      	cmp	r5, #9
   d6fde:	d818      	bhi.n	d7012 <_strtol_l.isra.0+0x96>
   d6fe0:	462c      	mov	r4, r5
   d6fe2:	42a3      	cmp	r3, r4
   d6fe4:	dd24      	ble.n	d7030 <_strtol_l.isra.0+0xb4>
   d6fe6:	1c75      	adds	r5, r6, #1
   d6fe8:	d007      	beq.n	d6ffa <_strtol_l.isra.0+0x7e>
   d6fea:	4581      	cmp	r9, r0
   d6fec:	d31d      	bcc.n	d702a <_strtol_l.isra.0+0xae>
   d6fee:	d101      	bne.n	d6ff4 <_strtol_l.isra.0+0x78>
   d6ff0:	45a2      	cmp	sl, r4
   d6ff2:	db1a      	blt.n	d702a <_strtol_l.isra.0+0xae>
   d6ff4:	fb00 4003 	mla	r0, r0, r3, r4
   d6ff8:	2601      	movs	r6, #1
   d6ffa:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d6ffe:	e7eb      	b.n	d6fd8 <_strtol_l.isra.0+0x5c>
   d7000:	2c2b      	cmp	r4, #43	; 0x2b
   d7002:	bf08      	it	eq
   d7004:	f89c 4000 	ldrbeq.w	r4, [ip]
   d7008:	46a8      	mov	r8, r5
   d700a:	bf08      	it	eq
   d700c:	f100 0c02 	addeq.w	ip, r0, #2
   d7010:	e7c8      	b.n	d6fa4 <_strtol_l.isra.0+0x28>
   d7012:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d7016:	2d19      	cmp	r5, #25
   d7018:	d801      	bhi.n	d701e <_strtol_l.isra.0+0xa2>
   d701a:	3c37      	subs	r4, #55	; 0x37
   d701c:	e7e1      	b.n	d6fe2 <_strtol_l.isra.0+0x66>
   d701e:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d7022:	2d19      	cmp	r5, #25
   d7024:	d804      	bhi.n	d7030 <_strtol_l.isra.0+0xb4>
   d7026:	3c57      	subs	r4, #87	; 0x57
   d7028:	e7db      	b.n	d6fe2 <_strtol_l.isra.0+0x66>
   d702a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d702e:	e7e4      	b.n	d6ffa <_strtol_l.isra.0+0x7e>
   d7030:	1c73      	adds	r3, r6, #1
   d7032:	d106      	bne.n	d7042 <_strtol_l.isra.0+0xc6>
   d7034:	2322      	movs	r3, #34	; 0x22
   d7036:	f8ce 3000 	str.w	r3, [lr]
   d703a:	4638      	mov	r0, r7
   d703c:	b942      	cbnz	r2, d7050 <_strtol_l.isra.0+0xd4>
   d703e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7042:	f1b8 0f00 	cmp.w	r8, #0
   d7046:	d000      	beq.n	d704a <_strtol_l.isra.0+0xce>
   d7048:	4240      	negs	r0, r0
   d704a:	2a00      	cmp	r2, #0
   d704c:	d0f7      	beq.n	d703e <_strtol_l.isra.0+0xc2>
   d704e:	b10e      	cbz	r6, d7054 <_strtol_l.isra.0+0xd8>
   d7050:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   d7054:	6011      	str	r1, [r2, #0]
   d7056:	e7f2      	b.n	d703e <_strtol_l.isra.0+0xc2>
   d7058:	2430      	movs	r4, #48	; 0x30
   d705a:	2b00      	cmp	r3, #0
   d705c:	d1b3      	bne.n	d6fc6 <_strtol_l.isra.0+0x4a>
   d705e:	2308      	movs	r3, #8
   d7060:	e7b1      	b.n	d6fc6 <_strtol_l.isra.0+0x4a>
   d7062:	2c30      	cmp	r4, #48	; 0x30
   d7064:	d0a4      	beq.n	d6fb0 <_strtol_l.isra.0+0x34>
   d7066:	230a      	movs	r3, #10
   d7068:	e7ad      	b.n	d6fc6 <_strtol_l.isra.0+0x4a>
   d706a:	bf00      	nop
   d706c:	000d742a 	.word	0x000d742a

000d7070 <strtol>:
   d7070:	4613      	mov	r3, r2
   d7072:	460a      	mov	r2, r1
   d7074:	4601      	mov	r1, r0
   d7076:	4802      	ldr	r0, [pc, #8]	; (d7080 <strtol+0x10>)
   d7078:	6800      	ldr	r0, [r0, #0]
   d707a:	f7ff bf7f 	b.w	d6f7c <_strtol_l.isra.0>
   d707e:	bf00      	nop
   d7080:	2003e474 	.word	0x2003e474

000d7084 <__register_exitproc>:
   d7084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d7088:	f8df 80b8 	ldr.w	r8, [pc, #184]	; d7144 <__register_exitproc+0xc0>
   d708c:	4606      	mov	r6, r0
   d708e:	f8d8 0000 	ldr.w	r0, [r8]
   d7092:	461f      	mov	r7, r3
   d7094:	460d      	mov	r5, r1
   d7096:	4691      	mov	r9, r2
   d7098:	f000 f856 	bl	d7148 <__retarget_lock_acquire_recursive>
   d709c:	4b25      	ldr	r3, [pc, #148]	; (d7134 <__register_exitproc+0xb0>)
   d709e:	681c      	ldr	r4, [r3, #0]
   d70a0:	b934      	cbnz	r4, d70b0 <__register_exitproc+0x2c>
   d70a2:	4c25      	ldr	r4, [pc, #148]	; (d7138 <__register_exitproc+0xb4>)
   d70a4:	601c      	str	r4, [r3, #0]
   d70a6:	4b25      	ldr	r3, [pc, #148]	; (d713c <__register_exitproc+0xb8>)
   d70a8:	b113      	cbz	r3, d70b0 <__register_exitproc+0x2c>
   d70aa:	681b      	ldr	r3, [r3, #0]
   d70ac:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   d70b0:	6863      	ldr	r3, [r4, #4]
   d70b2:	2b1f      	cmp	r3, #31
   d70b4:	dd07      	ble.n	d70c6 <__register_exitproc+0x42>
   d70b6:	f8d8 0000 	ldr.w	r0, [r8]
   d70ba:	f000 f847 	bl	d714c <__retarget_lock_release_recursive>
   d70be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d70c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d70c6:	b34e      	cbz	r6, d711c <__register_exitproc+0x98>
   d70c8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   d70cc:	b988      	cbnz	r0, d70f2 <__register_exitproc+0x6e>
   d70ce:	4b1c      	ldr	r3, [pc, #112]	; (d7140 <__register_exitproc+0xbc>)
   d70d0:	b923      	cbnz	r3, d70dc <__register_exitproc+0x58>
   d70d2:	f8d8 0000 	ldr.w	r0, [r8]
   d70d6:	f000 f838 	bl	d714a <__retarget_lock_release>
   d70da:	e7f0      	b.n	d70be <__register_exitproc+0x3a>
   d70dc:	f44f 7084 	mov.w	r0, #264	; 0x108
   d70e0:	f7fe f9c0 	bl	d5464 <malloc>
   d70e4:	2800      	cmp	r0, #0
   d70e6:	d0f4      	beq.n	d70d2 <__register_exitproc+0x4e>
   d70e8:	2300      	movs	r3, #0
   d70ea:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   d70ee:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   d70f2:	6863      	ldr	r3, [r4, #4]
   d70f4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   d70f8:	2201      	movs	r2, #1
   d70fa:	409a      	lsls	r2, r3
   d70fc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   d7100:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   d7104:	4313      	orrs	r3, r2
   d7106:	2e02      	cmp	r6, #2
   d7108:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   d710c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   d7110:	bf02      	ittt	eq
   d7112:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   d7116:	431a      	orreq	r2, r3
   d7118:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   d711c:	6863      	ldr	r3, [r4, #4]
   d711e:	f8d8 0000 	ldr.w	r0, [r8]
   d7122:	1c5a      	adds	r2, r3, #1
   d7124:	3302      	adds	r3, #2
   d7126:	6062      	str	r2, [r4, #4]
   d7128:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   d712c:	f000 f80e 	bl	d714c <__retarget_lock_release_recursive>
   d7130:	2000      	movs	r0, #0
   d7132:	e7c6      	b.n	d70c2 <__register_exitproc+0x3e>
   d7134:	2003e7e0 	.word	0x2003e7e0
   d7138:	2003e754 	.word	0x2003e754
   d713c:	00000000 	.word	0x00000000
   d7140:	000d5465 	.word	0x000d5465
   d7144:	2003e4d8 	.word	0x2003e4d8

000d7148 <__retarget_lock_acquire_recursive>:
   d7148:	4770      	bx	lr

000d714a <__retarget_lock_release>:
   d714a:	4770      	bx	lr

000d714c <__retarget_lock_release_recursive>:
   d714c:	4770      	bx	lr

000d714e <link_code_end>:
	...

000d7150 <dynalib_user>:
   d7150:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   d7160:	0000 0000 6d73 7261 6c74 6769 7468 6400     ....smartlight.d
   d7170:	6f6f 0072 7973 7473 6d65 6f43 746e 6f72     oor.systemContro
   d7180:	006c 227b 6146 6c69 3a22 2520 7d64 7b00     l.{"Fail": %d}.{
   d7190:	7422 3a22 6425 222c 696c 6867 2274 253a     "t":%d,"light":%
   d71a0:	2c73 2220 6f64 726f 3a22 7325 202c 7422     s, "door":%s, "t
   d71b0:	6568 6d72 736f 6174 2274 253a 2c73 2220     hermostat":%s, "
   d71c0:	7548 696d 2264 253a 322e 2c66 2220 6554     Humid":%.2f, "Te
   d71d0:	706d 3a22 2e25 6632 202c 6322 2274 253a     mp":%.2f, "ct":%
   d71e0:	646c 007d 7d7b 7b00 4c22 2230 253a 2c64     ld}.{}.{"L0":%d,
   d71f0:	4c22 2231 253a 2c64 6222 3a22 6425 222c     "L1":%d,"b":%d,"
   d7200:	2273 253a 2c64 6d22 3a22 6425 222c 224d     s":%d,"m":%d,"M"
   d7210:	253a 7d64 6f00 006e 7561 6f74 6200 6972     :%d}.on.auto.bri
   d7220:	6867 6e74 7365 0073 696d 006e 616d 0078     ghtness.min.max.
   d7230:	6f64 726f 7250 786f 6d69 7469 0079 7473     doorProximity.st
   d7240:	7461 7375 7b00 6822 6165 5374 6174 7574     atus.{"heatStatu
   d7250:	2273 253a 2c64 6322 6f6f 536c 6174 7574     s":%d,"coolStatu
   d7260:	2273 253a 2c64 6622 6e61 7453 7461 7375     s":%d,"fanStatus
   d7270:	3a22 6425 007d 6568 7461 6300 6f6f 006c     ":%d}.heat.cool.
   d7280:	666f 0066 6166 006e 6574 706d 0000 0000     off.fan.temp....

000d7290 <_ZTVN5spark13EthernetClassE>:
	...
   d7298:	552b 000d 5521 000d 5517 000d 550d 000d     +U..!U...U...U..
   d72a8:	5501 000d 54f5 000d 5c3d 000d 5c45 000d     .U...T..=\..E\..
   d72b8:	54e9 000d 54e1 000d 54d7 000d 54cd 000d     .T...T...T...T..
   d72c8:	5c75 000d                                   u\..

000d72cc <_ZTV7TwoWire>:
	...
   d72d4:	5549 000d 5593 000d 556b 000d 554b 000d     IU...U..kU..KU..
   d72e4:	5573 000d 557b 000d 5583 000d 558b 000d     sU..{U...U...U..

000d72f4 <_ZTV9IPAddress>:
	...
   d72fc:	55dd 000d 55cd 000d 55cf 000d 2e30 0030     .U...U...U..0.0.
   d730c:	6166 736c 0065 0000                         false...

000d7314 <_ZTVSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d731c:	56dd 000d 56e3 000d 56f9 000d 56f1 000d     .V...V...V...V..
   d732c:	56df 000d 7061 0070                         .V..app.

000d7334 <_ZTVN5spark12NetworkClassE>:
	...
   d733c:	5bfd 000d 5c07 000d 5c11 000d 5c1b 000d     .[...\...\...\..
   d734c:	5c25 000d 5c31 000d 5c3d 000d 5c45 000d     %\..1\..=\..E\..
   d735c:	5c4d 000d 5c59 000d 5c61 000d 5c6b 000d     M\..Y\..a\..k\..
   d736c:	5c75 000d 5925 252d 2d6d 6425 2554 3a48     u\..%Y-%m-%dT%H:
   d737c:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000d738c <_ZTV11USARTSerial>:
	...
   d7394:	61a5 000d 6213 000d 61eb 000d 5d5d 000d     .a...b...a..]]..
   d73a4:	61bb 000d 61d7 000d 61c9 000d 61e5 000d     .a...a...a...a..
   d73b4:	61a7 000d 61ad 000d                         .a...a..

000d73bc <_ZTV9USBSerial>:
	...
   d73c4:	629f 000d 6307 000d 62dd 000d 5d5d 000d     .b...c...b..]]..
   d73d4:	62cf 000d 62a1 000d 62b1 000d 6301 000d     .b...b...b...c..
   d73e4:	62c1 000d 6299 000d                         .b...b..

000d73ec <_ZTVN5spark9WiFiClassE>:
	...
   d73f4:	63ff 000d 63f5 000d 63eb 000d 63a1 000d     .c...c...c...c..
   d7404:	63df 000d 63d3 000d 5c3d 000d 5c45 000d     .c...c..=\..E\..
   d7414:	63c7 000d 63bf 000d 63b5 000d 63ab 000d     .c...c...c...c..
   d7424:	5c75 000d                                   u\..

000d7428 <_ZSt7nothrow>:
	...

000d7429 <_ctype_>:
   d7429:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d7439:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d7449:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d7459:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d7469:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d7479:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d7489:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d7499:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d74a9:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000d752a <link_const_variable_data_end>:
	...

000d752c <link_constructors_location>:
   d752c:	000d4431 	.word	0x000d4431
   d7530:	000d54bd 	.word	0x000d54bd
   d7534:	000d5535 	.word	0x000d5535
   d7538:	000d5bed 	.word	0x000d5bed
   d753c:	000d5d49 	.word	0x000d5d49
   d7540:	000d5ed1 	.word	0x000d5ed1
   d7544:	000d60f9 	.word	0x000d60f9
   d7548:	000d6191 	.word	0x000d6191
   d754c:	000d6409 	.word	0x000d6409
