
/Users/zi/Documents/UofA/ECE513_Final_Project/ECE513FinalProject/513FinalProject/target/2.2.0/photon/513FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003980  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a39a0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  20000000  080a39a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000005f8  2000006c  2000006c  0003006c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a3a10  080a3a10  00023a10  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a3a38  080a3a38  00023a38  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0012e3aa  00000000  00000000  00023a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00016166  00000000  00000000  00151de6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001b353  00000000  00000000  00167f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002388  00000000  00000000  0018329f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000050a0  00000000  00000000  00185627  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002989a  00000000  00000000  0018a6c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000309c2  00000000  00000000  001b3f61  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000af3d7  00000000  00000000  001e4923  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005e0c  00000000  00000000  00293cfc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f003 f989 	bl	80a3348 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f003 f9ab 	bl	80a3398 <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a39a4 	.word	0x080a39a4
 80a0050:	2000006c 	.word	0x2000006c
 80a0054:	2000006c 	.word	0x2000006c
 80a0058:	20000661 	.word	0x20000661
 80a005c:	20000661 	.word	0x20000661

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f002 f96b 	bl	80a233c <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0066:	2500      	movs	r5, #0
 80a0068:	4e05      	ldr	r6, [pc, #20]	; (80a0080 <module_user_init+0x20>)
 80a006a:	4c06      	ldr	r4, [pc, #24]	; (80a0084 <module_user_init+0x24>)
 80a006c:	1ba4      	subs	r4, r4, r6
 80a006e:	08a4      	lsrs	r4, r4, #2
 80a0070:	42a5      	cmp	r5, r4
 80a0072:	d100      	bne.n	80a0076 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0074:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0076:	f856 3b04 	ldr.w	r3, [r6], #4
 80a007a:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f7      	b.n	80a0070 <module_user_init+0x10>
 80a0080:	080a3980 	.word	0x080a3980
 80a0084:	080a39a0 	.word	0x080a39a0

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b826 	b.w	80a00d8 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f919 	bl	80a02c4 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0096:	f002 b909 	b.w	80a22ac <_post_loop>

080a009a <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a009a:	f001 b927 	b.w	80a12ec <malloc>

080a009e <_Znaj>:
 80a009e:	f001 b925 	b.w	80a12ec <malloc>

080a00a2 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a00a2:	f001 b92b 	b.w	80a12fc <free>

080a00a6 <_ZdaPv>:
 80a00a6:	f001 b929 	b.w	80a12fc <free>

080a00aa <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00aa:	7800      	ldrb	r0, [r0, #0]
 80a00ac:	fab0 f080 	clz	r0, r0
 80a00b0:	0940      	lsrs	r0, r0, #5
 80a00b2:	4770      	bx	lr

080a00b4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b4:	2301      	movs	r3, #1
 80a00b6:	7003      	strb	r3, [r0, #0]
 80a00b8:	4770      	bx	lr

080a00ba <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
 80a00ba:	b40e      	push	{r1, r2, r3}
 80a00bc:	b503      	push	{r0, r1, lr}
 80a00be:	ab03      	add	r3, sp, #12
 80a00c0:	f853 2b04 	ldr.w	r2, [r3], #4
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
 80a00c4:	2100      	movs	r1, #0
        va_start(args, format);
 80a00c6:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
 80a00c8:	f001 fd4a 	bl	80a1b60 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
 80a00cc:	b002      	add	sp, #8
 80a00ce:	f85d eb04 	ldr.w	lr, [sp], #4
 80a00d2:	b003      	add	sp, #12
 80a00d4:	4770      	bx	lr
	...

080a00d8 <setup>:
  }
}



void setup() {
 80a00d8:	b508      	push	{r3, lr}
  pinMode(LED, OUTPUT);
 80a00da:	2101      	movs	r1, #1
 80a00dc:	2000      	movs	r0, #0
 80a00de:	f002 f9a9 	bl	80a2434 <pinMode>
  pinMode(LED2, OUTPUT);
 80a00e2:	2101      	movs	r1, #1
 80a00e4:	2007      	movs	r0, #7
 80a00e6:	f002 f9a5 	bl	80a2434 <pinMode>
  RGB.control(true);
 80a00ea:	2001      	movs	r0, #1
 80a00ec:	f001 fd69 	bl	80a1bc2 <_ZN8RGBClass7controlEb>
  RGB.color(255, 255, 255);
 80a00f0:	22ff      	movs	r2, #255	; 0xff
 80a00f2:	4611      	mov	r1, r2
 80a00f4:	4610      	mov	r0, r2
 80a00f6:	f001 fd74 	bl	80a1be2 <_ZN8RGBClass5colorEiii>

	Serial.begin();
 80a00fa:	f001 ffe3 	bl	80a20c4 <_Z16_fetch_usbserialv>
 80a00fe:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0102:	f001 ffc5 	bl	80a2090 <_ZN9USBSerial5beginEl>

  dht.begin();
 80a0106:	4803      	ldr	r0, [pc, #12]	; (80a0114 <setup+0x3c>)
 80a0108:	f000 f998 	bl	80a043c <_ZN3DHT5beginEv>

  counter = 0;
 80a010c:	2200      	movs	r2, #0
 80a010e:	4b02      	ldr	r3, [pc, #8]	; (80a0118 <setup+0x40>)
 80a0110:	601a      	str	r2, [r3, #0]
}
 80a0112:	bd08      	pop	{r3, pc}
 80a0114:	20000070 	.word	0x20000070
 80a0118:	2000006c 	.word	0x2000006c

080a011c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a011c:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a011e:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 80a0120:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 80a0122:	b17c      	cbz	r4, 80a0144 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 80a0124:	6863      	ldr	r3, [r4, #4]
 80a0126:	3b01      	subs	r3, #1
 80a0128:	6063      	str	r3, [r4, #4]
 80a012a:	b95b      	cbnz	r3, 80a0144 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 80a012c:	6823      	ldr	r3, [r4, #0]
 80a012e:	4620      	mov	r0, r4
 80a0130:	689b      	ldr	r3, [r3, #8]
 80a0132:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0134:	68a3      	ldr	r3, [r4, #8]
 80a0136:	3b01      	subs	r3, #1
 80a0138:	60a3      	str	r3, [r4, #8]
 80a013a:	b91b      	cbnz	r3, 80a0144 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a013c:	6823      	ldr	r3, [r4, #0]
 80a013e:	4620      	mov	r0, r4
 80a0140:	68db      	ldr	r3, [r3, #12]
 80a0142:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 80a0144:	4628      	mov	r0, r5
 80a0146:	bd38      	pop	{r3, r4, r5, pc}

080a0148 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a0148:	680b      	ldr	r3, [r1, #0]
 80a014a:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a014c:	b113      	cbz	r3, 80a0154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 80a014e:	685a      	ldr	r2, [r3, #4]
 80a0150:	3201      	adds	r2, #1
 80a0152:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
 80a0154:	4770      	bx	lr
	...

080a0158 <_Z19serialCmdProcessingv>:
void serialCmdProcessing() {
 80a0158:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a015a:	b095      	sub	sp, #84	; 0x54
  if (Serial.available() <= 0) return;
 80a015c:	f001 ffb2 	bl	80a20c4 <_Z16_fetch_usbserialv>
 80a0160:	6803      	ldr	r3, [r0, #0]
 80a0162:	691b      	ldr	r3, [r3, #16]
 80a0164:	4798      	blx	r3
 80a0166:	2800      	cmp	r0, #0
 80a0168:	f340 80a0 	ble.w	80a02ac <_Z19serialCmdProcessingv+0x154>
  String cmdStr = "";
 80a016c:	4950      	ldr	r1, [pc, #320]	; (80a02b0 <_Z19serialCmdProcessingv+0x158>)
 80a016e:	a806      	add	r0, sp, #24
 80a0170:	f001 fdb9 	bl	80a1ce6 <_ZN6StringC1EPKc>
  while (Serial.available()) {
 80a0174:	f001 ffa6 	bl	80a20c4 <_Z16_fetch_usbserialv>
 80a0178:	6803      	ldr	r3, [r0, #0]
 80a017a:	691b      	ldr	r3, [r3, #16]
 80a017c:	4798      	blx	r3
 80a017e:	b180      	cbz	r0, 80a01a2 <_Z19serialCmdProcessingv+0x4a>
      char c = Serial.read();
 80a0180:	f001 ffa0 	bl	80a20c4 <_Z16_fetch_usbserialv>
 80a0184:	6803      	ldr	r3, [r0, #0]
 80a0186:	695b      	ldr	r3, [r3, #20]
 80a0188:	4798      	blx	r3
      cmdStr += String(c);
 80a018a:	b2c1      	uxtb	r1, r0
 80a018c:	a80e      	add	r0, sp, #56	; 0x38
 80a018e:	f001 fe0d 	bl	80a1dac <_ZN6StringC1Ec>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80a0192:	a90e      	add	r1, sp, #56	; 0x38
 80a0194:	a806      	add	r0, sp, #24
 80a0196:	f001 fe31 	bl	80a1dfc <_ZN6String6concatERKS_>
 80a019a:	a80e      	add	r0, sp, #56	; 0x38
 80a019c:	f001 fd59 	bl	80a1c52 <_ZN6StringD1Ev>
  while (Serial.available()) {
 80a01a0:	e7e8      	b.n	80a0174 <_Z19serialCmdProcessingv+0x1c>
  JSONValue cmdJson = JSONValue::parseCopy(cmdStr.c_str());
 80a01a2:	9c06      	ldr	r4, [sp, #24]
inline bool spark::JSONString::isEmpty() const {
    return !n_;
}

inline bool spark::JSONString::operator==(const char *str) const {
    return strcmp(s_, str) == 0;
 80a01a4:	4e43      	ldr	r6, [pc, #268]	; (80a02b4 <_Z19serialCmdProcessingv+0x15c>)
    return parseCopy(json, strlen(json));
 80a01a6:	4620      	mov	r0, r4
 80a01a8:	f003 f934 	bl	80a3414 <strlen>
 80a01ac:	4621      	mov	r1, r4
 80a01ae:	4602      	mov	r2, r0
 80a01b0:	a803      	add	r0, sp, #12
 80a01b2:	f001 fbb7 	bl	80a1924 <_ZN5spark9JSONValue9parseCopyEPKcj>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a01b6:	9b03      	ldr	r3, [sp, #12]
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
 80a01b8:	9c05      	ldr	r4, [sp, #20]
 80a01ba:	a904      	add	r1, sp, #16
 80a01bc:	a80b      	add	r0, sp, #44	; 0x2c
 80a01be:	930a      	str	r3, [sp, #40]	; 0x28
 80a01c0:	f7ff ffc2 	bl	80a0148 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80a01c4:	4621      	mov	r1, r4
 80a01c6:	aa0a      	add	r2, sp, #40	; 0x28
 80a01c8:	a80e      	add	r0, sp, #56	; 0x38
 80a01ca:	f001 fb6b 	bl	80a18a4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a01ce:	a80b      	add	r0, sp, #44	; 0x2c
 80a01d0:	f7ff ffa4 	bl	80a011c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return strcmp(s_, str) == 0;
 80a01d4:	4f38      	ldr	r7, [pc, #224]	; (80a02b8 <_Z19serialCmdProcessingv+0x160>)
      door.cmdProcessing(iter.value());
 80a01d6:	4d39      	ldr	r5, [pc, #228]	; (80a02bc <_Z19serialCmdProcessingv+0x164>)
  while (iter.next()) {
 80a01d8:	a80e      	add	r0, sp, #56	; 0x38
 80a01da:	f001 fb7b 	bl	80a18d4 <_ZN5spark18JSONObjectIterator4nextEv>
 80a01de:	2800      	cmp	r0, #0
 80a01e0:	d05b      	beq.n	80a029a <_Z19serialCmdProcessingv+0x142>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a01e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
 80a01e4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80a01e6:	a90f      	add	r1, sp, #60	; 0x3c
 80a01e8:	a802      	add	r0, sp, #8
 80a01ea:	9301      	str	r3, [sp, #4]
 80a01ec:	f7ff ffac 	bl	80a0148 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80a01f0:	4621      	mov	r1, r4
 80a01f2:	aa01      	add	r2, sp, #4
 80a01f4:	a80a      	add	r0, sp, #40	; 0x28
 80a01f6:	f001 fb31 	bl	80a185c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 80a01fa:	a802      	add	r0, sp, #8
 80a01fc:	f7ff ff8e 	bl	80a011c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return strcmp(s_, str) == 0;
 80a0200:	4631      	mov	r1, r6
 80a0202:	980c      	ldr	r0, [sp, #48]	; 0x30
 80a0204:	f003 f8f4 	bl	80a33f0 <strcmp>
 80a0208:	4604      	mov	r4, r0
 80a020a:	a80b      	add	r0, sp, #44	; 0x2c
 80a020c:	f7ff ff86 	bl	80a011c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (iter.name() == "smartlight") {
 80a0210:	b9b4      	cbnz	r4, 80a0240 <_Z19serialCmdProcessingv+0xe8>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a0212:	9b0e      	ldr	r3, [sp, #56]	; 0x38
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
    return JSONValue(v_, d_);
 80a0214:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80a0216:	a90f      	add	r1, sp, #60	; 0x3c
 80a0218:	a802      	add	r0, sp, #8
 80a021a:	9301      	str	r3, [sp, #4]
 80a021c:	f7ff ff94 	bl	80a0148 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80a0220:	4621      	mov	r1, r4
 80a0222:	aa01      	add	r2, sp, #4
 80a0224:	a80a      	add	r0, sp, #40	; 0x28
 80a0226:	f001 f993 	bl	80a1550 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 80a022a:	a802      	add	r0, sp, #8
 80a022c:	f7ff ff76 	bl	80a011c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      smartLight.cmdProcessing(iter.value());
 80a0230:	4823      	ldr	r0, [pc, #140]	; (80a02c0 <_Z19serialCmdProcessingv+0x168>)
 80a0232:	a90a      	add	r1, sp, #40	; 0x28
 80a0234:	f000 fd7e 	bl	80a0d34 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE>
 80a0238:	a80b      	add	r0, sp, #44	; 0x2c
 80a023a:	f7ff ff6f 	bl	80a011c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a023e:	e7cb      	b.n	80a01d8 <_Z19serialCmdProcessingv+0x80>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a0240:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    return JSONString(k_, d_);
 80a0242:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80a0244:	a90f      	add	r1, sp, #60	; 0x3c
 80a0246:	a802      	add	r0, sp, #8
 80a0248:	9301      	str	r3, [sp, #4]
 80a024a:	f7ff ff7d 	bl	80a0148 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80a024e:	4621      	mov	r1, r4
 80a0250:	aa01      	add	r2, sp, #4
 80a0252:	a80a      	add	r0, sp, #40	; 0x28
 80a0254:	f001 fb02 	bl	80a185c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 80a0258:	a802      	add	r0, sp, #8
 80a025a:	f7ff ff5f 	bl	80a011c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return strcmp(s_, str) == 0;
 80a025e:	4639      	mov	r1, r7
 80a0260:	980c      	ldr	r0, [sp, #48]	; 0x30
 80a0262:	f003 f8c5 	bl	80a33f0 <strcmp>
 80a0266:	4604      	mov	r4, r0
 80a0268:	a80b      	add	r0, sp, #44	; 0x2c
 80a026a:	f7ff ff57 	bl	80a011c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else if (iter.name() == "door") {
 80a026e:	2c00      	cmp	r4, #0
 80a0270:	d1b2      	bne.n	80a01d8 <_Z19serialCmdProcessingv+0x80>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a0272:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    return JSONValue(v_, d_);
 80a0274:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80a0276:	a90f      	add	r1, sp, #60	; 0x3c
 80a0278:	a802      	add	r0, sp, #8
 80a027a:	9301      	str	r3, [sp, #4]
 80a027c:	f7ff ff64 	bl	80a0148 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80a0280:	4621      	mov	r1, r4
 80a0282:	aa01      	add	r2, sp, #4
 80a0284:	a80a      	add	r0, sp, #40	; 0x28
 80a0286:	f001 f963 	bl	80a1550 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 80a028a:	a802      	add	r0, sp, #8
 80a028c:	f7ff ff46 	bl	80a011c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      door.cmdProcessing(iter.value());
 80a0290:	4628      	mov	r0, r5
 80a0292:	a90a      	add	r1, sp, #40	; 0x28
 80a0294:	f000 fbc8 	bl	80a0a28 <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE>
 80a0298:	e7ce      	b.n	80a0238 <_Z19serialCmdProcessingv+0xe0>
 80a029a:	a80f      	add	r0, sp, #60	; 0x3c
 80a029c:	f7ff ff3e 	bl	80a011c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a02a0:	a804      	add	r0, sp, #16
 80a02a2:	f7ff ff3b 	bl	80a011c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  String cmdStr = "";
 80a02a6:	a806      	add	r0, sp, #24
 80a02a8:	f001 fcd3 	bl	80a1c52 <_ZN6StringD1Ev>
}
 80a02ac:	b015      	add	sp, #84	; 0x54
 80a02ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a02b0:	080a375f 	.word	0x080a375f
 80a02b4:	080a3610 	.word	0x080a3610
 80a02b8:	080a361b 	.word	0x080a361b
 80a02bc:	20000084 	.word	0x20000084
 80a02c0:	200000b8 	.word	0x200000b8

080a02c4 <loop>:

void loop() {
 80a02c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	//delay(100);

// Reading temperature or humidity takes about 250 milliseconds!
// Sensor readings may also be up to 2 seconds 'old' (its a
// very slow sensor)
	float h = dht.getHumidity();
 80a02c8:	4842      	ldr	r0, [pc, #264]	; (80a03d4 <loop+0x110>)
void loop() {
 80a02ca:	b08b      	sub	sp, #44	; 0x2c
	float h = dht.getHumidity();
 80a02cc:	f000 fab4 	bl	80a0838 <_ZN3DHT11getHumidityEv>
 80a02d0:	4604      	mov	r4, r0
// Read temperature as Celsius
	float temp = dht.getTempCelcius();
 80a02d2:	4840      	ldr	r0, [pc, #256]	; (80a03d4 <loop+0x110>)
 80a02d4:	f000 fa74 	bl	80a07c0 <_ZN3DHT14getTempCelciusEv>
 80a02d8:	4605      	mov	r5, r0
// Read temperature as Farenheit
	float f = dht.getTempFarenheit();
 80a02da:	483e      	ldr	r0, [pc, #248]	; (80a03d4 <loop+0x110>)
 80a02dc:	f000 fa72 	bl	80a07c4 <_ZN3DHT16getTempFarenheitEv>

// Check if any reads failed and exit early (to try again).
	if (isnan(h) || isnan(temp) || isnan(f)) {
 80a02e0:	4621      	mov	r1, r4
	float f = dht.getTempFarenheit();
 80a02e2:	4606      	mov	r6, r0
	if (isnan(h) || isnan(temp) || isnan(f)) {
 80a02e4:	4620      	mov	r0, r4
 80a02e6:	f003 f813 	bl	80a3310 <__aeabi_fcmpun>
 80a02ea:	b948      	cbnz	r0, 80a0300 <loop+0x3c>
 80a02ec:	4629      	mov	r1, r5
 80a02ee:	4628      	mov	r0, r5
 80a02f0:	f003 f80e 	bl	80a3310 <__aeabi_fcmpun>
 80a02f4:	b920      	cbnz	r0, 80a0300 <loop+0x3c>
 80a02f6:	4631      	mov	r1, r6
 80a02f8:	4630      	mov	r0, r6
 80a02fa:	f003 f809 	bl	80a3310 <__aeabi_fcmpun>
 80a02fe:	b160      	cbz	r0, 80a031a <loop+0x56>
		//Serial.println("Failed to read from DHT sensor!");
		Serial.printf("{\"Fail\": %d}", true);
 80a0300:	f001 fee0 	bl	80a20c4 <_Z16_fetch_usbserialv>
 80a0304:	2201      	movs	r2, #1
 80a0306:	4934      	ldr	r1, [pc, #208]	; (80a03d8 <loop+0x114>)
 80a0308:	f7ff fed7 	bl	80a00ba <_ZN5Print6printfEPKcz>
		Serial.println();
 80a030c:	f001 feda 	bl	80a20c4 <_Z16_fetch_usbserialv>
 80a0310:	f001 fbfd 	bl	80a1b0e <_ZN5Print7printlnEv>
  }
  counter++;

  period = PERIOD - (millis() - t);
  if (period > 0) delay(period);
}
 80a0314:	b00b      	add	sp, #44	; 0x2c
 80a0316:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Serial.printf("{\"Humid(Percent)\":%.2f, \"Temp(*C)\":%.2f}", h, temp);
 80a031a:	f001 fed3 	bl	80a20c4 <_Z16_fetch_usbserialv>
 80a031e:	4606      	mov	r6, r0
 80a0320:	4620      	mov	r0, r4
 80a0322:	f002 fa7d 	bl	80a2820 <__aeabi_f2d>
 80a0326:	4680      	mov	r8, r0
 80a0328:	4628      	mov	r0, r5
 80a032a:	4689      	mov	r9, r1
 80a032c:	f002 fa78 	bl	80a2820 <__aeabi_f2d>
 80a0330:	4642      	mov	r2, r8
 80a0332:	464b      	mov	r3, r9
 80a0334:	e9cd 0100 	strd	r0, r1, [sp]
 80a0338:	4928      	ldr	r1, [pc, #160]	; (80a03dc <loop+0x118>)
 80a033a:	4630      	mov	r0, r6
 80a033c:	f7ff febd 	bl	80a00ba <_ZN5Print6printfEPKcz>
	Serial.println();
 80a0340:	f001 fec0 	bl	80a20c4 <_Z16_fetch_usbserialv>
 80a0344:	f001 fbe3 	bl	80a1b0e <_ZN5Print7printlnEv>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0348:	f000 fdaa 	bl	80a0ea0 <HAL_Timer_Get_Milli_Seconds>
 80a034c:	4604      	mov	r4, r0
  serialCmdProcessing();
 80a034e:	f7ff ff03 	bl	80a0158 <_Z19serialCmdProcessingv>
  smartLight.execute();
 80a0352:	4823      	ldr	r0, [pc, #140]	; (80a03e0 <loop+0x11c>)
 80a0354:	f000 fcbc 	bl	80a0cd0 <_ZN11CSmartLight7executeEv>
 80a0358:	f000 fda2 	bl	80a0ea0 <HAL_Timer_Get_Milli_Seconds>
 80a035c:	4606      	mov	r6, r0
  door.execute();
 80a035e:	4821      	ldr	r0, [pc, #132]	; (80a03e4 <loop+0x120>)
 80a0360:	f000 faae 	bl	80a08c0 <_ZN5CDoor7executeEv>
 80a0364:	220a      	movs	r2, #10
  if (counter % (SERAIL_COMM_FREQUENCY * LOOP_FREQUENCY) == 0) {
 80a0366:	4d20      	ldr	r5, [pc, #128]	; (80a03e8 <loop+0x124>)
  door.execute();
 80a0368:	6829      	ldr	r1, [r5, #0]
 80a036a:	fb91 f3f2 	sdiv	r3, r1, r2
 80a036e:	fb02 1313 	mls	r3, r2, r3, r1
  if (counter % (SERAIL_COMM_FREQUENCY * LOOP_FREQUENCY) == 0) {
 80a0372:	bb23      	cbnz	r3, 80a03be <loop+0xfa>
    counter = 0;
 80a0374:	602b      	str	r3, [r5, #0]
    Serial.printf("{\"t\":%d,\"light\":%s, \"door\":%s, \"ct\":%ld}",
 80a0376:	f001 fea5 	bl	80a20c4 <_Z16_fetch_usbserialv>
 80a037a:	4607      	mov	r7, r0
      (int)Time.now(), smartLight.getStatusStr().c_str(), door.getStatusStr().c_str(),
 80a037c:	f001 fda6 	bl	80a1ecc <_ZN9TimeClass3nowEv>
 80a0380:	4680      	mov	r8, r0

    void execute();

    int getSensorVal();
    void readSensorVal();
    String getStatusStr() {return statusStr;};
 80a0382:	491a      	ldr	r1, [pc, #104]	; (80a03ec <loop+0x128>)
 80a0384:	a802      	add	r0, sp, #8
 80a0386:	f001 fced 	bl	80a1d64 <_ZN6StringC1ERKS_>

    void execute();

    int getSensorVal();
    void readSensorVal();
    String getStatusStr() {return statusStr;};
 80a038a:	4919      	ldr	r1, [pc, #100]	; (80a03f0 <loop+0x12c>)
 80a038c:	a806      	add	r0, sp, #24
    Serial.printf("{\"t\":%d,\"light\":%s, \"door\":%s, \"ct\":%ld}",
 80a038e:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80a0392:	f001 fce7 	bl	80a1d64 <_ZN6StringC1ERKS_>
 80a0396:	9b06      	ldr	r3, [sp, #24]
  unsigned long period = millis() - t;
 80a0398:	1b36      	subs	r6, r6, r4
    Serial.printf("{\"t\":%d,\"light\":%s, \"door\":%s, \"ct\":%ld}",
 80a039a:	4642      	mov	r2, r8
 80a039c:	4915      	ldr	r1, [pc, #84]	; (80a03f4 <loop+0x130>)
 80a039e:	9300      	str	r3, [sp, #0]
 80a03a0:	4638      	mov	r0, r7
 80a03a2:	464b      	mov	r3, r9
 80a03a4:	9601      	str	r6, [sp, #4]
 80a03a6:	f7ff fe88 	bl	80a00ba <_ZN5Print6printfEPKcz>
      (int)Time.now(), smartLight.getStatusStr().c_str(), door.getStatusStr().c_str(),
 80a03aa:	a806      	add	r0, sp, #24
 80a03ac:	f001 fc51 	bl	80a1c52 <_ZN6StringD1Ev>
 80a03b0:	a802      	add	r0, sp, #8
 80a03b2:	f001 fc4e 	bl	80a1c52 <_ZN6StringD1Ev>
    Serial.println();
 80a03b6:	f001 fe85 	bl	80a20c4 <_Z16_fetch_usbserialv>
 80a03ba:	f001 fba8 	bl	80a1b0e <_ZN5Print7printlnEv>
  counter++;
 80a03be:	682b      	ldr	r3, [r5, #0]
  period = PERIOD - (millis() - t);
 80a03c0:	3464      	adds	r4, #100	; 0x64
  counter++;
 80a03c2:	3301      	adds	r3, #1
 80a03c4:	602b      	str	r3, [r5, #0]
 80a03c6:	f000 fd6b 	bl	80a0ea0 <HAL_Timer_Get_Milli_Seconds>
  if (period > 0) delay(period);
 80a03ca:	1a20      	subs	r0, r4, r0
 80a03cc:	d0a2      	beq.n	80a0314 <loop+0x50>
 80a03ce:	f000 ffb5 	bl	80a133c <delay>
 80a03d2:	e79f      	b.n	80a0314 <loop+0x50>
 80a03d4:	20000070 	.word	0x20000070
 80a03d8:	080a3620 	.word	0x080a3620
 80a03dc:	080a362d 	.word	0x080a362d
 80a03e0:	200000b8 	.word	0x200000b8
 80a03e4:	20000084 	.word	0x20000084
 80a03e8:	2000006c 	.word	0x2000006c
 80a03ec:	200000d8 	.word	0x200000d8
 80a03f0:	200000a8 	.word	0x200000a8
 80a03f4:	080a3656 	.word	0x080a3656

080a03f8 <_GLOBAL__sub_I_dht>:
}
 80a03f8:	b508      	push	{r3, lr}
SYSTEM_THREAD(ENABLED);
 80a03fa:	2100      	movs	r1, #0
 80a03fc:	2001      	movs	r0, #1
 80a03fe:	f000 fed1 	bl	80a11a4 <system_thread_set_state>
DHT dht(DHTPIN, DHTTYPE);
 80a0402:	2306      	movs	r3, #6
 80a0404:	220b      	movs	r2, #11
 80a0406:	2102      	movs	r1, #2
 80a0408:	4805      	ldr	r0, [pc, #20]	; (80a0420 <_GLOBAL__sub_I_dht+0x28>)
 80a040a:	f000 f80f 	bl	80a042c <_ZN3DHTC1Ehhh>
CSmartLight smartLight;
 80a040e:	4805      	ldr	r0, [pc, #20]	; (80a0424 <_GLOBAL__sub_I_dht+0x2c>)
 80a0410:	f000 fb8a 	bl	80a0b28 <_ZN11CSmartLightC1Ev>
}
 80a0414:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
CDoor door;
 80a0418:	4803      	ldr	r0, [pc, #12]	; (80a0428 <_GLOBAL__sub_I_dht+0x30>)
 80a041a:	f000 ba0f 	b.w	80a083c <_ZN5CDoorC1Ev>
 80a041e:	bf00      	nop
 80a0420:	20000070 	.word	0x20000070
 80a0424:	200000b8 	.word	0x200000b8
 80a0428:	20000084 	.word	0x20000084

080a042c <_ZN3DHTC1Ehhh>:
#include "Adafruit_DHT.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
	_pin = pin;
	_type = type;
	_count = count;
 80a042c:	7203      	strb	r3, [r0, #8]
	firstreading = true;
 80a042e:	2301      	movs	r3, #1
DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
 80a0430:	b510      	push	{r4, lr}
	_pin = pin;
 80a0432:	7181      	strb	r1, [r0, #6]
	_type = type;
 80a0434:	71c2      	strb	r2, [r0, #7]
	firstreading = true;
 80a0436:	7403      	strb	r3, [r0, #16]
}
 80a0438:	bd10      	pop	{r4, pc}
	...

080a043c <_ZN3DHT5beginEv>:

void DHT::begin(void) {
 80a043c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0440:	4605      	mov	r5, r0
/* Disabling USE_BIT_BAND since bitbanding is much slower! as per comment
 * by @pkourany on PR: https://github.com/spark/firmware/pull/556 */
#define USE_BIT_BAND 0

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a0442:	4c1a      	ldr	r4, [pc, #104]	; (80a04ac <_ZN3DHT5beginEv+0x70>)
// set up the pins!
	pinMode(_pin, INPUT);
 80a0444:	2100      	movs	r1, #0
 80a0446:	7980      	ldrb	r0, [r0, #6]
 80a0448:	f001 fff4 	bl	80a2434 <pinMode>
	pinSetFast(_pin);
 80a044c:	79ae      	ldrb	r6, [r5, #6]
 80a044e:	7823      	ldrb	r3, [r4, #0]
 80a0450:	4f17      	ldr	r7, [pc, #92]	; (80a04b0 <_ZN3DHT5beginEv+0x74>)
 80a0452:	f013 0f01 	tst.w	r3, #1
 80a0456:	f3bf 8f5b 	dmb	ish
 80a045a:	d109      	bne.n	80a0470 <_ZN3DHT5beginEv+0x34>
 80a045c:	4620      	mov	r0, r4
 80a045e:	f7ff fe24 	bl	80a00aa <__cxa_guard_acquire>
 80a0462:	b128      	cbz	r0, 80a0470 <_ZN3DHT5beginEv+0x34>
 80a0464:	f000 fd34 	bl	80a0ed0 <HAL_Pin_Map>
 80a0468:	6038      	str	r0, [r7, #0]
 80a046a:	4620      	mov	r0, r4
 80a046c:	f7ff fe22 	bl	80a00b4 <__cxa_guard_release>
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

inline void pinSetFast(pin_t _pin)
{
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRL = fastPinGetPinmap()[_pin].gpio_pin;
 80a0470:	231c      	movs	r3, #28
 80a0472:	435e      	muls	r6, r3
 80a0474:	683b      	ldr	r3, [r7, #0]
 80a0476:	eb03 0806 	add.w	r8, r3, r6
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a047a:	7823      	ldrb	r3, [r4, #0]
 80a047c:	f3bf 8f5b 	dmb	ish
 80a0480:	07db      	lsls	r3, r3, #31
 80a0482:	d409      	bmi.n	80a0498 <_ZN3DHT5beginEv+0x5c>
 80a0484:	4809      	ldr	r0, [pc, #36]	; (80a04ac <_ZN3DHT5beginEv+0x70>)
 80a0486:	f7ff fe10 	bl	80a00aa <__cxa_guard_acquire>
 80a048a:	b128      	cbz	r0, 80a0498 <_ZN3DHT5beginEv+0x5c>
 80a048c:	f000 fd20 	bl	80a0ed0 <HAL_Pin_Map>
 80a0490:	6038      	str	r0, [r7, #0]
 80a0492:	4806      	ldr	r0, [pc, #24]	; (80a04ac <_ZN3DHT5beginEv+0x70>)
 80a0494:	f7ff fe0e 	bl	80a00b4 <__cxa_guard_release>
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRL = fastPinGetPinmap()[_pin].gpio_pin;
 80a0498:	683b      	ldr	r3, [r7, #0]
 80a049a:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 80a049e:	599b      	ldr	r3, [r3, r6]
 80a04a0:	831a      	strh	r2, [r3, #24]
	_lastreadtime = 0;
 80a04a2:	2300      	movs	r3, #0
 80a04a4:	60eb      	str	r3, [r5, #12]
}
 80a04a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a04aa:	bf00      	nop
 80a04ac:	200000e8 	.word	0x200000e8
 80a04b0:	200000ec 	.word	0x200000ec

080a04b4 <_ZN3DHT4readEv>:
	double tC = (a * (float) tempCelcius) / (b + (float) tempCelcius) + log( (float) percentHumidity / 100);
	double Td = (b * tC) / (a - tC);
	return Td;
}

boolean DHT::read(void) {
 80a04b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a04b8:	4604      	mov	r4, r0
 80a04ba:	f000 fcf1 	bl	80a0ea0 <HAL_Timer_Get_Milli_Seconds>
	unsigned long currenttime;

// Check if sensor was read less than two seconds ago and return early
// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime) {
 80a04be:	68e3      	ldr	r3, [r4, #12]
 80a04c0:	4283      	cmp	r3, r0
// ie there was a rollover
		_lastreadtime = 0;
 80a04c2:	bf84      	itt	hi
 80a04c4:	2300      	movhi	r3, #0
 80a04c6:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
 80a04c8:	7c23      	ldrb	r3, [r4, #16]
 80a04ca:	b92b      	cbnz	r3, 80a04d8 <_ZN3DHT4readEv+0x24>
 80a04cc:	68e3      	ldr	r3, [r4, #12]
 80a04ce:	1ac0      	subs	r0, r0, r3
 80a04d0:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 80a04d4:	f0c0 813e 	bcc.w	80a0754 <_ZN3DHT4readEv+0x2a0>
		return true; // return last correct measurement
//		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
 80a04d8:	2500      	movs	r5, #0
 80a04da:	7425      	strb	r5, [r4, #16]
 80a04dc:	f000 fce0 	bl	80a0ea0 <HAL_Timer_Get_Milli_Seconds>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a04e0:	4e9e      	ldr	r6, [pc, #632]	; (80a075c <_ZN3DHT4readEv+0x2a8>)
	Serial.print("Currtime: "); Serial.print(currenttime);
	Serial.print(" Lasttime: "); Serial.print(_lastreadtime);
*/
	_lastreadtime = millis();

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
 80a04e2:	6025      	str	r5, [r4, #0]
 80a04e4:	7125      	strb	r5, [r4, #4]
	_lastreadtime = millis();
 80a04e6:	60e0      	str	r0, [r4, #12]

// pull the pin high and wait 250 milliseconds
	pinSetFast(_pin);
 80a04e8:	79a7      	ldrb	r7, [r4, #6]
 80a04ea:	7833      	ldrb	r3, [r6, #0]
 80a04ec:	4d9c      	ldr	r5, [pc, #624]	; (80a0760 <_ZN3DHT4readEv+0x2ac>)
 80a04ee:	f013 0f01 	tst.w	r3, #1
 80a04f2:	f3bf 8f5b 	dmb	ish
 80a04f6:	d109      	bne.n	80a050c <_ZN3DHT4readEv+0x58>
 80a04f8:	4630      	mov	r0, r6
 80a04fa:	f7ff fdd6 	bl	80a00aa <__cxa_guard_acquire>
 80a04fe:	b128      	cbz	r0, 80a050c <_ZN3DHT4readEv+0x58>
 80a0500:	f000 fce6 	bl	80a0ed0 <HAL_Pin_Map>
 80a0504:	6028      	str	r0, [r5, #0]
 80a0506:	4630      	mov	r0, r6
 80a0508:	f7ff fdd4 	bl	80a00b4 <__cxa_guard_release>
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRL = fastPinGetPinmap()[_pin].gpio_pin;
 80a050c:	231c      	movs	r3, #28
 80a050e:	435f      	muls	r7, r3
 80a0510:	682b      	ldr	r3, [r5, #0]
 80a0512:	eb03 0807 	add.w	r8, r3, r7
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a0516:	7833      	ldrb	r3, [r6, #0]
 80a0518:	f3bf 8f5b 	dmb	ish
 80a051c:	07d9      	lsls	r1, r3, #31
 80a051e:	d409      	bmi.n	80a0534 <_ZN3DHT4readEv+0x80>
 80a0520:	488e      	ldr	r0, [pc, #568]	; (80a075c <_ZN3DHT4readEv+0x2a8>)
 80a0522:	f7ff fdc2 	bl	80a00aa <__cxa_guard_acquire>
 80a0526:	b128      	cbz	r0, 80a0534 <_ZN3DHT4readEv+0x80>
 80a0528:	f000 fcd2 	bl	80a0ed0 <HAL_Pin_Map>
 80a052c:	6028      	str	r0, [r5, #0]
 80a052e:	488b      	ldr	r0, [pc, #556]	; (80a075c <_ZN3DHT4readEv+0x2a8>)
 80a0530:	f7ff fdc0 	bl	80a00b4 <__cxa_guard_release>
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRL = fastPinGetPinmap()[_pin].gpio_pin;
 80a0534:	682b      	ldr	r3, [r5, #0]
 80a0536:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 80a053a:	59db      	ldr	r3, [r3, r7]
	delay(250);
 80a053c:	20fa      	movs	r0, #250	; 0xfa
 80a053e:	831a      	strh	r2, [r3, #24]
 80a0540:	f000 fefc 	bl	80a133c <delay>

// now pull it low for ~20 milliseconds
	pinMode(_pin, OUTPUT);
 80a0544:	2101      	movs	r1, #1
 80a0546:	79a0      	ldrb	r0, [r4, #6]
 80a0548:	f001 ff74 	bl	80a2434 <pinMode>
	pinResetFast(_pin);
 80a054c:	79a7      	ldrb	r7, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a054e:	7833      	ldrb	r3, [r6, #0]
 80a0550:	f3bf 8f5b 	dmb	ish
 80a0554:	07da      	lsls	r2, r3, #31
 80a0556:	d409      	bmi.n	80a056c <_ZN3DHT4readEv+0xb8>
 80a0558:	4880      	ldr	r0, [pc, #512]	; (80a075c <_ZN3DHT4readEv+0x2a8>)
 80a055a:	f7ff fda6 	bl	80a00aa <__cxa_guard_acquire>
 80a055e:	b128      	cbz	r0, 80a056c <_ZN3DHT4readEv+0xb8>
 80a0560:	f000 fcb6 	bl	80a0ed0 <HAL_Pin_Map>
 80a0564:	6028      	str	r0, [r5, #0]
 80a0566:	487d      	ldr	r0, [pc, #500]	; (80a075c <_ZN3DHT4readEv+0x2a8>)
 80a0568:	f7ff fda4 	bl	80a00b4 <__cxa_guard_release>
}

inline void pinResetFast(pin_t _pin)
{
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRH = fastPinGetPinmap()[_pin].gpio_pin;
 80a056c:	231c      	movs	r3, #28
 80a056e:	435f      	muls	r7, r3
 80a0570:	682b      	ldr	r3, [r5, #0]
 80a0572:	eb03 0807 	add.w	r8, r3, r7
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a0576:	7833      	ldrb	r3, [r6, #0]
 80a0578:	f3bf 8f5b 	dmb	ish
 80a057c:	07db      	lsls	r3, r3, #31
 80a057e:	d409      	bmi.n	80a0594 <_ZN3DHT4readEv+0xe0>
 80a0580:	4876      	ldr	r0, [pc, #472]	; (80a075c <_ZN3DHT4readEv+0x2a8>)
 80a0582:	f7ff fd92 	bl	80a00aa <__cxa_guard_acquire>
 80a0586:	b128      	cbz	r0, 80a0594 <_ZN3DHT4readEv+0xe0>
 80a0588:	f000 fca2 	bl	80a0ed0 <HAL_Pin_Map>
 80a058c:	6028      	str	r0, [r5, #0]
 80a058e:	4873      	ldr	r0, [pc, #460]	; (80a075c <_ZN3DHT4readEv+0x2a8>)
 80a0590:	f7ff fd90 	bl	80a00b4 <__cxa_guard_release>
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRH = fastPinGetPinmap()[_pin].gpio_pin;
 80a0594:	682b      	ldr	r3, [r5, #0]
 80a0596:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 80a059a:	59db      	ldr	r3, [r3, r7]
	delay(20);
 80a059c:	2014      	movs	r0, #20
 80a059e:	835a      	strh	r2, [r3, #26]
 80a05a0:	f000 fecc 	bl	80a133c <delay>
	noInterrupts();
 80a05a4:	f000 ff0c 	bl	80a13c0 <_Z12noInterruptsv>
	pinSetFast(_pin);
 80a05a8:	79a7      	ldrb	r7, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a05aa:	7833      	ldrb	r3, [r6, #0]
 80a05ac:	f3bf 8f5b 	dmb	ish
 80a05b0:	07d8      	lsls	r0, r3, #31
 80a05b2:	d409      	bmi.n	80a05c8 <_ZN3DHT4readEv+0x114>
 80a05b4:	4869      	ldr	r0, [pc, #420]	; (80a075c <_ZN3DHT4readEv+0x2a8>)
 80a05b6:	f7ff fd78 	bl	80a00aa <__cxa_guard_acquire>
 80a05ba:	b128      	cbz	r0, 80a05c8 <_ZN3DHT4readEv+0x114>
 80a05bc:	f000 fc88 	bl	80a0ed0 <HAL_Pin_Map>
 80a05c0:	6028      	str	r0, [r5, #0]
 80a05c2:	4866      	ldr	r0, [pc, #408]	; (80a075c <_ZN3DHT4readEv+0x2a8>)
 80a05c4:	f7ff fd76 	bl	80a00b4 <__cxa_guard_release>
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRL = fastPinGetPinmap()[_pin].gpio_pin;
 80a05c8:	231c      	movs	r3, #28
 80a05ca:	435f      	muls	r7, r3
 80a05cc:	682b      	ldr	r3, [r5, #0]
 80a05ce:	eb03 0807 	add.w	r8, r3, r7
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a05d2:	7833      	ldrb	r3, [r6, #0]
 80a05d4:	f3bf 8f5b 	dmb	ish
 80a05d8:	07d9      	lsls	r1, r3, #31
 80a05da:	d409      	bmi.n	80a05f0 <_ZN3DHT4readEv+0x13c>
 80a05dc:	485f      	ldr	r0, [pc, #380]	; (80a075c <_ZN3DHT4readEv+0x2a8>)
 80a05de:	f7ff fd64 	bl	80a00aa <__cxa_guard_acquire>
 80a05e2:	b128      	cbz	r0, 80a05f0 <_ZN3DHT4readEv+0x13c>
 80a05e4:	f000 fc74 	bl	80a0ed0 <HAL_Pin_Map>
 80a05e8:	6028      	str	r0, [r5, #0]
 80a05ea:	485c      	ldr	r0, [pc, #368]	; (80a075c <_ZN3DHT4readEv+0x2a8>)
 80a05ec:	f7ff fd62 	bl	80a00b4 <__cxa_guard_release>
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRL = fastPinGetPinmap()[_pin].gpio_pin;
 80a05f0:	682b      	ldr	r3, [r5, #0]
 80a05f2:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 80a05f6:	59db      	ldr	r3, [r3, r7]
	delayMicroseconds(40);
	pinMode(_pin, INPUT);

// read in timings
	for ( i=0; i< MAXTIMINGS; i++) {
 80a05f8:	2700      	movs	r7, #0
 80a05fa:	831a      	strh	r2, [r3, #24]
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a05fc:	2028      	movs	r0, #40	; 0x28
 80a05fe:	f000 fc47 	bl	80a0e90 <HAL_Delay_Microseconds>
	pinMode(_pin, INPUT);
 80a0602:	2100      	movs	r1, #0
 80a0604:	79a0      	ldrb	r0, [r4, #6]
 80a0606:	f001 ff15 	bl	80a2434 <pinMode>
	uint8_t laststate = HIGH;
 80a060a:	2301      	movs	r3, #1
	uint8_t j = 0, i;
 80a060c:	46ba      	mov	sl, r7
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a060e:	f8df 814c 	ldr.w	r8, [pc, #332]	; 80a075c <_ZN3DHT4readEv+0x2a8>
	uint8_t laststate = HIGH;
 80a0612:	9300      	str	r3, [sp, #0]
		counter = 0;
 80a0614:	f04f 0900 	mov.w	r9, #0
		while (pinReadFast(_pin) == laststate) {
 80a0618:	f894 b006 	ldrb.w	fp, [r4, #6]
 80a061c:	7833      	ldrb	r3, [r6, #0]
 80a061e:	f3bf 8f5b 	dmb	ish
 80a0622:	07da      	lsls	r2, r3, #31
 80a0624:	d409      	bmi.n	80a063a <_ZN3DHT4readEv+0x186>
 80a0626:	4640      	mov	r0, r8
 80a0628:	f7ff fd3f 	bl	80a00aa <__cxa_guard_acquire>
 80a062c:	b128      	cbz	r0, 80a063a <_ZN3DHT4readEv+0x186>
 80a062e:	f000 fc4f 	bl	80a0ed0 <HAL_Pin_Map>
 80a0632:	6028      	str	r0, [r5, #0]
 80a0634:	4640      	mov	r0, r8
 80a0636:	f7ff fd3d 	bl	80a00b4 <__cxa_guard_release>
}

inline int32_t pinReadFast(pin_t _pin)
{
	return ((fastPinGetPinmap()[_pin].gpio_peripheral->IDR & fastPinGetPinmap()[_pin].gpio_pin) == 0 ? LOW : HIGH);
 80a063a:	231c      	movs	r3, #28
 80a063c:	fb03 fb0b 	mul.w	fp, r3, fp
 80a0640:	682b      	ldr	r3, [r5, #0]
 80a0642:	f853 300b 	ldr.w	r3, [r3, fp]
 80a0646:	691b      	ldr	r3, [r3, #16]
 80a0648:	9301      	str	r3, [sp, #4]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a064a:	7833      	ldrb	r3, [r6, #0]
 80a064c:	f3bf 8f5b 	dmb	ish
 80a0650:	07db      	lsls	r3, r3, #31
 80a0652:	d409      	bmi.n	80a0668 <_ZN3DHT4readEv+0x1b4>
 80a0654:	4640      	mov	r0, r8
 80a0656:	f7ff fd28 	bl	80a00aa <__cxa_guard_acquire>
 80a065a:	b128      	cbz	r0, 80a0668 <_ZN3DHT4readEv+0x1b4>
 80a065c:	f000 fc38 	bl	80a0ed0 <HAL_Pin_Map>
 80a0660:	6028      	str	r0, [r5, #0]
 80a0662:	4640      	mov	r0, r8
 80a0664:	f7ff fd26 	bl	80a00b4 <__cxa_guard_release>
	return ((fastPinGetPinmap()[_pin].gpio_peripheral->IDR & fastPinGetPinmap()[_pin].gpio_pin) == 0 ? LOW : HIGH);
 80a0668:	682b      	ldr	r3, [r5, #0]
 80a066a:	9a01      	ldr	r2, [sp, #4]
 80a066c:	445b      	add	r3, fp
 80a066e:	889b      	ldrh	r3, [r3, #4]
 80a0670:	4213      	tst	r3, r2
 80a0672:	bf14      	ite	ne
 80a0674:	2301      	movne	r3, #1
 80a0676:	2300      	moveq	r3, #0
 80a0678:	9a00      	ldr	r2, [sp, #0]
 80a067a:	4293      	cmp	r3, r2
 80a067c:	d109      	bne.n	80a0692 <_ZN3DHT4readEv+0x1de>
			counter++;
 80a067e:	f109 0901 	add.w	r9, r9, #1
 80a0682:	2001      	movs	r0, #1
 80a0684:	fa5f f989 	uxtb.w	r9, r9
 80a0688:	f000 fc02 	bl	80a0e90 <HAL_Delay_Microseconds>
			delayMicroseconds(1);
			if (counter == 255) {
 80a068c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80a0690:	d1c2      	bne.n	80a0618 <_ZN3DHT4readEv+0x164>
				break;
			}
		}
		laststate = pinReadFast(_pin);
 80a0692:	f894 b006 	ldrb.w	fp, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a0696:	7833      	ldrb	r3, [r6, #0]
 80a0698:	f3bf 8f5b 	dmb	ish
 80a069c:	07d8      	lsls	r0, r3, #31
 80a069e:	d409      	bmi.n	80a06b4 <_ZN3DHT4readEv+0x200>
 80a06a0:	4640      	mov	r0, r8
 80a06a2:	f7ff fd02 	bl	80a00aa <__cxa_guard_acquire>
 80a06a6:	b128      	cbz	r0, 80a06b4 <_ZN3DHT4readEv+0x200>
 80a06a8:	f000 fc12 	bl	80a0ed0 <HAL_Pin_Map>
 80a06ac:	6028      	str	r0, [r5, #0]
 80a06ae:	4640      	mov	r0, r8
 80a06b0:	f7ff fd00 	bl	80a00b4 <__cxa_guard_release>
	return ((fastPinGetPinmap()[_pin].gpio_peripheral->IDR & fastPinGetPinmap()[_pin].gpio_pin) == 0 ? LOW : HIGH);
 80a06b4:	231c      	movs	r3, #28
 80a06b6:	fb03 fb0b 	mul.w	fp, r3, fp
 80a06ba:	682b      	ldr	r3, [r5, #0]
 80a06bc:	f853 300b 	ldr.w	r3, [r3, fp]
 80a06c0:	691b      	ldr	r3, [r3, #16]
 80a06c2:	9300      	str	r3, [sp, #0]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a06c4:	7833      	ldrb	r3, [r6, #0]
 80a06c6:	f3bf 8f5b 	dmb	ish
 80a06ca:	07d9      	lsls	r1, r3, #31
 80a06cc:	d409      	bmi.n	80a06e2 <_ZN3DHT4readEv+0x22e>
 80a06ce:	4640      	mov	r0, r8
 80a06d0:	f7ff fceb 	bl	80a00aa <__cxa_guard_acquire>
 80a06d4:	b128      	cbz	r0, 80a06e2 <_ZN3DHT4readEv+0x22e>
 80a06d6:	f000 fbfb 	bl	80a0ed0 <HAL_Pin_Map>
 80a06da:	6028      	str	r0, [r5, #0]
 80a06dc:	4640      	mov	r0, r8
 80a06de:	f7ff fce9 	bl	80a00b4 <__cxa_guard_release>
	return ((fastPinGetPinmap()[_pin].gpio_peripheral->IDR & fastPinGetPinmap()[_pin].gpio_pin) == 0 ? LOW : HIGH);
 80a06e2:	682b      	ldr	r3, [r5, #0]
 80a06e4:	9a00      	ldr	r2, [sp, #0]
 80a06e6:	445b      	add	r3, fp
 80a06e8:	889b      	ldrh	r3, [r3, #4]
 80a06ea:	4213      	tst	r3, r2
 80a06ec:	bf14      	ite	ne
 80a06ee:	2301      	movne	r3, #1
 80a06f0:	2300      	moveq	r3, #0

		if (counter == 255) break;
 80a06f2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
		laststate = pinReadFast(_pin);
 80a06f6:	9300      	str	r3, [sp, #0]
		if (counter == 255) break;
 80a06f8:	d018      	beq.n	80a072c <_ZN3DHT4readEv+0x278>

// ignore first 3 transitions
		if ((i >= 4) && (i%2 == 0)) {
 80a06fa:	2f03      	cmp	r7, #3
 80a06fc:	d911      	bls.n	80a0722 <_ZN3DHT4readEv+0x26e>
 80a06fe:	07fa      	lsls	r2, r7, #31
 80a0700:	d40f      	bmi.n	80a0722 <_ZN3DHT4readEv+0x26e>
// shove each bit into the storage bytes
			data[j/8] <<= 1;
 80a0702:	ea4f 02da 	mov.w	r2, sl, lsr #3
 80a0706:	5ca3      	ldrb	r3, [r4, r2]
			if (counter > _count)
				data[j/8] |= 1;
			j++;
 80a0708:	f10a 0a01 	add.w	sl, sl, #1
			data[j/8] <<= 1;
 80a070c:	005b      	lsls	r3, r3, #1
 80a070e:	b2db      	uxtb	r3, r3
 80a0710:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
 80a0712:	7a21      	ldrb	r1, [r4, #8]
			j++;
 80a0714:	fa5f fa8a 	uxtb.w	sl, sl
			if (counter > _count)
 80a0718:	4549      	cmp	r1, r9
				data[j/8] |= 1;
 80a071a:	bf3c      	itt	cc
 80a071c:	f043 0301 	orrcc.w	r3, r3, #1
 80a0720:	54a3      	strbcc	r3, [r4, r2]
	for ( i=0; i< MAXTIMINGS; i++) {
 80a0722:	3701      	adds	r7, #1
 80a0724:	b2ff      	uxtb	r7, r7
 80a0726:	2f55      	cmp	r7, #85	; 0x55
 80a0728:	f47f af74 	bne.w	80a0614 <_ZN3DHT4readEv+0x160>
		}
	}

	interrupts();
 80a072c:	f000 fe4a 	bl	80a13c4 <_Z10interruptsv>
	Serial.print(data[4], HEX); Serial.print(" =? ");
	Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
*/

// check we read 40 bits and that the checksum matches
	if ((j >= 40) &&
 80a0730:	f1ba 0f27 	cmp.w	sl, #39	; 0x27
 80a0734:	d910      	bls.n	80a0758 <_ZN3DHT4readEv+0x2a4>
	   (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
 80a0736:	7863      	ldrb	r3, [r4, #1]
 80a0738:	7820      	ldrb	r0, [r4, #0]
 80a073a:	4418      	add	r0, r3
 80a073c:	78a3      	ldrb	r3, [r4, #2]
 80a073e:	4418      	add	r0, r3
 80a0740:	78e3      	ldrb	r3, [r4, #3]
 80a0742:	4418      	add	r0, r3
 80a0744:	7923      	ldrb	r3, [r4, #4]
 80a0746:	b2c0      	uxtb	r0, r0
	if ((j >= 40) &&
 80a0748:	1ac3      	subs	r3, r0, r3
 80a074a:	4258      	negs	r0, r3
 80a074c:	4158      	adcs	r0, r3
		return true;
	}

	return false;

}
 80a074e:	b003      	add	sp, #12
 80a0750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return true; // return last correct measurement
 80a0754:	2001      	movs	r0, #1
 80a0756:	e7fa      	b.n	80a074e <_ZN3DHT4readEv+0x29a>
	return false;
 80a0758:	2000      	movs	r0, #0
 80a075a:	e7f8      	b.n	80a074e <_ZN3DHT4readEv+0x29a>
 80a075c:	200000e8 	.word	0x200000e8
 80a0760:	200000ec 	.word	0x200000ec

080a0764 <_ZN3DHT15readTemperatureEv>:
float DHT::readTemperature() {
 80a0764:	b570      	push	{r4, r5, r6, lr}
 80a0766:	4604      	mov	r4, r0
	if (read()) {
 80a0768:	f7ff fea4 	bl	80a04b4 <_ZN3DHT4readEv>
 80a076c:	b308      	cbz	r0, 80a07b2 <_ZN3DHT15readTemperatureEv+0x4e>
		switch (_type) {
 80a076e:	79e3      	ldrb	r3, [r4, #7]
 80a0770:	2b0b      	cmp	r3, #11
 80a0772:	d01a      	beq.n	80a07aa <_ZN3DHT15readTemperatureEv+0x46>
 80a0774:	3b15      	subs	r3, #21
 80a0776:	2b01      	cmp	r3, #1
 80a0778:	d81b      	bhi.n	80a07b2 <_ZN3DHT15readTemperatureEv+0x4e>
				f = data[2] & 0x7F;
 80a077a:	78a6      	ldrb	r6, [r4, #2]
 80a077c:	f006 007f 	and.w	r0, r6, #127	; 0x7f
 80a0780:	f002 fc22 	bl	80a2fc8 <__aeabi_i2f>
				f *= 256;
 80a0784:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80a0788:	f002 fc72 	bl	80a3070 <__aeabi_fmul>
 80a078c:	4605      	mov	r5, r0
				f += data[3];
 80a078e:	78e0      	ldrb	r0, [r4, #3]
 80a0790:	f002 fc1a 	bl	80a2fc8 <__aeabi_i2f>
 80a0794:	4629      	mov	r1, r5
 80a0796:	f002 fb63 	bl	80a2e60 <__addsf3>
				f /= 10;
 80a079a:	4907      	ldr	r1, [pc, #28]	; (80a07b8 <_ZN3DHT15readTemperatureEv+0x54>)
 80a079c:	f002 fd1c 	bl	80a31d8 <__aeabi_fdiv>
				if (data[2] & 0x80)
 80a07a0:	0633      	lsls	r3, r6, #24
 80a07a2:	d505      	bpl.n	80a07b0 <_ZN3DHT15readTemperatureEv+0x4c>
					f *= -1;
 80a07a4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80a07a8:	e002      	b.n	80a07b0 <_ZN3DHT15readTemperatureEv+0x4c>
				f = data[2];
 80a07aa:	78a0      	ldrb	r0, [r4, #2]
 80a07ac:	f002 fc08 	bl	80a2fc0 <__aeabi_ui2f>
}
 80a07b0:	bd70      	pop	{r4, r5, r6, pc}
		switch (_type) {
 80a07b2:	4802      	ldr	r0, [pc, #8]	; (80a07bc <_ZN3DHT15readTemperatureEv+0x58>)
 80a07b4:	e7fc      	b.n	80a07b0 <_ZN3DHT15readTemperatureEv+0x4c>
 80a07b6:	bf00      	nop
 80a07b8:	41200000 	.word	0x41200000
 80a07bc:	7fc00000 	.word	0x7fc00000

080a07c0 <_ZN3DHT14getTempCelciusEv>:
	return readTemperature();
 80a07c0:	f7ff bfd0 	b.w	80a0764 <_ZN3DHT15readTemperatureEv>

080a07c4 <_ZN3DHT16getTempFarenheitEv>:
float DHT::getTempFarenheit() {
 80a07c4:	b508      	push	{r3, lr}
	return convertCtoF(readTemperature());
 80a07c6:	f7ff ffcd 	bl	80a0764 <_ZN3DHT15readTemperatureEv>
	return c * 9 / 5 + 32;
 80a07ca:	4905      	ldr	r1, [pc, #20]	; (80a07e0 <_ZN3DHT16getTempFarenheitEv+0x1c>)
 80a07cc:	f002 fc50 	bl	80a3070 <__aeabi_fmul>
 80a07d0:	4904      	ldr	r1, [pc, #16]	; (80a07e4 <_ZN3DHT16getTempFarenheitEv+0x20>)
 80a07d2:	f002 fd01 	bl	80a31d8 <__aeabi_fdiv>
 80a07d6:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 80a07da:	f002 fb41 	bl	80a2e60 <__addsf3>
}
 80a07de:	bd08      	pop	{r3, pc}
 80a07e0:	41100000 	.word	0x41100000
 80a07e4:	40a00000 	.word	0x40a00000

080a07e8 <_ZN3DHT12readHumidityEv>:
float DHT::readHumidity(void) {
 80a07e8:	b538      	push	{r3, r4, r5, lr}
 80a07ea:	4604      	mov	r4, r0
	if (read()) {
 80a07ec:	f7ff fe62 	bl	80a04b4 <_ZN3DHT4readEv>
 80a07f0:	b1d8      	cbz	r0, 80a082a <_ZN3DHT12readHumidityEv+0x42>
		switch (_type) {
 80a07f2:	79e3      	ldrb	r3, [r4, #7]
 80a07f4:	2b0b      	cmp	r3, #11
 80a07f6:	d014      	beq.n	80a0822 <_ZN3DHT12readHumidityEv+0x3a>
 80a07f8:	3b15      	subs	r3, #21
 80a07fa:	2b01      	cmp	r3, #1
 80a07fc:	d815      	bhi.n	80a082a <_ZN3DHT12readHumidityEv+0x42>
				f = data[0];
 80a07fe:	7820      	ldrb	r0, [r4, #0]
 80a0800:	f002 fbde 	bl	80a2fc0 <__aeabi_ui2f>
				f *= 256;
 80a0804:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80a0808:	f002 fc32 	bl	80a3070 <__aeabi_fmul>
 80a080c:	4605      	mov	r5, r0
				f += data[1];
 80a080e:	7860      	ldrb	r0, [r4, #1]
 80a0810:	f002 fbda 	bl	80a2fc8 <__aeabi_i2f>
 80a0814:	4629      	mov	r1, r5
 80a0816:	f002 fb23 	bl	80a2e60 <__addsf3>
				f /= 10;
 80a081a:	4905      	ldr	r1, [pc, #20]	; (80a0830 <_ZN3DHT12readHumidityEv+0x48>)
 80a081c:	f002 fcdc 	bl	80a31d8 <__aeabi_fdiv>
}
 80a0820:	bd38      	pop	{r3, r4, r5, pc}
				f = data[0];
 80a0822:	7820      	ldrb	r0, [r4, #0]
 80a0824:	f002 fbcc 	bl	80a2fc0 <__aeabi_ui2f>
				return f;
 80a0828:	e7fa      	b.n	80a0820 <_ZN3DHT12readHumidityEv+0x38>
		switch (_type) {
 80a082a:	4802      	ldr	r0, [pc, #8]	; (80a0834 <_ZN3DHT12readHumidityEv+0x4c>)
 80a082c:	e7f8      	b.n	80a0820 <_ZN3DHT12readHumidityEv+0x38>
 80a082e:	bf00      	nop
 80a0830:	41200000 	.word	0x41200000
 80a0834:	7fc00000 	.word	0x7fc00000

080a0838 <_ZN3DHT11getHumidityEv>:
	return readHumidity();
 80a0838:	f7ff bfd6 	b.w	80a07e8 <_ZN3DHT12readHumidityEv>

080a083c <_ZN5CDoorC1Ev>:
#include "door.h"

CDoor::CDoor() {
 80a083c:	b538      	push	{r3, r4, r5, lr}
 80a083e:	f100 0524 	add.w	r5, r0, #36	; 0x24
 80a0842:	4604      	mov	r4, r0
 80a0844:	490b      	ldr	r1, [pc, #44]	; (80a0874 <_ZN5CDoorC1Ev+0x38>)
 80a0846:	4628      	mov	r0, r5
 80a0848:	f001 fa4d 	bl	80a1ce6 <_ZN6StringC1EPKc>
  state_D0 = CDoor::S_CLOSED;
 80a084c:	2301      	movs	r3, #1
 80a084e:	7023      	strb	r3, [r4, #0]
  doorProximity = RGB_BRIGHTNESS_DEAULT;
 80a0850:	2380      	movs	r3, #128	; 0x80
  sensorMax = LIGHT_SENSOR_MAX;
  sensorMin = LIGHT_SENSOR_MIN;
 80a0852:	f640 11c4 	movw	r1, #2500	; 0x9c4
  doorProximity = RGB_BRIGHTNESS_DEAULT;
 80a0856:	6063      	str	r3, [r4, #4]
  sensorMin = LIGHT_SENSOR_MIN;
 80a0858:	f44f 73fa 	mov.w	r3, #500	; 0x1f4

  statusStr = "{}";
 80a085c:	4628      	mov	r0, r5
  sensorMin = LIGHT_SENSOR_MIN;
 80a085e:	e9c4 1303 	strd	r1, r3, [r4, #12]
  statusStr = "{}";
 80a0862:	4905      	ldr	r1, [pc, #20]	; (80a0878 <_ZN5CDoorC1Ev+0x3c>)
 80a0864:	f001 fa91 	bl	80a1d8a <_ZN6StringaSEPKc>
    state_D0, doorProximity, sensorVal
  );
}

void CDoor::resetCmd() {
  cmd.DoorProximity = INVALID_CMD;
 80a0868:	4b04      	ldr	r3, [pc, #16]	; (80a087c <_ZN5CDoorC1Ev+0x40>)
}
 80a086a:	4620      	mov	r0, r4
  cmd.Status = INVALID_CMD;
 80a086c:	e9c4 3307 	strd	r3, r3, [r4, #28]
}
 80a0870:	bd38      	pop	{r3, r4, r5, pc}
 80a0872:	bf00      	nop
 80a0874:	080a375f 	.word	0x080a375f
 80a0878:	080a367f 	.word	0x080a367f
 80a087c:	fffe7961 	.word	0xfffe7961

080a0880 <_ZN5CDoor13readSensorValEv>:
void CDoor::readSensorVal() {
 80a0880:	b510      	push	{r4, lr}
 80a0882:	4604      	mov	r4, r0
  sensorVal = analogRead(DOOR_SENSOR);
 80a0884:	200b      	movs	r0, #11
 80a0886:	f001 fdff 	bl	80a2488 <analogRead>
 80a088a:	60a0      	str	r0, [r4, #8]
}
 80a088c:	bd10      	pop	{r4, pc}
	...

080a0890 <_ZN5CDoor15createStatusStrEv>:
void CDoor::createStatusStr() {
 80a0890:	b510      	push	{r4, lr}
 80a0892:	4604      	mov	r4, r0
  statusStr = String::format("{\"Close\":%d, \"doorProximity\":%.2f, \"Sensor\":%.2f}",
 80a0894:	6883      	ldr	r3, [r0, #8]
void CDoor::createStatusStr() {
 80a0896:	b086      	sub	sp, #24
  statusStr = String::format("{\"Close\":%d, \"doorProximity\":%.2f, \"Sensor\":%.2f}",
 80a0898:	9300      	str	r3, [sp, #0]
 80a089a:	6843      	ldr	r3, [r0, #4]
 80a089c:	7802      	ldrb	r2, [r0, #0]
 80a089e:	4907      	ldr	r1, [pc, #28]	; (80a08bc <_ZN5CDoor15createStatusStrEv+0x2c>)
 80a08a0:	a802      	add	r0, sp, #8
 80a08a2:	f001 faaf 	bl	80a1e04 <_ZN6String6formatEPKcz>
  );
 80a08a6:	a902      	add	r1, sp, #8
 80a08a8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80a08ac:	f001 fa65 	bl	80a1d7a <_ZN6StringaSEOS_>
 80a08b0:	a802      	add	r0, sp, #8
 80a08b2:	f001 f9ce 	bl	80a1c52 <_ZN6StringD1Ev>
}
 80a08b6:	b006      	add	sp, #24
 80a08b8:	bd10      	pop	{r4, pc}
 80a08ba:	bf00      	nop
 80a08bc:	080a3682 	.word	0x080a3682

080a08c0 <_ZN5CDoor7executeEv>:
void CDoor::execute() {
 80a08c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  switch (state_D0) {
 80a08c4:	7806      	ldrb	r6, [r0, #0]
void CDoor::execute() {
 80a08c6:	4604      	mov	r4, r0
  switch (state_D0) {
 80a08c8:	2e00      	cmp	r6, #0
 80a08ca:	d03a      	beq.n	80a0942 <_ZN5CDoor7executeEv+0x82>
 80a08cc:	2e01      	cmp	r6, #1
 80a08ce:	d130      	bne.n	80a0932 <_ZN5CDoor7executeEv+0x72>
      readSensorVal();
 80a08d0:	f7ff ffd6 	bl	80a0880 <_ZN5CDoor13readSensorValEv>
      if (curSensorVal < sensorMin) curSensorVal = sensorMin;
 80a08d4:	6925      	ldr	r5, [r4, #16]
 80a08d6:	68a0      	ldr	r0, [r4, #8]
      if (curSensorVal > sensorMax) curSensorVal = sensorMax;
 80a08d8:	68e7      	ldr	r7, [r4, #12]
 80a08da:	42a8      	cmp	r0, r5
 80a08dc:	bfb8      	it	lt
 80a08de:	4628      	movlt	r0, r5
      double amountOfProximity = (double)(curSensorVal-sensorMin) / (double)(sensorMax-sensorMin);
 80a08e0:	4287      	cmp	r7, r0
 80a08e2:	bfd4      	ite	le
 80a08e4:	ebc5 0007 	rsble	r0, r5, r7
 80a08e8:	ebc5 0000 	rsbgt	r0, r5, r0
 80a08ec:	f001 ff86 	bl	80a27fc <__aeabi_i2d>
 80a08f0:	4680      	mov	r8, r0
 80a08f2:	1b78      	subs	r0, r7, r5
 80a08f4:	4689      	mov	r9, r1
 80a08f6:	f001 ff81 	bl	80a27fc <__aeabi_i2d>
 80a08fa:	4602      	mov	r2, r0
 80a08fc:	460b      	mov	r3, r1
 80a08fe:	4640      	mov	r0, r8
 80a0900:	4649      	mov	r1, r9
 80a0902:	f002 f90f 	bl	80a2b24 <__aeabi_ddiv>
      if (amountOfProximity < 0.5) {
 80a0906:	2200      	movs	r2, #0
 80a0908:	4b30      	ldr	r3, [pc, #192]	; (80a09cc <_ZN5CDoor7executeEv+0x10c>)
 80a090a:	f002 fa53 	bl	80a2db4 <__aeabi_dcmplt>
        digitalWrite(LED2, HIGH);
 80a090e:	4631      	mov	r1, r6
      if (amountOfProximity < 0.5) {
 80a0910:	4605      	mov	r5, r0
 80a0912:	b140      	cbz	r0, 80a0926 <_ZN5CDoor7executeEv+0x66>
        digitalWrite(LED2, HIGH);
 80a0914:	2007      	movs	r0, #7
 80a0916:	f001 fd9e 	bl	80a2456 <digitalWrite>
        oldTime = Time.now();
 80a091a:	f001 fad7 	bl	80a1ecc <_ZN9TimeClass3nowEv>
        state_D0 = CDoor::S_OPEN;
 80a091e:	2300      	movs	r3, #0
        oldTime = Time.now();
 80a0920:	6160      	str	r0, [r4, #20]
        state_D0 = CDoor::S_CLOSED;
 80a0922:	7023      	strb	r3, [r4, #0]
 80a0924:	e005      	b.n	80a0932 <_ZN5CDoor7executeEv+0x72>
        RGB.brightness(0);
 80a0926:	f001 f96f 	bl	80a1c08 <_ZN8RGBClass10brightnessEhb>
        digitalWrite(LED2, LOW);
 80a092a:	4629      	mov	r1, r5
        digitalWrite(LED2, HIGH);
 80a092c:	2007      	movs	r0, #7
 80a092e:	f001 fd92 	bl	80a2456 <digitalWrite>
  cmd.DoorProximity = INVALID_CMD;
 80a0932:	4b27      	ldr	r3, [pc, #156]	; (80a09d0 <_ZN5CDoor7executeEv+0x110>)
  createStatusStr();
 80a0934:	4620      	mov	r0, r4
  cmd.Status = INVALID_CMD;
 80a0936:	e9c4 3307 	strd	r3, r3, [r4, #28]
}
 80a093a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  createStatusStr();
 80a093e:	f7ff bfa7 	b.w	80a0890 <_ZN5CDoor15createStatusStrEv>
      readSensorVal();
 80a0942:	f7ff ff9d 	bl	80a0880 <_ZN5CDoor13readSensorValEv>
      if (curSensorVal < sensorMin) curSensorVal = sensorMin;
 80a0946:	6925      	ldr	r5, [r4, #16]
 80a0948:	68a0      	ldr	r0, [r4, #8]
      if (curSensorVal > sensorMax) curSensorVal = sensorMax;
 80a094a:	f8d4 800c 	ldr.w	r8, [r4, #12]
 80a094e:	42a8      	cmp	r0, r5
 80a0950:	bfb8      	it	lt
 80a0952:	4628      	movlt	r0, r5
      double amountOfProximity = (double)(curSensorVal-sensorMin) / (double)(sensorMax-sensorMin);
 80a0954:	4580      	cmp	r8, r0
 80a0956:	bfd4      	ite	le
 80a0958:	ebc5 0008 	rsble	r0, r5, r8
 80a095c:	ebc5 0000 	rsbgt	r0, r5, r0
 80a0960:	f001 ff4c 	bl	80a27fc <__aeabi_i2d>
 80a0964:	4606      	mov	r6, r0
 80a0966:	eba8 0005 	sub.w	r0, r8, r5
 80a096a:	460f      	mov	r7, r1
 80a096c:	f001 ff46 	bl	80a27fc <__aeabi_i2d>
 80a0970:	460b      	mov	r3, r1
 80a0972:	4602      	mov	r2, r0
 80a0974:	4639      	mov	r1, r7
 80a0976:	4630      	mov	r0, r6
 80a0978:	f002 f8d4 	bl	80a2b24 <__aeabi_ddiv>
 80a097c:	460f      	mov	r7, r1
 80a097e:	4606      	mov	r6, r0
      doorProximity = amountOfProximity;
 80a0980:	f002 fa40 	bl	80a2e04 <__aeabi_d2iz>
 80a0984:	6060      	str	r0, [r4, #4]
      newTime = Time.now();
 80a0986:	f001 faa1 	bl	80a1ecc <_ZN9TimeClass3nowEv>
      if (newTime - oldTime > 10) {
 80a098a:	6963      	ldr	r3, [r4, #20]
      newTime = Time.now();
 80a098c:	61a0      	str	r0, [r4, #24]
      if (newTime - oldTime > 10) {
 80a098e:	1ac0      	subs	r0, r0, r3
 80a0990:	280a      	cmp	r0, #10
 80a0992:	dd09      	ble.n	80a09a8 <_ZN5CDoor7executeEv+0xe8>
        Serial.printf("{\"alert\": %d}", true);
 80a0994:	f001 fb96 	bl	80a20c4 <_Z16_fetch_usbserialv>
 80a0998:	2201      	movs	r2, #1
 80a099a:	490e      	ldr	r1, [pc, #56]	; (80a09d4 <_ZN5CDoor7executeEv+0x114>)
 80a099c:	f7ff fb8d 	bl	80a00ba <_ZN5Print6printfEPKcz>
        Serial.println();
 80a09a0:	f001 fb90 	bl	80a20c4 <_Z16_fetch_usbserialv>
 80a09a4:	f001 f8b3 	bl	80a1b0e <_ZN5Print7printlnEv>
      if (amountOfProximity < 0.5) {
 80a09a8:	4639      	mov	r1, r7
 80a09aa:	2200      	movs	r2, #0
 80a09ac:	4630      	mov	r0, r6
 80a09ae:	4b07      	ldr	r3, [pc, #28]	; (80a09cc <_ZN5CDoor7executeEv+0x10c>)
 80a09b0:	f002 fa00 	bl	80a2db4 <__aeabi_dcmplt>
 80a09b4:	4601      	mov	r1, r0
 80a09b6:	b108      	cbz	r0, 80a09bc <_ZN5CDoor7executeEv+0xfc>
        digitalWrite(LED2, HIGH);
 80a09b8:	2101      	movs	r1, #1
 80a09ba:	e7b7      	b.n	80a092c <_ZN5CDoor7executeEv+0x6c>
        digitalWrite(LED2, LOW);
 80a09bc:	2007      	movs	r0, #7
 80a09be:	f001 fd4a 	bl	80a2456 <digitalWrite>
        oldTime = Time.now();
 80a09c2:	f001 fa83 	bl	80a1ecc <_ZN9TimeClass3nowEv>
        state_D0 = CDoor::S_CLOSED;
 80a09c6:	2301      	movs	r3, #1
        oldTime = Time.now();
 80a09c8:	6160      	str	r0, [r4, #20]
        state_D0 = CDoor::S_CLOSED;
 80a09ca:	e7aa      	b.n	80a0922 <_ZN5CDoor7executeEv+0x62>
 80a09cc:	3fe00000 	.word	0x3fe00000
 80a09d0:	fffe7961 	.word	0xfffe7961
 80a09d4:	080a36b4 	.word	0x080a36b4

080a09d8 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
 80a09d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a09da:	4604      	mov	r4, r0
    return JSONString(k_, d_);
 80a09dc:	68cd      	ldr	r5, [r1, #12]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a09de:	f851 3b04 	ldr.w	r3, [r1], #4
 80a09e2:	a801      	add	r0, sp, #4
 80a09e4:	9300      	str	r3, [sp, #0]
 80a09e6:	f7ff fbaf 	bl	80a0148 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80a09ea:	466a      	mov	r2, sp
 80a09ec:	4629      	mov	r1, r5
 80a09ee:	4620      	mov	r0, r4
 80a09f0:	f000 ff34 	bl	80a185c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 80a09f4:	a801      	add	r0, sp, #4
 80a09f6:	f7ff fb91 	bl	80a011c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a09fa:	4620      	mov	r0, r4
 80a09fc:	b003      	add	sp, #12
 80a09fe:	bd30      	pop	{r4, r5, pc}

080a0a00 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
 80a0a00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0a02:	4604      	mov	r4, r0
    return JSONValue(v_, d_);
 80a0a04:	690d      	ldr	r5, [r1, #16]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a0a06:	f851 3b04 	ldr.w	r3, [r1], #4
 80a0a0a:	a801      	add	r0, sp, #4
 80a0a0c:	9300      	str	r3, [sp, #0]
 80a0a0e:	f7ff fb9b 	bl	80a0148 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80a0a12:	466a      	mov	r2, sp
 80a0a14:	4629      	mov	r1, r5
 80a0a16:	4620      	mov	r0, r4
 80a0a18:	f000 fd9a 	bl	80a1550 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 80a0a1c:	a801      	add	r0, sp, #4
 80a0a1e:	f7ff fb7d 	bl	80a011c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a0a22:	4620      	mov	r0, r4
 80a0a24:	b003      	add	sp, #12
 80a0a26:	bd30      	pop	{r4, r5, pc}

080a0a28 <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE>:
void CDoor::cmdProcessing(JSONValue cmdJson) {
 80a0a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0a2c:	b08a      	sub	sp, #40	; 0x28
        JSONObjectIterator(value.t_, value.d_) {
 80a0a2e:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a0a30:	f851 3b04 	ldr.w	r3, [r1], #4
 80a0a34:	4604      	mov	r4, r0
 80a0a36:	a801      	add	r0, sp, #4
 80a0a38:	9300      	str	r3, [sp, #0]
 80a0a3a:	f7ff fb85 	bl	80a0148 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80a0a3e:	466a      	mov	r2, sp
 80a0a40:	4629      	mov	r1, r5
 80a0a42:	a804      	add	r0, sp, #16
 80a0a44:	f000 ff2e 	bl	80a18a4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 80a0a48:	a801      	add	r0, sp, #4
 80a0a4a:	f7ff fb67 	bl	80a011c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return strcmp(s_, str) == 0;
 80a0a4e:	4e32      	ldr	r6, [pc, #200]	; (80a0b18 <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0xf0>)
 80a0a50:	4f32      	ldr	r7, [pc, #200]	; (80a0b1c <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0xf4>)
 80a0a52:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80a0b24 <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0xfc>
  while (iter.next()) {
 80a0a56:	a804      	add	r0, sp, #16
 80a0a58:	f000 ff3c 	bl	80a18d4 <_ZN5spark18JSONObjectIterator4nextEv>
 80a0a5c:	2800      	cmp	r0, #0
 80a0a5e:	d055      	beq.n	80a0b0c <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0xe4>
    if (iter.name() == "min") {
 80a0a60:	4668      	mov	r0, sp
 80a0a62:	a904      	add	r1, sp, #16
 80a0a64:	f7ff ffb8 	bl	80a09d8 <_ZNK5spark18JSONObjectIterator4nameEv>
 80a0a68:	4631      	mov	r1, r6
 80a0a6a:	9802      	ldr	r0, [sp, #8]
 80a0a6c:	f002 fcc0 	bl	80a33f0 <strcmp>
 80a0a70:	4605      	mov	r5, r0
 80a0a72:	a801      	add	r0, sp, #4
 80a0a74:	f7ff fb52 	bl	80a011c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      sensorMin = iter.value().toInt();
 80a0a78:	4668      	mov	r0, sp
 80a0a7a:	a904      	add	r1, sp, #16
    if (iter.name() == "min") {
 80a0a7c:	b94d      	cbnz	r5, 80a0a92 <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0x6a>
      sensorMin = iter.value().toInt();
 80a0a7e:	f7ff ffbf 	bl	80a0a00 <_ZNK5spark18JSONObjectIterator5valueEv>
 80a0a82:	4668      	mov	r0, sp
 80a0a84:	f000 fdda 	bl	80a163c <_ZNK5spark9JSONValue5toIntEv>
 80a0a88:	6120      	str	r0, [r4, #16]
 80a0a8a:	a801      	add	r0, sp, #4
 80a0a8c:	f7ff fb46 	bl	80a011c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0a90:	e7e1      	b.n	80a0a56 <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0x2e>
    } else if (iter.name() == "max") {
 80a0a92:	f7ff ffa1 	bl	80a09d8 <_ZNK5spark18JSONObjectIterator4nameEv>
 80a0a96:	4639      	mov	r1, r7
 80a0a98:	9802      	ldr	r0, [sp, #8]
 80a0a9a:	f002 fca9 	bl	80a33f0 <strcmp>
 80a0a9e:	4605      	mov	r5, r0
 80a0aa0:	a801      	add	r0, sp, #4
 80a0aa2:	f7ff fb3b 	bl	80a011c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      sensorMax = iter.value().toInt();
 80a0aa6:	4668      	mov	r0, sp
 80a0aa8:	a904      	add	r1, sp, #16
    } else if (iter.name() == "max") {
 80a0aaa:	b935      	cbnz	r5, 80a0aba <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0x92>
      sensorMax = iter.value().toInt();
 80a0aac:	f7ff ffa8 	bl	80a0a00 <_ZNK5spark18JSONObjectIterator5valueEv>
 80a0ab0:	4668      	mov	r0, sp
 80a0ab2:	f000 fdc3 	bl	80a163c <_ZNK5spark9JSONValue5toIntEv>
 80a0ab6:	60e0      	str	r0, [r4, #12]
 80a0ab8:	e7e7      	b.n	80a0a8a <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0x62>
    } else if (iter.name() == "doorProximity") {
 80a0aba:	f7ff ff8d 	bl	80a09d8 <_ZNK5spark18JSONObjectIterator4nameEv>
 80a0abe:	4641      	mov	r1, r8
 80a0ac0:	9802      	ldr	r0, [sp, #8]
 80a0ac2:	f002 fc95 	bl	80a33f0 <strcmp>
 80a0ac6:	4605      	mov	r5, r0
 80a0ac8:	a801      	add	r0, sp, #4
 80a0aca:	f7ff fb27 	bl	80a011c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      cmd.DoorProximity = iter.value().toInt();
 80a0ace:	4668      	mov	r0, sp
 80a0ad0:	a904      	add	r1, sp, #16
    } else if (iter.name() == "doorProximity") {
 80a0ad2:	b935      	cbnz	r5, 80a0ae2 <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0xba>
      cmd.DoorProximity = iter.value().toInt();
 80a0ad4:	f7ff ff94 	bl	80a0a00 <_ZNK5spark18JSONObjectIterator5valueEv>
 80a0ad8:	4668      	mov	r0, sp
 80a0ada:	f000 fdaf 	bl	80a163c <_ZNK5spark9JSONValue5toIntEv>
 80a0ade:	6220      	str	r0, [r4, #32]
 80a0ae0:	e7d3      	b.n	80a0a8a <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0x62>
    } else if (iter.name() == "status") {
 80a0ae2:	f7ff ff79 	bl	80a09d8 <_ZNK5spark18JSONObjectIterator4nameEv>
 80a0ae6:	490e      	ldr	r1, [pc, #56]	; (80a0b20 <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0xf8>)
 80a0ae8:	9802      	ldr	r0, [sp, #8]
 80a0aea:	f002 fc81 	bl	80a33f0 <strcmp>
 80a0aee:	4605      	mov	r5, r0
 80a0af0:	a801      	add	r0, sp, #4
 80a0af2:	f7ff fb13 	bl	80a011c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0af6:	2d00      	cmp	r5, #0
 80a0af8:	d1ad      	bne.n	80a0a56 <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0x2e>
      cmd.Status = (int)iter.value().toBool();
 80a0afa:	4668      	mov	r0, sp
 80a0afc:	a904      	add	r1, sp, #16
 80a0afe:	f7ff ff7f 	bl	80a0a00 <_ZNK5spark18JSONObjectIterator5valueEv>
 80a0b02:	4668      	mov	r0, sp
 80a0b04:	f000 fd5c 	bl	80a15c0 <_ZNK5spark9JSONValue6toBoolEv>
 80a0b08:	61e0      	str	r0, [r4, #28]
 80a0b0a:	e7be      	b.n	80a0a8a <_ZN5CDoor13cmdProcessingEN5spark9JSONValueE+0x62>
 80a0b0c:	a805      	add	r0, sp, #20
 80a0b0e:	f7ff fb05 	bl	80a011c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a0b12:	b00a      	add	sp, #40	; 0x28
 80a0b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0b18:	080a36c2 	.word	0x080a36c2
 80a0b1c:	080a36c6 	.word	0x080a36c6
 80a0b20:	080a36d8 	.word	0x080a36d8
 80a0b24:	080a36ca 	.word	0x080a36ca

080a0b28 <_ZN11CSmartLightC1Ev>:
#include "smartlight.h"

CSmartLight::CSmartLight() {
 80a0b28:	b538      	push	{r3, r4, r5, lr}
 80a0b2a:	f100 0520 	add.w	r5, r0, #32
 80a0b2e:	4604      	mov	r4, r0
 80a0b30:	490c      	ldr	r1, [pc, #48]	; (80a0b64 <_ZN11CSmartLightC1Ev+0x3c>)
 80a0b32:	4628      	mov	r0, r5
 80a0b34:	f001 f8d7 	bl	80a1ce6 <_ZN6StringC1EPKc>
    state_L0 = CSmartLight::S_ON;
 80a0b38:	f240 1301 	movw	r3, #257	; 0x101
 80a0b3c:	8023      	strh	r3, [r4, #0]
    state_L1 = CSmartLight::S_AUTO;
    brightness = RGB_BRIGHTNESS_DEAULT;
 80a0b3e:	2380      	movs	r3, #128	; 0x80
    sensorMax = LIGHT_SENSOR_MAX;
    sensorMin = LIGHT_SENSOR_MIN;
 80a0b40:	f640 11c4 	movw	r1, #2500	; 0x9c4
    brightness = RGB_BRIGHTNESS_DEAULT;
 80a0b44:	6063      	str	r3, [r4, #4]
    sensorMin = LIGHT_SENSOR_MIN;
 80a0b46:	f44f 73fa 	mov.w	r3, #500	; 0x1f4

    statusStr = "{}";
 80a0b4a:	4628      	mov	r0, r5
    sensorMin = LIGHT_SENSOR_MIN;
 80a0b4c:	e9c4 1303 	strd	r1, r3, [r4, #12]
    statusStr = "{}";
 80a0b50:	4905      	ldr	r1, [pc, #20]	; (80a0b68 <_ZN11CSmartLightC1Ev+0x40>)
 80a0b52:	f001 f91a 	bl	80a1d8a <_ZN6StringaSEPKc>
    resetCmd();
    createStatusStr();
}

void CSmartLight::resetCmd() {
    cmd.On = INVALID_CMD;
 80a0b56:	4b05      	ldr	r3, [pc, #20]	; (80a0b6c <_ZN11CSmartLightC1Ev+0x44>)
}
 80a0b58:	4620      	mov	r0, r4
    cmd.Auto = INVALID_CMD;
 80a0b5a:	e9c4 3305 	strd	r3, r3, [r4, #20]
    cmd.Brightness = INVALID_CMD;
 80a0b5e:	61e3      	str	r3, [r4, #28]
}
 80a0b60:	bd38      	pop	{r3, r4, r5, pc}
 80a0b62:	bf00      	nop
 80a0b64:	080a375f 	.word	0x080a375f
 80a0b68:	080a367f 	.word	0x080a367f
 80a0b6c:	fffe7961 	.word	0xfffe7961

080a0b70 <_ZN11CSmartLight12turnOffLightEv>:
}

void CSmartLight::turnOffLight() {
 80a0b70:	b508      	push	{r3, lr}
    if (RGB.brightness() != 0) RGB.brightness(0);
 80a0b72:	f001 f857 	bl	80a1c24 <_ZN8RGBClass10brightnessEv>
 80a0b76:	b128      	cbz	r0, 80a0b84 <_ZN11CSmartLight12turnOffLightEv+0x14>
}
 80a0b78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (RGB.brightness() != 0) RGB.brightness(0);
 80a0b7c:	2101      	movs	r1, #1
 80a0b7e:	2000      	movs	r0, #0
 80a0b80:	f001 b842 	b.w	80a1c08 <_ZN8RGBClass10brightnessEhb>
}
 80a0b84:	bd08      	pop	{r3, pc}
	...

080a0b88 <_ZN11CSmartLight24updateBrightnessManuallyEi>:

// 0 <= val <= 100 (i.e., %)
void CSmartLight::updateBrightnessManually(int val) {
 80a0b88:	b538      	push	{r3, r4, r5, lr}
    if (val == INVALID_CMD) {
 80a0b8a:	4b13      	ldr	r3, [pc, #76]	; (80a0bd8 <_ZN11CSmartLight24updateBrightnessManuallyEi+0x50>)
void CSmartLight::updateBrightnessManually(int val) {
 80a0b8c:	4604      	mov	r4, r0
    if (val == INVALID_CMD) {
 80a0b8e:	4299      	cmp	r1, r3
void CSmartLight::updateBrightnessManually(int val) {
 80a0b90:	4608      	mov	r0, r1
    if (val == INVALID_CMD) {
 80a0b92:	d10a      	bne.n	80a0baa <_ZN11CSmartLight24updateBrightnessManuallyEi+0x22>
        if (brightness != RGB.brightness()) RGB.brightness(brightness);
 80a0b94:	6865      	ldr	r5, [r4, #4]
 80a0b96:	f001 f845 	bl	80a1c24 <_ZN8RGBClass10brightnessEv>
 80a0b9a:	4285      	cmp	r5, r0
 80a0b9c:	d016      	beq.n	80a0bcc <_ZN11CSmartLight24updateBrightnessManuallyEi+0x44>
 80a0b9e:	2101      	movs	r1, #1
 80a0ba0:	7920      	ldrb	r0, [r4, #4]
        return;
    }
    brightness = (int)((val/100.0)*RGB_BRIGHTNESS_MAX);
    RGB.brightness(brightness);
}
 80a0ba2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    RGB.brightness(brightness);
 80a0ba6:	f001 b82f 	b.w	80a1c08 <_ZN8RGBClass10brightnessEhb>
    brightness = (int)((val/100.0)*RGB_BRIGHTNESS_MAX);
 80a0baa:	f001 fe27 	bl	80a27fc <__aeabi_i2d>
 80a0bae:	2200      	movs	r2, #0
 80a0bb0:	4b0a      	ldr	r3, [pc, #40]	; (80a0bdc <_ZN11CSmartLight24updateBrightnessManuallyEi+0x54>)
 80a0bb2:	f001 ffb7 	bl	80a2b24 <__aeabi_ddiv>
 80a0bb6:	a306      	add	r3, pc, #24	; (adr r3, 80a0bd0 <_ZN11CSmartLight24updateBrightnessManuallyEi+0x48>)
 80a0bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0bbc:	f001 fe88 	bl	80a28d0 <__aeabi_dmul>
 80a0bc0:	f002 f920 	bl	80a2e04 <__aeabi_d2iz>
    RGB.brightness(brightness);
 80a0bc4:	2101      	movs	r1, #1
    brightness = (int)((val/100.0)*RGB_BRIGHTNESS_MAX);
 80a0bc6:	6060      	str	r0, [r4, #4]
    RGB.brightness(brightness);
 80a0bc8:	b2c0      	uxtb	r0, r0
 80a0bca:	e7ea      	b.n	80a0ba2 <_ZN11CSmartLight24updateBrightnessManuallyEi+0x1a>
}
 80a0bcc:	bd38      	pop	{r3, r4, r5, pc}
 80a0bce:	bf00      	nop
 80a0bd0:	00000000 	.word	0x00000000
 80a0bd4:	406fe000 	.word	0x406fe000
 80a0bd8:	fffe7961 	.word	0xfffe7961
 80a0bdc:	40590000 	.word	0x40590000

080a0be0 <_ZN11CSmartLight13readSensorValEv>:

    RGB.brightness(brightness);
}


void CSmartLight::readSensorVal() {
 80a0be0:	b510      	push	{r4, lr}
 80a0be2:	4604      	mov	r4, r0
    sensorVal = analogRead(LIGHT_SENSOR);
 80a0be4:	200a      	movs	r0, #10
 80a0be6:	f001 fc4f 	bl	80a2488 <analogRead>
 80a0bea:	60a0      	str	r0, [r4, #8]
}
 80a0bec:	bd10      	pop	{r4, pc}
	...

080a0bf0 <_ZN11CSmartLight29updataBrightnessAutomaticallyEv>:
void CSmartLight::updataBrightnessAutomatically() {
 80a0bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0bf4:	4604      	mov	r4, r0
    readSensorVal();
 80a0bf6:	f7ff fff3 	bl	80a0be0 <_ZN11CSmartLight13readSensorValEv>
    if (curSensorVal < sensorMin) curSensorVal = sensorMin;
 80a0bfa:	6925      	ldr	r5, [r4, #16]
 80a0bfc:	68a0      	ldr	r0, [r4, #8]
    if (curSensorVal > sensorMax) curSensorVal = sensorMax;
 80a0bfe:	f8d4 800c 	ldr.w	r8, [r4, #12]
 80a0c02:	42a8      	cmp	r0, r5
 80a0c04:	bfb8      	it	lt
 80a0c06:	4628      	movlt	r0, r5
    double amountOfLight = (double)(curSensorVal-sensorMin) / (double)(sensorMax-sensorMin);
 80a0c08:	4580      	cmp	r8, r0
 80a0c0a:	bfd4      	ite	le
 80a0c0c:	ebc5 0008 	rsble	r0, r5, r8
 80a0c10:	ebc5 0000 	rsbgt	r0, r5, r0
 80a0c14:	f001 fdf2 	bl	80a27fc <__aeabi_i2d>
 80a0c18:	4606      	mov	r6, r0
 80a0c1a:	eba8 0005 	sub.w	r0, r8, r5
 80a0c1e:	460f      	mov	r7, r1
 80a0c20:	f001 fdec 	bl	80a27fc <__aeabi_i2d>
 80a0c24:	4602      	mov	r2, r0
 80a0c26:	460b      	mov	r3, r1
 80a0c28:	4630      	mov	r0, r6
 80a0c2a:	4639      	mov	r1, r7
 80a0c2c:	f001 ff7a 	bl	80a2b24 <__aeabi_ddiv>
 80a0c30:	4602      	mov	r2, r0
 80a0c32:	460b      	mov	r3, r1
    brightness = (int)((double)RGB_BRIGHTNESS_MAX*(1.0-amountOfLight));
 80a0c34:	2000      	movs	r0, #0
 80a0c36:	490a      	ldr	r1, [pc, #40]	; (80a0c60 <_ZN11CSmartLight29updataBrightnessAutomaticallyEv+0x70>)
 80a0c38:	f001 fc92 	bl	80a2560 <__aeabi_dsub>
 80a0c3c:	a306      	add	r3, pc, #24	; (adr r3, 80a0c58 <_ZN11CSmartLight29updataBrightnessAutomaticallyEv+0x68>)
 80a0c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0c42:	f001 fe45 	bl	80a28d0 <__aeabi_dmul>
 80a0c46:	f002 f8dd 	bl	80a2e04 <__aeabi_d2iz>
    RGB.brightness(brightness);
 80a0c4a:	2101      	movs	r1, #1
    brightness = (int)((double)RGB_BRIGHTNESS_MAX*(1.0-amountOfLight));
 80a0c4c:	6060      	str	r0, [r4, #4]
    RGB.brightness(brightness);
 80a0c4e:	b2c0      	uxtb	r0, r0
}
 80a0c50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    RGB.brightness(brightness);
 80a0c54:	f000 bfd8 	b.w	80a1c08 <_ZN8RGBClass10brightnessEhb>
 80a0c58:	00000000 	.word	0x00000000
 80a0c5c:	406fe000 	.word	0x406fe000
 80a0c60:	3ff00000 	.word	0x3ff00000
 80a0c64:	00000000 	.word	0x00000000

080a0c68 <_ZN11CSmartLight15createStatusStrEv>:
int CSmartLight::getSensorVal() {
    return sensorVal;
}


void CSmartLight::createStatusStr() {
 80a0c68:	b570      	push	{r4, r5, r6, lr}
    statusStr = String::format("{\"L0\":%d,\"L1\":%d,\"b\":%d,\"s\":%d,\"m\":%d,\"M\":%d}",
 80a0c6a:	68c3      	ldr	r3, [r0, #12]
void CSmartLight::createStatusStr() {
 80a0c6c:	b088      	sub	sp, #32
    statusStr = String::format("{\"L0\":%d,\"L1\":%d,\"b\":%d,\"s\":%d,\"m\":%d,\"M\":%d}",
 80a0c6e:	7846      	ldrb	r6, [r0, #1]
 80a0c70:	7805      	ldrb	r5, [r0, #0]
 80a0c72:	9303      	str	r3, [sp, #12]
 80a0c74:	6903      	ldr	r3, [r0, #16]
void CSmartLight::createStatusStr() {
 80a0c76:	4604      	mov	r4, r0
    statusStr = String::format("{\"L0\":%d,\"L1\":%d,\"b\":%d,\"s\":%d,\"m\":%d,\"M\":%d}",
 80a0c78:	9302      	str	r3, [sp, #8]
 80a0c7a:	6883      	ldr	r3, [r0, #8]
 80a0c7c:	9301      	str	r3, [sp, #4]
        state_L0, state_L1, (int)((double)brightness/RGB_BRIGHTNESS_MAX*100.0), sensorVal, sensorMin, sensorMax);
 80a0c7e:	6840      	ldr	r0, [r0, #4]
 80a0c80:	f001 fdbc 	bl	80a27fc <__aeabi_i2d>
 80a0c84:	a30e      	add	r3, pc, #56	; (adr r3, 80a0cc0 <_ZN11CSmartLight15createStatusStrEv+0x58>)
 80a0c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0c8a:	f001 ff4b 	bl	80a2b24 <__aeabi_ddiv>
 80a0c8e:	2200      	movs	r2, #0
 80a0c90:	4b0d      	ldr	r3, [pc, #52]	; (80a0cc8 <_ZN11CSmartLight15createStatusStrEv+0x60>)
 80a0c92:	f001 fe1d 	bl	80a28d0 <__aeabi_dmul>
    statusStr = String::format("{\"L0\":%d,\"L1\":%d,\"b\":%d,\"s\":%d,\"m\":%d,\"M\":%d}",
 80a0c96:	f002 f8b5 	bl	80a2e04 <__aeabi_d2iz>
 80a0c9a:	4633      	mov	r3, r6
 80a0c9c:	462a      	mov	r2, r5
 80a0c9e:	9000      	str	r0, [sp, #0]
 80a0ca0:	490a      	ldr	r1, [pc, #40]	; (80a0ccc <_ZN11CSmartLight15createStatusStrEv+0x64>)
 80a0ca2:	a804      	add	r0, sp, #16
 80a0ca4:	f001 f8ae 	bl	80a1e04 <_ZN6String6formatEPKcz>
        state_L0, state_L1, (int)((double)brightness/RGB_BRIGHTNESS_MAX*100.0), sensorVal, sensorMin, sensorMax);
 80a0ca8:	a904      	add	r1, sp, #16
 80a0caa:	f104 0020 	add.w	r0, r4, #32
 80a0cae:	f001 f864 	bl	80a1d7a <_ZN6StringaSEOS_>
 80a0cb2:	a804      	add	r0, sp, #16
 80a0cb4:	f000 ffcd 	bl	80a1c52 <_ZN6StringD1Ev>
}
 80a0cb8:	b008      	add	sp, #32
 80a0cba:	bd70      	pop	{r4, r5, r6, pc}
 80a0cbc:	f3af 8000 	nop.w
 80a0cc0:	00000000 	.word	0x00000000
 80a0cc4:	406fe000 	.word	0x406fe000
 80a0cc8:	40590000 	.word	0x40590000
 80a0ccc:	080a36df 	.word	0x080a36df

080a0cd0 <_ZN11CSmartLight7executeEv>:
void CSmartLight::execute() {
 80a0cd0:	b538      	push	{r3, r4, r5, lr}
    switch (state_L0) {
 80a0cd2:	7805      	ldrb	r5, [r0, #0]
void CSmartLight::execute() {
 80a0cd4:	4604      	mov	r4, r0
    switch (state_L0) {
 80a0cd6:	b155      	cbz	r5, 80a0cee <_ZN11CSmartLight7executeEv+0x1e>
 80a0cd8:	2d01      	cmp	r5, #1
 80a0cda:	d013      	beq.n	80a0d04 <_ZN11CSmartLight7executeEv+0x34>
    cmd.On = INVALID_CMD;
 80a0cdc:	4b14      	ldr	r3, [pc, #80]	; (80a0d30 <_ZN11CSmartLight7executeEv+0x60>)
    createStatusStr();
 80a0cde:	4620      	mov	r0, r4
    cmd.Auto = INVALID_CMD;
 80a0ce0:	e9c4 3305 	strd	r3, r3, [r4, #20]
    cmd.Brightness = INVALID_CMD;
 80a0ce4:	61e3      	str	r3, [r4, #28]
}
 80a0ce6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    createStatusStr();
 80a0cea:	f7ff bfbd 	b.w	80a0c68 <_ZN11CSmartLight15createStatusStrEv>
            turnOffLight();
 80a0cee:	f7ff ff3f 	bl	80a0b70 <_ZN11CSmartLight12turnOffLightEv>
            if (cmd.On != INVALID_CMD) {
 80a0cf2:	6963      	ldr	r3, [r4, #20]
 80a0cf4:	4a0e      	ldr	r2, [pc, #56]	; (80a0d30 <_ZN11CSmartLight7executeEv+0x60>)
 80a0cf6:	4293      	cmp	r3, r2
 80a0cf8:	d0f0      	beq.n	80a0cdc <_ZN11CSmartLight7executeEv+0xc>
                if (cmd.On) {
 80a0cfa:	2b00      	cmp	r3, #0
 80a0cfc:	d0ee      	beq.n	80a0cdc <_ZN11CSmartLight7executeEv+0xc>
                    state_L0 = CSmartLight::S_ON;
 80a0cfe:	2301      	movs	r3, #1
 80a0d00:	8023      	strh	r3, [r4, #0]
 80a0d02:	e7eb      	b.n	80a0cdc <_ZN11CSmartLight7executeEv+0xc>
            switch (state_L1) {
 80a0d04:	7843      	ldrb	r3, [r0, #1]
 80a0d06:	b143      	cbz	r3, 80a0d1a <_ZN11CSmartLight7executeEv+0x4a>
 80a0d08:	2b01      	cmp	r3, #1
 80a0d0a:	d1e7      	bne.n	80a0cdc <_ZN11CSmartLight7executeEv+0xc>
                    updataBrightnessAutomatically();
 80a0d0c:	f7ff ff70 	bl	80a0bf0 <_ZN11CSmartLight29updataBrightnessAutomaticallyEv>
                        if (!cmd.Auto) state_L1 = CSmartLight::S_MANUAL;
 80a0d10:	69a3      	ldr	r3, [r4, #24]
 80a0d12:	2b00      	cmp	r3, #0
 80a0d14:	d1e2      	bne.n	80a0cdc <_ZN11CSmartLight7executeEv+0xc>
 80a0d16:	7063      	strb	r3, [r4, #1]
 80a0d18:	e7e0      	b.n	80a0cdc <_ZN11CSmartLight7executeEv+0xc>
                    updateBrightnessManually(cmd.Brightness);
 80a0d1a:	69c1      	ldr	r1, [r0, #28]
 80a0d1c:	f7ff ff34 	bl	80a0b88 <_ZN11CSmartLight24updateBrightnessManuallyEi>
                    if (cmd.Auto != INVALID_CMD) {
 80a0d20:	69a3      	ldr	r3, [r4, #24]
 80a0d22:	4a03      	ldr	r2, [pc, #12]	; (80a0d30 <_ZN11CSmartLight7executeEv+0x60>)
 80a0d24:	4293      	cmp	r3, r2
 80a0d26:	d0d9      	beq.n	80a0cdc <_ZN11CSmartLight7executeEv+0xc>
                        if (cmd.Auto) state_L1 = CSmartLight::S_AUTO;
 80a0d28:	2b00      	cmp	r3, #0
 80a0d2a:	d0d7      	beq.n	80a0cdc <_ZN11CSmartLight7executeEv+0xc>
 80a0d2c:	7065      	strb	r5, [r4, #1]
 80a0d2e:	e7d5      	b.n	80a0cdc <_ZN11CSmartLight7executeEv+0xc>
 80a0d30:	fffe7961 	.word	0xfffe7961

080a0d34 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE>:
void CSmartLight::cmdProcessing(JSONValue cmdJson) {
 80a0d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0d38:	b08a      	sub	sp, #40	; 0x28
        JSONObjectIterator(value.t_, value.d_) {
 80a0d3a:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a0d3c:	f851 3b04 	ldr.w	r3, [r1], #4
 80a0d40:	4604      	mov	r4, r0
 80a0d42:	a801      	add	r0, sp, #4
 80a0d44:	9300      	str	r3, [sp, #0]
 80a0d46:	f7ff f9ff 	bl	80a0148 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80a0d4a:	466a      	mov	r2, sp
 80a0d4c:	4629      	mov	r1, r5
 80a0d4e:	a804      	add	r0, sp, #16
 80a0d50:	f000 fda8 	bl	80a18a4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 80a0d54:	a801      	add	r0, sp, #4
 80a0d56:	f7ff f9e1 	bl	80a011c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return strcmp(s_, str) == 0;
 80a0d5a:	4e3c      	ldr	r6, [pc, #240]	; (80a0e4c <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x118>)
 80a0d5c:	4f3c      	ldr	r7, [pc, #240]	; (80a0e50 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x11c>)
 80a0d5e:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 80a0e5c <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x128>
    while (iter.next()) {
 80a0d62:	a804      	add	r0, sp, #16
 80a0d64:	f000 fdb6 	bl	80a18d4 <_ZN5spark18JSONObjectIterator4nextEv>
 80a0d68:	2800      	cmp	r0, #0
 80a0d6a:	d069      	beq.n	80a0e40 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x10c>
        if (iter.name() == "on") {
 80a0d6c:	4668      	mov	r0, sp
 80a0d6e:	a904      	add	r1, sp, #16
 80a0d70:	f7ff fe32 	bl	80a09d8 <_ZNK5spark18JSONObjectIterator4nameEv>
 80a0d74:	4631      	mov	r1, r6
 80a0d76:	9802      	ldr	r0, [sp, #8]
 80a0d78:	f002 fb3a 	bl	80a33f0 <strcmp>
 80a0d7c:	4605      	mov	r5, r0
 80a0d7e:	a801      	add	r0, sp, #4
 80a0d80:	f7ff f9cc 	bl	80a011c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            cmd.On = (int)iter.value().toBool();
 80a0d84:	4668      	mov	r0, sp
 80a0d86:	a904      	add	r1, sp, #16
        if (iter.name() == "on") {
 80a0d88:	b94d      	cbnz	r5, 80a0d9e <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x6a>
            cmd.On = (int)iter.value().toBool();
 80a0d8a:	f7ff fe39 	bl	80a0a00 <_ZNK5spark18JSONObjectIterator5valueEv>
 80a0d8e:	4668      	mov	r0, sp
 80a0d90:	f000 fc16 	bl	80a15c0 <_ZNK5spark9JSONValue6toBoolEv>
 80a0d94:	6160      	str	r0, [r4, #20]
 80a0d96:	a801      	add	r0, sp, #4
 80a0d98:	f7ff f9c0 	bl	80a011c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0d9c:	e7e1      	b.n	80a0d62 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x2e>
        else if (iter.name() == "auto") {
 80a0d9e:	f7ff fe1b 	bl	80a09d8 <_ZNK5spark18JSONObjectIterator4nameEv>
 80a0da2:	4639      	mov	r1, r7
 80a0da4:	9802      	ldr	r0, [sp, #8]
 80a0da6:	f002 fb23 	bl	80a33f0 <strcmp>
 80a0daa:	4605      	mov	r5, r0
 80a0dac:	a801      	add	r0, sp, #4
 80a0dae:	f7ff f9b5 	bl	80a011c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            cmd.Auto = (int)iter.value().toBool();
 80a0db2:	4668      	mov	r0, sp
 80a0db4:	a904      	add	r1, sp, #16
        else if (iter.name() == "auto") {
 80a0db6:	b935      	cbnz	r5, 80a0dc6 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x92>
            cmd.Auto = (int)iter.value().toBool();
 80a0db8:	f7ff fe22 	bl	80a0a00 <_ZNK5spark18JSONObjectIterator5valueEv>
 80a0dbc:	4668      	mov	r0, sp
 80a0dbe:	f000 fbff 	bl	80a15c0 <_ZNK5spark9JSONValue6toBoolEv>
 80a0dc2:	61a0      	str	r0, [r4, #24]
 80a0dc4:	e7e7      	b.n	80a0d96 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x62>
        else if (iter.name() == "brightness") {
 80a0dc6:	f7ff fe07 	bl	80a09d8 <_ZNK5spark18JSONObjectIterator4nameEv>
 80a0dca:	4641      	mov	r1, r8
 80a0dcc:	9802      	ldr	r0, [sp, #8]
 80a0dce:	f002 fb0f 	bl	80a33f0 <strcmp>
 80a0dd2:	4605      	mov	r5, r0
 80a0dd4:	a801      	add	r0, sp, #4
 80a0dd6:	f7ff f9a1 	bl	80a011c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            cmd.Brightness = iter.value().toInt();
 80a0dda:	4668      	mov	r0, sp
 80a0ddc:	a904      	add	r1, sp, #16
        else if (iter.name() == "brightness") {
 80a0dde:	b935      	cbnz	r5, 80a0dee <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0xba>
            cmd.Brightness = iter.value().toInt();
 80a0de0:	f7ff fe0e 	bl	80a0a00 <_ZNK5spark18JSONObjectIterator5valueEv>
 80a0de4:	4668      	mov	r0, sp
 80a0de6:	f000 fc29 	bl	80a163c <_ZNK5spark9JSONValue5toIntEv>
 80a0dea:	61e0      	str	r0, [r4, #28]
 80a0dec:	e7d3      	b.n	80a0d96 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x62>
        else if (iter.name() == "min") {
 80a0dee:	f7ff fdf3 	bl	80a09d8 <_ZNK5spark18JSONObjectIterator4nameEv>
 80a0df2:	4918      	ldr	r1, [pc, #96]	; (80a0e54 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x120>)
 80a0df4:	9802      	ldr	r0, [sp, #8]
 80a0df6:	f002 fafb 	bl	80a33f0 <strcmp>
 80a0dfa:	4605      	mov	r5, r0
 80a0dfc:	a801      	add	r0, sp, #4
 80a0dfe:	f7ff f98d 	bl	80a011c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            sensorMin = iter.value().toInt();
 80a0e02:	4668      	mov	r0, sp
 80a0e04:	a904      	add	r1, sp, #16
        else if (iter.name() == "min") {
 80a0e06:	b935      	cbnz	r5, 80a0e16 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0xe2>
            sensorMin = iter.value().toInt();
 80a0e08:	f7ff fdfa 	bl	80a0a00 <_ZNK5spark18JSONObjectIterator5valueEv>
 80a0e0c:	4668      	mov	r0, sp
 80a0e0e:	f000 fc15 	bl	80a163c <_ZNK5spark9JSONValue5toIntEv>
 80a0e12:	6120      	str	r0, [r4, #16]
 80a0e14:	e7bf      	b.n	80a0d96 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x62>
        else if ( iter.name() == "max") {
 80a0e16:	f7ff fddf 	bl	80a09d8 <_ZNK5spark18JSONObjectIterator4nameEv>
 80a0e1a:	490f      	ldr	r1, [pc, #60]	; (80a0e58 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x124>)
 80a0e1c:	9802      	ldr	r0, [sp, #8]
 80a0e1e:	f002 fae7 	bl	80a33f0 <strcmp>
 80a0e22:	4605      	mov	r5, r0
 80a0e24:	a801      	add	r0, sp, #4
 80a0e26:	f7ff f979 	bl	80a011c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0e2a:	2d00      	cmp	r5, #0
 80a0e2c:	d199      	bne.n	80a0d62 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x2e>
            sensorMax = iter.value().toInt();
 80a0e2e:	4668      	mov	r0, sp
 80a0e30:	a904      	add	r1, sp, #16
 80a0e32:	f7ff fde5 	bl	80a0a00 <_ZNK5spark18JSONObjectIterator5valueEv>
 80a0e36:	4668      	mov	r0, sp
 80a0e38:	f000 fc00 	bl	80a163c <_ZNK5spark9JSONValue5toIntEv>
 80a0e3c:	60e0      	str	r0, [r4, #12]
 80a0e3e:	e7aa      	b.n	80a0d96 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x62>
 80a0e40:	a805      	add	r0, sp, #20
 80a0e42:	f7ff f96b 	bl	80a011c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a0e46:	b00a      	add	sp, #40	; 0x28
 80a0e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0e4c:	080a370d 	.word	0x080a370d
 80a0e50:	080a3710 	.word	0x080a3710
 80a0e54:	080a36c2 	.word	0x080a36c2
 80a0e58:	080a36c6 	.word	0x080a36c6
 80a0e5c:	080a3715 	.word	0x080a3715

080a0e60 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a0e60:	b508      	push	{r3, lr}
 80a0e62:	4b02      	ldr	r3, [pc, #8]	; (80a0e6c <os_mutex_recursive_create+0xc>)
 80a0e64:	681b      	ldr	r3, [r3, #0]
 80a0e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0e68:	9301      	str	r3, [sp, #4]
 80a0e6a:	bd08      	pop	{r3, pc}
 80a0e6c:	080601d0 	.word	0x080601d0

080a0e70 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a0e70:	b508      	push	{r3, lr}
 80a0e72:	4b02      	ldr	r3, [pc, #8]	; (80a0e7c <os_mutex_recursive_destroy+0xc>)
 80a0e74:	681b      	ldr	r3, [r3, #0]
 80a0e76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0e78:	9301      	str	r3, [sp, #4]
 80a0e7a:	bd08      	pop	{r3, pc}
 80a0e7c:	080601d0 	.word	0x080601d0

080a0e80 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0e80:	b508      	push	{r3, lr}
 80a0e82:	4b02      	ldr	r3, [pc, #8]	; (80a0e8c <HAL_RNG_GetRandomNumber+0xc>)
 80a0e84:	681b      	ldr	r3, [r3, #0]
 80a0e86:	685b      	ldr	r3, [r3, #4]
 80a0e88:	9301      	str	r3, [sp, #4]
 80a0e8a:	bd08      	pop	{r3, pc}
 80a0e8c:	0806019c 	.word	0x0806019c

080a0e90 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a0e90:	b508      	push	{r3, lr}
 80a0e92:	4b02      	ldr	r3, [pc, #8]	; (80a0e9c <HAL_Delay_Microseconds+0xc>)
 80a0e94:	681b      	ldr	r3, [r3, #0]
 80a0e96:	68db      	ldr	r3, [r3, #12]
 80a0e98:	9301      	str	r3, [sp, #4]
 80a0e9a:	bd08      	pop	{r3, pc}
 80a0e9c:	0806019c 	.word	0x0806019c

080a0ea0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0ea0:	b508      	push	{r3, lr}
 80a0ea2:	4b02      	ldr	r3, [pc, #8]	; (80a0eac <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0ea4:	681b      	ldr	r3, [r3, #0]
 80a0ea6:	695b      	ldr	r3, [r3, #20]
 80a0ea8:	9301      	str	r3, [sp, #4]
 80a0eaa:	bd08      	pop	{r3, pc}
 80a0eac:	0806019c 	.word	0x0806019c

080a0eb0 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 80a0eb0:	b508      	push	{r3, lr}
 80a0eb2:	4b02      	ldr	r3, [pc, #8]	; (80a0ebc <hal_rtc_time_is_valid+0xc>)
 80a0eb4:	681b      	ldr	r3, [r3, #0]
 80a0eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0eb8:	9301      	str	r3, [sp, #4]
 80a0eba:	bd08      	pop	{r3, pc}
 80a0ebc:	0806019c 	.word	0x0806019c

080a0ec0 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 80a0ec0:	b508      	push	{r3, lr}
 80a0ec2:	4b02      	ldr	r3, [pc, #8]	; (80a0ecc <hal_rtc_get_time+0xc>)
 80a0ec4:	681b      	ldr	r3, [r3, #0]
 80a0ec6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0ec8:	9301      	str	r3, [sp, #4]
 80a0eca:	bd08      	pop	{r3, pc}
 80a0ecc:	0806019c 	.word	0x0806019c

080a0ed0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a0ed0:	b508      	push	{r3, lr}
 80a0ed2:	4b02      	ldr	r3, [pc, #8]	; (80a0edc <HAL_Pin_Map+0xc>)
 80a0ed4:	681b      	ldr	r3, [r3, #0]
 80a0ed6:	681b      	ldr	r3, [r3, #0]
 80a0ed8:	9301      	str	r3, [sp, #4]
 80a0eda:	bd08      	pop	{r3, pc}
 80a0edc:	080601b0 	.word	0x080601b0

080a0ee0 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a0ee0:	b508      	push	{r3, lr}
 80a0ee2:	4b02      	ldr	r3, [pc, #8]	; (80a0eec <HAL_Validate_Pin_Function+0xc>)
 80a0ee4:	681b      	ldr	r3, [r3, #0]
 80a0ee6:	685b      	ldr	r3, [r3, #4]
 80a0ee8:	9301      	str	r3, [sp, #4]
 80a0eea:	bd08      	pop	{r3, pc}
 80a0eec:	080601b0 	.word	0x080601b0

080a0ef0 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a0ef0:	b508      	push	{r3, lr}
 80a0ef2:	4b02      	ldr	r3, [pc, #8]	; (80a0efc <HAL_Pin_Mode+0xc>)
 80a0ef4:	681b      	ldr	r3, [r3, #0]
 80a0ef6:	689b      	ldr	r3, [r3, #8]
 80a0ef8:	9301      	str	r3, [sp, #4]
 80a0efa:	bd08      	pop	{r3, pc}
 80a0efc:	080601b0 	.word	0x080601b0

080a0f00 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a0f00:	b508      	push	{r3, lr}
 80a0f02:	4b02      	ldr	r3, [pc, #8]	; (80a0f0c <HAL_Get_Pin_Mode+0xc>)
 80a0f04:	681b      	ldr	r3, [r3, #0]
 80a0f06:	68db      	ldr	r3, [r3, #12]
 80a0f08:	9301      	str	r3, [sp, #4]
 80a0f0a:	bd08      	pop	{r3, pc}
 80a0f0c:	080601b0 	.word	0x080601b0

080a0f10 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a0f10:	b508      	push	{r3, lr}
 80a0f12:	4b02      	ldr	r3, [pc, #8]	; (80a0f1c <HAL_GPIO_Write+0xc>)
 80a0f14:	681b      	ldr	r3, [r3, #0]
 80a0f16:	691b      	ldr	r3, [r3, #16]
 80a0f18:	9301      	str	r3, [sp, #4]
 80a0f1a:	bd08      	pop	{r3, pc}
 80a0f1c:	080601b0 	.word	0x080601b0

080a0f20 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
 80a0f20:	b508      	push	{r3, lr}
 80a0f22:	4b02      	ldr	r3, [pc, #8]	; (80a0f2c <HAL_Interrupts_Enable_All+0xc>)
 80a0f24:	681b      	ldr	r3, [r3, #0]
 80a0f26:	6a1b      	ldr	r3, [r3, #32]
 80a0f28:	9301      	str	r3, [sp, #4]
 80a0f2a:	bd08      	pop	{r3, pc}
 80a0f2c:	080601b0 	.word	0x080601b0

080a0f30 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
 80a0f30:	b508      	push	{r3, lr}
 80a0f32:	4b02      	ldr	r3, [pc, #8]	; (80a0f3c <HAL_Interrupts_Disable_All+0xc>)
 80a0f34:	681b      	ldr	r3, [r3, #0]
 80a0f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0f38:	9301      	str	r3, [sp, #4]
 80a0f3a:	bd08      	pop	{r3, pc}
 80a0f3c:	080601b0 	.word	0x080601b0

080a0f40 <hal_adc_read>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 80a0f40:	b508      	push	{r3, lr}
 80a0f42:	4b02      	ldr	r3, [pc, #8]	; (80a0f4c <hal_adc_read+0xc>)
 80a0f44:	681b      	ldr	r3, [r3, #0]
 80a0f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0f48:	9301      	str	r3, [sp, #4]
 80a0f4a:	bd08      	pop	{r3, pc}
 80a0f4c:	080601b0 	.word	0x080601b0

080a0f50 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a0f50:	b508      	push	{r3, lr}
 80a0f52:	4b02      	ldr	r3, [pc, #8]	; (80a0f5c <hal_i2c_write+0xc>)
 80a0f54:	681b      	ldr	r3, [r3, #0]
 80a0f56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0f58:	9301      	str	r3, [sp, #4]
 80a0f5a:	bd08      	pop	{r3, pc}
 80a0f5c:	080601ac 	.word	0x080601ac

080a0f60 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a0f60:	b508      	push	{r3, lr}
 80a0f62:	4b02      	ldr	r3, [pc, #8]	; (80a0f6c <hal_i2c_available+0xc>)
 80a0f64:	681b      	ldr	r3, [r3, #0]
 80a0f66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0f68:	9301      	str	r3, [sp, #4]
 80a0f6a:	bd08      	pop	{r3, pc}
 80a0f6c:	080601ac 	.word	0x080601ac

080a0f70 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a0f70:	b508      	push	{r3, lr}
 80a0f72:	4b02      	ldr	r3, [pc, #8]	; (80a0f7c <hal_i2c_read+0xc>)
 80a0f74:	681b      	ldr	r3, [r3, #0]
 80a0f76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0f78:	9301      	str	r3, [sp, #4]
 80a0f7a:	bd08      	pop	{r3, pc}
 80a0f7c:	080601ac 	.word	0x080601ac

080a0f80 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a0f80:	b508      	push	{r3, lr}
 80a0f82:	4b02      	ldr	r3, [pc, #8]	; (80a0f8c <hal_i2c_peek+0xc>)
 80a0f84:	681b      	ldr	r3, [r3, #0]
 80a0f86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0f88:	9301      	str	r3, [sp, #4]
 80a0f8a:	bd08      	pop	{r3, pc}
 80a0f8c:	080601ac 	.word	0x080601ac

080a0f90 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a0f90:	b508      	push	{r3, lr}
 80a0f92:	4b02      	ldr	r3, [pc, #8]	; (80a0f9c <hal_i2c_flush+0xc>)
 80a0f94:	681b      	ldr	r3, [r3, #0]
 80a0f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0f98:	9301      	str	r3, [sp, #4]
 80a0f9a:	bd08      	pop	{r3, pc}
 80a0f9c:	080601ac 	.word	0x080601ac

080a0fa0 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a0fa0:	b508      	push	{r3, lr}
 80a0fa2:	4b02      	ldr	r3, [pc, #8]	; (80a0fac <hal_i2c_is_enabled+0xc>)
 80a0fa4:	681b      	ldr	r3, [r3, #0]
 80a0fa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0fa8:	9301      	str	r3, [sp, #4]
 80a0faa:	bd08      	pop	{r3, pc}
 80a0fac:	080601ac 	.word	0x080601ac

080a0fb0 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a0fb0:	b508      	push	{r3, lr}
 80a0fb2:	4b03      	ldr	r3, [pc, #12]	; (80a0fc0 <hal_i2c_init+0x10>)
 80a0fb4:	681b      	ldr	r3, [r3, #0]
 80a0fb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0fba:	9301      	str	r3, [sp, #4]
 80a0fbc:	bd08      	pop	{r3, pc}
 80a0fbe:	0000      	.short	0x0000
 80a0fc0:	080601ac 	.word	0x080601ac

080a0fc4 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a0fc4:	b508      	push	{r3, lr}
 80a0fc6:	4b02      	ldr	r3, [pc, #8]	; (80a0fd0 <hal_spi_init+0xc>)
 80a0fc8:	681b      	ldr	r3, [r3, #0]
 80a0fca:	69db      	ldr	r3, [r3, #28]
 80a0fcc:	9301      	str	r3, [sp, #4]
 80a0fce:	bd08      	pop	{r3, pc}
 80a0fd0:	080601b4 	.word	0x080601b4

080a0fd4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a0fd4:	b508      	push	{r3, lr}
 80a0fd6:	4b02      	ldr	r3, [pc, #8]	; (80a0fe0 <hal_spi_is_enabled+0xc>)
 80a0fd8:	681b      	ldr	r3, [r3, #0]
 80a0fda:	6a1b      	ldr	r3, [r3, #32]
 80a0fdc:	9301      	str	r3, [sp, #4]
 80a0fde:	bd08      	pop	{r3, pc}
 80a0fe0:	080601b4 	.word	0x080601b4

080a0fe4 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a0fe4:	b508      	push	{r3, lr}
 80a0fe6:	4b02      	ldr	r3, [pc, #8]	; (80a0ff0 <hal_usart_init+0xc>)
 80a0fe8:	681b      	ldr	r3, [r3, #0]
 80a0fea:	699b      	ldr	r3, [r3, #24]
 80a0fec:	9301      	str	r3, [sp, #4]
 80a0fee:	bd08      	pop	{r3, pc}
 80a0ff0:	080601c4 	.word	0x080601c4

080a0ff4 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a0ff4:	b508      	push	{r3, lr}
 80a0ff6:	4b02      	ldr	r3, [pc, #8]	; (80a1000 <hal_usart_write+0xc>)
 80a0ff8:	681b      	ldr	r3, [r3, #0]
 80a0ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0ffc:	9301      	str	r3, [sp, #4]
 80a0ffe:	bd08      	pop	{r3, pc}
 80a1000:	080601c4 	.word	0x080601c4

080a1004 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a1004:	b508      	push	{r3, lr}
 80a1006:	4b02      	ldr	r3, [pc, #8]	; (80a1010 <hal_usart_available+0xc>)
 80a1008:	681b      	ldr	r3, [r3, #0]
 80a100a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a100c:	9301      	str	r3, [sp, #4]
 80a100e:	bd08      	pop	{r3, pc}
 80a1010:	080601c4 	.word	0x080601c4

080a1014 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a1014:	b508      	push	{r3, lr}
 80a1016:	4b02      	ldr	r3, [pc, #8]	; (80a1020 <hal_usart_read+0xc>)
 80a1018:	681b      	ldr	r3, [r3, #0]
 80a101a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a101c:	9301      	str	r3, [sp, #4]
 80a101e:	bd08      	pop	{r3, pc}
 80a1020:	080601c4 	.word	0x080601c4

080a1024 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a1024:	b508      	push	{r3, lr}
 80a1026:	4b02      	ldr	r3, [pc, #8]	; (80a1030 <hal_usart_peek+0xc>)
 80a1028:	681b      	ldr	r3, [r3, #0]
 80a102a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a102c:	9301      	str	r3, [sp, #4]
 80a102e:	bd08      	pop	{r3, pc}
 80a1030:	080601c4 	.word	0x080601c4

080a1034 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a1034:	b508      	push	{r3, lr}
 80a1036:	4b02      	ldr	r3, [pc, #8]	; (80a1040 <hal_usart_flush+0xc>)
 80a1038:	681b      	ldr	r3, [r3, #0]
 80a103a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a103c:	9301      	str	r3, [sp, #4]
 80a103e:	bd08      	pop	{r3, pc}
 80a1040:	080601c4 	.word	0x080601c4

080a1044 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a1044:	b508      	push	{r3, lr}
 80a1046:	4b02      	ldr	r3, [pc, #8]	; (80a1050 <hal_usart_is_enabled+0xc>)
 80a1048:	681b      	ldr	r3, [r3, #0]
 80a104a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a104c:	9301      	str	r3, [sp, #4]
 80a104e:	bd08      	pop	{r3, pc}
 80a1050:	080601c4 	.word	0x080601c4

080a1054 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a1054:	b508      	push	{r3, lr}
 80a1056:	4b02      	ldr	r3, [pc, #8]	; (80a1060 <hal_usart_available_data_for_write+0xc>)
 80a1058:	681b      	ldr	r3, [r3, #0]
 80a105a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a105c:	9301      	str	r3, [sp, #4]
 80a105e:	bd08      	pop	{r3, pc}
 80a1060:	080601c4 	.word	0x080601c4

080a1064 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a1064:	b508      	push	{r3, lr}
 80a1066:	4b02      	ldr	r3, [pc, #8]	; (80a1070 <HAL_USB_USART_Init+0xc>)
 80a1068:	681b      	ldr	r3, [r3, #0]
 80a106a:	681b      	ldr	r3, [r3, #0]
 80a106c:	9301      	str	r3, [sp, #4]
 80a106e:	bd08      	pop	{r3, pc}
 80a1070:	080601d8 	.word	0x080601d8

080a1074 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a1074:	b508      	push	{r3, lr}
 80a1076:	4b02      	ldr	r3, [pc, #8]	; (80a1080 <HAL_USB_USART_Begin+0xc>)
 80a1078:	681b      	ldr	r3, [r3, #0]
 80a107a:	685b      	ldr	r3, [r3, #4]
 80a107c:	9301      	str	r3, [sp, #4]
 80a107e:	bd08      	pop	{r3, pc}
 80a1080:	080601d8 	.word	0x080601d8

080a1084 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a1084:	b508      	push	{r3, lr}
 80a1086:	4b02      	ldr	r3, [pc, #8]	; (80a1090 <HAL_USB_USART_Available_Data+0xc>)
 80a1088:	681b      	ldr	r3, [r3, #0]
 80a108a:	691b      	ldr	r3, [r3, #16]
 80a108c:	9301      	str	r3, [sp, #4]
 80a108e:	bd08      	pop	{r3, pc}
 80a1090:	080601d8 	.word	0x080601d8

080a1094 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a1094:	b508      	push	{r3, lr}
 80a1096:	4b02      	ldr	r3, [pc, #8]	; (80a10a0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a1098:	681b      	ldr	r3, [r3, #0]
 80a109a:	695b      	ldr	r3, [r3, #20]
 80a109c:	9301      	str	r3, [sp, #4]
 80a109e:	bd08      	pop	{r3, pc}
 80a10a0:	080601d8 	.word	0x080601d8

080a10a4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a10a4:	b508      	push	{r3, lr}
 80a10a6:	4b02      	ldr	r3, [pc, #8]	; (80a10b0 <HAL_USB_USART_Receive_Data+0xc>)
 80a10a8:	681b      	ldr	r3, [r3, #0]
 80a10aa:	699b      	ldr	r3, [r3, #24]
 80a10ac:	9301      	str	r3, [sp, #4]
 80a10ae:	bd08      	pop	{r3, pc}
 80a10b0:	080601d8 	.word	0x080601d8

080a10b4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a10b4:	b508      	push	{r3, lr}
 80a10b6:	4b02      	ldr	r3, [pc, #8]	; (80a10c0 <HAL_USB_USART_Send_Data+0xc>)
 80a10b8:	681b      	ldr	r3, [r3, #0]
 80a10ba:	69db      	ldr	r3, [r3, #28]
 80a10bc:	9301      	str	r3, [sp, #4]
 80a10be:	bd08      	pop	{r3, pc}
 80a10c0:	080601d8 	.word	0x080601d8

080a10c4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a10c4:	b508      	push	{r3, lr}
 80a10c6:	4b02      	ldr	r3, [pc, #8]	; (80a10d0 <HAL_USB_USART_Flush_Data+0xc>)
 80a10c8:	681b      	ldr	r3, [r3, #0]
 80a10ca:	6a1b      	ldr	r3, [r3, #32]
 80a10cc:	9301      	str	r3, [sp, #4]
 80a10ce:	bd08      	pop	{r3, pc}
 80a10d0:	080601d8 	.word	0x080601d8

080a10d4 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a10d4:	b508      	push	{r3, lr}
 80a10d6:	4b02      	ldr	r3, [pc, #8]	; (80a10e0 <inet_gethostbyname+0xc>)
 80a10d8:	681b      	ldr	r3, [r3, #0]
 80a10da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a10dc:	9301      	str	r3, [sp, #4]
 80a10de:	bd08      	pop	{r3, pc}
 80a10e0:	080601c0 	.word	0x080601c0

080a10e4 <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
 80a10e4:	b508      	push	{r3, lr}
 80a10e6:	4b02      	ldr	r3, [pc, #8]	; (80a10f0 <LED_SetSignalingColor+0xc>)
 80a10e8:	681b      	ldr	r3, [r3, #0]
 80a10ea:	685b      	ldr	r3, [r3, #4]
 80a10ec:	9301      	str	r3, [sp, #4]
 80a10ee:	bd08      	pop	{r3, pc}
 80a10f0:	080201a8 	.word	0x080201a8

080a10f4 <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
 80a10f4:	b508      	push	{r3, lr}
 80a10f6:	4b02      	ldr	r3, [pc, #8]	; (80a1100 <LED_Signaling_Start+0xc>)
 80a10f8:	681b      	ldr	r3, [r3, #0]
 80a10fa:	689b      	ldr	r3, [r3, #8]
 80a10fc:	9301      	str	r3, [sp, #4]
 80a10fe:	bd08      	pop	{r3, pc}
 80a1100:	080201a8 	.word	0x080201a8

080a1104 <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
 80a1104:	b508      	push	{r3, lr}
 80a1106:	4b02      	ldr	r3, [pc, #8]	; (80a1110 <LED_Signaling_Stop+0xc>)
 80a1108:	681b      	ldr	r3, [r3, #0]
 80a110a:	68db      	ldr	r3, [r3, #12]
 80a110c:	9301      	str	r3, [sp, #4]
 80a110e:	bd08      	pop	{r3, pc}
 80a1110:	080201a8 	.word	0x080201a8

080a1114 <LED_SetBrightness>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
 80a1114:	b508      	push	{r3, lr}
 80a1116:	4b02      	ldr	r3, [pc, #8]	; (80a1120 <LED_SetBrightness+0xc>)
 80a1118:	681b      	ldr	r3, [r3, #0]
 80a111a:	691b      	ldr	r3, [r3, #16]
 80a111c:	9301      	str	r3, [sp, #4]
 80a111e:	bd08      	pop	{r3, pc}
 80a1120:	080201a8 	.word	0x080201a8

080a1124 <LED_RGB_IsOverRidden>:
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
 80a1124:	b508      	push	{r3, lr}
 80a1126:	4b02      	ldr	r3, [pc, #8]	; (80a1130 <LED_RGB_IsOverRidden+0xc>)
 80a1128:	681b      	ldr	r3, [r3, #0]
 80a112a:	699b      	ldr	r3, [r3, #24]
 80a112c:	9301      	str	r3, [sp, #4]
 80a112e:	bd08      	pop	{r3, pc}
 80a1130:	080201a8 	.word	0x080201a8

080a1134 <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
 80a1134:	b508      	push	{r3, lr}
 80a1136:	4b02      	ldr	r3, [pc, #8]	; (80a1140 <LED_On+0xc>)
 80a1138:	681b      	ldr	r3, [r3, #0]
 80a113a:	69db      	ldr	r3, [r3, #28]
 80a113c:	9301      	str	r3, [sp, #4]
 80a113e:	bd08      	pop	{r3, pc}
 80a1140:	080201a8 	.word	0x080201a8

080a1144 <Get_LED_Brightness>:
DYNALIB_FN(8, services, LED_Off, void(Led_TypeDef))
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))
 80a1144:	b508      	push	{r3, lr}
 80a1146:	4b02      	ldr	r3, [pc, #8]	; (80a1150 <Get_LED_Brightness+0xc>)
 80a1148:	681b      	ldr	r3, [r3, #0]
 80a114a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a114c:	9301      	str	r3, [sp, #4]
 80a114e:	bd08      	pop	{r3, pc}
 80a1150:	080201a8 	.word	0x080201a8

080a1154 <jsmn_init>:

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))

DYNALIB_FN(14, services, jsmn_init, void(jsmn_parser*, void*))
 80a1154:	b508      	push	{r3, lr}
 80a1156:	4b02      	ldr	r3, [pc, #8]	; (80a1160 <jsmn_init+0xc>)
 80a1158:	681b      	ldr	r3, [r3, #0]
 80a115a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a115c:	9301      	str	r3, [sp, #4]
 80a115e:	bd08      	pop	{r3, pc}
 80a1160:	080201a8 	.word	0x080201a8

080a1164 <jsmn_parse_deprecated>:
DYNALIB_FN(15, services, jsmn_parse_deprecated, jsmnerr_t(jsmn_parser*, const char*, size_t, jsmntok_t*, unsigned int, void*))
 80a1164:	b508      	push	{r3, lr}
 80a1166:	4b02      	ldr	r3, [pc, #8]	; (80a1170 <jsmn_parse_deprecated+0xc>)
 80a1168:	681b      	ldr	r3, [r3, #0]
 80a116a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a116c:	9301      	str	r3, [sp, #4]
 80a116e:	bd08      	pop	{r3, pc}
 80a1170:	080201a8 	.word	0x080201a8

080a1174 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80a1174:	b508      	push	{r3, lr}
 80a1176:	4b02      	ldr	r3, [pc, #8]	; (80a1180 <system_mode+0xc>)
 80a1178:	681b      	ldr	r3, [r3, #0]
 80a117a:	681b      	ldr	r3, [r3, #0]
 80a117c:	9301      	str	r3, [sp, #4]
 80a117e:	bd08      	pop	{r3, pc}
 80a1180:	080601a4 	.word	0x080601a4

080a1184 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1184:	b508      	push	{r3, lr}
 80a1186:	4b02      	ldr	r3, [pc, #8]	; (80a1190 <set_system_mode+0xc>)
 80a1188:	681b      	ldr	r3, [r3, #0]
 80a118a:	685b      	ldr	r3, [r3, #4]
 80a118c:	9301      	str	r3, [sp, #4]
 80a118e:	bd08      	pop	{r3, pc}
 80a1190:	080601a4 	.word	0x080601a4

080a1194 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a1194:	b508      	push	{r3, lr}
 80a1196:	4b02      	ldr	r3, [pc, #8]	; (80a11a0 <system_delay_ms+0xc>)
 80a1198:	681b      	ldr	r3, [r3, #0]
 80a119a:	695b      	ldr	r3, [r3, #20]
 80a119c:	9301      	str	r3, [sp, #4]
 80a119e:	bd08      	pop	{r3, pc}
 80a11a0:	080601a4 	.word	0x080601a4

080a11a4 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a11a4:	b508      	push	{r3, lr}
 80a11a6:	4b02      	ldr	r3, [pc, #8]	; (80a11b0 <system_thread_set_state+0xc>)
 80a11a8:	681b      	ldr	r3, [r3, #0]
 80a11aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a11ac:	9301      	str	r3, [sp, #4]
 80a11ae:	bd08      	pop	{r3, pc}
 80a11b0:	080601a4 	.word	0x080601a4

080a11b4 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80a11b4:	b508      	push	{r3, lr}
 80a11b6:	4b02      	ldr	r3, [pc, #8]	; (80a11c0 <system_thread_get_state+0xc>)
 80a11b8:	681b      	ldr	r3, [r3, #0]
 80a11ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a11bc:	9301      	str	r3, [sp, #4]
 80a11be:	bd08      	pop	{r3, pc}
 80a11c0:	080601a4 	.word	0x080601a4

080a11c4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a11c4:	b508      	push	{r3, lr}
 80a11c6:	4b03      	ldr	r3, [pc, #12]	; (80a11d4 <system_ctrl_set_app_request_handler+0x10>)
 80a11c8:	681b      	ldr	r3, [r3, #0]
 80a11ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a11ce:	9301      	str	r3, [sp, #4]
 80a11d0:	bd08      	pop	{r3, pc}
 80a11d2:	0000      	.short	0x0000
 80a11d4:	080601a4 	.word	0x080601a4

080a11d8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a11d8:	b508      	push	{r3, lr}
 80a11da:	4b03      	ldr	r3, [pc, #12]	; (80a11e8 <system_ctrl_set_result+0x10>)
 80a11dc:	681b      	ldr	r3, [r3, #0]
 80a11de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a11e2:	9301      	str	r3, [sp, #4]
 80a11e4:	bd08      	pop	{r3, pc}
 80a11e6:	0000      	.short	0x0000
 80a11e8:	080601a4 	.word	0x080601a4

080a11ec <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a11ec:	b508      	push	{r3, lr}
 80a11ee:	4b02      	ldr	r3, [pc, #8]	; (80a11f8 <spark_process+0xc>)
 80a11f0:	681b      	ldr	r3, [r3, #0]
 80a11f2:	689b      	ldr	r3, [r3, #8]
 80a11f4:	9301      	str	r3, [sp, #4]
 80a11f6:	bd08      	pop	{r3, pc}
 80a11f8:	080601cc 	.word	0x080601cc

080a11fc <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a11fc:	b508      	push	{r3, lr}
 80a11fe:	4b02      	ldr	r3, [pc, #8]	; (80a1208 <spark_cloud_flag_connected+0xc>)
 80a1200:	681b      	ldr	r3, [r3, #0]
 80a1202:	695b      	ldr	r3, [r3, #20]
 80a1204:	9301      	str	r3, [sp, #4]
 80a1206:	bd08      	pop	{r3, pc}
 80a1208:	080601cc 	.word	0x080601cc

080a120c <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80a120c:	b508      	push	{r3, lr}
 80a120e:	4b02      	ldr	r3, [pc, #8]	; (80a1218 <spark_sync_time_pending+0xc>)
 80a1210:	681b      	ldr	r3, [r3, #0]
 80a1212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1214:	9301      	str	r3, [sp, #4]
 80a1216:	bd08      	pop	{r3, pc}
 80a1218:	080601cc 	.word	0x080601cc

080a121c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a121c:	b508      	push	{r3, lr}
 80a121e:	4b02      	ldr	r3, [pc, #8]	; (80a1228 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a1220:	681b      	ldr	r3, [r3, #0]
 80a1222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1224:	9301      	str	r3, [sp, #4]
 80a1226:	bd08      	pop	{r3, pc}
 80a1228:	080601cc 	.word	0x080601cc

080a122c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a122c:	b508      	push	{r3, lr}
 80a122e:	4b02      	ldr	r3, [pc, #8]	; (80a1238 <network_connect+0xc>)
 80a1230:	681b      	ldr	r3, [r3, #0]
 80a1232:	685b      	ldr	r3, [r3, #4]
 80a1234:	9301      	str	r3, [sp, #4]
 80a1236:	bd08      	pop	{r3, pc}
 80a1238:	080601c8 	.word	0x080601c8

080a123c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a123c:	b508      	push	{r3, lr}
 80a123e:	4b02      	ldr	r3, [pc, #8]	; (80a1248 <network_connecting+0xc>)
 80a1240:	681b      	ldr	r3, [r3, #0]
 80a1242:	689b      	ldr	r3, [r3, #8]
 80a1244:	9301      	str	r3, [sp, #4]
 80a1246:	bd08      	pop	{r3, pc}
 80a1248:	080601c8 	.word	0x080601c8

080a124c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a124c:	b508      	push	{r3, lr}
 80a124e:	4b02      	ldr	r3, [pc, #8]	; (80a1258 <network_disconnect+0xc>)
 80a1250:	681b      	ldr	r3, [r3, #0]
 80a1252:	68db      	ldr	r3, [r3, #12]
 80a1254:	9301      	str	r3, [sp, #4]
 80a1256:	bd08      	pop	{r3, pc}
 80a1258:	080601c8 	.word	0x080601c8

080a125c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a125c:	b508      	push	{r3, lr}
 80a125e:	4b02      	ldr	r3, [pc, #8]	; (80a1268 <network_ready+0xc>)
 80a1260:	681b      	ldr	r3, [r3, #0]
 80a1262:	691b      	ldr	r3, [r3, #16]
 80a1264:	9301      	str	r3, [sp, #4]
 80a1266:	bd08      	pop	{r3, pc}
 80a1268:	080601c8 	.word	0x080601c8

080a126c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a126c:	b508      	push	{r3, lr}
 80a126e:	4b02      	ldr	r3, [pc, #8]	; (80a1278 <network_on+0xc>)
 80a1270:	681b      	ldr	r3, [r3, #0]
 80a1272:	695b      	ldr	r3, [r3, #20]
 80a1274:	9301      	str	r3, [sp, #4]
 80a1276:	bd08      	pop	{r3, pc}
 80a1278:	080601c8 	.word	0x080601c8

080a127c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a127c:	b508      	push	{r3, lr}
 80a127e:	4b02      	ldr	r3, [pc, #8]	; (80a1288 <network_off+0xc>)
 80a1280:	681b      	ldr	r3, [r3, #0]
 80a1282:	699b      	ldr	r3, [r3, #24]
 80a1284:	9301      	str	r3, [sp, #4]
 80a1286:	bd08      	pop	{r3, pc}
 80a1288:	080601c8 	.word	0x080601c8

080a128c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a128c:	b508      	push	{r3, lr}
 80a128e:	4b02      	ldr	r3, [pc, #8]	; (80a1298 <network_listen+0xc>)
 80a1290:	681b      	ldr	r3, [r3, #0]
 80a1292:	69db      	ldr	r3, [r3, #28]
 80a1294:	9301      	str	r3, [sp, #4]
 80a1296:	bd08      	pop	{r3, pc}
 80a1298:	080601c8 	.word	0x080601c8

080a129c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a129c:	b508      	push	{r3, lr}
 80a129e:	4b02      	ldr	r3, [pc, #8]	; (80a12a8 <network_listening+0xc>)
 80a12a0:	681b      	ldr	r3, [r3, #0]
 80a12a2:	6a1b      	ldr	r3, [r3, #32]
 80a12a4:	9301      	str	r3, [sp, #4]
 80a12a6:	bd08      	pop	{r3, pc}
 80a12a8:	080601c8 	.word	0x080601c8

080a12ac <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a12ac:	b508      	push	{r3, lr}
 80a12ae:	4b02      	ldr	r3, [pc, #8]	; (80a12b8 <network_set_listen_timeout+0xc>)
 80a12b0:	681b      	ldr	r3, [r3, #0]
 80a12b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a12b4:	9301      	str	r3, [sp, #4]
 80a12b6:	bd08      	pop	{r3, pc}
 80a12b8:	080601c8 	.word	0x080601c8

080a12bc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a12bc:	b508      	push	{r3, lr}
 80a12be:	4b02      	ldr	r3, [pc, #8]	; (80a12c8 <network_get_listen_timeout+0xc>)
 80a12c0:	681b      	ldr	r3, [r3, #0]
 80a12c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a12c4:	9301      	str	r3, [sp, #4]
 80a12c6:	bd08      	pop	{r3, pc}
 80a12c8:	080601c8 	.word	0x080601c8

080a12cc <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a12cc:	b508      	push	{r3, lr}
 80a12ce:	4b02      	ldr	r3, [pc, #8]	; (80a12d8 <network_is_on+0xc>)
 80a12d0:	681b      	ldr	r3, [r3, #0]
 80a12d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a12d4:	9301      	str	r3, [sp, #4]
 80a12d6:	bd08      	pop	{r3, pc}
 80a12d8:	080601c8 	.word	0x080601c8

080a12dc <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a12dc:	b508      	push	{r3, lr}
 80a12de:	4b02      	ldr	r3, [pc, #8]	; (80a12e8 <network_is_off+0xc>)
 80a12e0:	681b      	ldr	r3, [r3, #0]
 80a12e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a12e4:	9301      	str	r3, [sp, #4]
 80a12e6:	bd08      	pop	{r3, pc}
 80a12e8:	080601c8 	.word	0x080601c8

080a12ec <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a12ec:	b508      	push	{r3, lr}
 80a12ee:	4b02      	ldr	r3, [pc, #8]	; (80a12f8 <malloc+0xc>)
 80a12f0:	681b      	ldr	r3, [r3, #0]
 80a12f2:	681b      	ldr	r3, [r3, #0]
 80a12f4:	9301      	str	r3, [sp, #4]
 80a12f6:	bd08      	pop	{r3, pc}
 80a12f8:	080601a0 	.word	0x080601a0

080a12fc <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a12fc:	b508      	push	{r3, lr}
 80a12fe:	4b02      	ldr	r3, [pc, #8]	; (80a1308 <free+0xc>)
 80a1300:	681b      	ldr	r3, [r3, #0]
 80a1302:	685b      	ldr	r3, [r3, #4]
 80a1304:	9301      	str	r3, [sp, #4]
 80a1306:	bd08      	pop	{r3, pc}
 80a1308:	080601a0 	.word	0x080601a0

080a130c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a130c:	b508      	push	{r3, lr}
 80a130e:	4b02      	ldr	r3, [pc, #8]	; (80a1318 <realloc+0xc>)
 80a1310:	681b      	ldr	r3, [r3, #0]
 80a1312:	689b      	ldr	r3, [r3, #8]
 80a1314:	9301      	str	r3, [sp, #4]
 80a1316:	bd08      	pop	{r3, pc}
 80a1318:	080601a0 	.word	0x080601a0

080a131c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a131c:	b508      	push	{r3, lr}
 80a131e:	4b02      	ldr	r3, [pc, #8]	; (80a1328 <vsnprintf+0xc>)
 80a1320:	681b      	ldr	r3, [r3, #0]
 80a1322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1324:	9301      	str	r3, [sp, #4]
 80a1326:	bd08      	pop	{r3, pc}
 80a1328:	080601a0 	.word	0x080601a0

080a132c <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a132c:	b508      	push	{r3, lr}
 80a132e:	4b02      	ldr	r3, [pc, #8]	; (80a1338 <newlib_impure_ptr_callback+0xc>)
 80a1330:	681b      	ldr	r3, [r3, #0]
 80a1332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1334:	9301      	str	r3, [sp, #4]
 80a1336:	bd08      	pop	{r3, pc}
 80a1338:	080601a0 	.word	0x080601a0

080a133c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a133c:	2100      	movs	r1, #0
 80a133e:	f7ff bf29 	b.w	80a1194 <system_delay_ms>

080a1342 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a1342:	4770      	bx	lr

080a1344 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a1344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1346:	4606      	mov	r6, r0
 80a1348:	4615      	mov	r5, r2
 80a134a:	460c      	mov	r4, r1
 80a134c:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a134e:	42bc      	cmp	r4, r7
 80a1350:	d006      	beq.n	80a1360 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a1352:	6833      	ldr	r3, [r6, #0]
 80a1354:	4630      	mov	r0, r6
 80a1356:	689b      	ldr	r3, [r3, #8]
 80a1358:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a135c:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a135e:	e7f6      	b.n	80a134e <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a1360:	4628      	mov	r0, r5
 80a1362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1364 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a1364:	2200      	movs	r2, #0
 80a1366:	7c00      	ldrb	r0, [r0, #16]
 80a1368:	f7ff bdf2 	b.w	80a0f50 <hal_i2c_write>

080a136c <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a136c:	2100      	movs	r1, #0
 80a136e:	7c00      	ldrb	r0, [r0, #16]
 80a1370:	f7ff bdf6 	b.w	80a0f60 <hal_i2c_available>

080a1374 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a1374:	2100      	movs	r1, #0
 80a1376:	7c00      	ldrb	r0, [r0, #16]
 80a1378:	f7ff bdfa 	b.w	80a0f70 <hal_i2c_read>

080a137c <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a137c:	2100      	movs	r1, #0
 80a137e:	7c00      	ldrb	r0, [r0, #16]
 80a1380:	f7ff bdfe 	b.w	80a0f80 <hal_i2c_peek>

080a1384 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a1384:	2100      	movs	r1, #0
 80a1386:	7c00      	ldrb	r0, [r0, #16]
 80a1388:	f7ff be02 	b.w	80a0f90 <hal_i2c_flush>

080a138c <_ZN7TwoWireD0Ev>:
 80a138c:	b510      	push	{r4, lr}
 80a138e:	4604      	mov	r4, r0
 80a1390:	2114      	movs	r1, #20
 80a1392:	f001 f8db 	bl	80a254c <_ZdlPvj>
 80a1396:	4620      	mov	r0, r4
 80a1398:	bd10      	pop	{r4, pc}
	...

080a139c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a139c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a139e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a13a2:	4604      	mov	r4, r0
 80a13a4:	4608      	mov	r0, r1
 80a13a6:	2100      	movs	r1, #0
 80a13a8:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a13ac:	4b03      	ldr	r3, [pc, #12]	; (80a13bc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a13ae:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a13b0:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a13b2:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a13b4:	f7ff fdfc 	bl	80a0fb0 <hal_i2c_init>
}
 80a13b8:	4620      	mov	r0, r4
 80a13ba:	bd10      	pop	{r4, pc}
 80a13bc:	080a3728 	.word	0x080a3728

080a13c0 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
 80a13c0:	f7ff bdb6 	b.w	80a0f30 <HAL_Interrupts_Disable_All>

080a13c4 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
 80a13c4:	f7ff bdac 	b.w	80a0f20 <HAL_Interrupts_Enable_All>

080a13c8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a13c8:	4770      	bx	lr

080a13ca <_ZN9IPAddressD0Ev>:
 80a13ca:	b510      	push	{r4, lr}
 80a13cc:	4604      	mov	r4, r0
 80a13ce:	2118      	movs	r1, #24
 80a13d0:	f001 f8bc 	bl	80a254c <_ZdlPvj>
 80a13d4:	4620      	mov	r0, r4
 80a13d6:	bd10      	pop	{r4, pc}

080a13d8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a13d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a13da:	460e      	mov	r6, r1
 80a13dc:	2400      	movs	r4, #0
 80a13de:	f100 0708 	add.w	r7, r0, #8
 80a13e2:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a13e4:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a13e8:	220a      	movs	r2, #10
 80a13ea:	4630      	mov	r0, r6
 80a13ec:	f000 fb9b 	bl	80a1b26 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a13f0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a13f2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a13f4:	d101      	bne.n	80a13fa <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a13f6:	4620      	mov	r0, r4
 80a13f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a13fa:	2c00      	cmp	r4, #0
 80a13fc:	d0f2      	beq.n	80a13e4 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a13fe:	212e      	movs	r1, #46	; 0x2e
 80a1400:	4630      	mov	r0, r6
 80a1402:	f000 fb81 	bl	80a1b08 <_ZN5Print5printEc>
 80a1406:	4404      	add	r4, r0
 80a1408:	e7ec      	b.n	80a13e4 <_ZNK9IPAddress7printToER5Print+0xc>
	...

080a140c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a140c:	b510      	push	{r4, lr}
 80a140e:	4604      	mov	r4, r0
 80a1410:	4b04      	ldr	r3, [pc, #16]	; (80a1424 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a1412:	2211      	movs	r2, #17
 80a1414:	2100      	movs	r1, #0
 80a1416:	f840 3b04 	str.w	r3, [r0], #4
 80a141a:	f001 ffbd 	bl	80a3398 <memset>
}
 80a141e:	4620      	mov	r0, r4
 80a1420:	bd10      	pop	{r4, pc}
 80a1422:	bf00      	nop
 80a1424:	080a3750 	.word	0x080a3750

080a1428 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a1428:	4603      	mov	r3, r0
 80a142a:	4a07      	ldr	r2, [pc, #28]	; (80a1448 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a142c:	b510      	push	{r4, lr}
 80a142e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a1432:	f101 0210 	add.w	r2, r1, #16
 80a1436:	f851 4b04 	ldr.w	r4, [r1], #4
 80a143a:	4291      	cmp	r1, r2
 80a143c:	f843 4b04 	str.w	r4, [r3], #4
 80a1440:	d1f9      	bne.n	80a1436 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a1442:	780a      	ldrb	r2, [r1, #0]
 80a1444:	701a      	strb	r2, [r3, #0]
}
 80a1446:	bd10      	pop	{r4, pc}
 80a1448:	080a3750 	.word	0x080a3750

080a144c <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a144c:	4a02      	ldr	r2, [pc, #8]	; (80a1458 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a144e:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a1452:	2204      	movs	r2, #4
 80a1454:	7502      	strb	r2, [r0, #20]
}
 80a1456:	4770      	bx	lr
 80a1458:	080a3750 	.word	0x080a3750

080a145c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a145c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a145e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a1462:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a1466:	2304      	movs	r3, #4
 80a1468:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a146c:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a1470:	6044      	str	r4, [r0, #4]
 80a1472:	7503      	strb	r3, [r0, #20]
}
 80a1474:	bd10      	pop	{r4, pc}
	...

080a1478 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1478:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a147a:	4d04      	ldr	r5, [pc, #16]	; (80a148c <_ZN9IPAddressC1Ehhhh+0x14>)
 80a147c:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a147e:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a1482:	9500      	str	r5, [sp, #0]
 80a1484:	f7ff ffea 	bl	80a145c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1488:	b003      	add	sp, #12
 80a148a:	bd30      	pop	{r4, r5, pc}
 80a148c:	080a3750 	.word	0x080a3750

080a1490 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
 80a1490:	2201      	movs	r2, #1
 80a1492:	f100 0310 	add.w	r3, r0, #16
    do {
        if (t->type == JSMN_OBJECT) {
 80a1496:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 80a149a:	4618      	mov	r0, r3
 80a149c:	2901      	cmp	r1, #1
 80a149e:	d108      	bne.n	80a14b2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
 80a14a0:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80a14a4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
 80a14a8:	3a01      	subs	r2, #1
 80a14aa:	f103 0310 	add.w	r3, r3, #16
 80a14ae:	d1f2      	bne.n	80a1496 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
 80a14b0:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
 80a14b2:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 80a14b4:	bf04      	itt	eq
 80a14b6:	f853 1c04 	ldreq.w	r1, [r3, #-4]
 80a14ba:	1852      	addeq	r2, r2, r1
 80a14bc:	e7f4      	b.n	80a14a8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

080a14be <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a14be:	4770      	bx	lr

080a14c0 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 80a14c0:	2000      	movs	r0, #0
 80a14c2:	4770      	bx	lr

080a14c4 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a14c4:	b510      	push	{r4, lr}
 80a14c6:	4604      	mov	r4, r0
 80a14c8:	2110      	movs	r1, #16
 80a14ca:	f001 f83f 	bl	80a254c <_ZdlPvj>
 80a14ce:	4620      	mov	r0, r4
 80a14d0:	bd10      	pop	{r4, pc}

080a14d2 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80a14d2:	b508      	push	{r3, lr}
      { delete this; }
 80a14d4:	f7ff fff6 	bl	80a14c4 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a14d8:	bd08      	pop	{r3, pc}

080a14da <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80a14da:	b510      	push	{r4, lr}
      { delete _M_ptr; }
 80a14dc:	68c4      	ldr	r4, [r0, #12]
 80a14de:	b17c      	cbz	r4, 80a1500 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
            json(nullptr),
            freeJson(false) {
    }

    ~JSONData() {
        delete[] tokens;
 80a14e0:	6820      	ldr	r0, [r4, #0]
 80a14e2:	b108      	cbz	r0, 80a14e8 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0xe>
 80a14e4:	f7fe fddf 	bl	80a00a6 <_ZdaPv>
        if (freeJson) {
 80a14e8:	7a23      	ldrb	r3, [r4, #8]
 80a14ea:	b11b      	cbz	r3, 80a14f4 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
            delete[] json;
 80a14ec:	6860      	ldr	r0, [r4, #4]
 80a14ee:	b108      	cbz	r0, 80a14f4 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
 80a14f0:	f7fe fdd9 	bl	80a00a6 <_ZdaPv>
 80a14f4:	4620      	mov	r0, r4
 80a14f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a14fa:	210c      	movs	r1, #12
 80a14fc:	f001 b826 	b.w	80a254c <_ZdlPvj>
 80a1500:	bd10      	pop	{r4, pc}

080a1502 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80a1502:	b510      	push	{r4, lr}
 80a1504:	4604      	mov	r4, r0
          _M_dispose();
 80a1506:	6803      	ldr	r3, [r0, #0]
 80a1508:	689b      	ldr	r3, [r3, #8]
 80a150a:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a150c:	68a3      	ldr	r3, [r4, #8]
 80a150e:	3b01      	subs	r3, #1
 80a1510:	60a3      	str	r3, [r4, #8]
 80a1512:	b92b      	cbnz	r3, 80a1520 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
 80a1514:	6823      	ldr	r3, [r4, #0]
 80a1516:	4620      	mov	r0, r4
    }
 80a1518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 80a151c:	68db      	ldr	r3, [r3, #12]
 80a151e:	4718      	bx	r3
    }
 80a1520:	bd10      	pop	{r4, pc}

080a1522 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
 80a1522:	b538      	push	{r3, r4, r5, lr}
 80a1524:	680b      	ldr	r3, [r1, #0]
 80a1526:	4604      	mov	r4, r0
 80a1528:	6003      	str	r3, [r0, #0]
 80a152a:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
 80a152c:	6843      	ldr	r3, [r0, #4]
 80a152e:	429d      	cmp	r5, r3
 80a1530:	d00c      	beq.n	80a154c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
 80a1532:	b115      	cbz	r5, 80a153a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
 80a1534:	686b      	ldr	r3, [r5, #4]
 80a1536:	3301      	adds	r3, #1
 80a1538:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 80a153a:	6860      	ldr	r0, [r4, #4]
 80a153c:	b128      	cbz	r0, 80a154a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
 80a153e:	6843      	ldr	r3, [r0, #4]
 80a1540:	3b01      	subs	r3, #1
 80a1542:	6043      	str	r3, [r0, #4]
 80a1544:	b90b      	cbnz	r3, 80a154a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
 80a1546:	f7ff ffdc 	bl	80a1502 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
 80a154a:	6065      	str	r5, [r4, #4]
    class __shared_ptr
 80a154c:	4620      	mov	r0, r4
 80a154e:	bd38      	pop	{r3, r4, r5, pc}

080a1550 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
        }
    }
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 80a1550:	460b      	mov	r3, r1
 80a1552:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 80a1554:	2200      	movs	r2, #0
 80a1556:	b510      	push	{r4, lr}
 80a1558:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 80a155a:	e9c0 2200 	strd	r2, r2, [r0]
        JSONValue() {
    if (t) {
        t_ = t;
 80a155e:	6083      	str	r3, [r0, #8]
    if (t) {
 80a1560:	b90b      	cbnz	r3, 80a1566 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
        d_ = d;
    }
}
 80a1562:	4620      	mov	r0, r4
 80a1564:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
 80a1566:	f7ff ffdc 	bl	80a1522 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
 80a156a:	e7fa      	b.n	80a1562 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

080a156c <_ZNK5spark9JSONValue4typeEv>:
    default:
        return 0.0;
    }
}

spark::JSONType spark::JSONValue::type() const {
 80a156c:	4603      	mov	r3, r0
    if (!t_) {
 80a156e:	6880      	ldr	r0, [r0, #8]
 80a1570:	b320      	cbz	r0, 80a15bc <_ZNK5spark9JSONValue4typeEv+0x50>
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
 80a1572:	7802      	ldrb	r2, [r0, #0]
 80a1574:	2a03      	cmp	r2, #3
 80a1576:	d81a      	bhi.n	80a15ae <_ZNK5spark9JSONValue4typeEv+0x42>
 80a1578:	e8df f002 	tbb	[pc, r2]
 80a157c:	1b021704 	.word	0x1b021704
 80a1580:	2005      	movs	r0, #5
 80a1582:	4770      	bx	lr
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
 80a1584:	681b      	ldr	r3, [r3, #0]
 80a1586:	685a      	ldr	r2, [r3, #4]
 80a1588:	6843      	ldr	r3, [r0, #4]
 80a158a:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 80a158c:	282d      	cmp	r0, #45	; 0x2d
 80a158e:	d012      	beq.n	80a15b6 <_ZNK5spark9JSONValue4typeEv+0x4a>
 80a1590:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80a1594:	2b09      	cmp	r3, #9
 80a1596:	d90e      	bls.n	80a15b6 <_ZNK5spark9JSONValue4typeEv+0x4a>
            return JSON_TYPE_NUMBER;
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 80a1598:	2874      	cmp	r0, #116	; 0x74
 80a159a:	d00e      	beq.n	80a15ba <_ZNK5spark9JSONValue4typeEv+0x4e>
 80a159c:	2866      	cmp	r0, #102	; 0x66
 80a159e:	d00c      	beq.n	80a15ba <_ZNK5spark9JSONValue4typeEv+0x4e>
        return JSON_TYPE_INVALID;
 80a15a0:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 80a15a4:	4258      	negs	r0, r3
 80a15a6:	4158      	adcs	r0, r3
 80a15a8:	4770      	bx	lr
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
 80a15aa:	2006      	movs	r0, #6
 80a15ac:	4770      	bx	lr
    default:
        return JSON_TYPE_INVALID;
 80a15ae:	2000      	movs	r0, #0
 80a15b0:	4770      	bx	lr
        return JSON_TYPE_STRING;
 80a15b2:	2004      	movs	r0, #4
 80a15b4:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
 80a15b6:	2003      	movs	r0, #3
 80a15b8:	4770      	bx	lr
            return JSON_TYPE_BOOL;
 80a15ba:	2002      	movs	r0, #2
    }
}
 80a15bc:	4770      	bx	lr
	...

080a15c0 <_ZNK5spark9JSONValue6toBoolEv>:
bool spark::JSONValue::toBool() const {
 80a15c0:	b510      	push	{r4, lr}
 80a15c2:	4604      	mov	r4, r0
    switch (type()) {
 80a15c4:	f7ff ffd2 	bl	80a156c <_ZNK5spark9JSONValue4typeEv>
 80a15c8:	2803      	cmp	r0, #3
 80a15ca:	d00d      	beq.n	80a15e8 <_ZNK5spark9JSONValue6toBoolEv+0x28>
 80a15cc:	2804      	cmp	r0, #4
 80a15ce:	d01e      	beq.n	80a160e <_ZNK5spark9JSONValue6toBoolEv+0x4e>
 80a15d0:	2802      	cmp	r0, #2
 80a15d2:	d12b      	bne.n	80a162c <_ZNK5spark9JSONValue6toBoolEv+0x6c>
        const char* const s = d_->json + t_->start;
 80a15d4:	6822      	ldr	r2, [r4, #0]
 80a15d6:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 80a15d8:	6852      	ldr	r2, [r2, #4]
 80a15da:	685b      	ldr	r3, [r3, #4]
 80a15dc:	5cd0      	ldrb	r0, [r2, r3]
 80a15de:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 80a15e2:	4258      	negs	r0, r3
 80a15e4:	4158      	adcs	r0, r3
}
 80a15e6:	bd10      	pop	{r4, pc}
        const char* const s = d_->json + t_->start;
 80a15e8:	68a3      	ldr	r3, [r4, #8]
 80a15ea:	6822      	ldr	r2, [r4, #0]
 80a15ec:	685b      	ldr	r3, [r3, #4]
 80a15ee:	6854      	ldr	r4, [r2, #4]
 80a15f0:	441c      	add	r4, r3
        if (*s == '\0' || strcmp(s, "false") == 0 || strcmp(s, "0") == 0 || strcmp(s, "0.0") == 0) {
 80a15f2:	4620      	mov	r0, r4
 80a15f4:	490e      	ldr	r1, [pc, #56]	; (80a1630 <_ZNK5spark9JSONValue6toBoolEv+0x70>)
 80a15f6:	f001 fefb 	bl	80a33f0 <strcmp>
 80a15fa:	2800      	cmp	r0, #0
 80a15fc:	d0f3      	beq.n	80a15e6 <_ZNK5spark9JSONValue6toBoolEv+0x26>
 80a15fe:	4620      	mov	r0, r4
 80a1600:	490c      	ldr	r1, [pc, #48]	; (80a1634 <_ZNK5spark9JSONValue6toBoolEv+0x74>)
 80a1602:	f001 fef5 	bl	80a33f0 <strcmp>
 80a1606:	3800      	subs	r0, #0
 80a1608:	bf18      	it	ne
 80a160a:	2001      	movne	r0, #1
 80a160c:	e7eb      	b.n	80a15e6 <_ZNK5spark9JSONValue6toBoolEv+0x26>
        const char* const s = d_->json + t_->start;
 80a160e:	6822      	ldr	r2, [r4, #0]
 80a1610:	68a3      	ldr	r3, [r4, #8]
 80a1612:	6852      	ldr	r2, [r2, #4]
 80a1614:	685b      	ldr	r3, [r3, #4]
        if (*s == '\0' || strcmp(s, "false") == 0 || strcmp(s, "0") == 0 || strcmp(s, "0.0") == 0) {
 80a1616:	5cd0      	ldrb	r0, [r2, r3]
        const char* const s = d_->json + t_->start;
 80a1618:	18d4      	adds	r4, r2, r3
        if (*s == '\0' || strcmp(s, "false") == 0 || strcmp(s, "0") == 0 || strcmp(s, "0.0") == 0) {
 80a161a:	2800      	cmp	r0, #0
 80a161c:	d0e3      	beq.n	80a15e6 <_ZNK5spark9JSONValue6toBoolEv+0x26>
 80a161e:	4620      	mov	r0, r4
 80a1620:	4905      	ldr	r1, [pc, #20]	; (80a1638 <_ZNK5spark9JSONValue6toBoolEv+0x78>)
 80a1622:	f001 fee5 	bl	80a33f0 <strcmp>
 80a1626:	2800      	cmp	r0, #0
 80a1628:	d1e3      	bne.n	80a15f2 <_ZNK5spark9JSONValue6toBoolEv+0x32>
 80a162a:	e7dc      	b.n	80a15e6 <_ZNK5spark9JSONValue6toBoolEv+0x26>
    switch (type()) {
 80a162c:	2000      	movs	r0, #0
 80a162e:	e7da      	b.n	80a15e6 <_ZNK5spark9JSONValue6toBoolEv+0x26>
 80a1630:	080a375e 	.word	0x080a375e
 80a1634:	080a375c 	.word	0x080a375c
 80a1638:	080a3760 	.word	0x080a3760

080a163c <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
 80a163c:	b510      	push	{r4, lr}
 80a163e:	4604      	mov	r4, r0
    switch (type()) {
 80a1640:	f7ff ff94 	bl	80a156c <_ZNK5spark9JSONValue4typeEv>
 80a1644:	2802      	cmp	r0, #2
 80a1646:	d00e      	beq.n	80a1666 <_ZNK5spark9JSONValue5toIntEv+0x2a>
 80a1648:	1ec3      	subs	r3, r0, #3
 80a164a:	b2db      	uxtb	r3, r3
 80a164c:	2b01      	cmp	r3, #1
 80a164e:	d814      	bhi.n	80a167a <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
 80a1650:	6822      	ldr	r2, [r4, #0]
 80a1652:	68a3      	ldr	r3, [r4, #8]
 80a1654:	6850      	ldr	r0, [r2, #4]
 80a1656:	685b      	ldr	r3, [r3, #4]
        return strtol(s, nullptr, 10);
 80a1658:	220a      	movs	r2, #10
}
 80a165a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
 80a165e:	2100      	movs	r1, #0
 80a1660:	4418      	add	r0, r3
 80a1662:	f001 bf59 	b.w	80a3518 <strtol>
        const char* const s = d_->json + t_->start;
 80a1666:	6822      	ldr	r2, [r4, #0]
 80a1668:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 80a166a:	6852      	ldr	r2, [r2, #4]
 80a166c:	685b      	ldr	r3, [r3, #4]
 80a166e:	5cd0      	ldrb	r0, [r2, r3]
 80a1670:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 80a1674:	4258      	negs	r0, r3
 80a1676:	4158      	adcs	r0, r3
}
 80a1678:	bd10      	pop	{r4, pc}
    switch (type()) {
 80a167a:	2000      	movs	r0, #0
 80a167c:	e7fc      	b.n	80a1678 <_ZNK5spark9JSONValue5toIntEv+0x3c>
	...

080a1680 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>:
        return JSONValue();
    }
    return JSONValue(d->tokens, d);
}

bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
 80a1680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a1684:	4699      	mov	r9, r3
    jsmn_parser parser;
    parser.size = sizeof(jsmn_parser);
 80a1686:	2310      	movs	r3, #16
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
 80a1688:	4607      	mov	r7, r0
 80a168a:	4688      	mov	r8, r1
    jsmn_init(&parser, nullptr);
    int nExt = -1;
    int n = jsmn_parse_deprecated(&parser, json, size, nullptr, 0, &nExt); // Get number of tokens
 80a168c:	2400      	movs	r4, #0
    int nExt = -1;
 80a168e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
 80a1692:	b088      	sub	sp, #32
    jsmn_init(&parser, nullptr);
 80a1694:	eb0d 0003 	add.w	r0, sp, r3
 80a1698:	2100      	movs	r1, #0
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
 80a169a:	4692      	mov	sl, r2
    parser.size = sizeof(jsmn_parser);
 80a169c:	9304      	str	r3, [sp, #16]
    jsmn_init(&parser, nullptr);
 80a169e:	f7ff fd59 	bl	80a1154 <jsmn_init>
    int n = jsmn_parse_deprecated(&parser, json, size, nullptr, 0, &nExt); // Get number of tokens
 80a16a2:	ab03      	add	r3, sp, #12
 80a16a4:	9301      	str	r3, [sp, #4]
 80a16a6:	4642      	mov	r2, r8
 80a16a8:	4623      	mov	r3, r4
 80a16aa:	4639      	mov	r1, r7
 80a16ac:	9400      	str	r4, [sp, #0]
 80a16ae:	a804      	add	r0, sp, #16
    int nExt = -1;
 80a16b0:	9603      	str	r6, [sp, #12]
    int n = jsmn_parse_deprecated(&parser, json, size, nullptr, 0, &nExt); // Get number of tokens
 80a16b2:	f7ff fd57 	bl	80a1164 <jsmn_parse_deprecated>
    if (n <= 0) {
 80a16b6:	1e05      	subs	r5, r0, #0
 80a16b8:	dd27      	ble.n	80a170a <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x8a>
        return false; // Parsing error
    }
    if (nExt > n) {
 80a16ba:	9803      	ldr	r0, [sp, #12]
        n = nExt;
    }
    std::unique_ptr<jsmntok_t[]> t(new(std::nothrow) jsmntok_t[n]);
 80a16bc:	4914      	ldr	r1, [pc, #80]	; (80a1710 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x90>)
 80a16be:	4285      	cmp	r5, r0
 80a16c0:	bfb8      	it	lt
 80a16c2:	4605      	movlt	r5, r0
 80a16c4:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
 80a16c8:	bfac      	ite	ge
 80a16ca:	4630      	movge	r0, r6
 80a16cc:	0128      	lsllt	r0, r5, #4
 80a16ce:	f000 ff41 	bl	80a2554 <_ZnajRKSt9nothrow_t>
    if (!t) {
 80a16d2:	4606      	mov	r6, r0
 80a16d4:	b198      	cbz	r0, 80a16fe <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x7e>
        return false;
    }
    jsmn_init(&parser, nullptr); // Reset parser
    if (jsmn_parse_deprecated(&parser, json, size, t.get(), n, nullptr) <= 0) {
 80a16d6:	2400      	movs	r4, #0
    jsmn_init(&parser, nullptr); // Reset parser
 80a16d8:	2100      	movs	r1, #0
 80a16da:	a804      	add	r0, sp, #16
 80a16dc:	f7ff fd3a 	bl	80a1154 <jsmn_init>
    if (jsmn_parse_deprecated(&parser, json, size, t.get(), n, nullptr) <= 0) {
 80a16e0:	4633      	mov	r3, r6
 80a16e2:	4642      	mov	r2, r8
 80a16e4:	4639      	mov	r1, r7
 80a16e6:	e9cd 5400 	strd	r5, r4, [sp]
 80a16ea:	a804      	add	r0, sp, #16
 80a16ec:	f7ff fd3a 	bl	80a1164 <jsmn_parse_deprecated>
 80a16f0:	42a0      	cmp	r0, r4
 80a16f2:	dd07      	ble.n	80a1704 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x84>
        return false;
    }
    *tokens = t.release();
    *count = n;
    return true;
 80a16f4:	2001      	movs	r0, #1
    *tokens = t.release();
 80a16f6:	f8ca 6000 	str.w	r6, [sl]
    *count = n;
 80a16fa:	f8c9 5000 	str.w	r5, [r9]
}
 80a16fe:	b008      	add	sp, #32
 80a1700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      typename enable_if<is_convertible<_Up(*)[], _Tp(*)[]>::value>::type
	operator()(_Up* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
 80a1704:	4630      	mov	r0, r6
 80a1706:	f7fe fcce 	bl	80a00a6 <_ZdaPv>
      }
 80a170a:	4620      	mov	r0, r4
 80a170c:	e7f7      	b.n	80a16fe <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x7e>
 80a170e:	bf00      	nop
 80a1710:	080a387c 	.word	0x080a387c

080a1714 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>:
        ++t;
    }
    return true;
}

bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
 80a1714:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    char *str = json + t->start; // Destination string
 80a1718:	6843      	ldr	r3, [r0, #4]
    const char* const end = json + t->end; // End of the source string
 80a171a:	6886      	ldr	r6, [r0, #8]
    char *str = json + t->start; // Destination string
 80a171c:	440b      	add	r3, r1
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
 80a171e:	4688      	mov	r8, r1
    const char* const end = json + t->end; // End of the source string
 80a1720:	440e      	add	r6, r1
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
 80a1722:	4607      	mov	r7, r0
    const char *s1 = str; // Beginning of an unescaped sequence
    const char *s = s1;
 80a1724:	461c      	mov	r4, r3
    const char *s1 = str; // Beginning of an unescaped sequence
 80a1726:	4619      	mov	r1, r3
                    break;
                case 'f': // Form feed
                    *str = 0x0c;
                    break;
                case 'r': // Carriage return
                    *str = 0x0d;
 80a1728:	f04f 090d 	mov.w	r9, #13
                    *str = 0x09;
 80a172c:	f04f 0a09 	mov.w	sl, #9
    while (s != end) {
 80a1730:	42b4      	cmp	r4, r6
 80a1732:	d063      	beq.n	80a17fc <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xe8>
        if (*s == '\\') {
 80a1734:	4625      	mov	r5, r4
 80a1736:	f815 2b01 	ldrb.w	r2, [r5], #1
 80a173a:	2a5c      	cmp	r2, #92	; 0x5c
 80a173c:	d12b      	bne.n	80a1796 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x82>
            if (s != s1) {
 80a173e:	42a1      	cmp	r1, r4
 80a1740:	d007      	beq.n	80a1752 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x3e>
                const size_t n = s - s1;
 80a1742:	eba4 0b01 	sub.w	fp, r4, r1
                memmove(str, s1, n); // Shift preceeding characters
 80a1746:	4618      	mov	r0, r3
 80a1748:	465a      	mov	r2, fp
 80a174a:	f001 fe0b 	bl	80a3364 <memmove>
 80a174e:	4603      	mov	r3, r0
                str += n;
 80a1750:	445b      	add	r3, fp
            if (s == end) {
 80a1752:	42b5      	cmp	r5, r6
 80a1754:	d039      	beq.n	80a17ca <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
            if (*s == 'u') { // Arbitrary character, e.g. "\u001f"
 80a1756:	7862      	ldrb	r2, [r4, #1]
 80a1758:	2a75      	cmp	r2, #117	; 0x75
 80a175a:	d12a      	bne.n	80a17b2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x9e>
                ++s;
 80a175c:	1ca2      	adds	r2, r4, #2
                if (end - s < 4) {
 80a175e:	1ab2      	subs	r2, r6, r2
 80a1760:	2a03      	cmp	r2, #3
 80a1762:	dd32      	ble.n	80a17ca <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
    uint32_t v = 0;
 80a1764:	f04f 0c00 	mov.w	ip, #0
    const char* const end = s + size;
 80a1768:	1da0      	adds	r0, r4, #6
 80a176a:	f104 0e05 	add.w	lr, r4, #5
    while (s != end) {
 80a176e:	45ae      	cmp	lr, r5
 80a1770:	d053      	beq.n	80a181a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x106>
        const char c = *s;
 80a1772:	f815 1f01 	ldrb.w	r1, [r5, #1]!
        if (c >= '0' && c <= '9') {
 80a1776:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80a177a:	fa5f fb82 	uxtb.w	fp, r2
 80a177e:	f1bb 0f09 	cmp.w	fp, #9
 80a1782:	d905      	bls.n	80a1790 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x7c>
        } else if (c >= 'a' && c <= 'f') {
 80a1784:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
 80a1788:	2a05      	cmp	r2, #5
 80a178a:	d807      	bhi.n	80a179c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x88>
            n = c - 'a' + 10;
 80a178c:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
        v = (v << 4) | n;
 80a1790:	ea42 1c0c 	orr.w	ip, r2, ip, lsl #4
    while (s != end) {
 80a1794:	e7eb      	b.n	80a176e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x5a>
 80a1796:	4628      	mov	r0, r5
 80a1798:	4604      	mov	r4, r0
 80a179a:	e7c9      	b.n	80a1730 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x1c>
        } else if (c >= 'A' && c <= 'F') {
 80a179c:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
 80a17a0:	2a05      	cmp	r2, #5
 80a17a2:	d812      	bhi.n	80a17ca <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
            n = c - 'A' + 10;
 80a17a4:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
 80a17a8:	e7f2      	b.n	80a1790 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x7c>
                    s1 += 6; // Skip escaped sequence
 80a17aa:	4601      	mov	r1, r0
                    *str = u;
 80a17ac:	f803 cb01 	strb.w	ip, [r3], #1
                    s1 += 6; // Skip escaped sequence
 80a17b0:	e7f2      	b.n	80a1798 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>
                switch (*s) {
 80a17b2:	2a6e      	cmp	r2, #110	; 0x6e
 80a17b4:	d01c      	beq.n	80a17f0 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xdc>
 80a17b6:	d80e      	bhi.n	80a17d6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xc2>
 80a17b8:	2a62      	cmp	r2, #98	; 0x62
 80a17ba:	d013      	beq.n	80a17e4 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd0>
 80a17bc:	d807      	bhi.n	80a17ce <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xba>
 80a17be:	2a2f      	cmp	r2, #47	; 0x2f
 80a17c0:	d011      	beq.n	80a17e6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
 80a17c2:	2a5c      	cmp	r2, #92	; 0x5c
 80a17c4:	d00f      	beq.n	80a17e6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
 80a17c6:	2a22      	cmp	r2, #34	; 0x22
 80a17c8:	d00d      	beq.n	80a17e6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                return false; // Unexpected end of string
 80a17ca:	2000      	movs	r0, #0
 80a17cc:	e023      	b.n	80a1816 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x102>
                switch (*s) {
 80a17ce:	2a66      	cmp	r2, #102	; 0x66
 80a17d0:	d1fb      	bne.n	80a17ca <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
                    *str = 0x0c;
 80a17d2:	220c      	movs	r2, #12
 80a17d4:	e007      	b.n	80a17e6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                switch (*s) {
 80a17d6:	2a72      	cmp	r2, #114	; 0x72
 80a17d8:	d00d      	beq.n	80a17f6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xe2>
 80a17da:	2a74      	cmp	r2, #116	; 0x74
 80a17dc:	d1f5      	bne.n	80a17ca <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
                    *str = 0x09;
 80a17de:	f883 a000 	strb.w	sl, [r3]
                    break;
 80a17e2:	e001      	b.n	80a17e8 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd4>
                    *str = 0x08;
 80a17e4:	2208      	movs	r2, #8
 80a17e6:	701a      	strb	r2, [r3, #0]
                    break;
                default:
                    return false; // Invalid escaped sequence
                }
                ++str;
                ++s;
 80a17e8:	1ca1      	adds	r1, r4, #2
 80a17ea:	4608      	mov	r0, r1
                ++str;
 80a17ec:	3301      	adds	r3, #1
                s1 = s; // Skip escaped sequence
 80a17ee:	e7d3      	b.n	80a1798 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>
                    *str = 0x0a;
 80a17f0:	f04f 020a 	mov.w	r2, #10
 80a17f4:	e7f7      	b.n	80a17e6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                    *str = 0x0d;
 80a17f6:	f883 9000 	strb.w	r9, [r3]
                    break;
 80a17fa:	e7f5      	b.n	80a17e8 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd4>
            }
        } else {
            ++s;
        }
    }
    if (s != s1) {
 80a17fc:	42a1      	cmp	r1, r4
 80a17fe:	d006      	beq.n	80a180e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xfa>
        const size_t n = s - s1;
 80a1800:	1a64      	subs	r4, r4, r1
        memmove(str, s1, n); // Shift remaining characters
 80a1802:	4618      	mov	r0, r3
 80a1804:	4622      	mov	r2, r4
 80a1806:	f001 fdad 	bl	80a3364 <memmove>
 80a180a:	4603      	mov	r3, r0
        str += n;
 80a180c:	4423      	add	r3, r4
    }
    t->end = str - json; // Update string length
    return true;
 80a180e:	2001      	movs	r0, #1
    t->end = str - json; // Update string length
 80a1810:	eba3 0308 	sub.w	r3, r3, r8
 80a1814:	60bb      	str	r3, [r7, #8]
}
 80a1816:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if (u <= 0x7f) { // Processing only code points within the basic latin block
 80a181a:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
 80a181e:	d9c4      	bls.n	80a17aa <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x96>
 80a1820:	4621      	mov	r1, r4
 80a1822:	e7b9      	b.n	80a1798 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>

080a1824 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>:
bool spark::JSONValue::stringize(jsmntok_t *t, size_t count, char *json) {
 80a1824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1826:	4604      	mov	r4, r0
 80a1828:	4615      	mov	r5, r2
            json[t->end] = '\0';
 80a182a:	2700      	movs	r7, #0
    const jsmntok_t* const end = t + count;
 80a182c:	eb00 1601 	add.w	r6, r0, r1, lsl #4
    while (t != end) {
 80a1830:	42b4      	cmp	r4, r6
 80a1832:	d010      	beq.n	80a1856 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x32>
        if (t->type == JSMN_STRING) {
 80a1834:	7823      	ldrb	r3, [r4, #0]
 80a1836:	2b03      	cmp	r3, #3
 80a1838:	d108      	bne.n	80a184c <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x28>
            if (!unescape(t, json)) {
 80a183a:	4629      	mov	r1, r5
 80a183c:	4620      	mov	r0, r4
 80a183e:	f7ff ff69 	bl	80a1714 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>
 80a1842:	b148      	cbz	r0, 80a1858 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x34>
            json[t->end] = '\0';
 80a1844:	68a3      	ldr	r3, [r4, #8]
 80a1846:	54ef      	strb	r7, [r5, r3]
        ++t;
 80a1848:	3410      	adds	r4, #16
    while (t != end) {
 80a184a:	e7f1      	b.n	80a1830 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0xc>
        } else if (t->type == JSMN_PRIMITIVE) {
 80a184c:	2b00      	cmp	r3, #0
 80a184e:	d1fb      	bne.n	80a1848 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x24>
            json[t->end] = '\0';
 80a1850:	68a2      	ldr	r2, [r4, #8]
 80a1852:	54ab      	strb	r3, [r5, r2]
 80a1854:	e7f8      	b.n	80a1848 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x24>
    return true;
 80a1856:	2001      	movs	r0, #1
}
 80a1858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a185c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

// spark::JSONString
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 80a185c:	460b      	mov	r3, r1
 80a185e:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 80a1860:	2200      	movs	r2, #0
 80a1862:	b510      	push	{r4, lr}
 80a1864:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 80a1866:	e9c0 2200 	strd	r2, r2, [r0]
}

// spark::JSONString
inline spark::JSONString::JSONString() :
        s_(""),
        n_(0) {
 80a186a:	480d      	ldr	r0, [pc, #52]	; (80a18a0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
 80a186c:	e9c4 0202 	strd	r0, r2, [r4, #8]
        JSONString() {
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 80a1870:	b1a3      	cbz	r3, 80a189c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x40>
 80a1872:	781a      	ldrb	r2, [r3, #0]
 80a1874:	2a03      	cmp	r2, #3
 80a1876:	d006      	beq.n	80a1886 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2a>
 80a1878:	b982      	cbnz	r2, 80a189c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x40>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 80a187a:	680a      	ldr	r2, [r1, #0]
 80a187c:	6850      	ldr	r0, [r2, #4]
 80a187e:	685a      	ldr	r2, [r3, #4]
 80a1880:	5c82      	ldrb	r2, [r0, r2]
 80a1882:	2a6e      	cmp	r2, #110	; 0x6e
 80a1884:	d007      	beq.n	80a1896 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3a>
            s_ = d->json + t->start;
 80a1886:	680a      	ldr	r2, [r1, #0]
 80a1888:	6858      	ldr	r0, [r3, #4]
 80a188a:	6852      	ldr	r2, [r2, #4]
            n_ = t->end - t->start;
 80a188c:	689b      	ldr	r3, [r3, #8]
            s_ = d->json + t->start;
 80a188e:	4402      	add	r2, r0
            n_ = t->end - t->start;
 80a1890:	1a1b      	subs	r3, r3, r0
            s_ = d->json + t->start;
 80a1892:	60a2      	str	r2, [r4, #8]
            n_ = t->end - t->start;
 80a1894:	60e3      	str	r3, [r4, #12]
 80a1896:	4620      	mov	r0, r4
 80a1898:	f7ff fe43 	bl	80a1522 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
        }
        d_ = d;
    }
}
 80a189c:	4620      	mov	r0, r4
 80a189e:	bd10      	pop	{r4, pc}
 80a18a0:	080a375f 	.word	0x080a375f

080a18a4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
bool spark::JSONString::operator==(const JSONString &str) const {
    return n_ == str.n_ && strncmp(s_, str.s_, n_) == 0;
}

// spark::JSONObjectIterator
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 80a18a4:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 80a18a6:	2500      	movs	r5, #0
 80a18a8:	460b      	mov	r3, r1
 80a18aa:	4604      	mov	r4, r0
 80a18ac:	4611      	mov	r1, r2
      constexpr __shared_count() noexcept : _M_pi(0)
 80a18ae:	e9c0 5500 	strd	r5, r5, [r0]
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
 80a18b2:	e9c0 5502 	strd	r5, r5, [r0, #8]
 80a18b6:	e9c0 5504 	strd	r5, r5, [r0, #16]
        JSONObjectIterator() {
    if (t && t->type == JSMN_OBJECT) {
 80a18ba:	b14b      	cbz	r3, 80a18d0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
 80a18bc:	781a      	ldrb	r2, [r3, #0]
 80a18be:	2a01      	cmp	r2, #1
 80a18c0:	d106      	bne.n	80a18d0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
 80a18c2:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
 80a18c6:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
 80a18c8:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
 80a18ca:	6143      	str	r3, [r0, #20]
 80a18cc:	f7ff fe29 	bl	80a1522 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
        d_ = d;
    }
}
 80a18d0:	4620      	mov	r0, r4
 80a18d2:	bd38      	pop	{r3, r4, r5, pc}

080a18d4 <_ZN5spark18JSONObjectIterator4nextEv>:

bool spark::JSONObjectIterator::next() {
 80a18d4:	b510      	push	{r4, lr}
    if (!n_) {
 80a18d6:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
 80a18d8:	4604      	mov	r4, r0
    if (!n_) {
 80a18da:	b163      	cbz	r3, 80a18f6 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
        return false;
    }
    k_ = t_; // Name
 80a18dc:	6880      	ldr	r0, [r0, #8]
    ++t_;
    v_ = t_; // Value
    --n_;
 80a18de:	3b01      	subs	r3, #1
    k_ = t_; // Name
 80a18e0:	60e0      	str	r0, [r4, #12]
    ++t_;
 80a18e2:	3010      	adds	r0, #16
 80a18e4:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 80a18e6:	6120      	str	r0, [r4, #16]
    --n_;
 80a18e8:	6163      	str	r3, [r4, #20]
    if (n_) {
 80a18ea:	b113      	cbz	r3, 80a18f2 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
 80a18ec:	f7ff fdd0 	bl	80a1490 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 80a18f0:	60a0      	str	r0, [r4, #8]
    }
    return true;
 80a18f2:	2001      	movs	r0, #1
 80a18f4:	e000      	b.n	80a18f8 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
 80a18f6:	4618      	mov	r0, r3
}
 80a18f8:	bd10      	pop	{r4, pc}
	...

080a18fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 80a18fc:	b538      	push	{r3, r4, r5, lr}
 80a18fe:	2300      	movs	r3, #0
 80a1900:	4604      	mov	r4, r0
 80a1902:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1904:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 80a1906:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1908:	f7fe fbc7 	bl	80a009a <_Znwj>
 80a190c:	b128      	cbz	r0, 80a191a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 80a190e:	2301      	movs	r3, #1
 80a1910:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 80a1914:	4b02      	ldr	r3, [pc, #8]	; (80a1920 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x24>)
 80a1916:	60c5      	str	r5, [r0, #12]
 80a1918:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a191a:	6020      	str	r0, [r4, #0]
	}
 80a191c:	4620      	mov	r0, r4
 80a191e:	bd38      	pop	{r3, r4, r5, pc}
 80a1920:	080a3770 	.word	0x080a3770

080a1924 <_ZN5spark9JSONValue9parseCopyEPKcj>:
spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
 80a1924:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1926:	4604      	mov	r4, r0
 80a1928:	460e      	mov	r6, r1
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
 80a192a:	200c      	movs	r0, #12
 80a192c:	4927      	ldr	r1, [pc, #156]	; (80a19cc <_ZN5spark9JSONValue9parseCopyEPKcj+0xa8>)
spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
 80a192e:	b087      	sub	sp, #28
 80a1930:	4615      	mov	r5, r2
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
 80a1932:	f000 fe0d 	bl	80a2550 <_ZnwjRKSt9nothrow_t>
 80a1936:	4601      	mov	r1, r0
 80a1938:	b118      	cbz	r0, 80a1942 <_ZN5spark9JSONValue9parseCopyEPKcj+0x1e>
            freeJson(false) {
 80a193a:	2300      	movs	r3, #0
 80a193c:	e9c0 3300 	strd	r3, r3, [r0]
 80a1940:	7203      	strb	r3, [r0, #8]
	: __shared_count(__p)
 80a1942:	a803      	add	r0, sp, #12
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a1944:	9102      	str	r1, [sp, #8]
	: __shared_count(__p)
 80a1946:	f7ff ffd9 	bl	80a18fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>
    if (!d) {
 80a194a:	9a02      	ldr	r2, [sp, #8]
 80a194c:	b942      	cbnz	r2, 80a1960 <_ZN5spark9JSONValue9parseCopyEPKcj+0x3c>
      constexpr __shared_count() noexcept : _M_pi(0)
 80a194e:	e9c4 2200 	strd	r2, r2, [r4]
        t_(nullptr) {
 80a1952:	60a2      	str	r2, [r4, #8]
      ~__shared_ptr() = default;
 80a1954:	a803      	add	r0, sp, #12
 80a1956:	f7fe fbe1 	bl	80a011c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a195a:	4620      	mov	r0, r4
 80a195c:	b007      	add	sp, #28
 80a195e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    size_t tokenCount = 0;
 80a1960:	2300      	movs	r3, #0
    if (!tokenize(json, size, &d->tokens, &tokenCount)) {
 80a1962:	4629      	mov	r1, r5
    size_t tokenCount = 0;
 80a1964:	9301      	str	r3, [sp, #4]
    if (!tokenize(json, size, &d->tokens, &tokenCount)) {
 80a1966:	4630      	mov	r0, r6
 80a1968:	ab01      	add	r3, sp, #4
 80a196a:	f7ff fe89 	bl	80a1680 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>
 80a196e:	b918      	cbnz	r0, 80a1978 <_ZN5spark9JSONValue9parseCopyEPKcj+0x54>
      constexpr __shared_count() noexcept : _M_pi(0)
 80a1970:	e9c4 0000 	strd	r0, r0, [r4]
 80a1974:	60a0      	str	r0, [r4, #8]
}
 80a1976:	e7ed      	b.n	80a1954 <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
    d->json = new(std::nothrow) char[size + 1];
 80a1978:	4914      	ldr	r1, [pc, #80]	; (80a19cc <_ZN5spark9JSONValue9parseCopyEPKcj+0xa8>)
 80a197a:	1c68      	adds	r0, r5, #1
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a197c:	9f02      	ldr	r7, [sp, #8]
 80a197e:	f000 fde9 	bl	80a2554 <_ZnajRKSt9nothrow_t>
    if (!d->json) {
 80a1982:	9b02      	ldr	r3, [sp, #8]
    d->json = new(std::nothrow) char[size + 1];
 80a1984:	6078      	str	r0, [r7, #4]
    if (!d->json) {
 80a1986:	6858      	ldr	r0, [r3, #4]
 80a1988:	2800      	cmp	r0, #0
 80a198a:	d0f1      	beq.n	80a1970 <_ZN5spark9JSONValue9parseCopyEPKcj+0x4c>
    memcpy(d->json, json, size); // TODO: Copy only token data
 80a198c:	462a      	mov	r2, r5
 80a198e:	4631      	mov	r1, r6
 80a1990:	f001 fcda 	bl	80a3348 <memcpy>
    d->freeJson = true;
 80a1994:	2201      	movs	r2, #1
 80a1996:	9b02      	ldr	r3, [sp, #8]
    if (!stringize(d->tokens, tokenCount, d->json)) {
 80a1998:	9901      	ldr	r1, [sp, #4]
    d->freeJson = true;
 80a199a:	721a      	strb	r2, [r3, #8]
    if (!stringize(d->tokens, tokenCount, d->json)) {
 80a199c:	6818      	ldr	r0, [r3, #0]
 80a199e:	685a      	ldr	r2, [r3, #4]
 80a19a0:	f7ff ff40 	bl	80a1824 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>
 80a19a4:	2800      	cmp	r0, #0
 80a19a6:	d0e3      	beq.n	80a1970 <_ZN5spark9JSONValue9parseCopyEPKcj+0x4c>
 80a19a8:	9b02      	ldr	r3, [sp, #8]
    return JSONValue(d->tokens, d);
 80a19aa:	6819      	ldr	r1, [r3, #0]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a19ac:	9304      	str	r3, [sp, #16]
      : _M_pi(__r._M_pi)
 80a19ae:	9b03      	ldr	r3, [sp, #12]
 80a19b0:	9305      	str	r3, [sp, #20]
	if (_M_pi != 0)
 80a19b2:	b113      	cbz	r3, 80a19ba <_ZN5spark9JSONValue9parseCopyEPKcj+0x96>
    { ++_M_use_count; }
 80a19b4:	685a      	ldr	r2, [r3, #4]
 80a19b6:	3201      	adds	r2, #1
 80a19b8:	605a      	str	r2, [r3, #4]
 80a19ba:	4620      	mov	r0, r4
 80a19bc:	aa04      	add	r2, sp, #16
 80a19be:	f7ff fdc7 	bl	80a1550 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 80a19c2:	a805      	add	r0, sp, #20
 80a19c4:	f7fe fbaa 	bl	80a011c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a19c8:	e7c4      	b.n	80a1954 <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
 80a19ca:	bf00      	nop
 80a19cc:	080a387c 	.word	0x080a387c

080a19d0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a19d0:	4b01      	ldr	r3, [pc, #4]	; (80a19d8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a19d2:	4a02      	ldr	r2, [pc, #8]	; (80a19dc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a19d4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a19d6:	4770      	bx	lr
 80a19d8:	200000f0 	.word	0x200000f0
 80a19dc:	080a3784 	.word	0x080a3784

080a19e0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a19e0:	2300      	movs	r3, #0
 80a19e2:	6840      	ldr	r0, [r0, #4]
 80a19e4:	461a      	mov	r2, r3
 80a19e6:	f7ff bc21 	b.w	80a122c <network_connect>

080a19ea <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a19ea:	2200      	movs	r2, #0
 80a19ec:	2102      	movs	r1, #2
 80a19ee:	6840      	ldr	r0, [r0, #4]
 80a19f0:	f7ff bc2c 	b.w	80a124c <network_disconnect>

080a19f4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a19f4:	2200      	movs	r2, #0
 80a19f6:	6840      	ldr	r0, [r0, #4]
 80a19f8:	4611      	mov	r1, r2
 80a19fa:	f7ff bc1f 	b.w	80a123c <network_connecting>

080a19fe <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a19fe:	2200      	movs	r2, #0
 80a1a00:	6840      	ldr	r0, [r0, #4]
 80a1a02:	4611      	mov	r1, r2
 80a1a04:	f7ff bc2a 	b.w	80a125c <network_ready>

080a1a08 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a1a08:	2300      	movs	r3, #0
 80a1a0a:	6840      	ldr	r0, [r0, #4]
 80a1a0c:	461a      	mov	r2, r3
 80a1a0e:	4619      	mov	r1, r3
 80a1a10:	f7ff bc2c 	b.w	80a126c <network_on>

080a1a14 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a1a14:	2300      	movs	r3, #0
 80a1a16:	6840      	ldr	r0, [r0, #4]
 80a1a18:	461a      	mov	r2, r3
 80a1a1a:	4619      	mov	r1, r3
 80a1a1c:	f7ff bc2e 	b.w	80a127c <network_off>

080a1a20 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a1a20:	2100      	movs	r1, #0
 80a1a22:	6840      	ldr	r0, [r0, #4]
 80a1a24:	f7ff bc52 	b.w	80a12cc <network_is_on>

080a1a28 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a1a28:	2100      	movs	r1, #0
 80a1a2a:	6840      	ldr	r0, [r0, #4]
 80a1a2c:	f7ff bc56 	b.w	80a12dc <network_is_off>

080a1a30 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a1a30:	2200      	movs	r2, #0
 80a1a32:	6840      	ldr	r0, [r0, #4]
 80a1a34:	f081 0101 	eor.w	r1, r1, #1
 80a1a38:	f7ff bc28 	b.w	80a128c <network_listen>

080a1a3c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a1a3c:	2200      	movs	r2, #0
 80a1a3e:	6840      	ldr	r0, [r0, #4]
 80a1a40:	f7ff bc34 	b.w	80a12ac <network_set_listen_timeout>

080a1a44 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a1a44:	2200      	movs	r2, #0
 80a1a46:	6840      	ldr	r0, [r0, #4]
 80a1a48:	4611      	mov	r1, r2
 80a1a4a:	f7ff bc37 	b.w	80a12bc <network_get_listen_timeout>

080a1a4e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a1a4e:	2200      	movs	r2, #0
 80a1a50:	6840      	ldr	r0, [r0, #4]
 80a1a52:	4611      	mov	r1, r2
 80a1a54:	f7ff bc22 	b.w	80a129c <network_listening>

080a1a58 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a1a58:	b570      	push	{r4, r5, r6, lr}
 80a1a5a:	4615      	mov	r5, r2
 80a1a5c:	b08e      	sub	sp, #56	; 0x38
 80a1a5e:	4604      	mov	r4, r0
    IPAddress addr;
 80a1a60:	a808      	add	r0, sp, #32
 80a1a62:	f7ff fcd3 	bl	80a140c <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a1a66:	2211      	movs	r2, #17
 80a1a68:	2100      	movs	r1, #0
 80a1a6a:	a803      	add	r0, sp, #12
 80a1a6c:	f001 fc94 	bl	80a3398 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1a70:	2600      	movs	r6, #0
 80a1a72:	4628      	mov	r0, r5
 80a1a74:	f001 fcce 	bl	80a3414 <strlen>
 80a1a78:	4b0a      	ldr	r3, [pc, #40]	; (80a1aa4 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a1a7a:	9600      	str	r6, [sp, #0]
 80a1a7c:	b281      	uxth	r1, r0
 80a1a7e:	685b      	ldr	r3, [r3, #4]
 80a1a80:	4628      	mov	r0, r5
 80a1a82:	aa03      	add	r2, sp, #12
 80a1a84:	f7ff fb26 	bl	80a10d4 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1a88:	b130      	cbz	r0, 80a1a98 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a1a8a:	4631      	mov	r1, r6
 80a1a8c:	4620      	mov	r0, r4
 80a1a8e:	f7ff fcdd 	bl	80a144c <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a1a92:	4620      	mov	r0, r4
 80a1a94:	b00e      	add	sp, #56	; 0x38
 80a1a96:	bd70      	pop	{r4, r5, r6, pc}
 80a1a98:	4620      	mov	r0, r4
 80a1a9a:	a903      	add	r1, sp, #12
 80a1a9c:	f7ff fcc4 	bl	80a1428 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a1aa0:	e7f7      	b.n	80a1a92 <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a1aa2:	bf00      	nop
 80a1aa4:	20000574 	.word	0x20000574

080a1aa8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a1aa8:	4b02      	ldr	r3, [pc, #8]	; (80a1ab4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a1aaa:	4a03      	ldr	r2, [pc, #12]	; (80a1ab8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a1aac:	601a      	str	r2, [r3, #0]
 80a1aae:	2200      	movs	r2, #0
 80a1ab0:	605a      	str	r2, [r3, #4]

} // spark
 80a1ab2:	4770      	bx	lr
 80a1ab4:	200000f4 	.word	0x200000f4
 80a1ab8:	080a3790 	.word	0x080a3790

080a1abc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1abe:	4606      	mov	r6, r0
 80a1ac0:	460d      	mov	r5, r1
  size_t n = 0;
 80a1ac2:	2400      	movs	r4, #0
 80a1ac4:	188f      	adds	r7, r1, r2
  while (size--) {
 80a1ac6:	42bd      	cmp	r5, r7
 80a1ac8:	d00c      	beq.n	80a1ae4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a1aca:	6833      	ldr	r3, [r6, #0]
 80a1acc:	4630      	mov	r0, r6
 80a1ace:	689b      	ldr	r3, [r3, #8]
 80a1ad0:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1ad4:	4798      	blx	r3
     if (chunk>=0)
 80a1ad6:	1e03      	subs	r3, r0, #0
 80a1ad8:	db01      	blt.n	80a1ade <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a1ada:	441c      	add	r4, r3
  while (size--) {
 80a1adc:	e7f3      	b.n	80a1ac6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a1ade:	2c00      	cmp	r4, #0
 80a1ae0:	bf08      	it	eq
 80a1ae2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1ae4:	4620      	mov	r0, r4
 80a1ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1ae8 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 80a1ae8:	b570      	push	{r4, r5, r6, lr}
 80a1aea:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1aec:	460c      	mov	r4, r1
    }
 80a1aee:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a1af0:	b149      	cbz	r1, 80a1b06 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1af2:	f001 fc8f 	bl	80a3414 <strlen>
 80a1af6:	682b      	ldr	r3, [r5, #0]
 80a1af8:	4602      	mov	r2, r0
 80a1afa:	4621      	mov	r1, r4
 80a1afc:	4628      	mov	r0, r5
    }
 80a1afe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a1b02:	68db      	ldr	r3, [r3, #12]
 80a1b04:	4718      	bx	r3
    }
 80a1b06:	bd70      	pop	{r4, r5, r6, pc}

080a1b08 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a1b08:	6803      	ldr	r3, [r0, #0]
 80a1b0a:	689b      	ldr	r3, [r3, #8]
 80a1b0c:	4718      	bx	r3

080a1b0e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1b0e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a1b10:	210d      	movs	r1, #13
{
 80a1b12:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a1b14:	f7ff fff8 	bl	80a1b08 <_ZN5Print5printEc>
  n += print('\n');
 80a1b18:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a1b1a:	4604      	mov	r4, r0
  n += print('\n');
 80a1b1c:	4628      	mov	r0, r5
 80a1b1e:	f7ff fff3 	bl	80a1b08 <_ZN5Print5printEc>
  return n;
}
 80a1b22:	4420      	add	r0, r4
 80a1b24:	bd38      	pop	{r3, r4, r5, pc}

080a1b26 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a1b26:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a1b28:	2a01      	cmp	r2, #1
 80a1b2a:	bf98      	it	ls
 80a1b2c:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a1b2e:	b530      	push	{r4, r5, lr}
 80a1b30:	b08b      	sub	sp, #44	; 0x2c
 80a1b32:	460c      	mov	r4, r1
  *str = '\0';
 80a1b34:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a1b38:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a1b3a:	4625      	mov	r5, r4
 80a1b3c:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a1b40:	fb04 5312 	mls	r3, r4, r2, r5
 80a1b44:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1b46:	2b09      	cmp	r3, #9
 80a1b48:	bf94      	ite	ls
 80a1b4a:	3330      	addls	r3, #48	; 0x30
 80a1b4c:	3337      	addhi	r3, #55	; 0x37
 80a1b4e:	b2db      	uxtb	r3, r3
  } while(n);
 80a1b50:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1b52:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a1b56:	d9f0      	bls.n	80a1b3a <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a1b58:	f7ff ffc6 	bl	80a1ae8 <_ZN5Print5writeEPKc>
}
 80a1b5c:	b00b      	add	sp, #44	; 0x2c
 80a1b5e:	bd30      	pop	{r4, r5, pc}

080a1b60 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 80a1b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1b64:	b086      	sub	sp, #24
 80a1b66:	af00      	add	r7, sp, #0
 80a1b68:	4605      	mov	r5, r0
 80a1b6a:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 80a1b6c:	1d38      	adds	r0, r7, #4
 80a1b6e:	2114      	movs	r1, #20
{
 80a1b70:	4614      	mov	r4, r2
    va_copy(args2, args);
 80a1b72:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 80a1b74:	f7ff fbd2 	bl	80a131c <vsnprintf>

    if (n<bufsize)
 80a1b78:	2813      	cmp	r0, #19
 80a1b7a:	d80e      	bhi.n	80a1b9a <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 80a1b7c:	4628      	mov	r0, r5
 80a1b7e:	1d39      	adds	r1, r7, #4
 80a1b80:	f7ff ffb2 	bl	80a1ae8 <_ZN5Print5writeEPKc>
 80a1b84:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 80a1b86:	b11e      	cbz	r6, 80a1b90 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 80a1b88:	4628      	mov	r0, r5
 80a1b8a:	f7ff ffc0 	bl	80a1b0e <_ZN5Print7printlnEv>
 80a1b8e:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 80a1b90:	4620      	mov	r0, r4
 80a1b92:	3718      	adds	r7, #24
 80a1b94:	46bd      	mov	sp, r7
 80a1b96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 80a1b9a:	f100 0308 	add.w	r3, r0, #8
 80a1b9e:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 80a1ba2:	46e8      	mov	r8, sp
        char bigger[n+1];
 80a1ba4:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 80a1ba8:	4622      	mov	r2, r4
 80a1baa:	1c41      	adds	r1, r0, #1
 80a1bac:	683b      	ldr	r3, [r7, #0]
 80a1bae:	4668      	mov	r0, sp
 80a1bb0:	f7ff fbb4 	bl	80a131c <vsnprintf>
  return write(str);
 80a1bb4:	4669      	mov	r1, sp
 80a1bb6:	4628      	mov	r0, r5
 80a1bb8:	f7ff ff96 	bl	80a1ae8 <_ZN5Print5writeEPKc>
 80a1bbc:	4604      	mov	r4, r0
 80a1bbe:	46c5      	mov	sp, r8
 80a1bc0:	e7e1      	b.n	80a1b86 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

080a1bc2 <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
 80a1bc2:	b510      	push	{r4, lr}
 80a1bc4:	4604      	mov	r4, r0
    return LED_RGB_IsOverRidden();
 80a1bc6:	f7ff faad 	bl	80a1124 <LED_RGB_IsOverRidden>
    if (override == controlled()) {
 80a1bca:	4284      	cmp	r4, r0
 80a1bcc:	d008      	beq.n	80a1be0 <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
 80a1bce:	b11c      	cbz	r4, 80a1bd8 <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
 80a1bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Start();
 80a1bd4:	f7ff ba8e 	b.w	80a10f4 <LED_Signaling_Start>
}
 80a1bd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Stop();
 80a1bdc:	f7ff ba92 	b.w	80a1104 <LED_Signaling_Stop>
}
 80a1be0:	bd10      	pop	{r4, pc}

080a1be2 <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
 80a1be2:	b570      	push	{r4, r5, r6, lr}
 80a1be4:	4605      	mov	r5, r0
 80a1be6:	460e      	mov	r6, r1
 80a1be8:	4614      	mov	r4, r2
    return LED_RGB_IsOverRidden();
 80a1bea:	f7ff fa9b 	bl	80a1124 <LED_RGB_IsOverRidden>
    if (!controlled()) {
 80a1bee:	b150      	cbz	r0, 80a1c06 <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
 80a1bf0:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 80a1bf4:	ea44 4005 	orr.w	r0, r4, r5, lsl #16
 80a1bf8:	f7ff fa74 	bl	80a10e4 <LED_SetSignalingColor>
    LED_On(LED_RGB);
}
 80a1bfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LED_On(LED_RGB);
 80a1c00:	20e7      	movs	r0, #231	; 0xe7
 80a1c02:	f7ff ba97 	b.w	80a1134 <LED_On>
}
 80a1c06:	bd70      	pop	{r4, r5, r6, pc}

080a1c08 <_ZN8RGBClass10brightnessEhb>:

void RGBClass::brightness(uint8_t brightness, bool update)
{
 80a1c08:	b510      	push	{r4, lr}
 80a1c0a:	460c      	mov	r4, r1
    LED_SetBrightness(brightness);
 80a1c0c:	f7ff fa82 	bl	80a1114 <LED_SetBrightness>
    return LED_RGB_IsOverRidden();
 80a1c10:	f7ff fa88 	bl	80a1124 <LED_RGB_IsOverRidden>
    if (controlled() && update) {
 80a1c14:	b128      	cbz	r0, 80a1c22 <_ZN8RGBClass10brightnessEhb+0x1a>
 80a1c16:	b124      	cbz	r4, 80a1c22 <_ZN8RGBClass10brightnessEhb+0x1a>
        LED_On(LED_RGB);
    }
}
 80a1c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_On(LED_RGB);
 80a1c1c:	20e7      	movs	r0, #231	; 0xe7
 80a1c1e:	f7ff ba89 	b.w	80a1134 <LED_On>
}
 80a1c22:	bd10      	pop	{r4, pc}

080a1c24 <_ZN8RGBClass10brightnessEv>:

uint8_t RGBClass::brightness()
{
    return Get_LED_Brightness();
 80a1c24:	f7ff ba8e 	b.w	80a1144 <Get_LED_Brightness>

080a1c28 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1c28:	2200      	movs	r2, #0
 80a1c2a:	4b01      	ldr	r3, [pc, #4]	; (80a1c30 <_GLOBAL__sub_I_RGB+0x8>)
 80a1c2c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 80a1c2e:	4770      	bx	lr
 80a1c30:	200000fc 	.word	0x200000fc

080a1c34 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a1c34:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a1c36:	2600      	movs	r6, #0
 80a1c38:	4604      	mov	r4, r0
 80a1c3a:	460d      	mov	r5, r1
 80a1c3c:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a1c40:	f7ff f90e 	bl	80a0e60 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a1c44:	4628      	mov	r0, r5
    _spi = spi;
 80a1c46:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a1c48:	f7ff f9bc 	bl	80a0fc4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a1c4c:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a1c4e:	6066      	str	r6, [r4, #4]
}
 80a1c50:	bd70      	pop	{r4, r5, r6, pc}

080a1c52 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a1c52:	b510      	push	{r4, lr}
 80a1c54:	4604      	mov	r4, r0
{
	free(buffer);
 80a1c56:	6800      	ldr	r0, [r0, #0]
 80a1c58:	f7ff fb50 	bl	80a12fc <free>
}
 80a1c5c:	4620      	mov	r0, r4
 80a1c5e:	bd10      	pop	{r4, pc}

080a1c60 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a1c60:	b510      	push	{r4, lr}
 80a1c62:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a1c64:	6800      	ldr	r0, [r0, #0]
 80a1c66:	b108      	cbz	r0, 80a1c6c <_ZN6String10invalidateEv+0xc>
 80a1c68:	f7ff fb48 	bl	80a12fc <free>
	buffer = NULL;
 80a1c6c:	2300      	movs	r3, #0
	capacity = len = 0;
 80a1c6e:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a1c72:	6023      	str	r3, [r4, #0]
}
 80a1c74:	bd10      	pop	{r4, pc}

080a1c76 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a1c76:	b538      	push	{r3, r4, r5, lr}
 80a1c78:	4604      	mov	r4, r0
 80a1c7a:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a1c7c:	6800      	ldr	r0, [r0, #0]
 80a1c7e:	3101      	adds	r1, #1
 80a1c80:	f7ff fb44 	bl	80a130c <realloc>
	if (newbuffer) {
 80a1c84:	b110      	cbz	r0, 80a1c8c <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a1c86:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a1c8a:	2001      	movs	r0, #1
	}
	return 0;
}
 80a1c8c:	bd38      	pop	{r3, r4, r5, pc}

080a1c8e <_ZN6String7reserveEj>:
{
 80a1c8e:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a1c90:	6803      	ldr	r3, [r0, #0]
{
 80a1c92:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a1c94:	b123      	cbz	r3, 80a1ca0 <_ZN6String7reserveEj+0x12>
 80a1c96:	6843      	ldr	r3, [r0, #4]
 80a1c98:	428b      	cmp	r3, r1
 80a1c9a:	d301      	bcc.n	80a1ca0 <_ZN6String7reserveEj+0x12>
 80a1c9c:	2001      	movs	r0, #1
}
 80a1c9e:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a1ca0:	4620      	mov	r0, r4
 80a1ca2:	f7ff ffe8 	bl	80a1c76 <_ZN6String12changeBufferEj>
 80a1ca6:	2800      	cmp	r0, #0
 80a1ca8:	d0f9      	beq.n	80a1c9e <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a1caa:	68a3      	ldr	r3, [r4, #8]
 80a1cac:	2b00      	cmp	r3, #0
 80a1cae:	d1f5      	bne.n	80a1c9c <_ZN6String7reserveEj+0xe>
 80a1cb0:	6822      	ldr	r2, [r4, #0]
 80a1cb2:	7013      	strb	r3, [r2, #0]
 80a1cb4:	e7f2      	b.n	80a1c9c <_ZN6String7reserveEj+0xe>

080a1cb6 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1cb6:	b570      	push	{r4, r5, r6, lr}
 80a1cb8:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a1cba:	4611      	mov	r1, r2
{
 80a1cbc:	4604      	mov	r4, r0
 80a1cbe:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a1cc0:	f7ff ffe5 	bl	80a1c8e <_ZN6String7reserveEj>
 80a1cc4:	b920      	cbnz	r0, 80a1cd0 <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a1cc6:	4620      	mov	r0, r4
 80a1cc8:	f7ff ffca 	bl	80a1c60 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a1ccc:	4620      	mov	r0, r4
 80a1cce:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a1cd0:	462a      	mov	r2, r5
 80a1cd2:	4631      	mov	r1, r6
 80a1cd4:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a1cd6:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a1cd8:	f001 fb36 	bl	80a3348 <memcpy>
	buffer[len] = 0;
 80a1cdc:	2100      	movs	r1, #0
 80a1cde:	6822      	ldr	r2, [r4, #0]
 80a1ce0:	68a3      	ldr	r3, [r4, #8]
 80a1ce2:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a1ce4:	e7f2      	b.n	80a1ccc <_ZN6String4copyEPKcj+0x16>

080a1ce6 <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 80a1ce6:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 80a1ce8:	2300      	movs	r3, #0
String::String(const char *cstr)
 80a1cea:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a1cec:	460d      	mov	r5, r1
	capacity = 0;
 80a1cee:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a1cf2:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1cf4:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 80a1cf6:	b139      	cbz	r1, 80a1d08 <_ZN6StringC1EPKc+0x22>
 80a1cf8:	4608      	mov	r0, r1
 80a1cfa:	f001 fb8b 	bl	80a3414 <strlen>
 80a1cfe:	4629      	mov	r1, r5
 80a1d00:	4602      	mov	r2, r0
 80a1d02:	4620      	mov	r0, r4
 80a1d04:	f7ff ffd7 	bl	80a1cb6 <_ZN6String4copyEPKcj>
}
 80a1d08:	4620      	mov	r0, r4
 80a1d0a:	bd38      	pop	{r3, r4, r5, pc}

080a1d0c <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 80a1d0c:	b538      	push	{r3, r4, r5, lr}
 80a1d0e:	4605      	mov	r5, r0
	if (buffer) {
 80a1d10:	6800      	ldr	r0, [r0, #0]
{
 80a1d12:	460c      	mov	r4, r1
	if (buffer) {
 80a1d14:	b168      	cbz	r0, 80a1d32 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
 80a1d16:	686a      	ldr	r2, [r5, #4]
 80a1d18:	688b      	ldr	r3, [r1, #8]
 80a1d1a:	429a      	cmp	r2, r3
 80a1d1c:	d307      	bcc.n	80a1d2e <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
 80a1d1e:	6809      	ldr	r1, [r1, #0]
 80a1d20:	f001 fb70 	bl	80a3404 <strcpy>
			len = rhs.len;
 80a1d24:	68a3      	ldr	r3, [r4, #8]
 80a1d26:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 80a1d28:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 80a1d2a:	60a3      	str	r3, [r4, #8]
}
 80a1d2c:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 80a1d2e:	f7ff fae5 	bl	80a12fc <free>
	buffer = rhs.buffer;
 80a1d32:	6823      	ldr	r3, [r4, #0]
 80a1d34:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 80a1d36:	6863      	ldr	r3, [r4, #4]
 80a1d38:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 80a1d3a:	68a3      	ldr	r3, [r4, #8]
 80a1d3c:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 80a1d3e:	2300      	movs	r3, #0
	rhs.capacity = 0;
 80a1d40:	e9c4 3300 	strd	r3, r3, [r4]
 80a1d44:	e7f1      	b.n	80a1d2a <_ZN6String4moveERS_+0x1e>

080a1d46 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a1d46:	4288      	cmp	r0, r1
{
 80a1d48:	b510      	push	{r4, lr}
 80a1d4a:	460b      	mov	r3, r1
 80a1d4c:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a1d4e:	d004      	beq.n	80a1d5a <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a1d50:	6809      	ldr	r1, [r1, #0]
 80a1d52:	b121      	cbz	r1, 80a1d5e <_ZN6StringaSERKS_+0x18>
 80a1d54:	689a      	ldr	r2, [r3, #8]
 80a1d56:	f7ff ffae 	bl	80a1cb6 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a1d5a:	4620      	mov	r0, r4
 80a1d5c:	bd10      	pop	{r4, pc}
	else invalidate();
 80a1d5e:	f7ff ff7f 	bl	80a1c60 <_ZN6String10invalidateEv>
 80a1d62:	e7fa      	b.n	80a1d5a <_ZN6StringaSERKS_+0x14>

080a1d64 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 80a1d64:	2300      	movs	r3, #0
String::String(const String &value)
 80a1d66:	b510      	push	{r4, lr}
 80a1d68:	4604      	mov	r4, r0
	capacity = 0;
 80a1d6a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a1d6e:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1d70:	7303      	strb	r3, [r0, #12]
	*this = value;
 80a1d72:	f7ff ffe8 	bl	80a1d46 <_ZN6StringaSERKS_>
}
 80a1d76:	4620      	mov	r0, r4
 80a1d78:	bd10      	pop	{r4, pc}

080a1d7a <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 80a1d7a:	4288      	cmp	r0, r1
{
 80a1d7c:	b510      	push	{r4, lr}
 80a1d7e:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 80a1d80:	d001      	beq.n	80a1d86 <_ZN6StringaSEOS_+0xc>
 80a1d82:	f7ff ffc3 	bl	80a1d0c <_ZN6String4moveERS_>
	return *this;
}
 80a1d86:	4620      	mov	r0, r4
 80a1d88:	bd10      	pop	{r4, pc}

080a1d8a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a1d8a:	b538      	push	{r3, r4, r5, lr}
 80a1d8c:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a1d8e:	460c      	mov	r4, r1
 80a1d90:	b149      	cbz	r1, 80a1da6 <_ZN6StringaSEPKc+0x1c>
 80a1d92:	4608      	mov	r0, r1
 80a1d94:	f001 fb3e 	bl	80a3414 <strlen>
 80a1d98:	4621      	mov	r1, r4
 80a1d9a:	4602      	mov	r2, r0
 80a1d9c:	4628      	mov	r0, r5
 80a1d9e:	f7ff ff8a 	bl	80a1cb6 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a1da2:	4628      	mov	r0, r5
 80a1da4:	bd38      	pop	{r3, r4, r5, pc}
	else invalidate();
 80a1da6:	f7ff ff5b 	bl	80a1c60 <_ZN6String10invalidateEv>
 80a1daa:	e7fa      	b.n	80a1da2 <_ZN6StringaSEPKc+0x18>

080a1dac <_ZN6StringC1Ec>:
	buffer = NULL;
 80a1dac:	2300      	movs	r3, #0
String::String(char c)
 80a1dae:	b513      	push	{r0, r1, r4, lr}
 80a1db0:	4604      	mov	r4, r0
	buf[0] = c;
 80a1db2:	f88d 1004 	strb.w	r1, [sp, #4]
	capacity = 0;
 80a1db6:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a1dba:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1dbc:	7303      	strb	r3, [r0, #12]
	*this = buf;
 80a1dbe:	a901      	add	r1, sp, #4
	buf[1] = 0;
 80a1dc0:	f88d 3005 	strb.w	r3, [sp, #5]
	*this = buf;
 80a1dc4:	f7ff ffe1 	bl	80a1d8a <_ZN6StringaSEPKc>
}
 80a1dc8:	4620      	mov	r0, r4
 80a1dca:	b002      	add	sp, #8
 80a1dcc:	bd10      	pop	{r4, pc}

080a1dce <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a1dce:	b570      	push	{r4, r5, r6, lr}
 80a1dd0:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a1dd2:	460e      	mov	r6, r1
 80a1dd4:	b909      	cbnz	r1, 80a1dda <_ZN6String6concatEPKcj+0xc>
 80a1dd6:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a1dd8:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a1dda:	b16a      	cbz	r2, 80a1df8 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 80a1ddc:	6884      	ldr	r4, [r0, #8]
 80a1dde:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 80a1de0:	4621      	mov	r1, r4
 80a1de2:	f7ff ff54 	bl	80a1c8e <_ZN6String7reserveEj>
 80a1de6:	2800      	cmp	r0, #0
 80a1de8:	d0f5      	beq.n	80a1dd6 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a1dea:	6828      	ldr	r0, [r5, #0]
 80a1dec:	68ab      	ldr	r3, [r5, #8]
 80a1dee:	4631      	mov	r1, r6
 80a1df0:	4418      	add	r0, r3
 80a1df2:	f001 fb07 	bl	80a3404 <strcpy>
	len = newlen;
 80a1df6:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 80a1df8:	2001      	movs	r0, #1
 80a1dfa:	e7ed      	b.n	80a1dd8 <_ZN6String6concatEPKcj+0xa>

080a1dfc <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
 80a1dfc:	688a      	ldr	r2, [r1, #8]
 80a1dfe:	6809      	ldr	r1, [r1, #0]
 80a1e00:	f7ff bfe5 	b.w	80a1dce <_ZN6String6concatEPKcj>

080a1e04 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
 80a1e04:	b40e      	push	{r1, r2, r3}
 80a1e06:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
 80a1e08:	ad09      	add	r5, sp, #36	; 0x24
 80a1e0a:	f855 7b04 	ldr.w	r7, [r5], #4
 80a1e0e:	4604      	mov	r4, r0
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 80a1e10:	462b      	mov	r3, r5
 80a1e12:	463a      	mov	r2, r7
 80a1e14:	2105      	movs	r1, #5
 80a1e16:	a802      	add	r0, sp, #8
    va_start(marker, fmt);
 80a1e18:	9501      	str	r5, [sp, #4]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 80a1e1a:	f7ff fa7f 	bl	80a131c <vsnprintf>
 80a1e1e:	4606      	mov	r6, r0
    va_end(marker);

    String result;
 80a1e20:	490b      	ldr	r1, [pc, #44]	; (80a1e50 <_ZN6String6formatEPKcz+0x4c>)
 80a1e22:	4620      	mov	r0, r4
 80a1e24:	f7ff ff5f 	bl	80a1ce6 <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
 80a1e28:	4631      	mov	r1, r6
 80a1e2a:	4620      	mov	r0, r4
 80a1e2c:	f7ff ff2f 	bl	80a1c8e <_ZN6String7reserveEj>
    if (result.buffer) {
 80a1e30:	6820      	ldr	r0, [r4, #0]
 80a1e32:	b130      	cbz	r0, 80a1e42 <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 80a1e34:	462b      	mov	r3, r5
 80a1e36:	463a      	mov	r2, r7
 80a1e38:	1c71      	adds	r1, r6, #1
        va_start(marker, fmt);
 80a1e3a:	9501      	str	r5, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 80a1e3c:	f7ff fa6e 	bl	80a131c <vsnprintf>
        va_end(marker);
        result.len = n;
 80a1e40:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
 80a1e42:	4620      	mov	r0, r4
 80a1e44:	b004      	add	sp, #16
 80a1e46:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80a1e4a:	b003      	add	sp, #12
 80a1e4c:	4770      	bx	lr
 80a1e4e:	bf00      	nop
 80a1e50:	080a375f 	.word	0x080a375f

080a1e54 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a1e54:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a1e56:	2000      	movs	r0, #0
 80a1e58:	4b04      	ldr	r3, [pc, #16]	; (80a1e6c <_GLOBAL__sub_I_System+0x18>)
 80a1e5a:	601a      	str	r2, [r3, #0]
 80a1e5c:	4b04      	ldr	r3, [pc, #16]	; (80a1e70 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 80a1e5e:	4a05      	ldr	r2, [pc, #20]	; (80a1e74 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 80a1e60:	6018      	str	r0, [r3, #0]
 80a1e62:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
 80a1e64:	7198      	strb	r0, [r3, #6]
 80a1e66:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1e68:	f7ff b98c 	b.w	80a1184 <set_system_mode>
 80a1e6c:	20000118 	.word	0x20000118
 80a1e70:	2000010c 	.word	0x2000010c
 80a1e74:	ffff0000 	.word	0xffff0000

080a1e78 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 80a1e78:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a1e7a:	2000      	movs	r0, #0
 80a1e7c:	f7ff f9c6 	bl	80a120c <spark_sync_time_pending>
 80a1e80:	b128      	cbz	r0, 80a1e8e <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a1e82:	f7ff f9bb 	bl	80a11fc <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a1e86:	f080 0001 	eor.w	r0, r0, #1
 80a1e8a:	b2c0      	uxtb	r0, r0
    }
 80a1e8c:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a1e8e:	2001      	movs	r0, #1
 80a1e90:	e7fc      	b.n	80a1e8c <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

080a1e92 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80a1e92:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 80a1e94:	2000      	movs	r0, #0
 80a1e96:	f7ff f80b 	bl	80a0eb0 <hal_rtc_time_is_valid>
    if (rtcstate)
 80a1e9a:	4604      	mov	r4, r0
 80a1e9c:	b9a0      	cbnz	r0, 80a1ec8 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80a1e9e:	f7ff f969 	bl	80a1174 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80a1ea2:	2801      	cmp	r0, #1
 80a1ea4:	d110      	bne.n	80a1ec8 <_ZN9TimeClass7isValidEv+0x36>
 80a1ea6:	4620      	mov	r0, r4
 80a1ea8:	f7ff f984 	bl	80a11b4 <system_thread_get_state>
 80a1eac:	b960      	cbnz	r0, 80a1ec8 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 80a1eae:	f7ff ffe3 	bl	80a1e78 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a1eb2:	b910      	cbnz	r0, 80a1eba <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 80a1eb4:	f7ff f99a 	bl	80a11ec <spark_process>
        while (_while() && !_condition()) {
 80a1eb8:	e7f9      	b.n	80a1eae <_ZN9TimeClass7isValidEv+0x1c>
 80a1eba:	f7ff ffdd 	bl	80a1e78 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 80a1ebe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 80a1ec2:	2000      	movs	r0, #0
 80a1ec4:	f7fe bff4 	b.w	80a0eb0 <hal_rtc_time_is_valid>
}
 80a1ec8:	4620      	mov	r0, r4
 80a1eca:	bd10      	pop	{r4, pc}

080a1ecc <_ZN9TimeClass3nowEv>:
{
 80a1ecc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 80a1ece:	f7ff ffe0 	bl	80a1e92 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 80a1ed2:	2210      	movs	r2, #16
 80a1ed4:	2100      	movs	r1, #0
 80a1ed6:	4668      	mov	r0, sp
 80a1ed8:	f001 fa5e 	bl	80a3398 <memset>
    hal_rtc_get_time(&tv, nullptr);
 80a1edc:	2100      	movs	r1, #0
 80a1ede:	4668      	mov	r0, sp
 80a1ee0:	f7fe ffee 	bl	80a0ec0 <hal_rtc_get_time>
}
 80a1ee4:	9800      	ldr	r0, [sp, #0]
 80a1ee6:	b005      	add	sp, #20
 80a1ee8:	f85d fb04 	ldr.w	pc, [sp], #4

080a1eec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1eec:	4b02      	ldr	r3, [pc, #8]	; (80a1ef8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a1eee:	681a      	ldr	r2, [r3, #0]
 80a1ef0:	4b02      	ldr	r3, [pc, #8]	; (80a1efc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1ef2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a1ef4:	4770      	bx	lr
 80a1ef6:	bf00      	nop
 80a1ef8:	20000000 	.word	0x20000000
 80a1efc:	2000011c 	.word	0x2000011c

080a1f00 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a1f00:	4770      	bx	lr

080a1f02 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1f02:	7441      	strb	r1, [r0, #17]
}
 80a1f04:	4770      	bx	lr

080a1f06 <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a1f06:	4770      	bx	lr

080a1f08 <_ZN11USARTSerial17availableForWriteEv>:
{
 80a1f08:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a1f0a:	7c00      	ldrb	r0, [r0, #16]
 80a1f0c:	f7ff f8a2 	bl	80a1054 <hal_usart_available_data_for_write>
}
 80a1f10:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1f14:	bd08      	pop	{r3, pc}

080a1f16 <_ZN11USARTSerial9availableEv>:
{
 80a1f16:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a1f18:	7c00      	ldrb	r0, [r0, #16]
 80a1f1a:	f7ff f873 	bl	80a1004 <hal_usart_available>
}
 80a1f1e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1f22:	bd08      	pop	{r3, pc}

080a1f24 <_ZN11USARTSerial4peekEv>:
{
 80a1f24:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a1f26:	7c00      	ldrb	r0, [r0, #16]
 80a1f28:	f7ff f87c 	bl	80a1024 <hal_usart_peek>
}
 80a1f2c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1f30:	bd08      	pop	{r3, pc}

080a1f32 <_ZN11USARTSerial4readEv>:
{
 80a1f32:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a1f34:	7c00      	ldrb	r0, [r0, #16]
 80a1f36:	f7ff f86d 	bl	80a1014 <hal_usart_read>
}
 80a1f3a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1f3e:	bd08      	pop	{r3, pc}

080a1f40 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
 80a1f40:	7c00      	ldrb	r0, [r0, #16]
 80a1f42:	f7ff b877 	b.w	80a1034 <hal_usart_flush>

080a1f46 <_ZN11USARTSerial5writeEh>:
{
 80a1f46:	b570      	push	{r4, r5, r6, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a1f48:	7c46      	ldrb	r6, [r0, #17]
{
 80a1f4a:	4604      	mov	r4, r0
 80a1f4c:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a1f4e:	b12e      	cbz	r6, 80a1f5c <_ZN11USARTSerial5writeEh+0x16>
	  return hal_usart_write(_serial, c);
 80a1f50:	4629      	mov	r1, r5
 80a1f52:	7c20      	ldrb	r0, [r4, #16]
}
 80a1f54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a1f58:	f7ff b84c 	b.w	80a0ff4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a1f5c:	7c00      	ldrb	r0, [r0, #16]
 80a1f5e:	f7ff f879 	bl	80a1054 <hal_usart_available_data_for_write>
 80a1f62:	2800      	cmp	r0, #0
 80a1f64:	dcf4      	bgt.n	80a1f50 <_ZN11USARTSerial5writeEh+0xa>
}
 80a1f66:	4630      	mov	r0, r6
 80a1f68:	bd70      	pop	{r4, r5, r6, pc}

080a1f6a <_ZN11USARTSerialD0Ev>:
 80a1f6a:	b510      	push	{r4, lr}
 80a1f6c:	4604      	mov	r4, r0
 80a1f6e:	2114      	movs	r1, #20
 80a1f70:	f000 faec 	bl	80a254c <_ZdlPvj>
 80a1f74:	4620      	mov	r0, r4
 80a1f76:	bd10      	pop	{r4, pc}

080a1f78 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a1f78:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a1f7c:	b510      	push	{r4, lr}
 80a1f7e:	4604      	mov	r4, r0
 80a1f80:	4608      	mov	r0, r1
 80a1f82:	4611      	mov	r1, r2
 80a1f84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1f88:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a1f8c:	4a04      	ldr	r2, [pc, #16]	; (80a1fa0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a1f8e:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a1f90:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a1f92:	2201      	movs	r2, #1
 80a1f94:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a1f96:	461a      	mov	r2, r3
 80a1f98:	f7ff f824 	bl	80a0fe4 <hal_usart_init>
}
 80a1f9c:	4620      	mov	r0, r4
 80a1f9e:	bd10      	pop	{r4, pc}
 80a1fa0:	080a37e8 	.word	0x080a37e8

080a1fa4 <_Z22__fetch_global_Serial1v>:
{
 80a1fa4:	b538      	push	{r3, r4, r5, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a1fa6:	4d0c      	ldr	r5, [pc, #48]	; (80a1fd8 <_Z22__fetch_global_Serial1v+0x34>)
 80a1fa8:	7829      	ldrb	r1, [r5, #0]
 80a1faa:	f3bf 8f5b 	dmb	ish
 80a1fae:	f011 0401 	ands.w	r4, r1, #1
 80a1fb2:	d10f      	bne.n	80a1fd4 <_Z22__fetch_global_Serial1v+0x30>
 80a1fb4:	4628      	mov	r0, r5
 80a1fb6:	f7fe f878 	bl	80a00aa <__cxa_guard_acquire>
 80a1fba:	b158      	cbz	r0, 80a1fd4 <_Z22__fetch_global_Serial1v+0x30>
 80a1fbc:	4621      	mov	r1, r4
 80a1fbe:	4b07      	ldr	r3, [pc, #28]	; (80a1fdc <_Z22__fetch_global_Serial1v+0x38>)
 80a1fc0:	4a07      	ldr	r2, [pc, #28]	; (80a1fe0 <_Z22__fetch_global_Serial1v+0x3c>)
 80a1fc2:	4808      	ldr	r0, [pc, #32]	; (80a1fe4 <_Z22__fetch_global_Serial1v+0x40>)
 80a1fc4:	f7ff ffd8 	bl	80a1f78 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a1fc8:	4628      	mov	r0, r5
 80a1fca:	f7fe f873 	bl	80a00b4 <__cxa_guard_release>
 80a1fce:	4806      	ldr	r0, [pc, #24]	; (80a1fe8 <_Z22__fetch_global_Serial1v+0x44>)
 80a1fd0:	f001 f9b4 	bl	80a333c <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a1fd4:	4803      	ldr	r0, [pc, #12]	; (80a1fe4 <_Z22__fetch_global_Serial1v+0x40>)
 80a1fd6:	bd38      	pop	{r3, r4, r5, pc}
 80a1fd8:	20000120 	.word	0x20000120
 80a1fdc:	200001a8 	.word	0x200001a8
 80a1fe0:	20000124 	.word	0x20000124
 80a1fe4:	2000022c 	.word	0x2000022c
 80a1fe8:	080a1f07 	.word	0x080a1f07

080a1fec <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1fec:	7441      	strb	r1, [r0, #17]
}
 80a1fee:	4770      	bx	lr

080a1ff0 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1ff0:	4770      	bx	lr

080a1ff2 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a1ff2:	4770      	bx	lr

080a1ff4 <_ZN9USBSerial4readEv>:
{
 80a1ff4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a1ff6:	2100      	movs	r1, #0
 80a1ff8:	7c00      	ldrb	r0, [r0, #16]
 80a1ffa:	f7ff f853 	bl	80a10a4 <HAL_USB_USART_Receive_Data>
}
 80a1ffe:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a2002:	bd08      	pop	{r3, pc}

080a2004 <_ZN9USBSerial4peekEv>:
{
 80a2004:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a2006:	2101      	movs	r1, #1
 80a2008:	7c00      	ldrb	r0, [r0, #16]
 80a200a:	f7ff f84b 	bl	80a10a4 <HAL_USB_USART_Receive_Data>
}
 80a200e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a2012:	bd08      	pop	{r3, pc}

080a2014 <_ZN9USBSerial17availableForWriteEv>:
{
 80a2014:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a2016:	7c00      	ldrb	r0, [r0, #16]
 80a2018:	f7ff f83c 	bl	80a1094 <HAL_USB_USART_Available_Data_For_Write>
}
 80a201c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2020:	bd08      	pop	{r3, pc}

080a2022 <_ZN9USBSerial9availableEv>:
{
 80a2022:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a2024:	7c00      	ldrb	r0, [r0, #16]
 80a2026:	f7ff f82d 	bl	80a1084 <HAL_USB_USART_Available_Data>
}
 80a202a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a202e:	bd08      	pop	{r3, pc}

080a2030 <_ZN9USBSerial5writeEh>:
{
 80a2030:	b538      	push	{r3, r4, r5, lr}
 80a2032:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2034:	7c00      	ldrb	r0, [r0, #16]
{
 80a2036:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2038:	f7ff f82c 	bl	80a1094 <HAL_USB_USART_Available_Data_For_Write>
 80a203c:	2800      	cmp	r0, #0
 80a203e:	dc01      	bgt.n	80a2044 <_ZN9USBSerial5writeEh+0x14>
 80a2040:	7c60      	ldrb	r0, [r4, #17]
 80a2042:	b128      	cbz	r0, 80a2050 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a2044:	4629      	mov	r1, r5
 80a2046:	7c20      	ldrb	r0, [r4, #16]
 80a2048:	f7ff f834 	bl	80a10b4 <HAL_USB_USART_Send_Data>
 80a204c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a2050:	bd38      	pop	{r3, r4, r5, pc}

080a2052 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a2052:	7c00      	ldrb	r0, [r0, #16]
 80a2054:	f7ff b836 	b.w	80a10c4 <HAL_USB_USART_Flush_Data>

080a2058 <_ZN9USBSerialD0Ev>:
 80a2058:	b510      	push	{r4, lr}
 80a205a:	4604      	mov	r4, r0
 80a205c:	2114      	movs	r1, #20
 80a205e:	f000 fa75 	bl	80a254c <_ZdlPvj>
 80a2062:	4620      	mov	r0, r4
 80a2064:	bd10      	pop	{r4, pc}

080a2066 <__tcf_1>:
 80a2066:	4770      	bx	lr

080a2068 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2068:	b510      	push	{r4, lr}
 80a206a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a206e:	4604      	mov	r4, r0
 80a2070:	4608      	mov	r0, r1
 80a2072:	2100      	movs	r1, #0
 80a2074:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a2078:	4b04      	ldr	r3, [pc, #16]	; (80a208c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a207a:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a207c:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a207e:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a2080:	4611      	mov	r1, r2
  _blocking = true;
 80a2082:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a2084:	f7fe ffee 	bl	80a1064 <HAL_USB_USART_Init>
}
 80a2088:	4620      	mov	r0, r4
 80a208a:	bd10      	pop	{r4, pc}
 80a208c:	080a3818 	.word	0x080a3818

080a2090 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a2090:	2200      	movs	r2, #0
 80a2092:	7c00      	ldrb	r0, [r0, #16]
 80a2094:	f7fe bfee 	b.w	80a1074 <HAL_USB_USART_Begin>

080a2098 <_Z19acquireSerialBufferv>:
{
 80a2098:	b510      	push	{r4, lr}
 80a209a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a209c:	2214      	movs	r2, #20
 80a209e:	2100      	movs	r1, #0
 80a20a0:	f001 f97a 	bl	80a3398 <memset>
  conf.rx_buffer = serial_rx_buffer;
 80a20a4:	4b05      	ldr	r3, [pc, #20]	; (80a20bc <_Z19acquireSerialBufferv+0x24>)
}
 80a20a6:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a20a8:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a20aa:	4b05      	ldr	r3, [pc, #20]	; (80a20c0 <_Z19acquireSerialBufferv+0x28>)
 80a20ac:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a20ae:	f240 1301 	movw	r3, #257	; 0x101
 80a20b2:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a20b4:	2381      	movs	r3, #129	; 0x81
 80a20b6:	8223      	strh	r3, [r4, #16]
}
 80a20b8:	bd10      	pop	{r4, pc}
 80a20ba:	bf00      	nop
 80a20bc:	20000270 	.word	0x20000270
 80a20c0:	20000371 	.word	0x20000371

080a20c4 <_Z16_fetch_usbserialv>:
{
 80a20c4:	b530      	push	{r4, r5, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a20c6:	4d0e      	ldr	r5, [pc, #56]	; (80a2100 <_Z16_fetch_usbserialv+0x3c>)
{
 80a20c8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a20ca:	a801      	add	r0, sp, #4
 80a20cc:	f7ff ffe4 	bl	80a2098 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a20d0:	7829      	ldrb	r1, [r5, #0]
 80a20d2:	f3bf 8f5b 	dmb	ish
 80a20d6:	f011 0401 	ands.w	r4, r1, #1
 80a20da:	d10e      	bne.n	80a20fa <_Z16_fetch_usbserialv+0x36>
 80a20dc:	4628      	mov	r0, r5
 80a20de:	f7fd ffe4 	bl	80a00aa <__cxa_guard_acquire>
 80a20e2:	b150      	cbz	r0, 80a20fa <_Z16_fetch_usbserialv+0x36>
 80a20e4:	4621      	mov	r1, r4
 80a20e6:	aa01      	add	r2, sp, #4
 80a20e8:	4806      	ldr	r0, [pc, #24]	; (80a2104 <_Z16_fetch_usbserialv+0x40>)
 80a20ea:	f7ff ffbd 	bl	80a2068 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a20ee:	4628      	mov	r0, r5
 80a20f0:	f7fd ffe0 	bl	80a00b4 <__cxa_guard_release>
 80a20f4:	4804      	ldr	r0, [pc, #16]	; (80a2108 <_Z16_fetch_usbserialv+0x44>)
 80a20f6:	f001 f921 	bl	80a333c <atexit>
	return _usbserial;
}
 80a20fa:	4802      	ldr	r0, [pc, #8]	; (80a2104 <_Z16_fetch_usbserialv+0x40>)
 80a20fc:	b007      	add	sp, #28
 80a20fe:	bd30      	pop	{r4, r5, pc}
 80a2100:	20000240 	.word	0x20000240
 80a2104:	20000248 	.word	0x20000248
 80a2108:	080a1ff1 	.word	0x080a1ff1

080a210c <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a210c:	b510      	push	{r4, lr}
 80a210e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2110:	2214      	movs	r2, #20
 80a2112:	2100      	movs	r1, #0
 80a2114:	f001 f940 	bl	80a3398 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a2118:	4b05      	ldr	r3, [pc, #20]	; (80a2130 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a211a:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a211c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a211e:	4b05      	ldr	r3, [pc, #20]	; (80a2134 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a2120:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2122:	f240 1301 	movw	r3, #257	; 0x101
 80a2126:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2128:	2381      	movs	r3, #129	; 0x81
 80a212a:	8223      	strh	r3, [r4, #16]
}
 80a212c:	bd10      	pop	{r4, pc}
 80a212e:	bf00      	nop
 80a2130:	200003f2 	.word	0x200003f2
 80a2134:	200004f3 	.word	0x200004f3

080a2138 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a2138:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a213a:	4c0e      	ldr	r4, [pc, #56]	; (80a2174 <_Z17_fetch_usbserial1v+0x3c>)
{
 80a213c:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a213e:	a801      	add	r0, sp, #4
 80a2140:	f7ff ffe4 	bl	80a210c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2144:	7823      	ldrb	r3, [r4, #0]
 80a2146:	f3bf 8f5b 	dmb	ish
 80a214a:	07db      	lsls	r3, r3, #31
 80a214c:	d40e      	bmi.n	80a216c <_Z17_fetch_usbserial1v+0x34>
 80a214e:	4620      	mov	r0, r4
 80a2150:	f7fd ffab 	bl	80a00aa <__cxa_guard_acquire>
 80a2154:	b150      	cbz	r0, 80a216c <_Z17_fetch_usbserial1v+0x34>
 80a2156:	2101      	movs	r1, #1
 80a2158:	aa01      	add	r2, sp, #4
 80a215a:	4807      	ldr	r0, [pc, #28]	; (80a2178 <_Z17_fetch_usbserial1v+0x40>)
 80a215c:	f7ff ff84 	bl	80a2068 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2160:	4620      	mov	r0, r4
 80a2162:	f7fd ffa7 	bl	80a00b4 <__cxa_guard_release>
 80a2166:	4805      	ldr	r0, [pc, #20]	; (80a217c <_Z17_fetch_usbserial1v+0x44>)
 80a2168:	f001 f8e8 	bl	80a333c <atexit>
  return _usbserial1;
}
 80a216c:	4802      	ldr	r0, [pc, #8]	; (80a2178 <_Z17_fetch_usbserial1v+0x40>)
 80a216e:	b006      	add	sp, #24
 80a2170:	bd10      	pop	{r4, pc}
 80a2172:	bf00      	nop
 80a2174:	20000244 	.word	0x20000244
 80a2178:	2000025c 	.word	0x2000025c
 80a217c:	080a2067 	.word	0x080a2067

080a2180 <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a2180:	2200      	movs	r2, #0
 80a2182:	6840      	ldr	r0, [r0, #4]
 80a2184:	4611      	mov	r1, r2
 80a2186:	f7ff b869 	b.w	80a125c <network_ready>

080a218a <_ZN5spark9WiFiClass7resolveEPKc>:
    IPAddress resolve(const char* name)
 80a218a:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a218c:	4615      	mov	r5, r2
 80a218e:	b089      	sub	sp, #36	; 0x24
        HAL_IPAddress ip = {};
 80a2190:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a2192:	460e      	mov	r6, r1
 80a2194:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a2196:	2100      	movs	r1, #0
 80a2198:	a803      	add	r0, sp, #12
 80a219a:	f001 f8fd 	bl	80a3398 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a219e:	4628      	mov	r0, r5
 80a21a0:	f001 f938 	bl	80a3414 <strlen>
 80a21a4:	2700      	movs	r7, #0
 80a21a6:	b281      	uxth	r1, r0
 80a21a8:	6873      	ldr	r3, [r6, #4]
 80a21aa:	4628      	mov	r0, r5
 80a21ac:	9700      	str	r7, [sp, #0]
 80a21ae:	aa03      	add	r2, sp, #12
 80a21b0:	f7fe ff90 	bl	80a10d4 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a21b4:	b130      	cbz	r0, 80a21c4 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a21b6:	4639      	mov	r1, r7
 80a21b8:	4620      	mov	r0, r4
 80a21ba:	f7ff f947 	bl	80a144c <_ZN9IPAddressC1Em>
    }
 80a21be:	4620      	mov	r0, r4
 80a21c0:	b009      	add	sp, #36	; 0x24
 80a21c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a21c4:	4620      	mov	r0, r4
 80a21c6:	a903      	add	r1, sp, #12
 80a21c8:	f7ff f92e 	bl	80a1428 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a21cc:	e7f7      	b.n	80a21be <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a21ce <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a21ce:	2200      	movs	r2, #0
 80a21d0:	6840      	ldr	r0, [r0, #4]
 80a21d2:	4611      	mov	r1, r2
 80a21d4:	f7ff b862 	b.w	80a129c <network_listening>

080a21d8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a21d8:	2200      	movs	r2, #0
 80a21da:	6840      	ldr	r0, [r0, #4]
 80a21dc:	4611      	mov	r1, r2
 80a21de:	f7ff b86d 	b.w	80a12bc <network_get_listen_timeout>

080a21e2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a21e2:	2200      	movs	r2, #0
 80a21e4:	6840      	ldr	r0, [r0, #4]
 80a21e6:	f7ff b861 	b.w	80a12ac <network_set_listen_timeout>

080a21ea <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a21ea:	2200      	movs	r2, #0
 80a21ec:	6840      	ldr	r0, [r0, #4]
 80a21ee:	f081 0101 	eor.w	r1, r1, #1
 80a21f2:	f7ff b84b 	b.w	80a128c <network_listen>

080a21f6 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a21f6:	2300      	movs	r3, #0
 80a21f8:	6840      	ldr	r0, [r0, #4]
 80a21fa:	461a      	mov	r2, r3
 80a21fc:	4619      	mov	r1, r3
 80a21fe:	f7ff b83d 	b.w	80a127c <network_off>

080a2202 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 80a2202:	2300      	movs	r3, #0
 80a2204:	6840      	ldr	r0, [r0, #4]
 80a2206:	461a      	mov	r2, r3
 80a2208:	4619      	mov	r1, r3
 80a220a:	f7ff b82f 	b.w	80a126c <network_on>

080a220e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a220e:	2200      	movs	r2, #0
 80a2210:	6840      	ldr	r0, [r0, #4]
 80a2212:	4611      	mov	r1, r2
 80a2214:	f7ff b812 	b.w	80a123c <network_connecting>

080a2218 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a2218:	2200      	movs	r2, #0
 80a221a:	2102      	movs	r1, #2
 80a221c:	6840      	ldr	r0, [r0, #4]
 80a221e:	f7ff b815 	b.w	80a124c <network_disconnect>

080a2222 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a2222:	2300      	movs	r3, #0
 80a2224:	6840      	ldr	r0, [r0, #4]
 80a2226:	461a      	mov	r2, r3
 80a2228:	f7ff b800 	b.w	80a122c <network_connect>

080a222c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a222c:	2204      	movs	r2, #4
 80a222e:	4b02      	ldr	r3, [pc, #8]	; (80a2238 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a2230:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a2232:	4a02      	ldr	r2, [pc, #8]	; (80a223c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a2234:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a2236:	4770      	bx	lr
 80a2238:	20000574 	.word	0x20000574
 80a223c:	080a3848 	.word	0x080a3848

080a2240 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a2240:	4b01      	ldr	r3, [pc, #4]	; (80a2248 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a2242:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a2244:	4770      	bx	lr
 80a2246:	bf00      	nop
 80a2248:	20000004 	.word	0x20000004

080a224c <serialEventRun>:
{
 80a224c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a224e:	4b13      	ldr	r3, [pc, #76]	; (80a229c <serialEventRun+0x50>)
 80a2250:	b143      	cbz	r3, 80a2264 <serialEventRun+0x18>
 80a2252:	f7ff ff37 	bl	80a20c4 <_Z16_fetch_usbserialv>
 80a2256:	6803      	ldr	r3, [r0, #0]
 80a2258:	691b      	ldr	r3, [r3, #16]
 80a225a:	4798      	blx	r3
 80a225c:	2800      	cmp	r0, #0
 80a225e:	dd01      	ble.n	80a2264 <serialEventRun+0x18>
        serialEvent();
 80a2260:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a2264:	4b0e      	ldr	r3, [pc, #56]	; (80a22a0 <serialEventRun+0x54>)
 80a2266:	b143      	cbz	r3, 80a227a <serialEventRun+0x2e>
 80a2268:	f7ff fe9c 	bl	80a1fa4 <_Z22__fetch_global_Serial1v>
 80a226c:	6803      	ldr	r3, [r0, #0]
 80a226e:	691b      	ldr	r3, [r3, #16]
 80a2270:	4798      	blx	r3
 80a2272:	2800      	cmp	r0, #0
 80a2274:	dd01      	ble.n	80a227a <serialEventRun+0x2e>
        serialEvent1();
 80a2276:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a227a:	4b0a      	ldr	r3, [pc, #40]	; (80a22a4 <serialEventRun+0x58>)
 80a227c:	b10b      	cbz	r3, 80a2282 <serialEventRun+0x36>
 80a227e:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a2282:	4b09      	ldr	r3, [pc, #36]	; (80a22a8 <serialEventRun+0x5c>)
 80a2284:	b143      	cbz	r3, 80a2298 <serialEventRun+0x4c>
 80a2286:	f7ff ff57 	bl	80a2138 <_Z17_fetch_usbserial1v>
 80a228a:	6803      	ldr	r3, [r0, #0]
 80a228c:	691b      	ldr	r3, [r3, #16]
 80a228e:	4798      	blx	r3
 80a2290:	2800      	cmp	r0, #0
 80a2292:	dd01      	ble.n	80a2298 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a2294:	f3af 8000 	nop.w
}
 80a2298:	bd08      	pop	{r3, pc}
 80a229a:	bf00      	nop
	...

080a22ac <_post_loop>:
{
 80a22ac:	b508      	push	{r3, lr}
	serialEventRun();
 80a22ae:	f7ff ffcd 	bl	80a224c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a22b2:	f7fe fdf5 	bl	80a0ea0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a22b6:	4b01      	ldr	r3, [pc, #4]	; (80a22bc <_post_loop+0x10>)
 80a22b8:	6018      	str	r0, [r3, #0]
}
 80a22ba:	bd08      	pop	{r3, pc}
 80a22bc:	20000594 	.word	0x20000594

080a22c0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a22c0:	4805      	ldr	r0, [pc, #20]	; (80a22d8 <_Z33system_initialize_user_backup_ramv+0x18>)
 80a22c2:	4a06      	ldr	r2, [pc, #24]	; (80a22dc <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 80a22c4:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a22c6:	1a12      	subs	r2, r2, r0
 80a22c8:	4905      	ldr	r1, [pc, #20]	; (80a22e0 <_Z33system_initialize_user_backup_ramv+0x20>)
 80a22ca:	f001 f83d 	bl	80a3348 <memcpy>
    __backup_sram_signature = signature;
 80a22ce:	4b05      	ldr	r3, [pc, #20]	; (80a22e4 <_Z33system_initialize_user_backup_ramv+0x24>)
 80a22d0:	4a05      	ldr	r2, [pc, #20]	; (80a22e8 <_Z33system_initialize_user_backup_ramv+0x28>)
 80a22d2:	601a      	str	r2, [r3, #0]
}
 80a22d4:	bd08      	pop	{r3, pc}
 80a22d6:	bf00      	nop
 80a22d8:	40024000 	.word	0x40024000
 80a22dc:	40024004 	.word	0x40024004
 80a22e0:	080a39a0 	.word	0x080a39a0
 80a22e4:	40024000 	.word	0x40024000
 80a22e8:	9a271c1e 	.word	0x9a271c1e

080a22ec <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a22ec:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a22ee:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a22f0:	461a      	mov	r2, r3
 80a22f2:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a22f6:	9300      	str	r3, [sp, #0]
 80a22f8:	f7fe ff6e 	bl	80a11d8 <system_ctrl_set_result>
}
 80a22fc:	b003      	add	sp, #12
 80a22fe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a2304 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a2304:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a2306:	8843      	ldrh	r3, [r0, #2]
 80a2308:	2b0a      	cmp	r3, #10
 80a230a:	d008      	beq.n	80a231e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a230c:	2b50      	cmp	r3, #80	; 0x50
 80a230e:	d10b      	bne.n	80a2328 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a2310:	4b09      	ldr	r3, [pc, #36]	; (80a2338 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a2312:	681b      	ldr	r3, [r3, #0]
 80a2314:	b14b      	cbz	r3, 80a232a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a2316:	b003      	add	sp, #12
 80a2318:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a231c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a231e:	f7ff ffe5 	bl	80a22ec <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a2322:	b003      	add	sp, #12
 80a2324:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2328:	2300      	movs	r3, #0
 80a232a:	461a      	mov	r2, r3
 80a232c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2330:	9300      	str	r3, [sp, #0]
 80a2332:	f7fe ff51 	bl	80a11d8 <system_ctrl_set_result>
}
 80a2336:	e7f4      	b.n	80a2322 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a2338:	20000580 	.word	0x20000580

080a233c <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a233c:	2100      	movs	r1, #0
{
 80a233e:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a2340:	4811      	ldr	r0, [pc, #68]	; (80a2388 <module_user_init_hook+0x4c>)
 80a2342:	f7fe fff3 	bl	80a132c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 80a2346:	4b11      	ldr	r3, [pc, #68]	; (80a238c <module_user_init_hook+0x50>)
 80a2348:	681a      	ldr	r2, [r3, #0]
 80a234a:	4b11      	ldr	r3, [pc, #68]	; (80a2390 <module_user_init_hook+0x54>)
 80a234c:	429a      	cmp	r2, r3
 80a234e:	bf0c      	ite	eq
 80a2350:	2201      	moveq	r2, #1
 80a2352:	2200      	movne	r2, #0
 80a2354:	4b0f      	ldr	r3, [pc, #60]	; (80a2394 <module_user_init_hook+0x58>)
 80a2356:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a2358:	d001      	beq.n	80a235e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 80a235a:	f7ff ffb1 	bl	80a22c0 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a235e:	f7fe fd8f 	bl	80a0e80 <HAL_RNG_GetRandomNumber>
 80a2362:	4604      	mov	r4, r0
    srand(seed);
 80a2364:	f001 f820 	bl	80a33a8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a2368:	4b0b      	ldr	r3, [pc, #44]	; (80a2398 <module_user_init_hook+0x5c>)
 80a236a:	b113      	cbz	r3, 80a2372 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 80a236c:	4620      	mov	r0, r4
 80a236e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a2372:	2100      	movs	r1, #0
 80a2374:	4808      	ldr	r0, [pc, #32]	; (80a2398 <module_user_init_hook+0x5c>)
 80a2376:	f7fe ff51 	bl	80a121c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a237a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a237e:	2100      	movs	r1, #0
 80a2380:	4806      	ldr	r0, [pc, #24]	; (80a239c <module_user_init_hook+0x60>)
 80a2382:	f7fe bf1f 	b.w	80a11c4 <system_ctrl_set_app_request_handler>
 80a2386:	bf00      	nop
 80a2388:	080a2241 	.word	0x080a2241
 80a238c:	40024000 	.word	0x40024000
 80a2390:	9a271c1e 	.word	0x9a271c1e
 80a2394:	2000057c 	.word	0x2000057c
 80a2398:	00000000 	.word	0x00000000
 80a239c:	080a2305 	.word	0x080a2305

080a23a0 <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a23a0:	4b02      	ldr	r3, [pc, #8]	; (80a23ac <__tcf_0+0xc>)
 80a23a2:	6898      	ldr	r0, [r3, #8]
 80a23a4:	b108      	cbz	r0, 80a23aa <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 80a23a6:	f7fe bd63 	b.w	80a0e70 <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a23aa:	4770      	bx	lr
 80a23ac:	20000588 	.word	0x20000588

080a23b0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a23b0:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a23b2:	b570      	push	{r4, r5, r6, lr}
 80a23b4:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a23b6:	d901      	bls.n	80a23bc <pinAvailable+0xc>
    return false;
 80a23b8:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a23ba:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a23bc:	f1a0 030d 	sub.w	r3, r0, #13
 80a23c0:	2b02      	cmp	r3, #2
 80a23c2:	d90b      	bls.n	80a23dc <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a23c4:	2801      	cmp	r0, #1
 80a23c6:	d824      	bhi.n	80a2412 <pinAvailable+0x62>
 80a23c8:	f000 f88e 	bl	80a24e8 <_Z19__fetch_global_Wirev>
 80a23cc:	2100      	movs	r1, #0
 80a23ce:	7c00      	ldrb	r0, [r0, #16]
 80a23d0:	f7fe fde6 	bl	80a0fa0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a23d4:	f080 0001 	eor.w	r0, r0, #1
 80a23d8:	b2c0      	uxtb	r0, r0
 80a23da:	e7ee      	b.n	80a23ba <pinAvailable+0xa>
 80a23dc:	4e12      	ldr	r6, [pc, #72]	; (80a2428 <pinAvailable+0x78>)
 80a23de:	7831      	ldrb	r1, [r6, #0]
 80a23e0:	f3bf 8f5b 	dmb	ish
 80a23e4:	f011 0501 	ands.w	r5, r1, #1
 80a23e8:	d10d      	bne.n	80a2406 <pinAvailable+0x56>
 80a23ea:	4630      	mov	r0, r6
 80a23ec:	f7fd fe5d 	bl	80a00aa <__cxa_guard_acquire>
 80a23f0:	b148      	cbz	r0, 80a2406 <pinAvailable+0x56>
 80a23f2:	4629      	mov	r1, r5
 80a23f4:	480d      	ldr	r0, [pc, #52]	; (80a242c <pinAvailable+0x7c>)
 80a23f6:	f7ff fc1d 	bl	80a1c34 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a23fa:	4630      	mov	r0, r6
 80a23fc:	f7fd fe5a 	bl	80a00b4 <__cxa_guard_release>
 80a2400:	480b      	ldr	r0, [pc, #44]	; (80a2430 <pinAvailable+0x80>)
 80a2402:	f000 ff9b 	bl	80a333c <atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a2406:	4b09      	ldr	r3, [pc, #36]	; (80a242c <pinAvailable+0x7c>)
 80a2408:	7818      	ldrb	r0, [r3, #0]
 80a240a:	f7fe fde3 	bl	80a0fd4 <hal_spi_is_enabled>
 80a240e:	2800      	cmp	r0, #0
 80a2410:	d1d2      	bne.n	80a23b8 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a2412:	3c12      	subs	r4, #18
 80a2414:	2c01      	cmp	r4, #1
 80a2416:	d805      	bhi.n	80a2424 <pinAvailable+0x74>
 80a2418:	f7ff fdc4 	bl	80a1fa4 <_Z22__fetch_global_Serial1v>
 80a241c:	7c00      	ldrb	r0, [r0, #16]
 80a241e:	f7fe fe11 	bl	80a1044 <hal_usart_is_enabled>
 80a2422:	e7d7      	b.n	80a23d4 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a2424:	2001      	movs	r0, #1
 80a2426:	e7c8      	b.n	80a23ba <pinAvailable+0xa>
 80a2428:	20000584 	.word	0x20000584
 80a242c:	20000588 	.word	0x20000588
 80a2430:	080a23a1 	.word	0x080a23a1

080a2434 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2434:	2817      	cmp	r0, #23
{
 80a2436:	b538      	push	{r3, r4, r5, lr}
 80a2438:	4604      	mov	r4, r0
 80a243a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a243c:	d80a      	bhi.n	80a2454 <pinMode+0x20>
 80a243e:	29ff      	cmp	r1, #255	; 0xff
 80a2440:	d008      	beq.n	80a2454 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a2442:	f7ff ffb5 	bl	80a23b0 <pinAvailable>
 80a2446:	b128      	cbz	r0, 80a2454 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a2448:	4629      	mov	r1, r5
 80a244a:	4620      	mov	r0, r4
}
 80a244c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a2450:	f7fe bd4e 	b.w	80a0ef0 <HAL_Pin_Mode>
}
 80a2454:	bd38      	pop	{r3, r4, r5, pc}

080a2456 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a2456:	b538      	push	{r3, r4, r5, lr}
 80a2458:	4604      	mov	r4, r0
 80a245a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a245c:	f7fe fd50 	bl	80a0f00 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a2460:	28ff      	cmp	r0, #255	; 0xff
 80a2462:	d010      	beq.n	80a2486 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a2464:	2806      	cmp	r0, #6
 80a2466:	d804      	bhi.n	80a2472 <digitalWrite+0x1c>
 80a2468:	234d      	movs	r3, #77	; 0x4d
 80a246a:	fa23 f000 	lsr.w	r0, r3, r0
 80a246e:	07c3      	lsls	r3, r0, #31
 80a2470:	d409      	bmi.n	80a2486 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a2472:	4620      	mov	r0, r4
 80a2474:	f7ff ff9c 	bl	80a23b0 <pinAvailable>
 80a2478:	b128      	cbz	r0, 80a2486 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a247a:	4629      	mov	r1, r5
 80a247c:	4620      	mov	r0, r4
}
 80a247e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a2482:	f7fe bd45 	b.w	80a0f10 <HAL_GPIO_Write>
}
 80a2486:	bd38      	pop	{r3, r4, r5, pc}

080a2488 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80a2488:	b510      	push	{r4, lr}
 80a248a:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80a248c:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80a248e:	bf9c      	itt	ls
 80a2490:	340a      	addls	r4, #10
 80a2492:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a2494:	4620      	mov	r0, r4
 80a2496:	f7ff ff8b 	bl	80a23b0 <pinAvailable>
 80a249a:	b150      	cbz	r0, 80a24b2 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80a249c:	2103      	movs	r1, #3
 80a249e:	4620      	mov	r0, r4
 80a24a0:	f7fe fd1e 	bl	80a0ee0 <HAL_Validate_Pin_Function>
 80a24a4:	2803      	cmp	r0, #3
 80a24a6:	d104      	bne.n	80a24b2 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 80a24a8:	4620      	mov	r0, r4
}
 80a24aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 80a24ae:	f7fe bd47 	b.w	80a0f40 <hal_adc_read>
}
 80a24b2:	2000      	movs	r0, #0
 80a24b4:	bd10      	pop	{r4, pc}

080a24b6 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a24b6:	4770      	bx	lr

080a24b8 <_Z17acquireWireBufferv>:
	hal_i2c_config_t config = {
 80a24b8:	2300      	movs	r3, #0
{
 80a24ba:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a24bc:	2520      	movs	r5, #32
 80a24be:	8043      	strh	r3, [r0, #2]
 80a24c0:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a24c2:	4e08      	ldr	r6, [pc, #32]	; (80a24e4 <_Z17acquireWireBufferv+0x2c>)
{
 80a24c4:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a24c6:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a24c8:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a24ca:	6085      	str	r5, [r0, #8]
 80a24cc:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a24ce:	4628      	mov	r0, r5
 80a24d0:	f000 f840 	bl	80a2554 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a24d4:	4631      	mov	r1, r6
	};
 80a24d6:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a24d8:	4628      	mov	r0, r5
 80a24da:	f000 f83b 	bl	80a2554 <_ZnajRKSt9nothrow_t>
	};
 80a24de:	60e0      	str	r0, [r4, #12]
}
 80a24e0:	4620      	mov	r0, r4
 80a24e2:	bd70      	pop	{r4, r5, r6, pc}
 80a24e4:	080a387c 	.word	0x080a387c

080a24e8 <_Z19__fetch_global_Wirev>:
{
 80a24e8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a24ea:	4d0e      	ldr	r5, [pc, #56]	; (80a2524 <_Z19__fetch_global_Wirev+0x3c>)
{
 80a24ec:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a24ee:	7829      	ldrb	r1, [r5, #0]
 80a24f0:	f3bf 8f5b 	dmb	ish
 80a24f4:	f011 0401 	ands.w	r4, r1, #1
 80a24f8:	d111      	bne.n	80a251e <_Z19__fetch_global_Wirev+0x36>
 80a24fa:	4628      	mov	r0, r5
 80a24fc:	f7fd fdd5 	bl	80a00aa <__cxa_guard_acquire>
 80a2500:	b168      	cbz	r0, 80a251e <_Z19__fetch_global_Wirev+0x36>
 80a2502:	a801      	add	r0, sp, #4
 80a2504:	f7ff ffd8 	bl	80a24b8 <_Z17acquireWireBufferv>
 80a2508:	4621      	mov	r1, r4
 80a250a:	aa01      	add	r2, sp, #4
 80a250c:	4806      	ldr	r0, [pc, #24]	; (80a2528 <_Z19__fetch_global_Wirev+0x40>)
 80a250e:	f7fe ff45 	bl	80a139c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a2512:	4628      	mov	r0, r5
 80a2514:	f7fd fdce 	bl	80a00b4 <__cxa_guard_release>
 80a2518:	4804      	ldr	r0, [pc, #16]	; (80a252c <_Z19__fetch_global_Wirev+0x44>)
 80a251a:	f000 ff0f 	bl	80a333c <atexit>
	return wire;
}
 80a251e:	4802      	ldr	r0, [pc, #8]	; (80a2528 <_Z19__fetch_global_Wirev+0x40>)
 80a2520:	b007      	add	sp, #28
 80a2522:	bd30      	pop	{r4, r5, pc}
 80a2524:	20000598 	.word	0x20000598
 80a2528:	2000059c 	.word	0x2000059c
 80a252c:	080a24b7 	.word	0x080a24b7

080a2530 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a2530:	2300      	movs	r3, #0
 80a2532:	b507      	push	{r0, r1, r2, lr}
 80a2534:	461a      	mov	r2, r3
 80a2536:	4619      	mov	r1, r3
 80a2538:	9300      	str	r3, [sp, #0]
 80a253a:	4803      	ldr	r0, [pc, #12]	; (80a2548 <_GLOBAL__sub_I_INADDR_NONE+0x18>)
 80a253c:	f7fe ff9c 	bl	80a1478 <_ZN9IPAddressC1Ehhhh>
 80a2540:	b003      	add	sp, #12
 80a2542:	f85d fb04 	ldr.w	pc, [sp], #4
 80a2546:	bf00      	nop
 80a2548:	200005b0 	.word	0x200005b0

080a254c <_ZdlPvj>:
 80a254c:	f7fd bda9 	b.w	80a00a2 <_ZdlPv>

080a2550 <_ZnwjRKSt9nothrow_t>:
 80a2550:	f7fd bda3 	b.w	80a009a <_Znwj>

080a2554 <_ZnajRKSt9nothrow_t>:
 80a2554:	f7fd bda3 	b.w	80a009e <_Znaj>

080a2558 <__aeabi_drsub>:
 80a2558:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a255c:	e002      	b.n	80a2564 <__adddf3>
 80a255e:	bf00      	nop

080a2560 <__aeabi_dsub>:
 80a2560:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a2564 <__adddf3>:
 80a2564:	b530      	push	{r4, r5, lr}
 80a2566:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a256a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a256e:	ea94 0f05 	teq	r4, r5
 80a2572:	bf08      	it	eq
 80a2574:	ea90 0f02 	teqeq	r0, r2
 80a2578:	bf1f      	itttt	ne
 80a257a:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a257e:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a2582:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a2586:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a258a:	f000 80e2 	beq.w	80a2752 <__adddf3+0x1ee>
 80a258e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a2592:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a2596:	bfb8      	it	lt
 80a2598:	426d      	neglt	r5, r5
 80a259a:	dd0c      	ble.n	80a25b6 <__adddf3+0x52>
 80a259c:	442c      	add	r4, r5
 80a259e:	ea80 0202 	eor.w	r2, r0, r2
 80a25a2:	ea81 0303 	eor.w	r3, r1, r3
 80a25a6:	ea82 0000 	eor.w	r0, r2, r0
 80a25aa:	ea83 0101 	eor.w	r1, r3, r1
 80a25ae:	ea80 0202 	eor.w	r2, r0, r2
 80a25b2:	ea81 0303 	eor.w	r3, r1, r3
 80a25b6:	2d36      	cmp	r5, #54	; 0x36
 80a25b8:	bf88      	it	hi
 80a25ba:	bd30      	pophi	{r4, r5, pc}
 80a25bc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a25c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a25c4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a25c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a25cc:	d002      	beq.n	80a25d4 <__adddf3+0x70>
 80a25ce:	4240      	negs	r0, r0
 80a25d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a25d4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a25d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a25dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a25e0:	d002      	beq.n	80a25e8 <__adddf3+0x84>
 80a25e2:	4252      	negs	r2, r2
 80a25e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a25e8:	ea94 0f05 	teq	r4, r5
 80a25ec:	f000 80a7 	beq.w	80a273e <__adddf3+0x1da>
 80a25f0:	f1a4 0401 	sub.w	r4, r4, #1
 80a25f4:	f1d5 0e20 	rsbs	lr, r5, #32
 80a25f8:	db0d      	blt.n	80a2616 <__adddf3+0xb2>
 80a25fa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a25fe:	fa22 f205 	lsr.w	r2, r2, r5
 80a2602:	1880      	adds	r0, r0, r2
 80a2604:	f141 0100 	adc.w	r1, r1, #0
 80a2608:	fa03 f20e 	lsl.w	r2, r3, lr
 80a260c:	1880      	adds	r0, r0, r2
 80a260e:	fa43 f305 	asr.w	r3, r3, r5
 80a2612:	4159      	adcs	r1, r3
 80a2614:	e00e      	b.n	80a2634 <__adddf3+0xd0>
 80a2616:	f1a5 0520 	sub.w	r5, r5, #32
 80a261a:	f10e 0e20 	add.w	lr, lr, #32
 80a261e:	2a01      	cmp	r2, #1
 80a2620:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a2624:	bf28      	it	cs
 80a2626:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a262a:	fa43 f305 	asr.w	r3, r3, r5
 80a262e:	18c0      	adds	r0, r0, r3
 80a2630:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a2634:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2638:	d507      	bpl.n	80a264a <__adddf3+0xe6>
 80a263a:	f04f 0e00 	mov.w	lr, #0
 80a263e:	f1dc 0c00 	rsbs	ip, ip, #0
 80a2642:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a2646:	eb6e 0101 	sbc.w	r1, lr, r1
 80a264a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a264e:	d31b      	bcc.n	80a2688 <__adddf3+0x124>
 80a2650:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a2654:	d30c      	bcc.n	80a2670 <__adddf3+0x10c>
 80a2656:	0849      	lsrs	r1, r1, #1
 80a2658:	ea5f 0030 	movs.w	r0, r0, rrx
 80a265c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a2660:	f104 0401 	add.w	r4, r4, #1
 80a2664:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a2668:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a266c:	f080 809a 	bcs.w	80a27a4 <__adddf3+0x240>
 80a2670:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a2674:	bf08      	it	eq
 80a2676:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a267a:	f150 0000 	adcs.w	r0, r0, #0
 80a267e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2682:	ea41 0105 	orr.w	r1, r1, r5
 80a2686:	bd30      	pop	{r4, r5, pc}
 80a2688:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a268c:	4140      	adcs	r0, r0
 80a268e:	eb41 0101 	adc.w	r1, r1, r1
 80a2692:	3c01      	subs	r4, #1
 80a2694:	bf28      	it	cs
 80a2696:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80a269a:	d2e9      	bcs.n	80a2670 <__adddf3+0x10c>
 80a269c:	f091 0f00 	teq	r1, #0
 80a26a0:	bf04      	itt	eq
 80a26a2:	4601      	moveq	r1, r0
 80a26a4:	2000      	moveq	r0, #0
 80a26a6:	fab1 f381 	clz	r3, r1
 80a26aa:	bf08      	it	eq
 80a26ac:	3320      	addeq	r3, #32
 80a26ae:	f1a3 030b 	sub.w	r3, r3, #11
 80a26b2:	f1b3 0220 	subs.w	r2, r3, #32
 80a26b6:	da0c      	bge.n	80a26d2 <__adddf3+0x16e>
 80a26b8:	320c      	adds	r2, #12
 80a26ba:	dd08      	ble.n	80a26ce <__adddf3+0x16a>
 80a26bc:	f102 0c14 	add.w	ip, r2, #20
 80a26c0:	f1c2 020c 	rsb	r2, r2, #12
 80a26c4:	fa01 f00c 	lsl.w	r0, r1, ip
 80a26c8:	fa21 f102 	lsr.w	r1, r1, r2
 80a26cc:	e00c      	b.n	80a26e8 <__adddf3+0x184>
 80a26ce:	f102 0214 	add.w	r2, r2, #20
 80a26d2:	bfd8      	it	le
 80a26d4:	f1c2 0c20 	rsble	ip, r2, #32
 80a26d8:	fa01 f102 	lsl.w	r1, r1, r2
 80a26dc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a26e0:	bfdc      	itt	le
 80a26e2:	ea41 010c 	orrle.w	r1, r1, ip
 80a26e6:	4090      	lslle	r0, r2
 80a26e8:	1ae4      	subs	r4, r4, r3
 80a26ea:	bfa2      	ittt	ge
 80a26ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a26f0:	4329      	orrge	r1, r5
 80a26f2:	bd30      	popge	{r4, r5, pc}
 80a26f4:	ea6f 0404 	mvn.w	r4, r4
 80a26f8:	3c1f      	subs	r4, #31
 80a26fa:	da1c      	bge.n	80a2736 <__adddf3+0x1d2>
 80a26fc:	340c      	adds	r4, #12
 80a26fe:	dc0e      	bgt.n	80a271e <__adddf3+0x1ba>
 80a2700:	f104 0414 	add.w	r4, r4, #20
 80a2704:	f1c4 0220 	rsb	r2, r4, #32
 80a2708:	fa20 f004 	lsr.w	r0, r0, r4
 80a270c:	fa01 f302 	lsl.w	r3, r1, r2
 80a2710:	ea40 0003 	orr.w	r0, r0, r3
 80a2714:	fa21 f304 	lsr.w	r3, r1, r4
 80a2718:	ea45 0103 	orr.w	r1, r5, r3
 80a271c:	bd30      	pop	{r4, r5, pc}
 80a271e:	f1c4 040c 	rsb	r4, r4, #12
 80a2722:	f1c4 0220 	rsb	r2, r4, #32
 80a2726:	fa20 f002 	lsr.w	r0, r0, r2
 80a272a:	fa01 f304 	lsl.w	r3, r1, r4
 80a272e:	ea40 0003 	orr.w	r0, r0, r3
 80a2732:	4629      	mov	r1, r5
 80a2734:	bd30      	pop	{r4, r5, pc}
 80a2736:	fa21 f004 	lsr.w	r0, r1, r4
 80a273a:	4629      	mov	r1, r5
 80a273c:	bd30      	pop	{r4, r5, pc}
 80a273e:	f094 0f00 	teq	r4, #0
 80a2742:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a2746:	bf06      	itte	eq
 80a2748:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a274c:	3401      	addeq	r4, #1
 80a274e:	3d01      	subne	r5, #1
 80a2750:	e74e      	b.n	80a25f0 <__adddf3+0x8c>
 80a2752:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a2756:	bf18      	it	ne
 80a2758:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a275c:	d029      	beq.n	80a27b2 <__adddf3+0x24e>
 80a275e:	ea94 0f05 	teq	r4, r5
 80a2762:	bf08      	it	eq
 80a2764:	ea90 0f02 	teqeq	r0, r2
 80a2768:	d005      	beq.n	80a2776 <__adddf3+0x212>
 80a276a:	ea54 0c00 	orrs.w	ip, r4, r0
 80a276e:	bf04      	itt	eq
 80a2770:	4619      	moveq	r1, r3
 80a2772:	4610      	moveq	r0, r2
 80a2774:	bd30      	pop	{r4, r5, pc}
 80a2776:	ea91 0f03 	teq	r1, r3
 80a277a:	bf1e      	ittt	ne
 80a277c:	2100      	movne	r1, #0
 80a277e:	2000      	movne	r0, #0
 80a2780:	bd30      	popne	{r4, r5, pc}
 80a2782:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a2786:	d105      	bne.n	80a2794 <__adddf3+0x230>
 80a2788:	0040      	lsls	r0, r0, #1
 80a278a:	4149      	adcs	r1, r1
 80a278c:	bf28      	it	cs
 80a278e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a2792:	bd30      	pop	{r4, r5, pc}
 80a2794:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a2798:	bf3c      	itt	cc
 80a279a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a279e:	bd30      	popcc	{r4, r5, pc}
 80a27a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a27a4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a27a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a27ac:	f04f 0000 	mov.w	r0, #0
 80a27b0:	bd30      	pop	{r4, r5, pc}
 80a27b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a27b6:	bf1a      	itte	ne
 80a27b8:	4619      	movne	r1, r3
 80a27ba:	4610      	movne	r0, r2
 80a27bc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a27c0:	bf1c      	itt	ne
 80a27c2:	460b      	movne	r3, r1
 80a27c4:	4602      	movne	r2, r0
 80a27c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a27ca:	bf06      	itte	eq
 80a27cc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a27d0:	ea91 0f03 	teqeq	r1, r3
 80a27d4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a27d8:	bd30      	pop	{r4, r5, pc}
 80a27da:	bf00      	nop

080a27dc <__aeabi_ui2d>:
 80a27dc:	f090 0f00 	teq	r0, #0
 80a27e0:	bf04      	itt	eq
 80a27e2:	2100      	moveq	r1, #0
 80a27e4:	4770      	bxeq	lr
 80a27e6:	b530      	push	{r4, r5, lr}
 80a27e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a27ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a27f0:	f04f 0500 	mov.w	r5, #0
 80a27f4:	f04f 0100 	mov.w	r1, #0
 80a27f8:	e750      	b.n	80a269c <__adddf3+0x138>
 80a27fa:	bf00      	nop

080a27fc <__aeabi_i2d>:
 80a27fc:	f090 0f00 	teq	r0, #0
 80a2800:	bf04      	itt	eq
 80a2802:	2100      	moveq	r1, #0
 80a2804:	4770      	bxeq	lr
 80a2806:	b530      	push	{r4, r5, lr}
 80a2808:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a280c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2810:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a2814:	bf48      	it	mi
 80a2816:	4240      	negmi	r0, r0
 80a2818:	f04f 0100 	mov.w	r1, #0
 80a281c:	e73e      	b.n	80a269c <__adddf3+0x138>
 80a281e:	bf00      	nop

080a2820 <__aeabi_f2d>:
 80a2820:	0042      	lsls	r2, r0, #1
 80a2822:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a2826:	ea4f 0131 	mov.w	r1, r1, rrx
 80a282a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a282e:	bf1f      	itttt	ne
 80a2830:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a2834:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a2838:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a283c:	4770      	bxne	lr
 80a283e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80a2842:	bf08      	it	eq
 80a2844:	4770      	bxeq	lr
 80a2846:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80a284a:	bf04      	itt	eq
 80a284c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80a2850:	4770      	bxeq	lr
 80a2852:	b530      	push	{r4, r5, lr}
 80a2854:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a2858:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a285c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a2860:	e71c      	b.n	80a269c <__adddf3+0x138>
 80a2862:	bf00      	nop

080a2864 <__aeabi_ul2d>:
 80a2864:	ea50 0201 	orrs.w	r2, r0, r1
 80a2868:	bf08      	it	eq
 80a286a:	4770      	bxeq	lr
 80a286c:	b530      	push	{r4, r5, lr}
 80a286e:	f04f 0500 	mov.w	r5, #0
 80a2872:	e00a      	b.n	80a288a <__aeabi_l2d+0x16>

080a2874 <__aeabi_l2d>:
 80a2874:	ea50 0201 	orrs.w	r2, r0, r1
 80a2878:	bf08      	it	eq
 80a287a:	4770      	bxeq	lr
 80a287c:	b530      	push	{r4, r5, lr}
 80a287e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a2882:	d502      	bpl.n	80a288a <__aeabi_l2d+0x16>
 80a2884:	4240      	negs	r0, r0
 80a2886:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a288a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a288e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2892:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a2896:	f43f aed8 	beq.w	80a264a <__adddf3+0xe6>
 80a289a:	f04f 0203 	mov.w	r2, #3
 80a289e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a28a2:	bf18      	it	ne
 80a28a4:	3203      	addne	r2, #3
 80a28a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a28aa:	bf18      	it	ne
 80a28ac:	3203      	addne	r2, #3
 80a28ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a28b2:	f1c2 0320 	rsb	r3, r2, #32
 80a28b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80a28ba:	fa20 f002 	lsr.w	r0, r0, r2
 80a28be:	fa01 fe03 	lsl.w	lr, r1, r3
 80a28c2:	ea40 000e 	orr.w	r0, r0, lr
 80a28c6:	fa21 f102 	lsr.w	r1, r1, r2
 80a28ca:	4414      	add	r4, r2
 80a28cc:	e6bd      	b.n	80a264a <__adddf3+0xe6>
 80a28ce:	bf00      	nop

080a28d0 <__aeabi_dmul>:
 80a28d0:	b570      	push	{r4, r5, r6, lr}
 80a28d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a28d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a28da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a28de:	bf1d      	ittte	ne
 80a28e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a28e4:	ea94 0f0c 	teqne	r4, ip
 80a28e8:	ea95 0f0c 	teqne	r5, ip
 80a28ec:	f000 f8de 	bleq	80a2aac <__aeabi_dmul+0x1dc>
 80a28f0:	442c      	add	r4, r5
 80a28f2:	ea81 0603 	eor.w	r6, r1, r3
 80a28f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a28fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a28fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a2902:	bf18      	it	ne
 80a2904:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a2908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a290c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a2910:	d038      	beq.n	80a2984 <__aeabi_dmul+0xb4>
 80a2912:	fba0 ce02 	umull	ip, lr, r0, r2
 80a2916:	f04f 0500 	mov.w	r5, #0
 80a291a:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a291e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a2922:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a2926:	f04f 0600 	mov.w	r6, #0
 80a292a:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a292e:	f09c 0f00 	teq	ip, #0
 80a2932:	bf18      	it	ne
 80a2934:	f04e 0e01 	orrne.w	lr, lr, #1
 80a2938:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a293c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a2940:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a2944:	d204      	bcs.n	80a2950 <__aeabi_dmul+0x80>
 80a2946:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a294a:	416d      	adcs	r5, r5
 80a294c:	eb46 0606 	adc.w	r6, r6, r6
 80a2950:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a2954:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a2958:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a295c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a2960:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a2964:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a2968:	bf88      	it	hi
 80a296a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a296e:	d81e      	bhi.n	80a29ae <__aeabi_dmul+0xde>
 80a2970:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a2974:	bf08      	it	eq
 80a2976:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a297a:	f150 0000 	adcs.w	r0, r0, #0
 80a297e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2982:	bd70      	pop	{r4, r5, r6, pc}
 80a2984:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a2988:	ea46 0101 	orr.w	r1, r6, r1
 80a298c:	ea40 0002 	orr.w	r0, r0, r2
 80a2990:	ea81 0103 	eor.w	r1, r1, r3
 80a2994:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a2998:	bfc2      	ittt	gt
 80a299a:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a299e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a29a2:	bd70      	popgt	{r4, r5, r6, pc}
 80a29a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a29a8:	f04f 0e00 	mov.w	lr, #0
 80a29ac:	3c01      	subs	r4, #1
 80a29ae:	f300 80ab 	bgt.w	80a2b08 <__aeabi_dmul+0x238>
 80a29b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a29b6:	bfde      	ittt	le
 80a29b8:	2000      	movle	r0, #0
 80a29ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a29be:	bd70      	pople	{r4, r5, r6, pc}
 80a29c0:	f1c4 0400 	rsb	r4, r4, #0
 80a29c4:	3c20      	subs	r4, #32
 80a29c6:	da35      	bge.n	80a2a34 <__aeabi_dmul+0x164>
 80a29c8:	340c      	adds	r4, #12
 80a29ca:	dc1b      	bgt.n	80a2a04 <__aeabi_dmul+0x134>
 80a29cc:	f104 0414 	add.w	r4, r4, #20
 80a29d0:	f1c4 0520 	rsb	r5, r4, #32
 80a29d4:	fa00 f305 	lsl.w	r3, r0, r5
 80a29d8:	fa20 f004 	lsr.w	r0, r0, r4
 80a29dc:	fa01 f205 	lsl.w	r2, r1, r5
 80a29e0:	ea40 0002 	orr.w	r0, r0, r2
 80a29e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a29e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a29ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a29f0:	fa21 f604 	lsr.w	r6, r1, r4
 80a29f4:	eb42 0106 	adc.w	r1, r2, r6
 80a29f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a29fc:	bf08      	it	eq
 80a29fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2a02:	bd70      	pop	{r4, r5, r6, pc}
 80a2a04:	f1c4 040c 	rsb	r4, r4, #12
 80a2a08:	f1c4 0520 	rsb	r5, r4, #32
 80a2a0c:	fa00 f304 	lsl.w	r3, r0, r4
 80a2a10:	fa20 f005 	lsr.w	r0, r0, r5
 80a2a14:	fa01 f204 	lsl.w	r2, r1, r4
 80a2a18:	ea40 0002 	orr.w	r0, r0, r2
 80a2a1c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2a20:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a2a24:	f141 0100 	adc.w	r1, r1, #0
 80a2a28:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2a2c:	bf08      	it	eq
 80a2a2e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2a32:	bd70      	pop	{r4, r5, r6, pc}
 80a2a34:	f1c4 0520 	rsb	r5, r4, #32
 80a2a38:	fa00 f205 	lsl.w	r2, r0, r5
 80a2a3c:	ea4e 0e02 	orr.w	lr, lr, r2
 80a2a40:	fa20 f304 	lsr.w	r3, r0, r4
 80a2a44:	fa01 f205 	lsl.w	r2, r1, r5
 80a2a48:	ea43 0302 	orr.w	r3, r3, r2
 80a2a4c:	fa21 f004 	lsr.w	r0, r1, r4
 80a2a50:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2a54:	fa21 f204 	lsr.w	r2, r1, r4
 80a2a58:	ea20 0002 	bic.w	r0, r0, r2
 80a2a5c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a2a60:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2a64:	bf08      	it	eq
 80a2a66:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2a6a:	bd70      	pop	{r4, r5, r6, pc}
 80a2a6c:	f094 0f00 	teq	r4, #0
 80a2a70:	d10f      	bne.n	80a2a92 <__aeabi_dmul+0x1c2>
 80a2a72:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a2a76:	0040      	lsls	r0, r0, #1
 80a2a78:	eb41 0101 	adc.w	r1, r1, r1
 80a2a7c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2a80:	bf08      	it	eq
 80a2a82:	3c01      	subeq	r4, #1
 80a2a84:	d0f7      	beq.n	80a2a76 <__aeabi_dmul+0x1a6>
 80a2a86:	ea41 0106 	orr.w	r1, r1, r6
 80a2a8a:	f095 0f00 	teq	r5, #0
 80a2a8e:	bf18      	it	ne
 80a2a90:	4770      	bxne	lr
 80a2a92:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a2a96:	0052      	lsls	r2, r2, #1
 80a2a98:	eb43 0303 	adc.w	r3, r3, r3
 80a2a9c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a2aa0:	bf08      	it	eq
 80a2aa2:	3d01      	subeq	r5, #1
 80a2aa4:	d0f7      	beq.n	80a2a96 <__aeabi_dmul+0x1c6>
 80a2aa6:	ea43 0306 	orr.w	r3, r3, r6
 80a2aaa:	4770      	bx	lr
 80a2aac:	ea94 0f0c 	teq	r4, ip
 80a2ab0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a2ab4:	bf18      	it	ne
 80a2ab6:	ea95 0f0c 	teqne	r5, ip
 80a2aba:	d00c      	beq.n	80a2ad6 <__aeabi_dmul+0x206>
 80a2abc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2ac0:	bf18      	it	ne
 80a2ac2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2ac6:	d1d1      	bne.n	80a2a6c <__aeabi_dmul+0x19c>
 80a2ac8:	ea81 0103 	eor.w	r1, r1, r3
 80a2acc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2ad0:	f04f 0000 	mov.w	r0, #0
 80a2ad4:	bd70      	pop	{r4, r5, r6, pc}
 80a2ad6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2ada:	bf06      	itte	eq
 80a2adc:	4610      	moveq	r0, r2
 80a2ade:	4619      	moveq	r1, r3
 80a2ae0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2ae4:	d019      	beq.n	80a2b1a <__aeabi_dmul+0x24a>
 80a2ae6:	ea94 0f0c 	teq	r4, ip
 80a2aea:	d102      	bne.n	80a2af2 <__aeabi_dmul+0x222>
 80a2aec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a2af0:	d113      	bne.n	80a2b1a <__aeabi_dmul+0x24a>
 80a2af2:	ea95 0f0c 	teq	r5, ip
 80a2af6:	d105      	bne.n	80a2b04 <__aeabi_dmul+0x234>
 80a2af8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a2afc:	bf1c      	itt	ne
 80a2afe:	4610      	movne	r0, r2
 80a2b00:	4619      	movne	r1, r3
 80a2b02:	d10a      	bne.n	80a2b1a <__aeabi_dmul+0x24a>
 80a2b04:	ea81 0103 	eor.w	r1, r1, r3
 80a2b08:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2b0c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a2b10:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2b14:	f04f 0000 	mov.w	r0, #0
 80a2b18:	bd70      	pop	{r4, r5, r6, pc}
 80a2b1a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a2b1e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a2b22:	bd70      	pop	{r4, r5, r6, pc}

080a2b24 <__aeabi_ddiv>:
 80a2b24:	b570      	push	{r4, r5, r6, lr}
 80a2b26:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2b2a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a2b2e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a2b32:	bf1d      	ittte	ne
 80a2b34:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a2b38:	ea94 0f0c 	teqne	r4, ip
 80a2b3c:	ea95 0f0c 	teqne	r5, ip
 80a2b40:	f000 f8a7 	bleq	80a2c92 <__aeabi_ddiv+0x16e>
 80a2b44:	eba4 0405 	sub.w	r4, r4, r5
 80a2b48:	ea81 0e03 	eor.w	lr, r1, r3
 80a2b4c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a2b50:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2b54:	f000 8088 	beq.w	80a2c68 <__aeabi_ddiv+0x144>
 80a2b58:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2b5c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a2b60:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a2b64:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a2b68:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a2b6c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a2b70:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a2b74:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a2b78:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a2b7c:	429d      	cmp	r5, r3
 80a2b7e:	bf08      	it	eq
 80a2b80:	4296      	cmpeq	r6, r2
 80a2b82:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a2b86:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a2b8a:	d202      	bcs.n	80a2b92 <__aeabi_ddiv+0x6e>
 80a2b8c:	085b      	lsrs	r3, r3, #1
 80a2b8e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2b92:	1ab6      	subs	r6, r6, r2
 80a2b94:	eb65 0503 	sbc.w	r5, r5, r3
 80a2b98:	085b      	lsrs	r3, r3, #1
 80a2b9a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2b9e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a2ba2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a2ba6:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2baa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2bae:	bf22      	ittt	cs
 80a2bb0:	1ab6      	subcs	r6, r6, r2
 80a2bb2:	4675      	movcs	r5, lr
 80a2bb4:	ea40 000c 	orrcs.w	r0, r0, ip
 80a2bb8:	085b      	lsrs	r3, r3, #1
 80a2bba:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2bbe:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2bc2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2bc6:	bf22      	ittt	cs
 80a2bc8:	1ab6      	subcs	r6, r6, r2
 80a2bca:	4675      	movcs	r5, lr
 80a2bcc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a2bd0:	085b      	lsrs	r3, r3, #1
 80a2bd2:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2bd6:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2bda:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2bde:	bf22      	ittt	cs
 80a2be0:	1ab6      	subcs	r6, r6, r2
 80a2be2:	4675      	movcs	r5, lr
 80a2be4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a2be8:	085b      	lsrs	r3, r3, #1
 80a2bea:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2bee:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2bf2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2bf6:	bf22      	ittt	cs
 80a2bf8:	1ab6      	subcs	r6, r6, r2
 80a2bfa:	4675      	movcs	r5, lr
 80a2bfc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a2c00:	ea55 0e06 	orrs.w	lr, r5, r6
 80a2c04:	d018      	beq.n	80a2c38 <__aeabi_ddiv+0x114>
 80a2c06:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a2c0a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a2c0e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a2c12:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a2c16:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a2c1a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a2c1e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a2c22:	d1c0      	bne.n	80a2ba6 <__aeabi_ddiv+0x82>
 80a2c24:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2c28:	d10b      	bne.n	80a2c42 <__aeabi_ddiv+0x11e>
 80a2c2a:	ea41 0100 	orr.w	r1, r1, r0
 80a2c2e:	f04f 0000 	mov.w	r0, #0
 80a2c32:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a2c36:	e7b6      	b.n	80a2ba6 <__aeabi_ddiv+0x82>
 80a2c38:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2c3c:	bf04      	itt	eq
 80a2c3e:	4301      	orreq	r1, r0
 80a2c40:	2000      	moveq	r0, #0
 80a2c42:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a2c46:	bf88      	it	hi
 80a2c48:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a2c4c:	f63f aeaf 	bhi.w	80a29ae <__aeabi_dmul+0xde>
 80a2c50:	ebb5 0c03 	subs.w	ip, r5, r3
 80a2c54:	bf04      	itt	eq
 80a2c56:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a2c5a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a2c5e:	f150 0000 	adcs.w	r0, r0, #0
 80a2c62:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2c66:	bd70      	pop	{r4, r5, r6, pc}
 80a2c68:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a2c6c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a2c70:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a2c74:	bfc2      	ittt	gt
 80a2c76:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a2c7a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a2c7e:	bd70      	popgt	{r4, r5, r6, pc}
 80a2c80:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2c84:	f04f 0e00 	mov.w	lr, #0
 80a2c88:	3c01      	subs	r4, #1
 80a2c8a:	e690      	b.n	80a29ae <__aeabi_dmul+0xde>
 80a2c8c:	ea45 0e06 	orr.w	lr, r5, r6
 80a2c90:	e68d      	b.n	80a29ae <__aeabi_dmul+0xde>
 80a2c92:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a2c96:	ea94 0f0c 	teq	r4, ip
 80a2c9a:	bf08      	it	eq
 80a2c9c:	ea95 0f0c 	teqeq	r5, ip
 80a2ca0:	f43f af3b 	beq.w	80a2b1a <__aeabi_dmul+0x24a>
 80a2ca4:	ea94 0f0c 	teq	r4, ip
 80a2ca8:	d10a      	bne.n	80a2cc0 <__aeabi_ddiv+0x19c>
 80a2caa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2cae:	f47f af34 	bne.w	80a2b1a <__aeabi_dmul+0x24a>
 80a2cb2:	ea95 0f0c 	teq	r5, ip
 80a2cb6:	f47f af25 	bne.w	80a2b04 <__aeabi_dmul+0x234>
 80a2cba:	4610      	mov	r0, r2
 80a2cbc:	4619      	mov	r1, r3
 80a2cbe:	e72c      	b.n	80a2b1a <__aeabi_dmul+0x24a>
 80a2cc0:	ea95 0f0c 	teq	r5, ip
 80a2cc4:	d106      	bne.n	80a2cd4 <__aeabi_ddiv+0x1b0>
 80a2cc6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a2cca:	f43f aefd 	beq.w	80a2ac8 <__aeabi_dmul+0x1f8>
 80a2cce:	4610      	mov	r0, r2
 80a2cd0:	4619      	mov	r1, r3
 80a2cd2:	e722      	b.n	80a2b1a <__aeabi_dmul+0x24a>
 80a2cd4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2cd8:	bf18      	it	ne
 80a2cda:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2cde:	f47f aec5 	bne.w	80a2a6c <__aeabi_dmul+0x19c>
 80a2ce2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a2ce6:	f47f af0d 	bne.w	80a2b04 <__aeabi_dmul+0x234>
 80a2cea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a2cee:	f47f aeeb 	bne.w	80a2ac8 <__aeabi_dmul+0x1f8>
 80a2cf2:	e712      	b.n	80a2b1a <__aeabi_dmul+0x24a>

080a2cf4 <__gedf2>:
 80a2cf4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a2cf8:	e006      	b.n	80a2d08 <__cmpdf2+0x4>
 80a2cfa:	bf00      	nop

080a2cfc <__ledf2>:
 80a2cfc:	f04f 0c01 	mov.w	ip, #1
 80a2d00:	e002      	b.n	80a2d08 <__cmpdf2+0x4>
 80a2d02:	bf00      	nop

080a2d04 <__cmpdf2>:
 80a2d04:	f04f 0c01 	mov.w	ip, #1
 80a2d08:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a2d0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a2d10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2d14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a2d18:	bf18      	it	ne
 80a2d1a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a2d1e:	d01b      	beq.n	80a2d58 <__cmpdf2+0x54>
 80a2d20:	b001      	add	sp, #4
 80a2d22:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a2d26:	bf0c      	ite	eq
 80a2d28:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a2d2c:	ea91 0f03 	teqne	r1, r3
 80a2d30:	bf02      	ittt	eq
 80a2d32:	ea90 0f02 	teqeq	r0, r2
 80a2d36:	2000      	moveq	r0, #0
 80a2d38:	4770      	bxeq	lr
 80a2d3a:	f110 0f00 	cmn.w	r0, #0
 80a2d3e:	ea91 0f03 	teq	r1, r3
 80a2d42:	bf58      	it	pl
 80a2d44:	4299      	cmppl	r1, r3
 80a2d46:	bf08      	it	eq
 80a2d48:	4290      	cmpeq	r0, r2
 80a2d4a:	bf2c      	ite	cs
 80a2d4c:	17d8      	asrcs	r0, r3, #31
 80a2d4e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a2d52:	f040 0001 	orr.w	r0, r0, #1
 80a2d56:	4770      	bx	lr
 80a2d58:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a2d5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2d60:	d102      	bne.n	80a2d68 <__cmpdf2+0x64>
 80a2d62:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a2d66:	d107      	bne.n	80a2d78 <__cmpdf2+0x74>
 80a2d68:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a2d6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2d70:	d1d6      	bne.n	80a2d20 <__cmpdf2+0x1c>
 80a2d72:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a2d76:	d0d3      	beq.n	80a2d20 <__cmpdf2+0x1c>
 80a2d78:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a2d7c:	4770      	bx	lr
 80a2d7e:	bf00      	nop

080a2d80 <__aeabi_cdrcmple>:
 80a2d80:	4684      	mov	ip, r0
 80a2d82:	4610      	mov	r0, r2
 80a2d84:	4662      	mov	r2, ip
 80a2d86:	468c      	mov	ip, r1
 80a2d88:	4619      	mov	r1, r3
 80a2d8a:	4663      	mov	r3, ip
 80a2d8c:	e000      	b.n	80a2d90 <__aeabi_cdcmpeq>
 80a2d8e:	bf00      	nop

080a2d90 <__aeabi_cdcmpeq>:
 80a2d90:	b501      	push	{r0, lr}
 80a2d92:	f7ff ffb7 	bl	80a2d04 <__cmpdf2>
 80a2d96:	2800      	cmp	r0, #0
 80a2d98:	bf48      	it	mi
 80a2d9a:	f110 0f00 	cmnmi.w	r0, #0
 80a2d9e:	bd01      	pop	{r0, pc}

080a2da0 <__aeabi_dcmpeq>:
 80a2da0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2da4:	f7ff fff4 	bl	80a2d90 <__aeabi_cdcmpeq>
 80a2da8:	bf0c      	ite	eq
 80a2daa:	2001      	moveq	r0, #1
 80a2dac:	2000      	movne	r0, #0
 80a2dae:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2db2:	bf00      	nop

080a2db4 <__aeabi_dcmplt>:
 80a2db4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2db8:	f7ff ffea 	bl	80a2d90 <__aeabi_cdcmpeq>
 80a2dbc:	bf34      	ite	cc
 80a2dbe:	2001      	movcc	r0, #1
 80a2dc0:	2000      	movcs	r0, #0
 80a2dc2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2dc6:	bf00      	nop

080a2dc8 <__aeabi_dcmple>:
 80a2dc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2dcc:	f7ff ffe0 	bl	80a2d90 <__aeabi_cdcmpeq>
 80a2dd0:	bf94      	ite	ls
 80a2dd2:	2001      	movls	r0, #1
 80a2dd4:	2000      	movhi	r0, #0
 80a2dd6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2dda:	bf00      	nop

080a2ddc <__aeabi_dcmpge>:
 80a2ddc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2de0:	f7ff ffce 	bl	80a2d80 <__aeabi_cdrcmple>
 80a2de4:	bf94      	ite	ls
 80a2de6:	2001      	movls	r0, #1
 80a2de8:	2000      	movhi	r0, #0
 80a2dea:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2dee:	bf00      	nop

080a2df0 <__aeabi_dcmpgt>:
 80a2df0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2df4:	f7ff ffc4 	bl	80a2d80 <__aeabi_cdrcmple>
 80a2df8:	bf34      	ite	cc
 80a2dfa:	2001      	movcc	r0, #1
 80a2dfc:	2000      	movcs	r0, #0
 80a2dfe:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2e02:	bf00      	nop

080a2e04 <__aeabi_d2iz>:
 80a2e04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a2e08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a2e0c:	d215      	bcs.n	80a2e3a <__aeabi_d2iz+0x36>
 80a2e0e:	d511      	bpl.n	80a2e34 <__aeabi_d2iz+0x30>
 80a2e10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a2e14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a2e18:	d912      	bls.n	80a2e40 <__aeabi_d2iz+0x3c>
 80a2e1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a2e1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a2e22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a2e26:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a2e2a:	fa23 f002 	lsr.w	r0, r3, r2
 80a2e2e:	bf18      	it	ne
 80a2e30:	4240      	negne	r0, r0
 80a2e32:	4770      	bx	lr
 80a2e34:	f04f 0000 	mov.w	r0, #0
 80a2e38:	4770      	bx	lr
 80a2e3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a2e3e:	d105      	bne.n	80a2e4c <__aeabi_d2iz+0x48>
 80a2e40:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a2e44:	bf08      	it	eq
 80a2e46:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a2e4a:	4770      	bx	lr
 80a2e4c:	f04f 0000 	mov.w	r0, #0
 80a2e50:	4770      	bx	lr
 80a2e52:	bf00      	nop

080a2e54 <__aeabi_frsub>:
 80a2e54:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a2e58:	e002      	b.n	80a2e60 <__addsf3>
 80a2e5a:	bf00      	nop

080a2e5c <__aeabi_fsub>:
 80a2e5c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a2e60 <__addsf3>:
 80a2e60:	0042      	lsls	r2, r0, #1
 80a2e62:	bf1f      	itttt	ne
 80a2e64:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a2e68:	ea92 0f03 	teqne	r2, r3
 80a2e6c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a2e70:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a2e74:	d06a      	beq.n	80a2f4c <__addsf3+0xec>
 80a2e76:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a2e7a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a2e7e:	bfc1      	itttt	gt
 80a2e80:	18d2      	addgt	r2, r2, r3
 80a2e82:	4041      	eorgt	r1, r0
 80a2e84:	4048      	eorgt	r0, r1
 80a2e86:	4041      	eorgt	r1, r0
 80a2e88:	bfb8      	it	lt
 80a2e8a:	425b      	neglt	r3, r3
 80a2e8c:	2b19      	cmp	r3, #25
 80a2e8e:	bf88      	it	hi
 80a2e90:	4770      	bxhi	lr
 80a2e92:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a2e96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2e9a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a2e9e:	bf18      	it	ne
 80a2ea0:	4240      	negne	r0, r0
 80a2ea2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a2ea6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a2eaa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a2eae:	bf18      	it	ne
 80a2eb0:	4249      	negne	r1, r1
 80a2eb2:	ea92 0f03 	teq	r2, r3
 80a2eb6:	d03f      	beq.n	80a2f38 <__addsf3+0xd8>
 80a2eb8:	f1a2 0201 	sub.w	r2, r2, #1
 80a2ebc:	fa41 fc03 	asr.w	ip, r1, r3
 80a2ec0:	eb10 000c 	adds.w	r0, r0, ip
 80a2ec4:	f1c3 0320 	rsb	r3, r3, #32
 80a2ec8:	fa01 f103 	lsl.w	r1, r1, r3
 80a2ecc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a2ed0:	d502      	bpl.n	80a2ed8 <__addsf3+0x78>
 80a2ed2:	4249      	negs	r1, r1
 80a2ed4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a2ed8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a2edc:	d313      	bcc.n	80a2f06 <__addsf3+0xa6>
 80a2ede:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a2ee2:	d306      	bcc.n	80a2ef2 <__addsf3+0x92>
 80a2ee4:	0840      	lsrs	r0, r0, #1
 80a2ee6:	ea4f 0131 	mov.w	r1, r1, rrx
 80a2eea:	f102 0201 	add.w	r2, r2, #1
 80a2eee:	2afe      	cmp	r2, #254	; 0xfe
 80a2ef0:	d251      	bcs.n	80a2f96 <__addsf3+0x136>
 80a2ef2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a2ef6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a2efa:	bf08      	it	eq
 80a2efc:	f020 0001 	biceq.w	r0, r0, #1
 80a2f00:	ea40 0003 	orr.w	r0, r0, r3
 80a2f04:	4770      	bx	lr
 80a2f06:	0049      	lsls	r1, r1, #1
 80a2f08:	eb40 0000 	adc.w	r0, r0, r0
 80a2f0c:	3a01      	subs	r2, #1
 80a2f0e:	bf28      	it	cs
 80a2f10:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80a2f14:	d2ed      	bcs.n	80a2ef2 <__addsf3+0x92>
 80a2f16:	fab0 fc80 	clz	ip, r0
 80a2f1a:	f1ac 0c08 	sub.w	ip, ip, #8
 80a2f1e:	ebb2 020c 	subs.w	r2, r2, ip
 80a2f22:	fa00 f00c 	lsl.w	r0, r0, ip
 80a2f26:	bfaa      	itet	ge
 80a2f28:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a2f2c:	4252      	neglt	r2, r2
 80a2f2e:	4318      	orrge	r0, r3
 80a2f30:	bfbc      	itt	lt
 80a2f32:	40d0      	lsrlt	r0, r2
 80a2f34:	4318      	orrlt	r0, r3
 80a2f36:	4770      	bx	lr
 80a2f38:	f092 0f00 	teq	r2, #0
 80a2f3c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a2f40:	bf06      	itte	eq
 80a2f42:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a2f46:	3201      	addeq	r2, #1
 80a2f48:	3b01      	subne	r3, #1
 80a2f4a:	e7b5      	b.n	80a2eb8 <__addsf3+0x58>
 80a2f4c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a2f50:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a2f54:	bf18      	it	ne
 80a2f56:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a2f5a:	d021      	beq.n	80a2fa0 <__addsf3+0x140>
 80a2f5c:	ea92 0f03 	teq	r2, r3
 80a2f60:	d004      	beq.n	80a2f6c <__addsf3+0x10c>
 80a2f62:	f092 0f00 	teq	r2, #0
 80a2f66:	bf08      	it	eq
 80a2f68:	4608      	moveq	r0, r1
 80a2f6a:	4770      	bx	lr
 80a2f6c:	ea90 0f01 	teq	r0, r1
 80a2f70:	bf1c      	itt	ne
 80a2f72:	2000      	movne	r0, #0
 80a2f74:	4770      	bxne	lr
 80a2f76:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a2f7a:	d104      	bne.n	80a2f86 <__addsf3+0x126>
 80a2f7c:	0040      	lsls	r0, r0, #1
 80a2f7e:	bf28      	it	cs
 80a2f80:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a2f84:	4770      	bx	lr
 80a2f86:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a2f8a:	bf3c      	itt	cc
 80a2f8c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a2f90:	4770      	bxcc	lr
 80a2f92:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a2f96:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a2f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2f9e:	4770      	bx	lr
 80a2fa0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a2fa4:	bf16      	itet	ne
 80a2fa6:	4608      	movne	r0, r1
 80a2fa8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a2fac:	4601      	movne	r1, r0
 80a2fae:	0242      	lsls	r2, r0, #9
 80a2fb0:	bf06      	itte	eq
 80a2fb2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a2fb6:	ea90 0f01 	teqeq	r0, r1
 80a2fba:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a2fbe:	4770      	bx	lr

080a2fc0 <__aeabi_ui2f>:
 80a2fc0:	f04f 0300 	mov.w	r3, #0
 80a2fc4:	e004      	b.n	80a2fd0 <__aeabi_i2f+0x8>
 80a2fc6:	bf00      	nop

080a2fc8 <__aeabi_i2f>:
 80a2fc8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a2fcc:	bf48      	it	mi
 80a2fce:	4240      	negmi	r0, r0
 80a2fd0:	ea5f 0c00 	movs.w	ip, r0
 80a2fd4:	bf08      	it	eq
 80a2fd6:	4770      	bxeq	lr
 80a2fd8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a2fdc:	4601      	mov	r1, r0
 80a2fde:	f04f 0000 	mov.w	r0, #0
 80a2fe2:	e01c      	b.n	80a301e <__aeabi_l2f+0x2a>

080a2fe4 <__aeabi_ul2f>:
 80a2fe4:	ea50 0201 	orrs.w	r2, r0, r1
 80a2fe8:	bf08      	it	eq
 80a2fea:	4770      	bxeq	lr
 80a2fec:	f04f 0300 	mov.w	r3, #0
 80a2ff0:	e00a      	b.n	80a3008 <__aeabi_l2f+0x14>
 80a2ff2:	bf00      	nop

080a2ff4 <__aeabi_l2f>:
 80a2ff4:	ea50 0201 	orrs.w	r2, r0, r1
 80a2ff8:	bf08      	it	eq
 80a2ffa:	4770      	bxeq	lr
 80a2ffc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a3000:	d502      	bpl.n	80a3008 <__aeabi_l2f+0x14>
 80a3002:	4240      	negs	r0, r0
 80a3004:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a3008:	ea5f 0c01 	movs.w	ip, r1
 80a300c:	bf02      	ittt	eq
 80a300e:	4684      	moveq	ip, r0
 80a3010:	4601      	moveq	r1, r0
 80a3012:	2000      	moveq	r0, #0
 80a3014:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a3018:	bf08      	it	eq
 80a301a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a301e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a3022:	fabc f28c 	clz	r2, ip
 80a3026:	3a08      	subs	r2, #8
 80a3028:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a302c:	db10      	blt.n	80a3050 <__aeabi_l2f+0x5c>
 80a302e:	fa01 fc02 	lsl.w	ip, r1, r2
 80a3032:	4463      	add	r3, ip
 80a3034:	fa00 fc02 	lsl.w	ip, r0, r2
 80a3038:	f1c2 0220 	rsb	r2, r2, #32
 80a303c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a3040:	fa20 f202 	lsr.w	r2, r0, r2
 80a3044:	eb43 0002 	adc.w	r0, r3, r2
 80a3048:	bf08      	it	eq
 80a304a:	f020 0001 	biceq.w	r0, r0, #1
 80a304e:	4770      	bx	lr
 80a3050:	f102 0220 	add.w	r2, r2, #32
 80a3054:	fa01 fc02 	lsl.w	ip, r1, r2
 80a3058:	f1c2 0220 	rsb	r2, r2, #32
 80a305c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a3060:	fa21 f202 	lsr.w	r2, r1, r2
 80a3064:	eb43 0002 	adc.w	r0, r3, r2
 80a3068:	bf08      	it	eq
 80a306a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a306e:	4770      	bx	lr

080a3070 <__aeabi_fmul>:
 80a3070:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3074:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a3078:	bf1e      	ittt	ne
 80a307a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a307e:	ea92 0f0c 	teqne	r2, ip
 80a3082:	ea93 0f0c 	teqne	r3, ip
 80a3086:	d06f      	beq.n	80a3168 <__aeabi_fmul+0xf8>
 80a3088:	441a      	add	r2, r3
 80a308a:	ea80 0c01 	eor.w	ip, r0, r1
 80a308e:	0240      	lsls	r0, r0, #9
 80a3090:	bf18      	it	ne
 80a3092:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a3096:	d01e      	beq.n	80a30d6 <__aeabi_fmul+0x66>
 80a3098:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a309c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a30a0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a30a4:	fba0 3101 	umull	r3, r1, r0, r1
 80a30a8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a30ac:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a30b0:	bf3e      	ittt	cc
 80a30b2:	0049      	lslcc	r1, r1, #1
 80a30b4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a30b8:	005b      	lslcc	r3, r3, #1
 80a30ba:	ea40 0001 	orr.w	r0, r0, r1
 80a30be:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a30c2:	2afd      	cmp	r2, #253	; 0xfd
 80a30c4:	d81d      	bhi.n	80a3102 <__aeabi_fmul+0x92>
 80a30c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a30ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a30ce:	bf08      	it	eq
 80a30d0:	f020 0001 	biceq.w	r0, r0, #1
 80a30d4:	4770      	bx	lr
 80a30d6:	f090 0f00 	teq	r0, #0
 80a30da:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a30de:	bf08      	it	eq
 80a30e0:	0249      	lsleq	r1, r1, #9
 80a30e2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a30e6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a30ea:	3a7f      	subs	r2, #127	; 0x7f
 80a30ec:	bfc2      	ittt	gt
 80a30ee:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a30f2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a30f6:	4770      	bxgt	lr
 80a30f8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a30fc:	f04f 0300 	mov.w	r3, #0
 80a3100:	3a01      	subs	r2, #1
 80a3102:	dc5d      	bgt.n	80a31c0 <__aeabi_fmul+0x150>
 80a3104:	f112 0f19 	cmn.w	r2, #25
 80a3108:	bfdc      	itt	le
 80a310a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a310e:	4770      	bxle	lr
 80a3110:	f1c2 0200 	rsb	r2, r2, #0
 80a3114:	0041      	lsls	r1, r0, #1
 80a3116:	fa21 f102 	lsr.w	r1, r1, r2
 80a311a:	f1c2 0220 	rsb	r2, r2, #32
 80a311e:	fa00 fc02 	lsl.w	ip, r0, r2
 80a3122:	ea5f 0031 	movs.w	r0, r1, rrx
 80a3126:	f140 0000 	adc.w	r0, r0, #0
 80a312a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a312e:	bf08      	it	eq
 80a3130:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a3134:	4770      	bx	lr
 80a3136:	f092 0f00 	teq	r2, #0
 80a313a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a313e:	bf02      	ittt	eq
 80a3140:	0040      	lsleq	r0, r0, #1
 80a3142:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a3146:	3a01      	subeq	r2, #1
 80a3148:	d0f9      	beq.n	80a313e <__aeabi_fmul+0xce>
 80a314a:	ea40 000c 	orr.w	r0, r0, ip
 80a314e:	f093 0f00 	teq	r3, #0
 80a3152:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a3156:	bf02      	ittt	eq
 80a3158:	0049      	lsleq	r1, r1, #1
 80a315a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a315e:	3b01      	subeq	r3, #1
 80a3160:	d0f9      	beq.n	80a3156 <__aeabi_fmul+0xe6>
 80a3162:	ea41 010c 	orr.w	r1, r1, ip
 80a3166:	e78f      	b.n	80a3088 <__aeabi_fmul+0x18>
 80a3168:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a316c:	ea92 0f0c 	teq	r2, ip
 80a3170:	bf18      	it	ne
 80a3172:	ea93 0f0c 	teqne	r3, ip
 80a3176:	d00a      	beq.n	80a318e <__aeabi_fmul+0x11e>
 80a3178:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a317c:	bf18      	it	ne
 80a317e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a3182:	d1d8      	bne.n	80a3136 <__aeabi_fmul+0xc6>
 80a3184:	ea80 0001 	eor.w	r0, r0, r1
 80a3188:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a318c:	4770      	bx	lr
 80a318e:	f090 0f00 	teq	r0, #0
 80a3192:	bf17      	itett	ne
 80a3194:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a3198:	4608      	moveq	r0, r1
 80a319a:	f091 0f00 	teqne	r1, #0
 80a319e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a31a2:	d014      	beq.n	80a31ce <__aeabi_fmul+0x15e>
 80a31a4:	ea92 0f0c 	teq	r2, ip
 80a31a8:	d101      	bne.n	80a31ae <__aeabi_fmul+0x13e>
 80a31aa:	0242      	lsls	r2, r0, #9
 80a31ac:	d10f      	bne.n	80a31ce <__aeabi_fmul+0x15e>
 80a31ae:	ea93 0f0c 	teq	r3, ip
 80a31b2:	d103      	bne.n	80a31bc <__aeabi_fmul+0x14c>
 80a31b4:	024b      	lsls	r3, r1, #9
 80a31b6:	bf18      	it	ne
 80a31b8:	4608      	movne	r0, r1
 80a31ba:	d108      	bne.n	80a31ce <__aeabi_fmul+0x15e>
 80a31bc:	ea80 0001 	eor.w	r0, r0, r1
 80a31c0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a31c4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a31c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a31cc:	4770      	bx	lr
 80a31ce:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a31d2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a31d6:	4770      	bx	lr

080a31d8 <__aeabi_fdiv>:
 80a31d8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a31dc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a31e0:	bf1e      	ittt	ne
 80a31e2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a31e6:	ea92 0f0c 	teqne	r2, ip
 80a31ea:	ea93 0f0c 	teqne	r3, ip
 80a31ee:	d069      	beq.n	80a32c4 <__aeabi_fdiv+0xec>
 80a31f0:	eba2 0203 	sub.w	r2, r2, r3
 80a31f4:	ea80 0c01 	eor.w	ip, r0, r1
 80a31f8:	0249      	lsls	r1, r1, #9
 80a31fa:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a31fe:	d037      	beq.n	80a3270 <__aeabi_fdiv+0x98>
 80a3200:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a3204:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a3208:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a320c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a3210:	428b      	cmp	r3, r1
 80a3212:	bf38      	it	cc
 80a3214:	005b      	lslcc	r3, r3, #1
 80a3216:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a321a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a321e:	428b      	cmp	r3, r1
 80a3220:	bf24      	itt	cs
 80a3222:	1a5b      	subcs	r3, r3, r1
 80a3224:	ea40 000c 	orrcs.w	r0, r0, ip
 80a3228:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a322c:	bf24      	itt	cs
 80a322e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a3232:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a3236:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a323a:	bf24      	itt	cs
 80a323c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a3240:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a3244:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a3248:	bf24      	itt	cs
 80a324a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a324e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a3252:	011b      	lsls	r3, r3, #4
 80a3254:	bf18      	it	ne
 80a3256:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a325a:	d1e0      	bne.n	80a321e <__aeabi_fdiv+0x46>
 80a325c:	2afd      	cmp	r2, #253	; 0xfd
 80a325e:	f63f af50 	bhi.w	80a3102 <__aeabi_fmul+0x92>
 80a3262:	428b      	cmp	r3, r1
 80a3264:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a3268:	bf08      	it	eq
 80a326a:	f020 0001 	biceq.w	r0, r0, #1
 80a326e:	4770      	bx	lr
 80a3270:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a3274:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a3278:	327f      	adds	r2, #127	; 0x7f
 80a327a:	bfc2      	ittt	gt
 80a327c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a3280:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a3284:	4770      	bxgt	lr
 80a3286:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a328a:	f04f 0300 	mov.w	r3, #0
 80a328e:	3a01      	subs	r2, #1
 80a3290:	e737      	b.n	80a3102 <__aeabi_fmul+0x92>
 80a3292:	f092 0f00 	teq	r2, #0
 80a3296:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a329a:	bf02      	ittt	eq
 80a329c:	0040      	lsleq	r0, r0, #1
 80a329e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a32a2:	3a01      	subeq	r2, #1
 80a32a4:	d0f9      	beq.n	80a329a <__aeabi_fdiv+0xc2>
 80a32a6:	ea40 000c 	orr.w	r0, r0, ip
 80a32aa:	f093 0f00 	teq	r3, #0
 80a32ae:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a32b2:	bf02      	ittt	eq
 80a32b4:	0049      	lsleq	r1, r1, #1
 80a32b6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a32ba:	3b01      	subeq	r3, #1
 80a32bc:	d0f9      	beq.n	80a32b2 <__aeabi_fdiv+0xda>
 80a32be:	ea41 010c 	orr.w	r1, r1, ip
 80a32c2:	e795      	b.n	80a31f0 <__aeabi_fdiv+0x18>
 80a32c4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a32c8:	ea92 0f0c 	teq	r2, ip
 80a32cc:	d108      	bne.n	80a32e0 <__aeabi_fdiv+0x108>
 80a32ce:	0242      	lsls	r2, r0, #9
 80a32d0:	f47f af7d 	bne.w	80a31ce <__aeabi_fmul+0x15e>
 80a32d4:	ea93 0f0c 	teq	r3, ip
 80a32d8:	f47f af70 	bne.w	80a31bc <__aeabi_fmul+0x14c>
 80a32dc:	4608      	mov	r0, r1
 80a32de:	e776      	b.n	80a31ce <__aeabi_fmul+0x15e>
 80a32e0:	ea93 0f0c 	teq	r3, ip
 80a32e4:	d104      	bne.n	80a32f0 <__aeabi_fdiv+0x118>
 80a32e6:	024b      	lsls	r3, r1, #9
 80a32e8:	f43f af4c 	beq.w	80a3184 <__aeabi_fmul+0x114>
 80a32ec:	4608      	mov	r0, r1
 80a32ee:	e76e      	b.n	80a31ce <__aeabi_fmul+0x15e>
 80a32f0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a32f4:	bf18      	it	ne
 80a32f6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a32fa:	d1ca      	bne.n	80a3292 <__aeabi_fdiv+0xba>
 80a32fc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a3300:	f47f af5c 	bne.w	80a31bc <__aeabi_fmul+0x14c>
 80a3304:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a3308:	f47f af3c 	bne.w	80a3184 <__aeabi_fmul+0x114>
 80a330c:	e75f      	b.n	80a31ce <__aeabi_fmul+0x15e>
 80a330e:	bf00      	nop

080a3310 <__aeabi_fcmpun>:
 80a3310:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a3314:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a3318:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a331c:	d102      	bne.n	80a3324 <__aeabi_fcmpun+0x14>
 80a331e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a3322:	d108      	bne.n	80a3336 <__aeabi_fcmpun+0x26>
 80a3324:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a3328:	d102      	bne.n	80a3330 <__aeabi_fcmpun+0x20>
 80a332a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a332e:	d102      	bne.n	80a3336 <__aeabi_fcmpun+0x26>
 80a3330:	f04f 0000 	mov.w	r0, #0
 80a3334:	4770      	bx	lr
 80a3336:	f04f 0001 	mov.w	r0, #1
 80a333a:	4770      	bx	lr

080a333c <atexit>:
 80a333c:	2300      	movs	r3, #0
 80a333e:	4601      	mov	r1, r0
 80a3340:	461a      	mov	r2, r3
 80a3342:	4618      	mov	r0, r3
 80a3344:	f000 b8f2 	b.w	80a352c <__register_exitproc>

080a3348 <memcpy>:
 80a3348:	440a      	add	r2, r1
 80a334a:	4291      	cmp	r1, r2
 80a334c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80a3350:	d100      	bne.n	80a3354 <memcpy+0xc>
 80a3352:	4770      	bx	lr
 80a3354:	b510      	push	{r4, lr}
 80a3356:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a335a:	4291      	cmp	r1, r2
 80a335c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a3360:	d1f9      	bne.n	80a3356 <memcpy+0xe>
 80a3362:	bd10      	pop	{r4, pc}

080a3364 <memmove>:
 80a3364:	4288      	cmp	r0, r1
 80a3366:	b510      	push	{r4, lr}
 80a3368:	eb01 0402 	add.w	r4, r1, r2
 80a336c:	d902      	bls.n	80a3374 <memmove+0x10>
 80a336e:	4284      	cmp	r4, r0
 80a3370:	4623      	mov	r3, r4
 80a3372:	d807      	bhi.n	80a3384 <memmove+0x20>
 80a3374:	1e43      	subs	r3, r0, #1
 80a3376:	42a1      	cmp	r1, r4
 80a3378:	d008      	beq.n	80a338c <memmove+0x28>
 80a337a:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a337e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80a3382:	e7f8      	b.n	80a3376 <memmove+0x12>
 80a3384:	4601      	mov	r1, r0
 80a3386:	4402      	add	r2, r0
 80a3388:	428a      	cmp	r2, r1
 80a338a:	d100      	bne.n	80a338e <memmove+0x2a>
 80a338c:	bd10      	pop	{r4, pc}
 80a338e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80a3392:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80a3396:	e7f7      	b.n	80a3388 <memmove+0x24>

080a3398 <memset>:
 80a3398:	4603      	mov	r3, r0
 80a339a:	4402      	add	r2, r0
 80a339c:	4293      	cmp	r3, r2
 80a339e:	d100      	bne.n	80a33a2 <memset+0xa>
 80a33a0:	4770      	bx	lr
 80a33a2:	f803 1b01 	strb.w	r1, [r3], #1
 80a33a6:	e7f9      	b.n	80a339c <memset+0x4>

080a33a8 <srand>:
 80a33a8:	b538      	push	{r3, r4, r5, lr}
 80a33aa:	4b0d      	ldr	r3, [pc, #52]	; (80a33e0 <srand+0x38>)
 80a33ac:	4604      	mov	r4, r0
 80a33ae:	681d      	ldr	r5, [r3, #0]
 80a33b0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a33b2:	b97b      	cbnz	r3, 80a33d4 <srand+0x2c>
 80a33b4:	2018      	movs	r0, #24
 80a33b6:	f7fd ff99 	bl	80a12ec <malloc>
 80a33ba:	4a0a      	ldr	r2, [pc, #40]	; (80a33e4 <srand+0x3c>)
 80a33bc:	4b0a      	ldr	r3, [pc, #40]	; (80a33e8 <srand+0x40>)
 80a33be:	63a8      	str	r0, [r5, #56]	; 0x38
 80a33c0:	e9c0 2300 	strd	r2, r3, [r0]
 80a33c4:	4b09      	ldr	r3, [pc, #36]	; (80a33ec <srand+0x44>)
 80a33c6:	2201      	movs	r2, #1
 80a33c8:	6083      	str	r3, [r0, #8]
 80a33ca:	230b      	movs	r3, #11
 80a33cc:	8183      	strh	r3, [r0, #12]
 80a33ce:	2300      	movs	r3, #0
 80a33d0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a33d4:	2200      	movs	r2, #0
 80a33d6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a33d8:	611c      	str	r4, [r3, #16]
 80a33da:	615a      	str	r2, [r3, #20]
 80a33dc:	bd38      	pop	{r3, r4, r5, pc}
 80a33de:	bf00      	nop
 80a33e0:	20000004 	.word	0x20000004
 80a33e4:	abcd330e 	.word	0xabcd330e
 80a33e8:	e66d1234 	.word	0xe66d1234
 80a33ec:	0005deec 	.word	0x0005deec

080a33f0 <strcmp>:
 80a33f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a33f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a33f8:	2a01      	cmp	r2, #1
 80a33fa:	bf28      	it	cs
 80a33fc:	429a      	cmpcs	r2, r3
 80a33fe:	d0f7      	beq.n	80a33f0 <strcmp>
 80a3400:	1ad0      	subs	r0, r2, r3
 80a3402:	4770      	bx	lr

080a3404 <strcpy>:
 80a3404:	4603      	mov	r3, r0
 80a3406:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a340a:	f803 2b01 	strb.w	r2, [r3], #1
 80a340e:	2a00      	cmp	r2, #0
 80a3410:	d1f9      	bne.n	80a3406 <strcpy+0x2>
 80a3412:	4770      	bx	lr

080a3414 <strlen>:
 80a3414:	4603      	mov	r3, r0
 80a3416:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a341a:	2a00      	cmp	r2, #0
 80a341c:	d1fb      	bne.n	80a3416 <strlen+0x2>
 80a341e:	1a18      	subs	r0, r3, r0
 80a3420:	3801      	subs	r0, #1
 80a3422:	4770      	bx	lr

080a3424 <_strtol_l.isra.0>:
 80a3424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a3428:	468c      	mov	ip, r1
 80a342a:	4686      	mov	lr, r0
 80a342c:	4e39      	ldr	r6, [pc, #228]	; (80a3514 <_strtol_l.isra.0+0xf0>)
 80a342e:	4660      	mov	r0, ip
 80a3430:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a3434:	5da5      	ldrb	r5, [r4, r6]
 80a3436:	f015 0508 	ands.w	r5, r5, #8
 80a343a:	d1f8      	bne.n	80a342e <_strtol_l.isra.0+0xa>
 80a343c:	2c2d      	cmp	r4, #45	; 0x2d
 80a343e:	d133      	bne.n	80a34a8 <_strtol_l.isra.0+0x84>
 80a3440:	f04f 0801 	mov.w	r8, #1
 80a3444:	f89c 4000 	ldrb.w	r4, [ip]
 80a3448:	f100 0c02 	add.w	ip, r0, #2
 80a344c:	2b00      	cmp	r3, #0
 80a344e:	d05c      	beq.n	80a350a <_strtol_l.isra.0+0xe6>
 80a3450:	2b10      	cmp	r3, #16
 80a3452:	d10c      	bne.n	80a346e <_strtol_l.isra.0+0x4a>
 80a3454:	2c30      	cmp	r4, #48	; 0x30
 80a3456:	d10a      	bne.n	80a346e <_strtol_l.isra.0+0x4a>
 80a3458:	f89c 0000 	ldrb.w	r0, [ip]
 80a345c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a3460:	2858      	cmp	r0, #88	; 0x58
 80a3462:	d14d      	bne.n	80a3500 <_strtol_l.isra.0+0xdc>
 80a3464:	2310      	movs	r3, #16
 80a3466:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80a346a:	f10c 0c02 	add.w	ip, ip, #2
 80a346e:	2600      	movs	r6, #0
 80a3470:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80a3474:	3f01      	subs	r7, #1
 80a3476:	fbb7 f9f3 	udiv	r9, r7, r3
 80a347a:	4630      	mov	r0, r6
 80a347c:	fb03 7a19 	mls	sl, r3, r9, r7
 80a3480:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 80a3484:	2d09      	cmp	r5, #9
 80a3486:	d818      	bhi.n	80a34ba <_strtol_l.isra.0+0x96>
 80a3488:	462c      	mov	r4, r5
 80a348a:	42a3      	cmp	r3, r4
 80a348c:	dd24      	ble.n	80a34d8 <_strtol_l.isra.0+0xb4>
 80a348e:	1c75      	adds	r5, r6, #1
 80a3490:	d007      	beq.n	80a34a2 <_strtol_l.isra.0+0x7e>
 80a3492:	4581      	cmp	r9, r0
 80a3494:	d31d      	bcc.n	80a34d2 <_strtol_l.isra.0+0xae>
 80a3496:	d101      	bne.n	80a349c <_strtol_l.isra.0+0x78>
 80a3498:	45a2      	cmp	sl, r4
 80a349a:	db1a      	blt.n	80a34d2 <_strtol_l.isra.0+0xae>
 80a349c:	2601      	movs	r6, #1
 80a349e:	fb00 4003 	mla	r0, r0, r3, r4
 80a34a2:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a34a6:	e7eb      	b.n	80a3480 <_strtol_l.isra.0+0x5c>
 80a34a8:	2c2b      	cmp	r4, #43	; 0x2b
 80a34aa:	bf08      	it	eq
 80a34ac:	f89c 4000 	ldrbeq.w	r4, [ip]
 80a34b0:	46a8      	mov	r8, r5
 80a34b2:	bf08      	it	eq
 80a34b4:	f100 0c02 	addeq.w	ip, r0, #2
 80a34b8:	e7c8      	b.n	80a344c <_strtol_l.isra.0+0x28>
 80a34ba:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
 80a34be:	2d19      	cmp	r5, #25
 80a34c0:	d801      	bhi.n	80a34c6 <_strtol_l.isra.0+0xa2>
 80a34c2:	3c37      	subs	r4, #55	; 0x37
 80a34c4:	e7e1      	b.n	80a348a <_strtol_l.isra.0+0x66>
 80a34c6:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
 80a34ca:	2d19      	cmp	r5, #25
 80a34cc:	d804      	bhi.n	80a34d8 <_strtol_l.isra.0+0xb4>
 80a34ce:	3c57      	subs	r4, #87	; 0x57
 80a34d0:	e7db      	b.n	80a348a <_strtol_l.isra.0+0x66>
 80a34d2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80a34d6:	e7e4      	b.n	80a34a2 <_strtol_l.isra.0+0x7e>
 80a34d8:	1c73      	adds	r3, r6, #1
 80a34da:	d106      	bne.n	80a34ea <_strtol_l.isra.0+0xc6>
 80a34dc:	2322      	movs	r3, #34	; 0x22
 80a34de:	4638      	mov	r0, r7
 80a34e0:	f8ce 3000 	str.w	r3, [lr]
 80a34e4:	b942      	cbnz	r2, 80a34f8 <_strtol_l.isra.0+0xd4>
 80a34e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a34ea:	f1b8 0f00 	cmp.w	r8, #0
 80a34ee:	d000      	beq.n	80a34f2 <_strtol_l.isra.0+0xce>
 80a34f0:	4240      	negs	r0, r0
 80a34f2:	2a00      	cmp	r2, #0
 80a34f4:	d0f7      	beq.n	80a34e6 <_strtol_l.isra.0+0xc2>
 80a34f6:	b10e      	cbz	r6, 80a34fc <_strtol_l.isra.0+0xd8>
 80a34f8:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 80a34fc:	6011      	str	r1, [r2, #0]
 80a34fe:	e7f2      	b.n	80a34e6 <_strtol_l.isra.0+0xc2>
 80a3500:	2430      	movs	r4, #48	; 0x30
 80a3502:	2b00      	cmp	r3, #0
 80a3504:	d1b3      	bne.n	80a346e <_strtol_l.isra.0+0x4a>
 80a3506:	2308      	movs	r3, #8
 80a3508:	e7b1      	b.n	80a346e <_strtol_l.isra.0+0x4a>
 80a350a:	2c30      	cmp	r4, #48	; 0x30
 80a350c:	d0a4      	beq.n	80a3458 <_strtol_l.isra.0+0x34>
 80a350e:	230a      	movs	r3, #10
 80a3510:	e7ad      	b.n	80a346e <_strtol_l.isra.0+0x4a>
 80a3512:	bf00      	nop
 80a3514:	080a387e 	.word	0x080a387e

080a3518 <strtol>:
 80a3518:	4613      	mov	r3, r2
 80a351a:	460a      	mov	r2, r1
 80a351c:	4601      	mov	r1, r0
 80a351e:	4802      	ldr	r0, [pc, #8]	; (80a3528 <strtol+0x10>)
 80a3520:	6800      	ldr	r0, [r0, #0]
 80a3522:	f7ff bf7f 	b.w	80a3424 <_strtol_l.isra.0>
 80a3526:	bf00      	nop
 80a3528:	20000004 	.word	0x20000004

080a352c <__register_exitproc>:
 80a352c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a3530:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80a35f0 <__register_exitproc+0xc4>
 80a3534:	4606      	mov	r6, r0
 80a3536:	f8d8 0000 	ldr.w	r0, [r8]
 80a353a:	461f      	mov	r7, r3
 80a353c:	460d      	mov	r5, r1
 80a353e:	4691      	mov	r9, r2
 80a3540:	f000 f858 	bl	80a35f4 <__retarget_lock_acquire_recursive>
 80a3544:	4b26      	ldr	r3, [pc, #152]	; (80a35e0 <__register_exitproc+0xb4>)
 80a3546:	681c      	ldr	r4, [r3, #0]
 80a3548:	b934      	cbnz	r4, 80a3558 <__register_exitproc+0x2c>
 80a354a:	4c26      	ldr	r4, [pc, #152]	; (80a35e4 <__register_exitproc+0xb8>)
 80a354c:	601c      	str	r4, [r3, #0]
 80a354e:	4b26      	ldr	r3, [pc, #152]	; (80a35e8 <__register_exitproc+0xbc>)
 80a3550:	b113      	cbz	r3, 80a3558 <__register_exitproc+0x2c>
 80a3552:	681b      	ldr	r3, [r3, #0]
 80a3554:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80a3558:	6863      	ldr	r3, [r4, #4]
 80a355a:	2b1f      	cmp	r3, #31
 80a355c:	dd07      	ble.n	80a356e <__register_exitproc+0x42>
 80a355e:	f8d8 0000 	ldr.w	r0, [r8]
 80a3562:	f000 f849 	bl	80a35f8 <__retarget_lock_release_recursive>
 80a3566:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a356a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a356e:	b35e      	cbz	r6, 80a35c8 <__register_exitproc+0x9c>
 80a3570:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80a3574:	b988      	cbnz	r0, 80a359a <__register_exitproc+0x6e>
 80a3576:	4b1d      	ldr	r3, [pc, #116]	; (80a35ec <__register_exitproc+0xc0>)
 80a3578:	b923      	cbnz	r3, 80a3584 <__register_exitproc+0x58>
 80a357a:	f8d8 0000 	ldr.w	r0, [r8]
 80a357e:	f000 f83a 	bl	80a35f6 <__retarget_lock_release>
 80a3582:	e7f0      	b.n	80a3566 <__register_exitproc+0x3a>
 80a3584:	f44f 7084 	mov.w	r0, #264	; 0x108
 80a3588:	f7fd feb0 	bl	80a12ec <malloc>
 80a358c:	2800      	cmp	r0, #0
 80a358e:	d0f4      	beq.n	80a357a <__register_exitproc+0x4e>
 80a3590:	2300      	movs	r3, #0
 80a3592:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80a3596:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80a359a:	2201      	movs	r2, #1
 80a359c:	6863      	ldr	r3, [r4, #4]
 80a359e:	2e02      	cmp	r6, #2
 80a35a0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80a35a4:	fa02 f203 	lsl.w	r2, r2, r3
 80a35a8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80a35ac:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80a35b0:	ea43 0302 	orr.w	r3, r3, r2
 80a35b4:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80a35b8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80a35bc:	bf02      	ittt	eq
 80a35be:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80a35c2:	431a      	orreq	r2, r3
 80a35c4:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 80a35c8:	6863      	ldr	r3, [r4, #4]
 80a35ca:	f8d8 0000 	ldr.w	r0, [r8]
 80a35ce:	1c5a      	adds	r2, r3, #1
 80a35d0:	3302      	adds	r3, #2
 80a35d2:	6062      	str	r2, [r4, #4]
 80a35d4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80a35d8:	f000 f80e 	bl	80a35f8 <__retarget_lock_release_recursive>
 80a35dc:	2000      	movs	r0, #0
 80a35de:	e7c4      	b.n	80a356a <__register_exitproc+0x3e>
 80a35e0:	20000654 	.word	0x20000654
 80a35e4:	200005c8 	.word	0x200005c8
 80a35e8:	00000000 	.word	0x00000000
 80a35ec:	080a12ed 	.word	0x080a12ed
 80a35f0:	20000068 	.word	0x20000068

080a35f4 <__retarget_lock_acquire_recursive>:
 80a35f4:	4770      	bx	lr

080a35f6 <__retarget_lock_release>:
 80a35f6:	4770      	bx	lr

080a35f8 <__retarget_lock_release_recursive>:
 80a35f8:	4770      	bx	lr

080a35fa <link_code_end>:
	...

080a35fc <dynalib_user>:
 80a35fc:	0021 080a 0061 080a 0089 080a 008d 080a     !...a...........
 80a360c:	0000 0000 6d73 7261 6c74 6769 7468 6400     ....smartlight.d
 80a361c:	6f6f 0072 227b 6146 6c69 3a22 2520 7d64     oor.{"Fail": %d}
 80a362c:	7b00 4822 6d75 6469 5028 7265 6563 746e     .{"Humid(Percent
 80a363c:	2229 253a 322e 2c66 2220 6554 706d 2a28     )":%.2f, "Temp(*
 80a364c:	2943 3a22 2e25 6632 007d 227b 2274 253a     C)":%.2f}.{"t":%
 80a365c:	2c64 6c22 6769 7468 3a22 7325 202c 6422     d,"light":%s, "d
 80a366c:	6f6f 2272 253a 2c73 2220 7463 3a22 6c25     oor":%s, "ct":%l
 80a367c:	7d64 7b00 007d 227b 6c43 736f 2265 253a     d}.{}.{"Close":%
 80a368c:	2c64 2220 6f64 726f 7250 786f 6d69 7469     d, "doorProximit
 80a369c:	2279 253a 322e 2c66 2220 6553 736e 726f     y":%.2f, "Sensor
 80a36ac:	3a22 2e25 6632 007d 227b 6c61 7265 2274     ":%.2f}.{"alert"
 80a36bc:	203a 6425 007d 696d 006e 616d 0078 6f64     : %d}.min.max.do
 80a36cc:	726f 7250 786f 6d69 7469 0079 7473 7461     orProximity.stat
 80a36dc:	7375 7b00 4c22 2230 253a 2c64 4c22 2231     us.{"L0":%d,"L1"
 80a36ec:	253a 2c64 6222 3a22 6425 222c 2273 253a     :%d,"b":%d,"s":%
 80a36fc:	2c64 6d22 3a22 6425 222c 224d 253a 7d64     d,"m":%d,"M":%d}
 80a370c:	6f00 006e 7561 6f74 6200 6972 6867 6e74     .on.auto.brightn
 80a371c:	7365 0073                                   ess.

080a3720 <_ZTV7TwoWire>:
	...
 80a3728:	1343 080a 138d 080a 1365 080a 1345 080a     C.......e...E...
 80a3738:	136d 080a 1375 080a 137d 080a 1385 080a     m...u...}.......

080a3748 <_ZTV9IPAddress>:
	...
 80a3750:	13d9 080a 13c9 080a 13cb 080a 2e30 0030     ............0.0.
 80a3760:	6166 736c 0065 0000                         false...

080a3768 <_ZTVSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a3770:	14bf 080a 14c5 080a 14db 080a 14d3 080a     ................
 80a3780:	14c1 080a 7061 0070                         ....app.

080a3788 <_ZTVN5spark12NetworkClassE>:
	...
 80a3790:	19e1 080a 19eb 080a 19f5 080a 19ff 080a     ................
 80a37a0:	1a09 080a 1a15 080a 1a21 080a 1a29 080a     ........!...)...
 80a37b0:	1a31 080a 1a3d 080a 1a45 080a 1a4f 080a     1...=...E...O...
 80a37c0:	1a59 080a 5925 252d 2d6d 6425 2554 3a48     Y...%Y-%m-%dT%H:
 80a37d0:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

080a37e0 <_ZTV11USARTSerial>:
	...
 80a37e8:	1f01 080a 1f6b 080a 1f47 080a 1abd 080a     ....k...G.......
 80a37f8:	1f17 080a 1f33 080a 1f25 080a 1f41 080a     ....3...%...A...
 80a3808:	1f03 080a 1f09 080a                         ........

080a3810 <_ZTV9USBSerial>:
	...
 80a3818:	1ff3 080a 2059 080a 2031 080a 1abd 080a     ....Y ..1 ......
 80a3828:	2023 080a 1ff5 080a 2005 080a 2053 080a     # ....... ..S ..
 80a3838:	2015 080a 1fed 080a                         . ......

080a3840 <_ZTVN5spark9WiFiClassE>:
	...
 80a3848:	2223 080a 2219 080a 220f 080a 2181 080a     #"..."..."...!..
 80a3858:	2203 080a 21f7 080a 1a21 080a 1a29 080a     ."...!..!...)...
 80a3868:	21eb 080a 21e3 080a 21d9 080a 21cf 080a     .!...!...!...!..
 80a3878:	218b 080a                                   .!..

080a387c <_ZSt7nothrow>:
	...

080a387d <_ctype_>:
 80a387d:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80a388d:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80a389d:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80a38ad:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80a38bd:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80a38cd:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80a38dd:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80a38ed:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80a38fd:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

080a397e <link_const_variable_data_end>:
	...

080a3980 <link_constructors_location>:
 80a3980:	080a03f9 	.word	0x080a03f9
 80a3984:	080a19d1 	.word	0x080a19d1
 80a3988:	080a1aa9 	.word	0x080a1aa9
 80a398c:	080a1c29 	.word	0x080a1c29
 80a3990:	080a1e55 	.word	0x080a1e55
 80a3994:	080a1eed 	.word	0x080a1eed
 80a3998:	080a222d 	.word	0x080a222d
 80a399c:	080a2531 	.word	0x080a2531
